{
  "total_count": 79,
  "incomplete_results": false,
  "items": [
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/601",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/601/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/601/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/601/events",
      "html_url": "https://github.com/hub4j/github-api/issues/601",
      "id": 520420353,
      "node_id": "MDU6SXNzdWU1MjA0MjAzNTM=",
      "number": 601,
      "title": "Document this library's approach to GitHub API rate limit",
      "user": {
        "login": "PauloMigAlmeida",
        "id": 1011868,
        "node_id": "MDQ6VXNlcjEwMTE4Njg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1011868?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PauloMigAlmeida",
        "html_url": "https://github.com/PauloMigAlmeida",
        "followers_url": "https://api.github.com/users/PauloMigAlmeida/followers",
        "following_url": "https://api.github.com/users/PauloMigAlmeida/following{/other_user}",
        "gists_url": "https://api.github.com/users/PauloMigAlmeida/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/PauloMigAlmeida/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/PauloMigAlmeida/subscriptions",
        "organizations_url": "https://api.github.com/users/PauloMigAlmeida/orgs",
        "repos_url": "https://api.github.com/users/PauloMigAlmeida/repos",
        "events_url": "https://api.github.com/users/PauloMigAlmeida/events{/privacy}",
        "received_events_url": "https://api.github.com/users/PauloMigAlmeida/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2070644911,
          "node_id": "MDU6TGFiZWwyMDcwNjQ0OTEx",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/documentation",
          "name": "documentation",
          "color": "6ee5cb",
          "default": true,
          "description": ""
        },
        {
          "id": 1662551322,
          "node_id": "MDU6TGFiZWwxNjYyNTUxMzIy",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/enhancement",
          "name": "enhancement",
          "color": "0e8a16",
          "default": true,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-11-09T13:00:41Z",
      "updated_at": "2020-06-07T19:54:03Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "Even for people that know certain bits and pieces of this library's source code, it still not trivial to understand how this library deals with GitHub's API rate limit.\r\n\r\nI'm planning to write something about it as soon as the #595 is merged (as it may introduce the custom api rates)\r\n",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/599",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/599/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/599/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/599/events",
      "html_url": "https://github.com/hub4j/github-api/issues/599",
      "id": 519749895,
      "node_id": "MDU6SXNzdWU1MTk3NDk4OTU=",
      "number": 599,
      "title": "Replace `wrapUp` and `wrap()` methods with `@JacksonInject`",
      "user": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1664647346,
          "node_id": "MDU6TGFiZWwxNjY0NjQ3MzQ2",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/task",
          "name": "task",
          "color": "bfdadc",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-11-08T04:59:33Z",
      "updated_at": "2020-03-06T02:21:51Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "active_lock_reason": null,
      "body": "This is very much a code smells issue, not a user facing feature. \r\n\r\nThere's quite a bit of code and complexity devoted to added `root` references to objects after they are received.  I've thought about various class structures to clean the up, but really the right thing to do seems to be using the `@JacksonInject` annotation.  We'd add the `root` instance to the mapper when reading and let the injector handle the assignment. \r\n\r\nSee https://fasterxml.github.io/jackson-databind/javadoc/2.9/com/fasterxml/jackson/databind/ObjectMapper.html#reader-com.fasterxml.jackson.databind.InjectableValues-\r\n",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/589",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/589/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/589/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/589/events",
      "html_url": "https://github.com/hub4j/github-api/issues/589",
      "id": 516256769,
      "node_id": "MDU6SXNzdWU1MTYyNTY3Njk=",
      "number": 589,
      "title": "Final instances vs Incomplete instances vs Update-in-place",
      "user": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1780165359,
          "node_id": "MDU6TGFiZWwxNzgwMTY1MzU5",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/breaking%20change",
          "name": "breaking change",
          "color": "b60205",
          "default": false,
          "description": ""
        },
        {
          "id": 265902955,
          "node_id": "MDU6TGFiZWwyNjU5MDI5NTU=",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/new%20feature",
          "name": "new feature",
          "color": "f4cc53",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-11-01T17:46:33Z",
      "updated_at": "2020-06-07T20:56:37Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "active_lock_reason": null,
      "body": "#495 and #496 raise an interesting point.  Also #584.\r\n\r\nThis project currently tends to treat instances of data objects as \"final\" - you request an Issue and the instance you requested never changes after that.  That instance is a stable snapshot and can be used as a key in a HashSet or Map without fear of it changing.   \r\n\r\nWe also have action and update methods on these objects. In general, these methods update the state of the server-side object the instance is based on, but do not change the data in the instance.  You call `close()` or `delete()` or one of the `set*` methods and a request is sent to change the object on the server, but the data in the local instance doesn't update to match.  This is consistent with the \"final instances\" model but has some problems.  There's no batching of updates (each action is another query) and since the local instance is out of date, updates can end up overwriting each other as in #495.  The only current workaround is send another request to get a fresh instance for each update.  😱 \r\n\r\nThe `Builder/Updater` pattern added to some objects addresses this by batching updates together and then returning a new instance matching those updates.  This solves the problem of stale data but results in verbose `item.update().title('New Title').update()` syntax for single field changes. It does partially unblock update-in-place as `item = item.update().title('New Title').update()`.   \r\n\r\nFinally, some objects can be incomplete when first created - either due to their source (partial information provided as part of creating another object) or due to the target only updating on request (pull request mergability is only updated after the first time PR is queried after a new commit is pushed).  For these cases, we currently update in place.  Do we want to force users to get new instances instead?  \r\n\r\nThere's no one right way to do this, but we should look at how to make this behavior consistent across all objects.   \r\n\r\nA couple random thought s off hand about this: \r\n* `set*` method naming is misleading - best practice in my understanding is to make `get*` and `set*` methods local and lightweight.  Alternative would be to have `update*` methods that actually send updates to the server. \r\n* Create states for the objects and allow the parent objects and the `GitHub` object to create objects in those state.  Rather than having updaters for objects, users would get a mutable instance. Possible states for data objects:  immutable, immediate mutable, batch mutable.   Not sure how the incomplete objects figure into this yet. \r\n\r\n\r\n\r\n",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/577",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/577/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/577/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/577/events",
      "html_url": "https://github.com/hub4j/github-api/issues/577",
      "id": 513638744,
      "node_id": "MDU6SXNzdWU1MTM2Mzg3NDQ=",
      "number": 577,
      "title": "Add getById() method to PagedIterable",
      "user": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1662551322,
          "node_id": "MDU6TGFiZWwxNjYyNTUxMzIy",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/enhancement",
          "name": "enhancement",
          "color": "0e8a16",
          "default": true,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-29T01:16:40Z",
      "updated_at": "2019-11-07T22:48:43Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "active_lock_reason": null,
      "body": "There are a large number cases where an iterable API endpoint also offers query options for the same url or adding an id to the end of the URL to get an individual (see Collaborators - #576).  It seems like it would be better to have a consistent way of accessing this kind of endpoint when it exists. ",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/576",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/576/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/576/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/576/events",
      "html_url": "https://github.com/hub4j/github-api/issues/576",
      "id": 513088887,
      "node_id": "MDU6SXNzdWU1MTMwODg4ODc=",
      "number": 576,
      "title": "Does the github api support getting a collaborator by username?",
      "user": {
        "login": "darewreck54",
        "id": 16171726,
        "node_id": "MDQ6VXNlcjE2MTcxNzI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/16171726?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darewreck54",
        "html_url": "https://github.com/darewreck54",
        "followers_url": "https://api.github.com/users/darewreck54/followers",
        "following_url": "https://api.github.com/users/darewreck54/following{/other_user}",
        "gists_url": "https://api.github.com/users/darewreck54/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/darewreck54/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/darewreck54/subscriptions",
        "organizations_url": "https://api.github.com/users/darewreck54/orgs",
        "repos_url": "https://api.github.com/users/darewreck54/repos",
        "events_url": "https://api.github.com/users/darewreck54/events{/privacy}",
        "received_events_url": "https://api.github.com/users/darewreck54/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1662551322,
          "node_id": "MDU6TGFiZWwxNjYyNTUxMzIy",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/enhancement",
          "name": "enhancement",
          "color": "0e8a16",
          "default": true,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "tedyoung",
        "id": 382660,
        "node_id": "MDQ6VXNlcjM4MjY2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/382660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tedyoung",
        "html_url": "https://github.com/tedyoung",
        "followers_url": "https://api.github.com/users/tedyoung/followers",
        "following_url": "https://api.github.com/users/tedyoung/following{/other_user}",
        "gists_url": "https://api.github.com/users/tedyoung/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tedyoung/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tedyoung/subscriptions",
        "organizations_url": "https://api.github.com/users/tedyoung/orgs",
        "repos_url": "https://api.github.com/users/tedyoung/repos",
        "events_url": "https://api.github.com/users/tedyoung/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tedyoung/received_events",
        "type": "User",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "tedyoung",
          "id": 382660,
          "node_id": "MDQ6VXNlcjM4MjY2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/382660?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/tedyoung",
          "html_url": "https://github.com/tedyoung",
          "followers_url": "https://api.github.com/users/tedyoung/followers",
          "following_url": "https://api.github.com/users/tedyoung/following{/other_user}",
          "gists_url": "https://api.github.com/users/tedyoung/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/tedyoung/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/tedyoung/subscriptions",
          "organizations_url": "https://api.github.com/users/tedyoung/orgs",
          "repos_url": "https://api.github.com/users/tedyoung/repos",
          "events_url": "https://api.github.com/users/tedyoung/events{/privacy}",
          "received_events_url": "https://api.github.com/users/tedyoung/received_events",
          "type": "User",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-10-28T04:20:46Z",
      "updated_at": "2021-06-03T07:37:29Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "Is the following API supported?\r\n\r\nGET /repos/:owner/:repo/collaborators/:username\r\n\r\nhttps://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator\r\n\r\nAlso does collaborator just imply a user that has write access?\r\n\r\nI looked at the code but i'm not seeing it in the GHRepository.java file.  Wanted to verify if I was just not seeing it?\r\n\r\nThanks,\r\nDerek",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/521",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/521/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/521/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/521/events",
      "html_url": "https://github.com/hub4j/github-api/issues/521",
      "id": 447748493,
      "node_id": "MDU6SXNzdWU0NDc3NDg0OTM=",
      "number": 521,
      "title": "GitHub v4 GraphQL API support",
      "user": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 265902955,
          "node_id": "MDU6TGFiZWwyNjU5MDI5NTU=",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/new%20feature",
          "name": "new feature",
          "color": "f4cc53",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-05-23T16:02:20Z",
      "updated_at": "2021-03-15T18:41:07Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "active_lock_reason": null,
      "body": "The v4 API provides a much more customizable API based on GraphQL.  It is out of scope for this library to provide a generalized API the fully leverages the power of GraphQL, but having some way to construct queries for trees of items would be useful. \r\n\r\nhttps://developer.github.com/v4/",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/513",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/513/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/513/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/513/events",
      "html_url": "https://github.com/hub4j/github-api/issues/513",
      "id": 432772736,
      "node_id": "MDU6SXNzdWU0MzI3NzI3MzY=",
      "number": 513,
      "title": "Access to low-level requester",
      "user": {
        "login": "Vampire",
        "id": 325196,
        "node_id": "MDQ6VXNlcjMyNTE5Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/325196?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Vampire",
        "html_url": "https://github.com/Vampire",
        "followers_url": "https://api.github.com/users/Vampire/followers",
        "following_url": "https://api.github.com/users/Vampire/following{/other_user}",
        "gists_url": "https://api.github.com/users/Vampire/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Vampire/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Vampire/subscriptions",
        "organizations_url": "https://api.github.com/users/Vampire/orgs",
        "repos_url": "https://api.github.com/users/Vampire/repos",
        "events_url": "https://api.github.com/users/Vampire/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Vampire/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 265902955,
          "node_id": "MDU6TGFiZWwyNjU5MDI5NTU=",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/new%20feature",
          "name": "new feature",
          "color": "f4cc53",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-04-12T22:51:43Z",
      "updated_at": "2019-11-07T22:51:09Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "For being able to use missing API functionality it would be nice if the `Requester` would be accessible, so that the low-level requests can be done manually or e. g. with Kotlin extension functions, but still having the lib do rate limiting and so on.",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/497",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/497/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/497/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/497/events",
      "html_url": "https://github.com/hub4j/github-api/issues/497",
      "id": 411305361,
      "node_id": "MDU6SXNzdWU0MTEzMDUzNjE=",
      "number": 497,
      "title": "GHIssue returned by searchIssues API has null owner field",
      "user": {
        "login": "blindpirate",
        "id": 12689835,
        "node_id": "MDQ6VXNlcjEyNjg5ODM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/12689835?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/blindpirate",
        "html_url": "https://github.com/blindpirate",
        "followers_url": "https://api.github.com/users/blindpirate/followers",
        "following_url": "https://api.github.com/users/blindpirate/following{/other_user}",
        "gists_url": "https://api.github.com/users/blindpirate/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/blindpirate/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/blindpirate/subscriptions",
        "organizations_url": "https://api.github.com/users/blindpirate/orgs",
        "repos_url": "https://api.github.com/users/blindpirate/repos",
        "events_url": "https://api.github.com/users/blindpirate/events{/privacy}",
        "received_events_url": "https://api.github.com/users/blindpirate/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 265902919,
          "node_id": "MDU6TGFiZWwyNjU5MDI5MTk=",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/bug",
          "name": "bug",
          "color": "e11d21",
          "default": true,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-02-18T05:16:03Z",
      "updated_at": "2019-11-08T00:14:30Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "### Context\r\n\r\n`searchIssues` API returns a list of `GHIssue`s but these `GHIssue`s has `null` owner field. If anyone tries to invoke further API on these `GHIssue` (say, comment API), NPE will be thrown.\r\n\r\n### Reproduction\r\n\r\n```\r\nList<GHIssue> issues = gitHub.searchIssues().q(\"repo:gradle/gradle\").list().asList();\r\nissues.get(0).getComments();\r\n```\r\n\r\nthrows NPE.\r\n\r\n### Workaround\r\n\r\nUse reflection to set `owner` for the issues.",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/495",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/495/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/495/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/495/events",
      "html_url": "https://github.com/hub4j/github-api/issues/495",
      "id": 409299090,
      "node_id": "MDU6SXNzdWU0MDkyOTkwOTA=",
      "number": 495,
      "title": "Unable to replace a label in an issue because GHIssue.labels list is not updated",
      "user": {
        "login": "rmetzger",
        "id": 89049,
        "node_id": "MDQ6VXNlcjg5MDQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/89049?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rmetzger",
        "html_url": "https://github.com/rmetzger",
        "followers_url": "https://api.github.com/users/rmetzger/followers",
        "following_url": "https://api.github.com/users/rmetzger/following{/other_user}",
        "gists_url": "https://api.github.com/users/rmetzger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rmetzger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rmetzger/subscriptions",
        "organizations_url": "https://api.github.com/users/rmetzger/orgs",
        "repos_url": "https://api.github.com/users/rmetzger/repos",
        "events_url": "https://api.github.com/users/rmetzger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rmetzger/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 265902919,
          "node_id": "MDU6TGFiZWwyNjU5MDI5MTk=",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/bug",
          "name": "bug",
          "color": "e11d21",
          "default": true,
          "description": null
        },
        {
          "id": 265902955,
          "node_id": "MDU6TGFiZWwyNjU5MDI5NTU=",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/new%20feature",
          "name": "new feature",
          "color": "f4cc53",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-02-12T13:31:27Z",
      "updated_at": "2019-11-07T23:17:02Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "Consider the following code:\r\n\r\n```java\r\nGHRepository repo = gitHub.getRepository(\"myacc/myrepo\");\r\nGHIssue issue = repo.getIssue(4);\r\n// assume \"test\" exists\r\nissue.removeLabels(\"test\");\r\nissue.addLabels(\"test1\");\r\n```\r\n\r\nExpected result: Issue `#4` has one label: `test1`\r\nActual result:  Issue `#4` has two labels: `test`, `test1`\r\n\r\nCause:\r\nIn `GHIssue`, the `labels` field is not updated when the `setLabels(String... labels)` method is called. `addLabels(\"test1\")` calls `getLabels()` in `_addLabels()`, which returns the cached `GHIssue.list` field, still containing the `test` label.",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/494",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/494/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/494/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/494/events",
      "html_url": "https://github.com/hub4j/github-api/issues/494",
      "id": 407625055,
      "node_id": "MDU6SXNzdWU0MDc2MjUwNTU=",
      "number": 494,
      "title": "Default branch is always null for repos accessed with GHContentSearchBuilder",
      "user": {
        "login": "FWDekker",
        "id": 13442533,
        "node_id": "MDQ6VXNlcjEzNDQyNTMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/13442533?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/FWDekker",
        "html_url": "https://github.com/FWDekker",
        "followers_url": "https://api.github.com/users/FWDekker/followers",
        "following_url": "https://api.github.com/users/FWDekker/following{/other_user}",
        "gists_url": "https://api.github.com/users/FWDekker/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/FWDekker/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/FWDekker/subscriptions",
        "organizations_url": "https://api.github.com/users/FWDekker/orgs",
        "repos_url": "https://api.github.com/users/FWDekker/repos",
        "events_url": "https://api.github.com/users/FWDekker/events{/privacy}",
        "received_events_url": "https://api.github.com/users/FWDekker/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 265902919,
          "node_id": "MDU6TGFiZWwyNjU5MDI5MTk=",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/bug",
          "name": "bug",
          "color": "e11d21",
          "default": true,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-02-07T10:14:51Z",
      "updated_at": "2019-11-07T23:15:48Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "When information on a repository is downloaded using the `GHContentSearchBuilder`, the `defaultBranch` property is always `null`, regardless of whether the repository in question has a default branch. On the other hand, if the same repository is accessed using a simple `getRepository` call, the `defaultBranch` is set correctly.\r\n\r\n## Sample setup\r\n[This repository](https://github.com/Stargator/koskela_sourcecode) has a non-standard default branch, and does not have a `master` branch. I think it's a good example for this issue.\r\n\r\n### Correct behaviour\r\nThe following code returns `\"original\"`, as expected:\r\n```java\r\nGitHub gh = GitHub.connectUsingOAuth(/* insert your token here */);\r\nreturn gh.getRepository(\"Stargator/koskela_sourcecode\").getDefaultBranch();\r\n```\r\n\r\n### Incorrect behaviour\r\nThe following code always returns `null`:\r\n```java\r\nGitHub gh = GitHub.connectUsingOAuth(/* insert your token here */);\r\nGHContentSearchBuilder sb = gh.searchContent().user(\"Stargator\")\r\n    .repo(\"Stargator/koskela_sourcecode\")\r\n    .q(\"koskela\");\r\nGHContent repo = sb.list().asList().get(0);\r\nreturn repo.getOwner().getDefaultBranch();\r\n```\r\n",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/452",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/452/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/452/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/452/events",
      "html_url": "https://github.com/hub4j/github-api/issues/452",
      "id": 354016699,
      "node_id": "MDU6SXNzdWUzNTQwMTY2OTk=",
      "number": 452,
      "title": "Support for attachments on Issues (Add, Get, and Remove)",
      "user": {
        "login": "GaborCsikos",
        "id": 5442111,
        "node_id": "MDQ6VXNlcjU0NDIxMTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5442111?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GaborCsikos",
        "html_url": "https://github.com/GaborCsikos",
        "followers_url": "https://api.github.com/users/GaborCsikos/followers",
        "following_url": "https://api.github.com/users/GaborCsikos/following{/other_user}",
        "gists_url": "https://api.github.com/users/GaborCsikos/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/GaborCsikos/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/GaborCsikos/subscriptions",
        "organizations_url": "https://api.github.com/users/GaborCsikos/orgs",
        "repos_url": "https://api.github.com/users/GaborCsikos/repos",
        "events_url": "https://api.github.com/users/GaborCsikos/events{/privacy}",
        "received_events_url": "https://api.github.com/users/GaborCsikos/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1662551322,
          "node_id": "MDU6TGFiZWwxNjYyNTUxMzIy",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/enhancement",
          "name": "enhancement",
          "color": "0e8a16",
          "default": true,
          "description": ""
        },
        {
          "id": 1686290078,
          "node_id": "MDU6TGFiZWwxNjg2MjkwMDc4",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/external",
          "name": "external",
          "color": "a0a0a0",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2018-08-25T14:28:54Z",
      "updated_at": "2021-01-20T20:23:36Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "I want to download attachments added to Github issue.\r\nUsually an attachment is added to in Issue into the body of the comment.\r\n\r\nMy problem is the GHIssueComment has a body as a String. So i can not get the attachments.\r\n\r\nI could see that the GHRepository has a method getBlob(String blobSha)\r\nBut I do not know that this is what i need, also i do not know the blobSha.\r\n\r\nHow could I get the attachments uploaded to issues?",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/445",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/445/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/445/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/445/events",
      "html_url": "https://github.com/hub4j/github-api/issues/445",
      "id": 338893171,
      "node_id": "MDU6SXNzdWUzMzg4OTMxNzE=",
      "number": 445,
      "title": "No API for getting the createdAt and updatedAt for GHContent",
      "user": {
        "login": "umesh9794",
        "id": 7439619,
        "node_id": "MDQ6VXNlcjc0Mzk2MTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7439619?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/umesh9794",
        "html_url": "https://github.com/umesh9794",
        "followers_url": "https://api.github.com/users/umesh9794/followers",
        "following_url": "https://api.github.com/users/umesh9794/following{/other_user}",
        "gists_url": "https://api.github.com/users/umesh9794/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/umesh9794/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/umesh9794/subscriptions",
        "organizations_url": "https://api.github.com/users/umesh9794/orgs",
        "repos_url": "https://api.github.com/users/umesh9794/repos",
        "events_url": "https://api.github.com/users/umesh9794/events{/privacy}",
        "received_events_url": "https://api.github.com/users/umesh9794/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 265902955,
          "node_id": "MDU6TGFiZWwyNjU5MDI5NTU=",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/new%20feature",
          "name": "new feature",
          "color": "f4cc53",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2018-07-06T10:45:18Z",
      "updated_at": "2020-03-06T02:28:14Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "This is more like a feature request rether an issue. \r\n\r\n`GHContent` has no methods to expose the `createdAt` and `updatedAt` for a file content. I can understand its bit cumbersome to get these details but how about exposing the commit history from where we can get the first and latest commit timestamps? ",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/440",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/440/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/440/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/440/events",
      "html_url": "https://github.com/hub4j/github-api/issues/440",
      "id": 330763806,
      "node_id": "MDU6SXNzdWUzMzA3NjM4MDY=",
      "number": 440,
      "title": "Unable to add user as contributor in organization repository",
      "user": {
        "login": "ncoop57",
        "id": 7613470,
        "node_id": "MDQ6VXNlcjc2MTM0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7613470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ncoop57",
        "html_url": "https://github.com/ncoop57",
        "followers_url": "https://api.github.com/users/ncoop57/followers",
        "following_url": "https://api.github.com/users/ncoop57/following{/other_user}",
        "gists_url": "https://api.github.com/users/ncoop57/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ncoop57/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ncoop57/subscriptions",
        "organizations_url": "https://api.github.com/users/ncoop57/orgs",
        "repos_url": "https://api.github.com/users/ncoop57/repos",
        "events_url": "https://api.github.com/users/ncoop57/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ncoop57/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 265902919,
          "node_id": "MDU6TGFiZWwyNjU5MDI5MTk=",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/bug",
          "name": "bug",
          "color": "e11d21",
          "default": true,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2018-06-08T18:43:54Z",
      "updated_at": "2019-11-07T23:00:54Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "Hi, I asked a question like this on stack overflow which you can find [here](https://stackoverflow.com/questions/50633315/how-do-you-add-outside-collaborators-to-repositories-in-your-organization-using), but had no luck with anyone answering it, so, I thought I'd bring my question here.\r\n\r\nI am trying to add a special user to all repositories in an organization automatically as a contributor, not a team. It must be a contributor because I have a separate program that automatically accepts repository invites but does not work with team invites so I need a solution that does it as a contributor not a team. When I attempt this with the following code:\r\n\r\n`GHCreateRepositoryBuilder builder = this.organization.createRepository(this.prefix + i);\r\nGHRepository repo = builder.create();\r\nrepo.addCollaborators(github.getUser(\"vcdep\"));\r\nrepositories.add(repo);`\r\n\r\nI get the following error:\r\n\r\n`Caused by: java.io.IOException: Operation not applicable to a repository owned by someone else: TestOrganizationForDevOps\r\nat org.kohsuke.github.GHRepository.verifyMine(GHRepository.java:1097)\r\nat org.kohsuke.github.GHRepository.modifyCollaborators(GHRepository.java:507)\r\nat org.kohsuke.github.GHRepository.addCollaborators(GHRepository.java:495)\r\nat org.kohsuke.github.GHRepository.addCollaborators(GHRepository.java:491)\r\nat wizard.GitHubController.createRepos(GitHubController.java:94)\r\nat wizard.Controller.onButtonClickedFinish(Controller.java:260)\r\n... 58 more`\r\n\r\nI am using a personal token which has all of the permissions given to it and I am using the account which owns and created the organization along with the repositories, however, I am still getting that error. I even tried adding the user as a member to the organization, but even that didn't work.\r\n\r\nI guess what I am really wondering is if this is expected behavior or if there is something I am missing and if so what is the solution.\r\n\r\nThank you for your time and consideration.",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/423",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/423/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/423/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/423/events",
      "html_url": "https://github.com/hub4j/github-api/issues/423",
      "id": 302121839,
      "node_id": "MDU6SXNzdWUzMDIxMjE4Mzk=",
      "number": 423,
      "title": "Upgrade documentation and supply examples",
      "user": {
        "login": "adam-arold",
        "id": 1253248,
        "node_id": "MDQ6VXNlcjEyNTMyNDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1253248?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adam-arold",
        "html_url": "https://github.com/adam-arold",
        "followers_url": "https://api.github.com/users/adam-arold/followers",
        "following_url": "https://api.github.com/users/adam-arold/following{/other_user}",
        "gists_url": "https://api.github.com/users/adam-arold/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/adam-arold/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/adam-arold/subscriptions",
        "organizations_url": "https://api.github.com/users/adam-arold/orgs",
        "repos_url": "https://api.github.com/users/adam-arold/repos",
        "events_url": "https://api.github.com/users/adam-arold/events{/privacy}",
        "received_events_url": "https://api.github.com/users/adam-arold/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2070644911,
          "node_id": "MDU6TGFiZWwyMDcwNjQ0OTEx",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/documentation",
          "name": "documentation",
          "color": "6ee5cb",
          "default": true,
          "description": ""
        },
        {
          "id": 1662551322,
          "node_id": "MDU6TGFiZWwxNjYyNTUxMzIy",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/enhancement",
          "name": "enhancement",
          "color": "0e8a16",
          "default": true,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2018-03-04T21:03:09Z",
      "updated_at": "2020-05-18T22:14:06Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "The documentation of this library is **extremely lacking**. There are no examples for even the simplest case of OAuth-based authentication for a GitHub app. The javadoc is basically non-existent. I can't figure out for example how can I use a `client_id` and `client_secret` for authentication.\r\n\r\nPlease improve this!",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/348",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/348/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/348/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/348/events",
      "html_url": "https://github.com/hub4j/github-api/issues/348",
      "id": 215463892,
      "node_id": "MDU6SXNzdWUyMTU0NjM4OTI=",
      "number": 348,
      "title": "Skip and page selection support in PagedIterator/PagedIterable",
      "user": {
        "login": "JakubKahovec",
        "id": 32606,
        "node_id": "MDQ6VXNlcjMyNjA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32606?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JakubKahovec",
        "html_url": "https://github.com/JakubKahovec",
        "followers_url": "https://api.github.com/users/JakubKahovec/followers",
        "following_url": "https://api.github.com/users/JakubKahovec/following{/other_user}",
        "gists_url": "https://api.github.com/users/JakubKahovec/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JakubKahovec/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JakubKahovec/subscriptions",
        "organizations_url": "https://api.github.com/users/JakubKahovec/orgs",
        "repos_url": "https://api.github.com/users/JakubKahovec/repos",
        "events_url": "https://api.github.com/users/JakubKahovec/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JakubKahovec/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1662551322,
          "node_id": "MDU6TGFiZWwxNjYyNTUxMzIy",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/enhancement",
          "name": "enhancement",
          "color": "0e8a16",
          "default": true,
          "description": ""
        },
        {
          "id": 265902955,
          "node_id": "MDU6TGFiZWwyNjU5MDI5NTU=",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/new%20feature",
          "name": "new feature",
          "color": "f4cc53",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2017-03-20T15:47:54Z",
      "updated_at": "2021-07-26T22:37:48Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "Hello,\r\n\r\nwhen listing users the GitHub Api provides a parameter _since_ which allows you to specify an id of the user you've seen the last, when you start listing again (i.e after a crash) you skip the users you've seen. It'd great to have this parameter in the api i.e github.listUsers(sinceUserId). Do you think it would be feasible to add it there ?\r\n\r\nThank you\r\n\r\nJakub",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/347",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/347/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/347/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/347/events",
      "html_url": "https://github.com/hub4j/github-api/issues/347",
      "id": 211134155,
      "node_id": "MDU6SXNzdWUyMTExMzQxNTU=",
      "number": 347,
      "title": "Get fast issue/pull number from notifications",
      "user": {
        "login": "rnveach",
        "id": 5427943,
        "node_id": "MDQ6VXNlcjU0Mjc5NDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5427943?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rnveach",
        "html_url": "https://github.com/rnveach",
        "followers_url": "https://api.github.com/users/rnveach/followers",
        "following_url": "https://api.github.com/users/rnveach/following{/other_user}",
        "gists_url": "https://api.github.com/users/rnveach/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rnveach/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rnveach/subscriptions",
        "organizations_url": "https://api.github.com/users/rnveach/orgs",
        "repos_url": "https://api.github.com/users/rnveach/repos",
        "events_url": "https://api.github.com/users/rnveach/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rnveach/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1662551322,
          "node_id": "MDU6TGFiZWwxNjYyNTUxMzIy",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/enhancement",
          "name": "enhancement",
          "color": "0e8a16",
          "default": true,
          "description": ""
        },
        {
          "id": 1991401619,
          "node_id": "MDU6TGFiZWwxOTkxNDAxNjE5",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/good%20first%20issue",
          "name": "good first issue",
          "color": "00FF00",
          "default": true,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2017-03-01T16:28:19Z",
      "updated_at": "2020-06-07T21:39:38Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "The only way to get the issue/pull number from notifications is like below:\r\n````\r\n\t\tGitHub github = GitHub.connect();\r\n\r\n\t\tGHNotificationStream stream = github.listNotifications();\r\n\r\n\t\tfor (GHThread t : stream.nonBlocking(true).participating(false).read(true)) {\r\n\t\t\tSystem.out.println((t.getBoundIssue() != null ? t.getBoundIssue().getNumber() : \"\"));\r\n\t\t}\r\n````\r\n\r\nThe problem with this is `getBoundIssue` makes another service call just to get all the information on the issue. I just want the issue number for quick display which is already stored in the `subject.url` but I don't there is no public method to access it.\r\nI think it would be great if there was a simple method like `getIssueNumber` and `getPullNumber`.",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/178",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/178/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/178/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/178/events",
      "html_url": "https://github.com/hub4j/github-api/issues/178",
      "id": 68225402,
      "node_id": "MDU6SXNzdWU2ODIyNTQwMg==",
      "number": 178,
      "title": "getIssue() from GHPullRequest object",
      "user": {
        "login": "KostyaSha",
        "id": 231611,
        "node_id": "MDQ6VXNlcjIzMTYxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/231611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/KostyaSha",
        "html_url": "https://github.com/KostyaSha",
        "followers_url": "https://api.github.com/users/KostyaSha/followers",
        "following_url": "https://api.github.com/users/KostyaSha/following{/other_user}",
        "gists_url": "https://api.github.com/users/KostyaSha/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/KostyaSha/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/KostyaSha/subscriptions",
        "organizations_url": "https://api.github.com/users/KostyaSha/orgs",
        "repos_url": "https://api.github.com/users/KostyaSha/repos",
        "events_url": "https://api.github.com/users/KostyaSha/events{/privacy}",
        "received_events_url": "https://api.github.com/users/KostyaSha/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1662551322,
          "node_id": "MDU6TGFiZWwxNjYyNTUxMzIy",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/enhancement",
          "name": "enhancement",
          "color": "0e8a16",
          "default": true,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2015-04-14T00:18:09Z",
      "updated_at": "2020-05-21T00:33:01Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "Could such method be added into PR object? Issue and PR content differs and it very inconvenient to do a call through parent like `pr.getRepository().getIssue(pr.getNumber())`\n",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/151",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/151/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/151/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/151/events",
      "html_url": "https://github.com/hub4j/github-api/issues/151",
      "id": 55383829,
      "node_id": "MDU6SXNzdWU1NTM4MzgyOQ==",
      "number": 151,
      "title": "Add logging of requests and responses",
      "user": {
        "login": "vbauer",
        "id": 578021,
        "node_id": "MDQ6VXNlcjU3ODAyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/578021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vbauer",
        "html_url": "https://github.com/vbauer",
        "followers_url": "https://api.github.com/users/vbauer/followers",
        "following_url": "https://api.github.com/users/vbauer/following{/other_user}",
        "gists_url": "https://api.github.com/users/vbauer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vbauer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vbauer/subscriptions",
        "organizations_url": "https://api.github.com/users/vbauer/orgs",
        "repos_url": "https://api.github.com/users/vbauer/repos",
        "events_url": "https://api.github.com/users/vbauer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vbauer/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1662551322,
          "node_id": "MDU6TGFiZWwxNjYyNTUxMzIy",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/enhancement",
          "name": "enhancement",
          "color": "0e8a16",
          "default": true,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 10,
      "created_at": "2015-01-24T20:31:48Z",
      "updated_at": "2021-04-13T16:04:22Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "Add possibility to log requests and responses.\nIt will help to understand a lot of cases when library does not work.\n",
      "performed_via_github_app": null,
      "score": 1
    },
    {
      "url": "https://api.github.com/repos/hub4j/github-api/issues/126",
      "repository_url": "https://api.github.com/repos/hub4j/github-api",
      "labels_url": "https://api.github.com/repos/hub4j/github-api/issues/126/labels{/name}",
      "comments_url": "https://api.github.com/repos/hub4j/github-api/issues/126/comments",
      "events_url": "https://api.github.com/repos/hub4j/github-api/issues/126/events",
      "html_url": "https://github.com/hub4j/github-api/issues/126",
      "id": 42053515,
      "node_id": "MDU6SXNzdWU0MjA1MzUxNQ==",
      "number": 126,
      "title": "github-api does in not correctly distinguish between user and organisation ownership",
      "user": {
        "login": "msperisen",
        "id": 2448228,
        "node_id": "MDQ6VXNlcjI0NDgyMjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2448228?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/msperisen",
        "html_url": "https://github.com/msperisen",
        "followers_url": "https://api.github.com/users/msperisen/followers",
        "following_url": "https://api.github.com/users/msperisen/following{/other_user}",
        "gists_url": "https://api.github.com/users/msperisen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/msperisen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/msperisen/subscriptions",
        "organizations_url": "https://api.github.com/users/msperisen/orgs",
        "repos_url": "https://api.github.com/users/msperisen/repos",
        "events_url": "https://api.github.com/users/msperisen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/msperisen/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 265902919,
          "node_id": "MDU6TGFiZWwyNjU5MDI5MTk=",
          "url": "https://api.github.com/repos/hub4j/github-api/labels/bug",
          "name": "bug",
          "color": "e11d21",
          "default": true,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2014-09-05T14:45:51Z",
      "updated_at": "2019-11-07T22:52:21Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "owners are always returned as GHUsers instead of GHOrganizations or GHUsers. Many github api calls return users and organisations alike and the distinction is made based on the type field. Making GHPerson reflect that:\n\n``` java\n@JsonTypeInfo(use=JsonTypeInfo.Id.NAME,\n        include=JsonTypeInfo.As.PROPERTY,\n        property=\"type\")\n@JsonSubTypes({\n        @JsonSubTypes.Type(value=GHUser.class, name=\"User\"),\n        @JsonSubTypes.Type(value=GHOrganization.class, name=\"Organization\"),\n})\npublic abstract class GHPerson {\n```\n\nwill break a lot of owner related githup-api calls   \n",
      "performed_via_github_app": null,
      "score": 1
    }
  ]
}