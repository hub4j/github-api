[
  {
    "url": "https://api.github.com/repos/hub4j/github-api/issues/comments/578621540",
    "html_url": "https://github.com/hub4j/github-api/issues/589#issuecomment-578621540",
    "issue_url": "https://api.github.com/repos/hub4j/github-api/issues/589",
    "id": 578621540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODYyMTU0MA==",
    "user": {
      "login": "bitwiseman",
      "id": 1958953,
      "node_id": "MDQ6VXNlcjE5NTg5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitwiseman",
      "html_url": "https://github.com/bitwiseman",
      "followers_url": "https://api.github.com/users/bitwiseman/followers",
      "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
      "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
      "repos_url": "https://api.github.com/users/bitwiseman/repos",
      "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-27T07:21:15Z",
    "updated_at": "2020-01-27T07:26:15Z",
    "author_association": "COLLABORATOR",
    "body": "A thought I had today.  `update*` methods  could return a new instance with the updated data, while `update()` would start a batch.  \r\n\r\nSo: \r\n```java\r\nGHLabel label = getLabel(myLabelName);\r\n// two network calls, each returning a new instance\r\nlabel = label.updateName(\"New Name\").updateColor(newColor);\r\n\r\n// one network call, returns new instance\r\nlabel = label.update().name(\"New Name\").color(newColor).apply();\r\n\r\n// one network call, updates in place?  Maybe not. \r\n// I'd really rather have instances be effectively final so their hashCode and equality are stable. \r\n// Set the state of the connection to update in place.\r\n// This changes all instances created with this connection to update in place. \r\ngithub.updateInPlace(true);\r\nlabel = github.getRepository(myRepoName).getLabel(myLabelName);\r\nlabel.update().name(\"New Name\").color(newColor).apply();\r\n```\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hub4j/github-api/issues/comments/640278712",
    "html_url": "https://github.com/hub4j/github-api/issues/589#issuecomment-640278712",
    "issue_url": "https://api.github.com/repos/hub4j/github-api/issues/589",
    "id": 640278712,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDI3ODcxMg==",
    "user": {
      "login": "bitwiseman",
      "id": 1958953,
      "node_id": "MDQ6VXNlcjE5NTg5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitwiseman",
      "html_url": "https://github.com/bitwiseman",
      "followers_url": "https://api.github.com/users/bitwiseman/followers",
      "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
      "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
      "repos_url": "https://api.github.com/users/bitwiseman/repos",
      "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-07T20:56:37Z",
    "updated_at": "2020-06-07T20:56:37Z",
    "author_association": "COLLABORATOR",
    "body": "\r\nCurrent design for the `set()/update()` design doesn't currently allow \"update in place\" but it can do handle it:\r\n\r\nSo: \r\n```java\r\nGHLabel label = getLabel(myLabelName);\r\n// two network calls, each returning a new instance\r\nlabel = label.set().name(\"New Name\");\r\nlabel = label.set().color(newColor);\r\n\r\n// one network call, returns new instance\r\nlabel = label.update().name(\"New Name\").color(newColor).done();\r\n```\r\n\r\n# Possible designs to handle \"update in place\"\r\n\r\nFirstly, in all cases, the `GitHubClient` instance should be able to control \"update in place\" behavior for all objects it creates. \r\n\r\n```java\r\nenum UpdateInPlace {\r\n    // Lets objects and operations decide for themselves if they will update in place\r\n    // NOTE: `hashCode()` and `equals()` are not guaranteed stable with this setting enabled\r\n    // Individual classes classes or instances can override this.  \r\n    ALLOWED, \r\n    // throw if update in place is attempted.\r\n    // NOTE: `populate()` should still succeed.\r\n    // `refresh()` does not update current instance, returns a new instance.\r\n    // QUESTION: Should get `hashCode()` and `equals()` automatically call `populate()` to ensure they are stable? \r\n    NEVER, \r\n    // always update in place\r\n    // NOTE: `hashCode()` and `equals()` are not guaranteed stable with this setting enabled \r\n    // `refresh()` updates current instance and returns it (but return can be ignored.\r\n    ALWAYS\r\n}\r\n\r\nGitHub gitHub = new GitHubBuilder().updateInPlace(UpdateInPlace.ALWAYS).build();\r\n```\r\n\r\nThere are then several ways individual classes and instances can choose to update in place or not. \r\nRight now, different classes have different behaviors with not pattern.  For the first phase of this change the defaults will remain unchanged, in a future version we'll move to one consistent behavior - likely inherited from the `GitHub` instance.\r\n\r\nFor the `set()/update()` methods we have already defaulted with `UpdateInPlace.NEVER`. We'll switch to default of `ALLOWED` but also not update in place unless requested.\r\n\r\n## Add `withRefresh()` method\r\n\r\n```java\r\nGHLabel label = getLabel(myLabelName);\r\n// two network calls, each updating in place.\r\n// They also return the same instance but we can ignore it\r\nlabel.set().withRefresh().name(\"New Name\");\r\nlabel.set().withRefresh().color(newColor);\r\n\r\n// one network call, updates in place\r\n// return the same instance but we can ignore it\r\nlabel = label.update().withRefresh().name(\"New Name\").color(newColor).done();\r\n```\r\n\r\n## Add `setThis()` and `updateThis()` methods\r\n\r\n```java\r\nGHLabel label = getLabel(myLabelName);\r\n// two network calls, each updating in place.\r\n// They also return the same instance but we can ignore it\r\nlabel.setThis().name(\"New Name\");\r\nlabel.setThis().color(newColor);\r\n\r\n// one network call, updates in place\r\n// return the same instance but we can ignore it\r\nlabel = label.updateThis().name(\"New Name\").color(newColor).done();\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n  ",
    "performed_via_github_app": null
  }
]