{
  "url": "https://api.github.com/repos/hub4j-test-org/github-api/compare/4261c42949915816a9f246eb14c3dfd21a637bc2...94ff089e60064bfa43e374baeb10846f7ce82f40",
  "html_url": "https://github.com/hub4j-test-org/github-api/compare/4261c42949915816a9f246eb14c3dfd21a637bc2...94ff089e60064bfa43e374baeb10846f7ce82f40",
  "permalink_url": "https://github.com/hub4j-test-org/github-api/compare/hub4j-test-org:4261c42...hub4j-test-org:94ff089",
  "diff_url": "https://github.com/hub4j-test-org/github-api/compare/4261c42949915816a9f246eb14c3dfd21a637bc2...94ff089e60064bfa43e374baeb10846f7ce82f40.diff",
  "patch_url": "https://github.com/hub4j-test-org/github-api/compare/4261c42949915816a9f246eb14c3dfd21a637bc2...94ff089e60064bfa43e374baeb10846f7ce82f40.patch",
  "base_commit": {
    "sha": "4261c42949915816a9f246eb14c3dfd21a637bc2",
    "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjQyNjFjNDI5NDk5MTU4MTZhOWYyNDZlYjE0YzNkZmQyMWE2MzdiYzI=",
    "commit": {
      "author": {
        "name": "Liam Newman",
        "email": "bitwiseman@gmail.com",
        "date": "2021-02-26T23:20:00Z"
      },
      "committer": {
        "name": "Liam Newman",
        "email": "bitwiseman@gmail.com",
        "date": "2021-02-26T23:20:00Z"
      },
      "message": "[maven-release-plugin] prepare release github-api-1.123",
      "tree": {
        "sha": "5da98090976978c93aba0bdfa550e05675543f99",
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/5da98090976978c93aba0bdfa550e05675543f99"
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/4261c42949915816a9f246eb14c3dfd21a637bc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/4261c42949915816a9f246eb14c3dfd21a637bc2",
    "html_url": "https://github.com/hub4j-test-org/github-api/commit/4261c42949915816a9f246eb14c3dfd21a637bc2",
    "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/4261c42949915816a9f246eb14c3dfd21a637bc2/comments",
    "author": {
      "login": "bitwiseman",
      "id": 1958953,
      "node_id": "MDQ6VXNlcjE5NTg5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitwiseman",
      "html_url": "https://github.com/bitwiseman",
      "followers_url": "https://api.github.com/users/bitwiseman/followers",
      "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
      "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
      "repos_url": "https://api.github.com/users/bitwiseman/repos",
      "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "bitwiseman",
      "id": 1958953,
      "node_id": "MDQ6VXNlcjE5NTg5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitwiseman",
      "html_url": "https://github.com/bitwiseman",
      "followers_url": "https://api.github.com/users/bitwiseman/followers",
      "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
      "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
      "repos_url": "https://api.github.com/users/bitwiseman/repos",
      "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40cfb85a8e2770ae548a478b99c5b692c13677e5",
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/40cfb85a8e2770ae548a478b99c5b692c13677e5",
        "html_url": "https://github.com/hub4j-test-org/github-api/commit/40cfb85a8e2770ae548a478b99c5b692c13677e5"
      }
    ]
  },
  "merge_base_commit": {
    "sha": "4261c42949915816a9f246eb14c3dfd21a637bc2",
    "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjQyNjFjNDI5NDk5MTU4MTZhOWYyNDZlYjE0YzNkZmQyMWE2MzdiYzI=",
    "commit": {
      "author": {
        "name": "Liam Newman",
        "email": "bitwiseman@gmail.com",
        "date": "2021-02-26T23:20:00Z"
      },
      "committer": {
        "name": "Liam Newman",
        "email": "bitwiseman@gmail.com",
        "date": "2021-02-26T23:20:00Z"
      },
      "message": "[maven-release-plugin] prepare release github-api-1.123",
      "tree": {
        "sha": "5da98090976978c93aba0bdfa550e05675543f99",
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/5da98090976978c93aba0bdfa550e05675543f99"
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/4261c42949915816a9f246eb14c3dfd21a637bc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/4261c42949915816a9f246eb14c3dfd21a637bc2",
    "html_url": "https://github.com/hub4j-test-org/github-api/commit/4261c42949915816a9f246eb14c3dfd21a637bc2",
    "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/4261c42949915816a9f246eb14c3dfd21a637bc2/comments",
    "author": {
      "login": "bitwiseman",
      "id": 1958953,
      "node_id": "MDQ6VXNlcjE5NTg5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitwiseman",
      "html_url": "https://github.com/bitwiseman",
      "followers_url": "https://api.github.com/users/bitwiseman/followers",
      "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
      "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
      "repos_url": "https://api.github.com/users/bitwiseman/repos",
      "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "bitwiseman",
      "id": 1958953,
      "node_id": "MDQ6VXNlcjE5NTg5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitwiseman",
      "html_url": "https://github.com/bitwiseman",
      "followers_url": "https://api.github.com/users/bitwiseman/followers",
      "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
      "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
      "repos_url": "https://api.github.com/users/bitwiseman/repos",
      "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40cfb85a8e2770ae548a478b99c5b692c13677e5",
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/40cfb85a8e2770ae548a478b99c5b692c13677e5",
        "html_url": "https://github.com/hub4j-test-org/github-api/commit/40cfb85a8e2770ae548a478b99c5b692c13677e5"
      }
    ]
  },
  "status": "ahead",
  "ahead_by": 283,
  "behind_by": 0,
  "total_commits": 283,
  "commits": [
    {
      "sha": "f22bf160f9c24e8f8548a751c1ada95be3d8ba20",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmYyMmJmMTYwZjljMjRlOGY4NTQ4YTc1MWMxYWRhOTViZTNkOGJhMjA=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-02-26T23:20:10Z"
        },
        "committer": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-02-26T23:20:10Z"
        },
        "message": "[maven-release-plugin] prepare for next development iteration",
        "tree": {
          "sha": "5fbad1c85bfc7262ccda38cc587b4c13bef86693",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/5fbad1c85bfc7262ccda38cc587b4c13bef86693"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/f22bf160f9c24e8f8548a751c1ada95be3d8ba20",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/f22bf160f9c24e8f8548a751c1ada95be3d8ba20",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/f22bf160f9c24e8f8548a751c1ada95be3d8ba20",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/f22bf160f9c24e8f8548a751c1ada95be3d8ba20/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4261c42949915816a9f246eb14c3dfd21a637bc2",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/4261c42949915816a9f246eb14c3dfd21a637bc2",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/4261c42949915816a9f246eb14c3dfd21a637bc2"
        }
      ]
    },
    {
      "sha": "1bd178654fb08d8e5770ed745d6e32a1263f2ee9",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjFiZDE3ODY1NGZiMDhkOGU1NzcwZWQ3NDVkNmUzMmExMjYzZjJlZTk=",
      "commit": {
        "author": {
          "name": "dependabot[bot]",
          "email": "49699333+dependabot[bot]@users.noreply.github.com",
          "date": "2021-03-01T02:00:18Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-01T02:00:18Z"
        },
        "message": "Chore(deps-dev): Bump archunit from 0.16.0 to 0.17.0\n\nBumps [archunit](https://github.com/TNG/ArchUnit) from 0.16.0 to 0.17.0.\n- [Release notes](https://github.com/TNG/ArchUnit/releases)\n- [Commits](https://github.com/TNG/ArchUnit/compare/v0.16.0...v0.17.0)\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "tree": {
          "sha": "b4018cf4c249e6fd3aa4deadfa2f593a865a211d",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/b4018cf4c249e6fd3aa4deadfa2f593a865a211d"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/1bd178654fb08d8e5770ed745d6e32a1263f2ee9",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPEqyCRBK7hj4Ov3rIwAAdHIIAJNTT5RU3/+QorXFYbc/2PqC\nUuU9zWrxx8cWhIK/Kv42DKLsdro/TvGoiuhcuYGWRPhdnTAbsEhcY+XlZFFKaB+m\nUGKKtt909MQ07z6WvsaRP1fx/xQJNdLN8RnuVXZwF0EK9bswOxpjcRMn4cEBfRDR\neI2yQHtywyFOYm+3raC7uVNhlJyNVDMVDJVbfoD0RDWRxKat0qLwjsX3A2dKYI09\nP5zmJzYD03HIb9pUzAXY1woSzzOfg2DrJuAPqLuL8OB6NTg4Nsyx2uuVHXOa/72d\nMrkenxMnUBRYaAiQGdYXYJ1pnHC5z+Sagez5k28myzF/gYv6BThSQsta54HXCZ0=\n=cVnw\n-----END PGP SIGNATURE-----\n",
          "payload": "tree b4018cf4c249e6fd3aa4deadfa2f593a865a211d\nparent f22bf160f9c24e8f8548a751c1ada95be3d8ba20\nauthor dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> 1614564018 +0000\ncommitter GitHub <noreply@github.com> 1614564018 +0000\n\nChore(deps-dev): Bump archunit from 0.16.0 to 0.17.0\n\nBumps [archunit](https://github.com/TNG/ArchUnit) from 0.16.0 to 0.17.0.\n- [Release notes](https://github.com/TNG/ArchUnit/releases)\n- [Commits](https://github.com/TNG/ArchUnit/compare/v0.16.0...v0.17.0)\n\nSigned-off-by: dependabot[bot] <support@github.com>"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/1bd178654fb08d8e5770ed745d6e32a1263f2ee9",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/1bd178654fb08d8e5770ed745d6e32a1263f2ee9",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/1bd178654fb08d8e5770ed745d6e32a1263f2ee9/comments",
      "author": {
        "login": "dependabot[bot]",
        "id": 49699333,
        "node_id": "MDM6Qm90NDk2OTkzMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/in/29110?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dependabot%5Bbot%5D",
        "html_url": "https://github.com/apps/dependabot",
        "followers_url": "https://api.github.com/users/dependabot%5Bbot%5D/followers",
        "following_url": "https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}",
        "gists_url": "https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dependabot%5Bbot%5D/subscriptions",
        "organizations_url": "https://api.github.com/users/dependabot%5Bbot%5D/orgs",
        "repos_url": "https://api.github.com/users/dependabot%5Bbot%5D/repos",
        "events_url": "https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dependabot%5Bbot%5D/received_events",
        "type": "Bot",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "f22bf160f9c24e8f8548a751c1ada95be3d8ba20",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/f22bf160f9c24e8f8548a751c1ada95be3d8ba20",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/f22bf160f9c24e8f8548a751c1ada95be3d8ba20"
        }
      ]
    },
    {
      "sha": "90bc250269c93b452013779367fc5f31e32e94c0",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjkwYmMyNTAyNjljOTNiNDUyMDEzNzc5MzY3ZmM1ZjMxZTMyZTk0YzA=",
      "commit": {
        "author": {
          "name": "dependabot[bot]",
          "email": "49699333+dependabot[bot]@users.noreply.github.com",
          "date": "2021-03-01T02:00:20Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-01T02:00:20Z"
        },
        "message": "Chore(deps): Bump actions/cache from v2 to v2.1.4\n\nBumps [actions/cache](https://github.com/actions/cache) from v2 to v2.1.4.\n- [Release notes](https://github.com/actions/cache/releases)\n- [Commits](https://github.com/actions/cache/compare/v2...26968a09c0ea4f3e233fdddbafd1166051a095f6)\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "tree": {
          "sha": "f8d85a0a984337363e456d3d8d1dbe0ea5aa4667",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/f8d85a0a984337363e456d3d8d1dbe0ea5aa4667"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/90bc250269c93b452013779367fc5f31e32e94c0",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPEq0CRBK7hj4Ov3rIwAAdHIIAIR2tdX9RXUtSvSsVOAHLZNM\n33t35dkuNw7YSh1fkEkRds1KvSIMdw0op0XPkjTIOVhg1rAoRQavzTgKSGINhdMR\nonKF5jFr+vYywYfPZ0182RGiLFzPg1HfBRsg08gFuEY+53PaVWAyL/ZDGcP9n7Pf\nNTpmQAUj6FEmNwu0o90NDLY8Dn2dzpPc48qWESFdRFavv+HvJ3Yt67SQlmBWYiaf\nmaxU5FXa/ZrcdLMAdMJ9bkhgit4wU1NoYdnUNg2BUnJqUQJO/XA7n8mjirGHvk84\nCnRbg+x16uLJ1TwW9y3jMKweDEwoQyErtrx4bCcuAxjlgdfKq9YvGZLgvE7Um6U=\n=TDia\n-----END PGP SIGNATURE-----\n",
          "payload": "tree f8d85a0a984337363e456d3d8d1dbe0ea5aa4667\nparent f22bf160f9c24e8f8548a751c1ada95be3d8ba20\nauthor dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> 1614564020 +0000\ncommitter GitHub <noreply@github.com> 1614564020 +0000\n\nChore(deps): Bump actions/cache from v2 to v2.1.4\n\nBumps [actions/cache](https://github.com/actions/cache) from v2 to v2.1.4.\n- [Release notes](https://github.com/actions/cache/releases)\n- [Commits](https://github.com/actions/cache/compare/v2...26968a09c0ea4f3e233fdddbafd1166051a095f6)\n\nSigned-off-by: dependabot[bot] <support@github.com>"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/90bc250269c93b452013779367fc5f31e32e94c0",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/90bc250269c93b452013779367fc5f31e32e94c0",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/90bc250269c93b452013779367fc5f31e32e94c0/comments",
      "author": {
        "login": "dependabot[bot]",
        "id": 49699333,
        "node_id": "MDM6Qm90NDk2OTkzMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/in/29110?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dependabot%5Bbot%5D",
        "html_url": "https://github.com/apps/dependabot",
        "followers_url": "https://api.github.com/users/dependabot%5Bbot%5D/followers",
        "following_url": "https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}",
        "gists_url": "https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dependabot%5Bbot%5D/subscriptions",
        "organizations_url": "https://api.github.com/users/dependabot%5Bbot%5D/orgs",
        "repos_url": "https://api.github.com/users/dependabot%5Bbot%5D/repos",
        "events_url": "https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dependabot%5Bbot%5D/received_events",
        "type": "Bot",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "f22bf160f9c24e8f8548a751c1ada95be3d8ba20",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/f22bf160f9c24e8f8548a751c1ada95be3d8ba20",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/f22bf160f9c24e8f8548a751c1ada95be3d8ba20"
        }
      ]
    },
    {
      "sha": "be67f1d9e2fc3949275e333bd1e848df9d66b31d",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmJlNjdmMWQ5ZTJmYzM5NDkyNzVlMzMzYmQxZTg0OGRmOWQ2NmIzMWQ=",
      "commit": {
        "author": {
          "name": "dependabot[bot]",
          "email": "49699333+dependabot[bot]@users.noreply.github.com",
          "date": "2021-03-01T02:00:31Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-01T02:00:31Z"
        },
        "message": "Chore(deps): Bump spotbugs.version from 4.1.3 to 4.2.1\n\nBumps `spotbugs.version` from 4.1.3 to 4.2.1.\n\nUpdates `spotbugs` from 4.1.3 to 4.2.1\n- [Release notes](https://github.com/spotbugs/spotbugs/releases)\n- [Changelog](https://github.com/spotbugs/spotbugs/blob/master/CHANGELOG.md)\n- [Commits](https://github.com/spotbugs/spotbugs/compare/4.1.3...4.2.1)\n\nUpdates `spotbugs-annotations` from 4.1.3 to 4.2.1\n- [Release notes](https://github.com/spotbugs/spotbugs/releases)\n- [Changelog](https://github.com/spotbugs/spotbugs/blob/master/CHANGELOG.md)\n- [Commits](https://github.com/spotbugs/spotbugs/compare/4.1.3...4.2.1)\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "tree": {
          "sha": "bf39504e486bef3914808b45517f678e64d6d6f0",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/bf39504e486bef3914808b45517f678e64d6d6f0"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/be67f1d9e2fc3949275e333bd1e848df9d66b31d",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPEq/CRBK7hj4Ov3rIwAAdHIIAC2bHl44TElTOpqu2qN5j6GV\nPnvzbByNMrMNPUNFbSA6/UckFvvTmgk/G6midqiJnK+fyELXKlpKH0dHYIrBKsJv\nWyygqGLanKmKVXtSedKemf8dvHkSA9dp0z4gLVOfbjuFCyf+p9s/8OAAWn/kqIGj\nki5AZlSqjuNtkM1kXcg2frL0DLu1VYtxy/RMLU6UBoLiJPJSUzn/od1qg+2XnfYS\n77rOs7meOM/hrjRI8l4aDP1UBmBMEBqbbgi2zciFahq+bgmCg87tsAHc/Udu9slA\n4W0mtzZc7VkDbpA//RvcYAn5zWa6A+42PA9oFocr8fZx8KCqlMsZHfNk5SW+vEU=\n=1o8u\n-----END PGP SIGNATURE-----\n",
          "payload": "tree bf39504e486bef3914808b45517f678e64d6d6f0\nparent f22bf160f9c24e8f8548a751c1ada95be3d8ba20\nauthor dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> 1614564031 +0000\ncommitter GitHub <noreply@github.com> 1614564031 +0000\n\nChore(deps): Bump spotbugs.version from 4.1.3 to 4.2.1\n\nBumps `spotbugs.version` from 4.1.3 to 4.2.1.\n\nUpdates `spotbugs` from 4.1.3 to 4.2.1\n- [Release notes](https://github.com/spotbugs/spotbugs/releases)\n- [Changelog](https://github.com/spotbugs/spotbugs/blob/master/CHANGELOG.md)\n- [Commits](https://github.com/spotbugs/spotbugs/compare/4.1.3...4.2.1)\n\nUpdates `spotbugs-annotations` from 4.1.3 to 4.2.1\n- [Release notes](https://github.com/spotbugs/spotbugs/releases)\n- [Changelog](https://github.com/spotbugs/spotbugs/blob/master/CHANGELOG.md)\n- [Commits](https://github.com/spotbugs/spotbugs/compare/4.1.3...4.2.1)\n\nSigned-off-by: dependabot[bot] <support@github.com>"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/be67f1d9e2fc3949275e333bd1e848df9d66b31d",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/be67f1d9e2fc3949275e333bd1e848df9d66b31d",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/be67f1d9e2fc3949275e333bd1e848df9d66b31d/comments",
      "author": {
        "login": "dependabot[bot]",
        "id": 49699333,
        "node_id": "MDM6Qm90NDk2OTkzMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/in/29110?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dependabot%5Bbot%5D",
        "html_url": "https://github.com/apps/dependabot",
        "followers_url": "https://api.github.com/users/dependabot%5Bbot%5D/followers",
        "following_url": "https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}",
        "gists_url": "https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dependabot%5Bbot%5D/subscriptions",
        "organizations_url": "https://api.github.com/users/dependabot%5Bbot%5D/orgs",
        "repos_url": "https://api.github.com/users/dependabot%5Bbot%5D/repos",
        "events_url": "https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dependabot%5Bbot%5D/received_events",
        "type": "Bot",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "f22bf160f9c24e8f8548a751c1ada95be3d8ba20",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/f22bf160f9c24e8f8548a751c1ada95be3d8ba20",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/f22bf160f9c24e8f8548a751c1ada95be3d8ba20"
        }
      ]
    },
    {
      "sha": "8c8f1451d44ffb2f7dce7118731d5bc298511d39",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjhjOGYxNDUxZDQ0ZmZiMmY3ZGNlNzExODczMWQ1YmMyOTg1MTFkMzk=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-01T17:18:14Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-01T17:18:14Z"
        },
        "message": "Merge pull request #1043 from hub4j/dependabot/github_actions/actions/cache-v2.1.4\n\nChore(deps): Bump actions/cache from v2 to v2.1.4",
        "tree": {
          "sha": "f8d85a0a984337363e456d3d8d1dbe0ea5aa4667",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/f8d85a0a984337363e456d3d8d1dbe0ea5aa4667"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/8c8f1451d44ffb2f7dce7118731d5bc298511d39",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPSHWCRBK7hj4Ov3rIwAAdHIIACbbXr7O531IW1SDORJaUpze\nLl45OEOj8Zv/wbTNR5+0r+viULFJX97DHWUvEbQyYV9h0Wf6vAG3ihw49ky6B+tU\nRJ5UIb/pykMIeuhEi3xyTgnBCXUK9SBpC9FlimCfqb1biJ36VgvZoez1m2CtYoJY\nrjDo6EpQPjBDg75b7OqQhd3aWCNpuTOLa3QYTQ4n6n5B2G1QYD/ViiPl2EuirctC\nX3dYGXt1Gz3LjGNQPJKjqelUy4Er/KThNqs+pA0wh+s1j7ej/qw2kFSoaaHcqTG0\nQKZSHTyp9KKS7Wayi80ALz6mD3Pm3INQqRFRlffluprDLJRYKPyWwmn3gtxJSpw=\n=x4fg\n-----END PGP SIGNATURE-----\n",
          "payload": "tree f8d85a0a984337363e456d3d8d1dbe0ea5aa4667\nparent f22bf160f9c24e8f8548a751c1ada95be3d8ba20\nparent 90bc250269c93b452013779367fc5f31e32e94c0\nauthor Liam Newman <bitwiseman@gmail.com> 1614619094 -0800\ncommitter GitHub <noreply@github.com> 1614619094 -0800\n\nMerge pull request #1043 from hub4j/dependabot/github_actions/actions/cache-v2.1.4\n\nChore(deps): Bump actions/cache from v2 to v2.1.4"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8c8f1451d44ffb2f7dce7118731d5bc298511d39",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/8c8f1451d44ffb2f7dce7118731d5bc298511d39",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8c8f1451d44ffb2f7dce7118731d5bc298511d39/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "f22bf160f9c24e8f8548a751c1ada95be3d8ba20",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/f22bf160f9c24e8f8548a751c1ada95be3d8ba20",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/f22bf160f9c24e8f8548a751c1ada95be3d8ba20"
        },
        {
          "sha": "90bc250269c93b452013779367fc5f31e32e94c0",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/90bc250269c93b452013779367fc5f31e32e94c0",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/90bc250269c93b452013779367fc5f31e32e94c0"
        }
      ]
    },
    {
      "sha": "18e2056a10b91c45c6bcd0758add59220179e581",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjE4ZTIwNTZhMTBiOTFjNDVjNmJjZDA3NThhZGQ1OTIyMDE3OWU1ODE=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-01T17:18:32Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-01T17:18:32Z"
        },
        "message": "Merge pull request #1042 from hub4j/dependabot/maven/com.tngtech.archunit-archunit-0.17.0\n\nChore(deps-dev): Bump archunit from 0.16.0 to 0.17.0",
        "tree": {
          "sha": "73f2f6d7339ba7d2601cd7a82409e7ca9b088630",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/73f2f6d7339ba7d2601cd7a82409e7ca9b088630"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/18e2056a10b91c45c6bcd0758add59220179e581",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPSHoCRBK7hj4Ov3rIwAAdHIIAG/rYT9VkCtPzSCsTLSKQeGZ\nzRhlTnfm0pJz5pwIzUizmqXA0KFcIc5j8tnJ+ZblvjZUaERFN93Kkfz88kgeQR4C\ncsV7BztlrByNE7DF6pJgwMTRotttgP9X1VzTZmjiR33h2ZvljPSOxhfmIreViB1S\nAsbRJ/M7lGa0XwALgym1eWKKrQljOojVns60dJiDWT0zClgwfXN7daBgxNERGmuf\nGKYpwPrcxrpvJQwBiHV8vzzMtvjNTXiQfbl+CQwp1bm1+e7fTPYHE6kwRvcm7+WE\nEqP1UEqqjJ4sJ5TOpGfHn1Sl+2/l5d2pP0tW7B6sEWlLpWuopmRthtIw2J7u2J0=\n=kHrh\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 73f2f6d7339ba7d2601cd7a82409e7ca9b088630\nparent 8c8f1451d44ffb2f7dce7118731d5bc298511d39\nparent 1bd178654fb08d8e5770ed745d6e32a1263f2ee9\nauthor Liam Newman <bitwiseman@gmail.com> 1614619112 -0800\ncommitter GitHub <noreply@github.com> 1614619112 -0800\n\nMerge pull request #1042 from hub4j/dependabot/maven/com.tngtech.archunit-archunit-0.17.0\n\nChore(deps-dev): Bump archunit from 0.16.0 to 0.17.0"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/18e2056a10b91c45c6bcd0758add59220179e581",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/18e2056a10b91c45c6bcd0758add59220179e581",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/18e2056a10b91c45c6bcd0758add59220179e581/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8c8f1451d44ffb2f7dce7118731d5bc298511d39",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8c8f1451d44ffb2f7dce7118731d5bc298511d39",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/8c8f1451d44ffb2f7dce7118731d5bc298511d39"
        },
        {
          "sha": "1bd178654fb08d8e5770ed745d6e32a1263f2ee9",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/1bd178654fb08d8e5770ed745d6e32a1263f2ee9",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/1bd178654fb08d8e5770ed745d6e32a1263f2ee9"
        }
      ]
    },
    {
      "sha": "36612fe97fc6d69ad2590b32833b0d4d9aa71564",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjM2NjEyZmU5N2ZjNmQ2OWFkMjU5MGIzMjgzM2IwZDRkOWFhNzE1NjQ=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-01T17:18:58Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-01T17:18:58Z"
        },
        "message": "Merge pull request #1045 from hub4j/dependabot/maven/spotbugs.version-4.2.1\n\nChore(deps): Bump spotbugs.version from 4.1.3 to 4.2.1",
        "tree": {
          "sha": "d60b0f7071cb44fd3dd3c1777c6fdc783d9f2718",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/d60b0f7071cb44fd3dd3c1777c6fdc783d9f2718"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/36612fe97fc6d69ad2590b32833b0d4d9aa71564",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPSICCRBK7hj4Ov3rIwAAdHIIAClK7tdw6WxLvXytrei9nGys\nEsl+TLv8XDJ0h/BJGCY/XwsJbms/KzYU+MFf9jS11msi+pAB1XdzVjjBFAwqZD58\nJiPK30Qwxzemg0dKUX8jszPsH6jRuOhG7pEP3ztQYYJpE6O7hDDyAowLROHvk+2z\nNd4UjrC4dHxS0Nax1WxlLPSMhZIZ2zVTiXkakGXowvG1rT88AOe7KjLVAwLJqV7R\n5rFjQ9scGItWeFRx7u/T8E7souvvpNQhBNiyvZf2NxOSWRQNGxuM8r6NmALQlGTv\npkFG1v1zP1DeYfeCBQK0xcOXrGdJbY1YVWBnkhEhKKJW65ZrJyWhCqjIvcI8Qnc=\n=IES6\n-----END PGP SIGNATURE-----\n",
          "payload": "tree d60b0f7071cb44fd3dd3c1777c6fdc783d9f2718\nparent 18e2056a10b91c45c6bcd0758add59220179e581\nparent be67f1d9e2fc3949275e333bd1e848df9d66b31d\nauthor Liam Newman <bitwiseman@gmail.com> 1614619138 -0800\ncommitter GitHub <noreply@github.com> 1614619138 -0800\n\nMerge pull request #1045 from hub4j/dependabot/maven/spotbugs.version-4.2.1\n\nChore(deps): Bump spotbugs.version from 4.1.3 to 4.2.1"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/36612fe97fc6d69ad2590b32833b0d4d9aa71564",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/36612fe97fc6d69ad2590b32833b0d4d9aa71564",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/36612fe97fc6d69ad2590b32833b0d4d9aa71564/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "18e2056a10b91c45c6bcd0758add59220179e581",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/18e2056a10b91c45c6bcd0758add59220179e581",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/18e2056a10b91c45c6bcd0758add59220179e581"
        },
        {
          "sha": "be67f1d9e2fc3949275e333bd1e848df9d66b31d",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/be67f1d9e2fc3949275e333bd1e848df9d66b31d",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/be67f1d9e2fc3949275e333bd1e848df9d66b31d"
        }
      ]
    },
    {
      "sha": "c10c7237a78d27ef90caf07181d531b5381b60ad",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmMxMGM3MjM3YTc4ZDI3ZWY5MGNhZjA3MTgxZDUzMWI1MzgxYjYwYWQ=",
      "commit": {
        "author": {
          "name": "dependabot[bot]",
          "email": "49699333+dependabot[bot]@users.noreply.github.com",
          "date": "2021-03-01T17:19:16Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-01T17:19:16Z"
        },
        "message": "Chore(deps): Bump animal-sniffer-maven-plugin from 1.19 to 1.20\n\nBumps [animal-sniffer-maven-plugin](https://github.com/mojohaus/animal-sniffer) from 1.19 to 1.20.\n- [Release notes](https://github.com/mojohaus/animal-sniffer/releases)\n- [Commits](https://github.com/mojohaus/animal-sniffer/compare/animal-sniffer-parent-1.19...animal-sniffer-parent-1.20)\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "tree": {
          "sha": "5ea6c7495c516e9edc58a26feb9f87ccbc54d117",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/5ea6c7495c516e9edc58a26feb9f87ccbc54d117"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/c10c7237a78d27ef90caf07181d531b5381b60ad",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPSIUCRBK7hj4Ov3rIwAAdHIIACadU6tXD17ArVfMHd8N2dRR\nLr5ZnGxQ6HC/bML92fFHY/10DrdtLjOtJEkg/vkFfNNQp/6KxBP8YTxGU3pmc1hT\ngQEXhGye8+MWnmAVyPe7f+mxl9zngKqggGrklCf6VTFBW11C0fvvsCS9LQiirFDl\n2C/0eU4o8sXI8/yVO5mPqyShTbS5TVn9x/Ltu2n5bSh9aqSId7alGgTK0Iapn5AK\nzeL8azMGvzp5JlBRW9CUyrribUgRkYFPmdQDHa8ZvFsbsoydx/edSuhbZXcThVug\nDz3zrjeD7sa0JON1E8dAC41KM/saPKWlVwXJcUWHDzVU0ikPbnB2N6OU4n2ywNY=\n=UbXr\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 5ea6c7495c516e9edc58a26feb9f87ccbc54d117\nparent 36612fe97fc6d69ad2590b32833b0d4d9aa71564\nauthor dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> 1614619156 +0000\ncommitter GitHub <noreply@github.com> 1614619156 +0000\n\nChore(deps): Bump animal-sniffer-maven-plugin from 1.19 to 1.20\n\nBumps [animal-sniffer-maven-plugin](https://github.com/mojohaus/animal-sniffer) from 1.19 to 1.20.\n- [Release notes](https://github.com/mojohaus/animal-sniffer/releases)\n- [Commits](https://github.com/mojohaus/animal-sniffer/compare/animal-sniffer-parent-1.19...animal-sniffer-parent-1.20)\n\nSigned-off-by: dependabot[bot] <support@github.com>"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/c10c7237a78d27ef90caf07181d531b5381b60ad",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/c10c7237a78d27ef90caf07181d531b5381b60ad",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/c10c7237a78d27ef90caf07181d531b5381b60ad/comments",
      "author": {
        "login": "dependabot[bot]",
        "id": 49699333,
        "node_id": "MDM6Qm90NDk2OTkzMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/in/29110?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dependabot%5Bbot%5D",
        "html_url": "https://github.com/apps/dependabot",
        "followers_url": "https://api.github.com/users/dependabot%5Bbot%5D/followers",
        "following_url": "https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}",
        "gists_url": "https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dependabot%5Bbot%5D/subscriptions",
        "organizations_url": "https://api.github.com/users/dependabot%5Bbot%5D/orgs",
        "repos_url": "https://api.github.com/users/dependabot%5Bbot%5D/repos",
        "events_url": "https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dependabot%5Bbot%5D/received_events",
        "type": "Bot",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "36612fe97fc6d69ad2590b32833b0d4d9aa71564",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/36612fe97fc6d69ad2590b32833b0d4d9aa71564",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/36612fe97fc6d69ad2590b32833b0d4d9aa71564"
        }
      ]
    },
    {
      "sha": "9b0dbe6f34b0f7d14f60e2b0aaf2ce1ee8ecfc54",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjliMGRiZTZmMzRiMGY3ZDE0ZjYwZTJiMGFhZjJjZTFlZThlY2ZjNTQ=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-01T17:19:28Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-01T17:19:28Z"
        },
        "message": "Merge pull request #1044 from hub4j/dependabot/maven/org.codehaus.mojo-animal-sniffer-maven-plugin-1.20\n\nChore(deps): Bump animal-sniffer-maven-plugin from 1.19 to 1.20",
        "tree": {
          "sha": "5ea6c7495c516e9edc58a26feb9f87ccbc54d117",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/5ea6c7495c516e9edc58a26feb9f87ccbc54d117"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/9b0dbe6f34b0f7d14f60e2b0aaf2ce1ee8ecfc54",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPSIgCRBK7hj4Ov3rIwAAdHIIAElsyvKrgIQGSFC4bLPMP6SC\n4DDrV+6LvGbrxZpe5wj6/Uz39p84/tM8DwTz4d+C7UlJpFG38mdVVhh3AJ1RcWGH\nJGYDA6+N7yo9CjfTYtxfymhh/+mMA6k3wa3V4Y4kfKNhQYJnfn7bQWKCyCZYuCRu\nrU0W97w8nt3CxnwztU7/I9ig9w2hHh49lSyWu1NzcViiQQdeOQPWL2QS+Zy2TXXU\n6E+7JC4m0NeKq2xA9apiQolKMhKHmJHPphMum1gpGZcnXAEtpoTZfhmm/wj2svRo\n73HcZFwwATzIqV34ZxVntpJ+J9D8BJXobXC0IgZbR/w+hr3UdkOKnZ4ObAKej7M=\n=PxHA\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 5ea6c7495c516e9edc58a26feb9f87ccbc54d117\nparent 36612fe97fc6d69ad2590b32833b0d4d9aa71564\nparent c10c7237a78d27ef90caf07181d531b5381b60ad\nauthor Liam Newman <bitwiseman@gmail.com> 1614619168 -0800\ncommitter GitHub <noreply@github.com> 1614619168 -0800\n\nMerge pull request #1044 from hub4j/dependabot/maven/org.codehaus.mojo-animal-sniffer-maven-plugin-1.20\n\nChore(deps): Bump animal-sniffer-maven-plugin from 1.19 to 1.20"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/9b0dbe6f34b0f7d14f60e2b0aaf2ce1ee8ecfc54",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/9b0dbe6f34b0f7d14f60e2b0aaf2ce1ee8ecfc54",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/9b0dbe6f34b0f7d14f60e2b0aaf2ce1ee8ecfc54/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "36612fe97fc6d69ad2590b32833b0d4d9aa71564",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/36612fe97fc6d69ad2590b32833b0d4d9aa71564",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/36612fe97fc6d69ad2590b32833b0d4d9aa71564"
        },
        {
          "sha": "c10c7237a78d27ef90caf07181d531b5381b60ad",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/c10c7237a78d27ef90caf07181d531b5381b60ad",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/c10c7237a78d27ef90caf07181d531b5381b60ad"
        }
      ]
    },
    {
      "sha": "fb3e95650249942dd91b34c1674e0e513ee36f2f",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmZiM2U5NTY1MDI0OTk0MmRkOTFiMzRjMTY3NGUwZTUxM2VlMzZmMmY=",
      "commit": {
        "author": {
          "name": "dependabot[bot]",
          "email": "49699333+dependabot[bot]@users.noreply.github.com",
          "date": "2021-03-01T17:19:55Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-01T17:19:55Z"
        },
        "message": "Chore(deps-dev): Bump junit from 4.13.1 to 4.13.2\n\nBumps [junit](https://github.com/junit-team/junit4) from 4.13.1 to 4.13.2.\n- [Release notes](https://github.com/junit-team/junit4/releases)\n- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md)\n- [Commits](https://github.com/junit-team/junit4/compare/r4.13.1...r4.13.2)\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "tree": {
          "sha": "4adf466a07857fcde786dae98e6759eb4724fe08",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/4adf466a07857fcde786dae98e6759eb4724fe08"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/fb3e95650249942dd91b34c1674e0e513ee36f2f",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPSI7CRBK7hj4Ov3rIwAAdHIIAKHIxj3Sg36A6dS1Hyszc03o\nltCP5icIlr7sFtmSjKRn8X/gXK+wecitlu/IM/GshQoP/d988DBWCKoQA8aAPQ1t\nUx1S8ufTKV2KKiC/smB/baqPnbGQgZmhGvV/ObH777elFV9nfW0sb0JPEYXavLH9\nl/NNI8chJ8QC8sSeYFQ9gkAc8v+3VONtCveyGRHFgM/jk9ubncEGDD8nAjq7RMOm\nJKSAVMv1p0VhEm+X/wVUeEPKiMuWiaDt5vxr77fOYKXRlXxgPOkwmVAl2tHdYctp\nX7n21FEmjz+HFcvaHoK7hs/ZgF2vvis6xKsN05G4fLk9Etnr3jcMRNCVlg1ZUXY=\n=sUF0\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 4adf466a07857fcde786dae98e6759eb4724fe08\nparent 9b0dbe6f34b0f7d14f60e2b0aaf2ce1ee8ecfc54\nauthor dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> 1614619195 +0000\ncommitter GitHub <noreply@github.com> 1614619195 +0000\n\nChore(deps-dev): Bump junit from 4.13.1 to 4.13.2\n\nBumps [junit](https://github.com/junit-team/junit4) from 4.13.1 to 4.13.2.\n- [Release notes](https://github.com/junit-team/junit4/releases)\n- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md)\n- [Commits](https://github.com/junit-team/junit4/compare/r4.13.1...r4.13.2)\n\nSigned-off-by: dependabot[bot] <support@github.com>"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fb3e95650249942dd91b34c1674e0e513ee36f2f",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/fb3e95650249942dd91b34c1674e0e513ee36f2f",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fb3e95650249942dd91b34c1674e0e513ee36f2f/comments",
      "author": {
        "login": "dependabot[bot]",
        "id": 49699333,
        "node_id": "MDM6Qm90NDk2OTkzMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/in/29110?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dependabot%5Bbot%5D",
        "html_url": "https://github.com/apps/dependabot",
        "followers_url": "https://api.github.com/users/dependabot%5Bbot%5D/followers",
        "following_url": "https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}",
        "gists_url": "https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dependabot%5Bbot%5D/subscriptions",
        "organizations_url": "https://api.github.com/users/dependabot%5Bbot%5D/orgs",
        "repos_url": "https://api.github.com/users/dependabot%5Bbot%5D/repos",
        "events_url": "https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dependabot%5Bbot%5D/received_events",
        "type": "Bot",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9b0dbe6f34b0f7d14f60e2b0aaf2ce1ee8ecfc54",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/9b0dbe6f34b0f7d14f60e2b0aaf2ce1ee8ecfc54",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/9b0dbe6f34b0f7d14f60e2b0aaf2ce1ee8ecfc54"
        }
      ]
    },
    {
      "sha": "6d86cfb4f60642ccfc3ad943eeb472e33e2ff9ec",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjZkODZjZmI0ZjYwNjQyY2NmYzNhZDk0M2VlYjQ3MmUzM2UyZmY5ZWM=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-01T17:20:28Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-01T17:20:28Z"
        },
        "message": "Merge pull request #1047 from hub4j/dependabot/maven/junit-junit-4.13.2\n\nChore(deps-dev): Bump junit from 4.13.1 to 4.13.2",
        "tree": {
          "sha": "4adf466a07857fcde786dae98e6759eb4724fe08",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/4adf466a07857fcde786dae98e6759eb4724fe08"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/6d86cfb4f60642ccfc3ad943eeb472e33e2ff9ec",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPSJcCRBK7hj4Ov3rIwAAdHIIAEyplFqGUyRNYG/NdyL8afKN\nDm9QmFljRRY0oUuAIllEZ659S0ptH9ywt7q0BXANg9yTQKmxEbeN/ePkXCnuZ4ff\nDBXvMMFFg5IH+Nor1ba1I/Esw8LoICIt+XTYEKiHJbEkTLVVn3kzHmU64h40lKPB\nku1vj66pG+VMLBUN+KhE4SgnOgJzJnUwF57QpRA5KWWaF2O7gM0m0QYMaRu/WUOW\nJOWjYY0MUnlNtHE813tgQlu3SxNTqYwPJMpckGVhC7y8ePqwfVbvLyn0sMeYXvlP\nVuFGkQa+tuj2VuaP45moVg4m0/ubg9bJ/a46C24gu/iB0GyY85Pq3xuQ1e7xiYY=\n=3deA\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 4adf466a07857fcde786dae98e6759eb4724fe08\nparent 9b0dbe6f34b0f7d14f60e2b0aaf2ce1ee8ecfc54\nparent fb3e95650249942dd91b34c1674e0e513ee36f2f\nauthor Liam Newman <bitwiseman@gmail.com> 1614619228 -0800\ncommitter GitHub <noreply@github.com> 1614619228 -0800\n\nMerge pull request #1047 from hub4j/dependabot/maven/junit-junit-4.13.2\n\nChore(deps-dev): Bump junit from 4.13.1 to 4.13.2"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6d86cfb4f60642ccfc3ad943eeb472e33e2ff9ec",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/6d86cfb4f60642ccfc3ad943eeb472e33e2ff9ec",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6d86cfb4f60642ccfc3ad943eeb472e33e2ff9ec/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9b0dbe6f34b0f7d14f60e2b0aaf2ce1ee8ecfc54",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/9b0dbe6f34b0f7d14f60e2b0aaf2ce1ee8ecfc54",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/9b0dbe6f34b0f7d14f60e2b0aaf2ce1ee8ecfc54"
        },
        {
          "sha": "fb3e95650249942dd91b34c1674e0e513ee36f2f",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fb3e95650249942dd91b34c1674e0e513ee36f2f",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/fb3e95650249942dd91b34c1674e0e513ee36f2f"
        }
      ]
    },
    {
      "sha": "a8c7c97d062d53410991aade4ceded2f9bd0cc84",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmE4YzdjOTdkMDYyZDUzNDEwOTkxYWFkZTRjZWRlZDJmOWJkMGNjODQ=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-05T19:16:06Z"
        },
        "committer": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-05T19:16:06Z"
        },
        "message": "Test that void bridge methods are created",
        "tree": {
          "sha": "f1d49656c1fe85e5e4deeff2f839eb198e068c24",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/f1d49656c1fe85e5e4deeff2f839eb198e068c24"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/a8c7c97d062d53410991aade4ceded2f9bd0cc84",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a8c7c97d062d53410991aade4ceded2f9bd0cc84",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/a8c7c97d062d53410991aade4ceded2f9bd0cc84",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a8c7c97d062d53410991aade4ceded2f9bd0cc84/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "6d86cfb4f60642ccfc3ad943eeb472e33e2ff9ec",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6d86cfb4f60642ccfc3ad943eeb472e33e2ff9ec",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/6d86cfb4f60642ccfc3ad943eeb472e33e2ff9ec"
        }
      ]
    },
    {
      "sha": "bd509070ac998992c78d3216bc9ebf68fdef88e0",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmJkNTA5MDcwYWM5OTg5OTJjNzhkMzIxNmJjOWViZjY4ZmRlZjg4ZTA=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-05T19:34:10Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-05T19:34:10Z"
        },
        "message": "Merge pull request #1052 from bitwiseman/task/test-void-bridge\n\nTest that void bridge methods are created",
        "tree": {
          "sha": "f1d49656c1fe85e5e4deeff2f839eb198e068c24",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/f1d49656c1fe85e5e4deeff2f839eb198e068c24"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/bd509070ac998992c78d3216bc9ebf68fdef88e0",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgQoeyCRBK7hj4Ov3rIwAAdHIIAEiWepaSF4VEfsEFDvZPGcLk\nzHjd5RHTnOrAXLZvT/RdBsmU/Lk73xFp4w6R6M8LV5iu57ez8k1vpQ+KxHKfRur0\n+OJXu3d3NW8oOfM1qnpr53iTTFzaicKKJWF5Jj6P7efkoe2dEo7wZZvBAKuOAtMv\nJ63Z7E/58RFv8kC0Hhc/f8yHDMNIf1ufwczwUvptMIADux383Vjf37+SIM6pRmaz\nCpnWueUTofuj0Urdvk6gr5UTcuNBdb4sJQxP9UpPqMI7AmGn4jW6eaGlt8Zlybo0\nLoqBAigZR6fzJ6JPO0J7VyjoMwRGrnR2GGvODWDbIN5ME5kOBS6d5r0Dbe8Cjx4=\n=LBxf\n-----END PGP SIGNATURE-----\n",
          "payload": "tree f1d49656c1fe85e5e4deeff2f839eb198e068c24\nparent 6d86cfb4f60642ccfc3ad943eeb472e33e2ff9ec\nparent a8c7c97d062d53410991aade4ceded2f9bd0cc84\nauthor Liam Newman <bitwiseman@gmail.com> 1614972850 -0800\ncommitter GitHub <noreply@github.com> 1614972850 -0800\n\nMerge pull request #1052 from bitwiseman/task/test-void-bridge\n\nTest that void bridge methods are created"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/bd509070ac998992c78d3216bc9ebf68fdef88e0",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/bd509070ac998992c78d3216bc9ebf68fdef88e0",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/bd509070ac998992c78d3216bc9ebf68fdef88e0/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "6d86cfb4f60642ccfc3ad943eeb472e33e2ff9ec",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6d86cfb4f60642ccfc3ad943eeb472e33e2ff9ec",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/6d86cfb4f60642ccfc3ad943eeb472e33e2ff9ec"
        },
        {
          "sha": "a8c7c97d062d53410991aade4ceded2f9bd0cc84",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a8c7c97d062d53410991aade4ceded2f9bd0cc84",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/a8c7c97d062d53410991aade4ceded2f9bd0cc84"
        }
      ]
    },
    {
      "sha": "854df5321b43cae17daab506c60aed672a0a4caa",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjg1NGRmNTMyMWI0M2NhZTE3ZGFhYjUwNmM2MGFlZDY3MmEwYTRjYWE=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-09T15:20:55Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-09T15:20:55Z"
        },
        "message": "Adjust wording used to create the token and give a bit more guidance",
        "tree": {
          "sha": "b2a8ac572c198738bdf54d41b42c891da1232936",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/b2a8ac572c198738bdf54d41b42c891da1232936"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/854df5321b43cae17daab506c60aed672a0a4caa",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/854df5321b43cae17daab506c60aed672a0a4caa",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/854df5321b43cae17daab506c60aed672a0a4caa",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/854df5321b43cae17daab506c60aed672a0a4caa/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "bd509070ac998992c78d3216bc9ebf68fdef88e0",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/bd509070ac998992c78d3216bc9ebf68fdef88e0",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/bd509070ac998992c78d3216bc9ebf68fdef88e0"
        }
      ]
    },
    {
      "sha": "199eee4e25f52410e931952fe8a30358a20b38ee",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjE5OWVlZTRlMjVmNTI0MTBlOTMxOTUyZmU4YTMwMzU4YTIwYjM4ZWU=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-10T02:45:38Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-10T02:45:38Z"
        },
        "message": "Merge pull request #1055 from gsmet/update-contributing\n\nAdjust wording used to create the token and give a bit more guidance",
        "tree": {
          "sha": "b2a8ac572c198738bdf54d41b42c891da1232936",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/b2a8ac572c198738bdf54d41b42c891da1232936"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/199eee4e25f52410e931952fe8a30358a20b38ee",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgSDLSCRBK7hj4Ov3rIwAAdHIIAISCzG/XkKs5tbcGX+VjmkbC\nhseD3Cmc7Vc2Ueg+sJXvoNRF+6NzmsyifHqUBcfrTs/2UD2wnHHZOSo77kfH/l7X\nSxKsNVdfPUabR7pSLeNZGAKIEHpW2tcYVl0BE9nqA3s7uzf2XVBCYdxBUVXMQNPN\nZFDFFoGDnIw9FlqANE/K7UR3dsCIyk3kuCE8lD6m4tjlKHRCNeLPeXb7ii75cJnh\ntkghogMDWQhPrzyDOt85NKXq3IXLqCTg4ztToalg4p74PLM1kHLBFYU3oCayGkOK\nYghX9Rr5r91SASdQBaMgetuk2CV/UKusgmjxBJwK0LhjZis2JGRpRnQ+U+OUuLI=\n=wlGe\n-----END PGP SIGNATURE-----\n",
          "payload": "tree b2a8ac572c198738bdf54d41b42c891da1232936\nparent bd509070ac998992c78d3216bc9ebf68fdef88e0\nparent 854df5321b43cae17daab506c60aed672a0a4caa\nauthor Liam Newman <bitwiseman@gmail.com> 1615344338 -0800\ncommitter GitHub <noreply@github.com> 1615344338 -0800\n\nMerge pull request #1055 from gsmet/update-contributing\n\nAdjust wording used to create the token and give a bit more guidance"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/199eee4e25f52410e931952fe8a30358a20b38ee",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/199eee4e25f52410e931952fe8a30358a20b38ee",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/199eee4e25f52410e931952fe8a30358a20b38ee/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "bd509070ac998992c78d3216bc9ebf68fdef88e0",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/bd509070ac998992c78d3216bc9ebf68fdef88e0",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/bd509070ac998992c78d3216bc9ebf68fdef88e0"
        },
        {
          "sha": "854df5321b43cae17daab506c60aed672a0a4caa",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/854df5321b43cae17daab506c60aed672a0a4caa",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/854df5321b43cae17daab506c60aed672a0a4caa"
        }
      ]
    },
    {
      "sha": "1fefc775822b26de601b84c922979b921ffbce0a",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjFmZWZjNzc1ODIyYjI2ZGU2MDFiODRjOTIyOTc5YjkyMWZmYmNlMGE=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-05T14:06:47Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-10T13:03:20Z"
        },
        "message": "Fix concurrency issues with GHIssue addLabels and removeLabels\n\nFixes #1049",
        "tree": {
          "sha": "68691de25410bca23a96eb958c64031e616ca1ad",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/68691de25410bca23a96eb958c64031e616ca1ad"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/1fefc775822b26de601b84c922979b921ffbce0a",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/1fefc775822b26de601b84c922979b921ffbce0a",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/1fefc775822b26de601b84c922979b921ffbce0a",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/1fefc775822b26de601b84c922979b921ffbce0a/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "199eee4e25f52410e931952fe8a30358a20b38ee",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/199eee4e25f52410e931952fe8a30358a20b38ee",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/199eee4e25f52410e931952fe8a30358a20b38ee"
        }
      ]
    },
    {
      "sha": "a59ee6a82d07567e4548cd33dd296e730ec7a52b",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmE1OWVlNmE4MmQwNzU2N2U0NTQ4Y2QzM2RkMjk2ZTczMGVjN2E1MmI=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-13T01:56:34Z"
        },
        "committer": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-13T01:56:34Z"
        },
        "message": "Add removeLabel() that throws when label missing",
        "tree": {
          "sha": "8f64cfdfd4c0145b17e97e5c3137d50c02bb437f",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/8f64cfdfd4c0145b17e97e5c3137d50c02bb437f"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/a59ee6a82d07567e4548cd33dd296e730ec7a52b",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a59ee6a82d07567e4548cd33dd296e730ec7a52b",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/a59ee6a82d07567e4548cd33dd296e730ec7a52b",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a59ee6a82d07567e4548cd33dd296e730ec7a52b/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1fefc775822b26de601b84c922979b921ffbce0a",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/1fefc775822b26de601b84c922979b921ffbce0a",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/1fefc775822b26de601b84c922979b921ffbce0a"
        }
      ]
    },
    {
      "sha": "1f7f646bec0692084e35bfdb81228e83ca2f0765",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjFmN2Y2NDZiZWMwNjkyMDg0ZTM1YmZkYjgxMjI4ZTgzY2EyZjA3NjU=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-15T17:56:45Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-15T17:56:45Z"
        },
        "message": "Merge pull request #1054 from gsmet/fix-add-remove-labels-concurrency\n\nFix concurrency issues with GHIssue addLabels and removeLabels",
        "tree": {
          "sha": "8f64cfdfd4c0145b17e97e5c3137d50c02bb437f",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/8f64cfdfd4c0145b17e97e5c3137d50c02bb437f"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/1f7f646bec0692084e35bfdb81228e83ca2f0765",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgT5/dCRBK7hj4Ov3rIwAAdHIIAJUYt5IlyH2pJS1B2nOKbu6j\nBalR2T/atFGjDll1hfBMHhM8cKAj7Gs1slYp+N8VUhozLjhfDQ9wkbLewndb5igb\nxXcFh7HnrEMzunBTXMOtz0KVx4Ei3oGH6hiZldhNIYetxyivrkxLmyZRo3MM4QW9\nj04D3kEtxvR2/F64t0cTTArEVBdg4/yzlgZSsrko0fTSHMOTGOVXK5dp17sLNGms\noNNJCtf7RsF8W0n6TzXZ1iwtJkUjIshGqgNhwQfkvDftlan+5LeDkGA+Fk/hnj47\nNIq1Q05HLK4ZCaTWXbMSBKH3e+TRhnjf38AlRs5G+p9kioOW6vgf0G2fdb4onrI=\n=+Sie\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 8f64cfdfd4c0145b17e97e5c3137d50c02bb437f\nparent 199eee4e25f52410e931952fe8a30358a20b38ee\nparent a59ee6a82d07567e4548cd33dd296e730ec7a52b\nauthor Liam Newman <bitwiseman@gmail.com> 1615831005 -0700\ncommitter GitHub <noreply@github.com> 1615831005 -0700\n\nMerge pull request #1054 from gsmet/fix-add-remove-labels-concurrency\n\nFix concurrency issues with GHIssue addLabels and removeLabels"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/1f7f646bec0692084e35bfdb81228e83ca2f0765",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/1f7f646bec0692084e35bfdb81228e83ca2f0765",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/1f7f646bec0692084e35bfdb81228e83ca2f0765/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "199eee4e25f52410e931952fe8a30358a20b38ee",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/199eee4e25f52410e931952fe8a30358a20b38ee",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/199eee4e25f52410e931952fe8a30358a20b38ee"
        },
        {
          "sha": "a59ee6a82d07567e4548cd33dd296e730ec7a52b",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a59ee6a82d07567e4548cd33dd296e730ec7a52b",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/a59ee6a82d07567e4548cd33dd296e730ec7a52b"
        }
      ]
    },
    {
      "sha": "b0aea0c575779a1d16d1b78f9a70e171dd0262ba",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmIwYWVhMGM1NzU3NzlhMWQxNmQxYjc4ZjlhNzBlMTcxZGQwMjYyYmE=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T12:11:38Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T12:11:38Z"
        },
        "message": "Expose getLabel() for GHEventPayload.Issue\n\nIt was exposed on pull requests but not issues.",
        "tree": {
          "sha": "a24a66f79af76874f5fb15e4c1ff1341aa8710a8",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/a24a66f79af76874f5fb15e4c1ff1341aa8710a8"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/b0aea0c575779a1d16d1b78f9a70e171dd0262ba",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b0aea0c575779a1d16d1b78f9a70e171dd0262ba",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/b0aea0c575779a1d16d1b78f9a70e171dd0262ba",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b0aea0c575779a1d16d1b78f9a70e171dd0262ba/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1f7f646bec0692084e35bfdb81228e83ca2f0765",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/1f7f646bec0692084e35bfdb81228e83ca2f0765",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/1f7f646bec0692084e35bfdb81228e83ca2f0765"
        }
      ]
    },
    {
      "sha": "850995710251520deff656ca1bad7240494c45bd",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjg1MDk5NTcxMDI1MTUyMGRlZmY2NTZjYTFiYWQ3MjQwNDk0YzQ1YmQ=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T12:36:39Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T12:39:26Z"
        },
        "message": "Implement getChanges() for GHEventPayload.Issue",
        "tree": {
          "sha": "3caafc7cc51ef3c347f3200b89a70cea7be71cd3",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/3caafc7cc51ef3c347f3200b89a70cea7be71cd3"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/850995710251520deff656ca1bad7240494c45bd",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/850995710251520deff656ca1bad7240494c45bd",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/850995710251520deff656ca1bad7240494c45bd",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/850995710251520deff656ca1bad7240494c45bd/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "b0aea0c575779a1d16d1b78f9a70e171dd0262ba",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b0aea0c575779a1d16d1b78f9a70e171dd0262ba",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/b0aea0c575779a1d16d1b78f9a70e171dd0262ba"
        }
      ]
    },
    {
      "sha": "40937a5cc6132f6a786b50f275a1db74c68ebb23",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjQwOTM3YTVjYzYxMzJmNmE3ODZiNTBmMjc1YTFkYjc0YzY4ZWJiMjM=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T13:50:05Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T13:56:05Z"
        },
        "message": "Add the missing fields for GHLabel\n\nFixes #1059",
        "tree": {
          "sha": "e91c721ed46ee06fa50c1a47d2f3bdf588ac11ce",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/e91c721ed46ee06fa50c1a47d2f3bdf588ac11ce"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/40937a5cc6132f6a786b50f275a1db74c68ebb23",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/40937a5cc6132f6a786b50f275a1db74c68ebb23",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/40937a5cc6132f6a786b50f275a1db74c68ebb23",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/40937a5cc6132f6a786b50f275a1db74c68ebb23/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1f7f646bec0692084e35bfdb81228e83ca2f0765",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/1f7f646bec0692084e35bfdb81228e83ca2f0765",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/1f7f646bec0692084e35bfdb81228e83ca2f0765"
        }
      ]
    },
    {
      "sha": "629bd510c1a044015bcb28b164bf93826ac4a4d7",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjYyOWJkNTEwYzFhMDQ0MDE1YmNiMjhiMTY0YmY5MzgyNmFjNGE0ZDc=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T14:03:00Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T15:49:33Z"
        },
        "message": "Update JDKs used by CI to the latest versions",
        "tree": {
          "sha": "03ba6f21209118faf6075535f85a6215924f48c2",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/03ba6f21209118faf6075535f85a6215924f48c2"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/629bd510c1a044015bcb28b164bf93826ac4a4d7",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/629bd510c1a044015bcb28b164bf93826ac4a4d7",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/629bd510c1a044015bcb28b164bf93826ac4a4d7",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/629bd510c1a044015bcb28b164bf93826ac4a4d7/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1f7f646bec0692084e35bfdb81228e83ca2f0765",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/1f7f646bec0692084e35bfdb81228e83ca2f0765",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/1f7f646bec0692084e35bfdb81228e83ca2f0765"
        }
      ]
    },
    {
      "sha": "34a1f9d6e4723cf766d70e0d10b2124c858fa4e4",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjM0YTFmOWQ2ZTQ3MjNjZjc2NmQ3MGUwZDEwYjIxMjRjODU4ZmE0ZTQ=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T14:04:25Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T15:49:35Z"
        },
        "message": "Disable fail-fast for matrix builds",
        "tree": {
          "sha": "a1bdc64b03af509404e174a41a432a32c0c07a74",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/a1bdc64b03af509404e174a41a432a32c0c07a74"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/34a1f9d6e4723cf766d70e0d10b2124c858fa4e4",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/34a1f9d6e4723cf766d70e0d10b2124c858fa4e4",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/34a1f9d6e4723cf766d70e0d10b2124c858fa4e4",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/34a1f9d6e4723cf766d70e0d10b2124c858fa4e4/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "629bd510c1a044015bcb28b164bf93826ac4a4d7",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/629bd510c1a044015bcb28b164bf93826ac4a4d7",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/629bd510c1a044015bcb28b164bf93826ac4a4d7"
        }
      ]
    },
    {
      "sha": "ea3cbd4c714f368c8539677afed7fabb3480feb3",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmVhM2NiZDRjNzE0ZjM2OGM4NTM5Njc3YWZlZDdmYWJiMzQ4MGZlYjM=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T14:43:11Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T17:22:39Z"
        },
        "message": "Pass appropriate MAVEN_OPTS for JDK 11+\n\nThey are required by spotless starting JDK 16+",
        "tree": {
          "sha": "bc7c4555ddcaa7d8710d30d33b33359700ddb279",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/bc7c4555ddcaa7d8710d30d33b33359700ddb279"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/ea3cbd4c714f368c8539677afed7fabb3480feb3",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/ea3cbd4c714f368c8539677afed7fabb3480feb3",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/ea3cbd4c714f368c8539677afed7fabb3480feb3",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/ea3cbd4c714f368c8539677afed7fabb3480feb3/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "34a1f9d6e4723cf766d70e0d10b2124c858fa4e4",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/34a1f9d6e4723cf766d70e0d10b2124c858fa4e4",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/34a1f9d6e4723cf766d70e0d10b2124c858fa4e4"
        }
      ]
    },
    {
      "sha": "8a3559ada53bc4ceef2b4ddec46653dfdb9a2038",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjhhMzU1OWFkYTUzYmM0Y2VlZjJiNGRkZWM0NjY1M2RmZGI5YTIwMzg=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T15:09:18Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T17:22:39Z"
        },
        "message": "Open java.net to unnamed modules\n\nThis is needed to inject the unsupported HTTP verb. I don't know really\nif we will be able to find a better option than that...",
        "tree": {
          "sha": "cd9292d87399d17d051daf7a745477ab5809032f",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/cd9292d87399d17d051daf7a745477ab5809032f"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/8a3559ada53bc4ceef2b4ddec46653dfdb9a2038",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8a3559ada53bc4ceef2b4ddec46653dfdb9a2038",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/8a3559ada53bc4ceef2b4ddec46653dfdb9a2038",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8a3559ada53bc4ceef2b4ddec46653dfdb9a2038/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "ea3cbd4c714f368c8539677afed7fabb3480feb3",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/ea3cbd4c714f368c8539677afed7fabb3480feb3",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/ea3cbd4c714f368c8539677afed7fabb3480feb3"
        }
      ]
    },
    {
      "sha": "6e1b943823c550f100e54186a0c00df5c6284404",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjZlMWI5NDM4MjNjNTUwZjEwMGU1NDE4NmEwYzAwZGY1YzYyODQ0MDQ=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T15:36:44Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-19T17:22:39Z"
        },
        "message": "Disable tests messing with the environment for Java 16+\n\nIt might be possible to make them work again but it will require some\nmore advanced surgery.",
        "tree": {
          "sha": "728bf4aa8ec2a1eaab64e9fb9583677eeb7e3ffc",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/728bf4aa8ec2a1eaab64e9fb9583677eeb7e3ffc"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/6e1b943823c550f100e54186a0c00df5c6284404",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6e1b943823c550f100e54186a0c00df5c6284404",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/6e1b943823c550f100e54186a0c00df5c6284404",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6e1b943823c550f100e54186a0c00df5c6284404/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8a3559ada53bc4ceef2b4ddec46653dfdb9a2038",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8a3559ada53bc4ceef2b4ddec46653dfdb9a2038",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/8a3559ada53bc4ceef2b4ddec46653dfdb9a2038"
        }
      ]
    },
    {
      "sha": "a7cd052b7c264229c24a3c0ed7622441e1e9520d",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmE3Y2QwNTJiN2MyNjQyMjljMjRhM2MwZWQ3NjIyNDQxZTFlOTUyMGQ=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-19T19:54:05Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-19T19:54:05Z"
        },
        "message": "Merge pull request #1063 from gsmet/update-ci-jdks\n\nFix CI issues",
        "tree": {
          "sha": "728bf4aa8ec2a1eaab64e9fb9583677eeb7e3ffc",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/728bf4aa8ec2a1eaab64e9fb9583677eeb7e3ffc"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/a7cd052b7c264229c24a3c0ed7622441e1e9520d",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVQFdCRBK7hj4Ov3rIwAAdHIIACeth6N0s3wN+g1gPXs18vmE\n7gm18gibYJCy59mAurGinwoDGOgF5pgsEvBS5OU0mKewdvNfzohL3DViy1o36FHa\nuqDVjqD/sBIvxPtFbR3bsD9VE2qLbgw4DOkFCojGM8Gfkjhrf6Rhgi5zF5V0+dS6\nVlVwm/M6GwpGdgLCQmpSOsef4gn/xOUmw3+GWUctrjc6UATENLyfPN6NFAKsY8v3\njlkpbd7H1uxBSfPRUUmTj0IyOyyPssI4lqQ84MrkIQw6hXUuxQf+3wmSjYzxiXSB\nbBYAWIhqDiifTGtz9gkzqIZrimNiZho29nJ+OTtG3wAtxAs9LfL2HP6lv1x+9Rw=\n=docn\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 728bf4aa8ec2a1eaab64e9fb9583677eeb7e3ffc\nparent 1f7f646bec0692084e35bfdb81228e83ca2f0765\nparent 6e1b943823c550f100e54186a0c00df5c6284404\nauthor Liam Newman <bitwiseman@gmail.com> 1616183645 -0700\ncommitter GitHub <noreply@github.com> 1616183645 -0700\n\nMerge pull request #1063 from gsmet/update-ci-jdks\n\nFix CI issues"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a7cd052b7c264229c24a3c0ed7622441e1e9520d",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/a7cd052b7c264229c24a3c0ed7622441e1e9520d",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a7cd052b7c264229c24a3c0ed7622441e1e9520d/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1f7f646bec0692084e35bfdb81228e83ca2f0765",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/1f7f646bec0692084e35bfdb81228e83ca2f0765",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/1f7f646bec0692084e35bfdb81228e83ca2f0765"
        },
        {
          "sha": "6e1b943823c550f100e54186a0c00df5c6284404",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6e1b943823c550f100e54186a0c00df5c6284404",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/6e1b943823c550f100e54186a0c00df5c6284404"
        }
      ]
    },
    {
      "sha": "420d5d06f37d42616defb10f9f9b5c523d19c035",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjQyMGQ1ZDA2ZjM3ZDQyNjE2ZGVmYjEwZjlmOWI1YzUyM2QxOWMwMzU=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-19T19:54:22Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-19T19:54:22Z"
        },
        "message": "Merge branch 'master' into add-missing-label-info",
        "tree": {
          "sha": "b0c03a2b3cc645af27ca401e4e3da53a164bf859",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/b0c03a2b3cc645af27ca401e4e3da53a164bf859"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/420d5d06f37d42616defb10f9f9b5c523d19c035",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVQFuCRBK7hj4Ov3rIwAAdHIIAEKAzProZi+1Hkag87NO4lWR\nxK7toYIqRUHv2t9T3mdhgbf7Ktq68xXX6Dov/BotsL0eXxfutvbdFZVFzp0EyQba\nYx4jpEyDvre+umguPlaC7yu0+I8dL+JVpr8s2TgGsYwVhvVyU0AB8wcIWXnKAGgi\nq4RzQsl4h65AzkrU6E8uMXl3i5Ga7EywfoHWDZaChIQMhvwCLHnCJbnuelNCVYsG\nbW3x57LZk0U23yF+HeG7rBYIVifgkybIpcIJHi6HKhMwgMX9utjqXAkQksq/1TLm\n9TeAskNIjlGMvInqlFICwmGOrKvQPV/WYYG9j4cU3UIUfGMY+wkiwwLv3bavi/I=\n=HqYC\n-----END PGP SIGNATURE-----\n",
          "payload": "tree b0c03a2b3cc645af27ca401e4e3da53a164bf859\nparent 40937a5cc6132f6a786b50f275a1db74c68ebb23\nparent a7cd052b7c264229c24a3c0ed7622441e1e9520d\nauthor Liam Newman <bitwiseman@gmail.com> 1616183662 -0700\ncommitter GitHub <noreply@github.com> 1616183662 -0700\n\nMerge branch 'master' into add-missing-label-info"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/420d5d06f37d42616defb10f9f9b5c523d19c035",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/420d5d06f37d42616defb10f9f9b5c523d19c035",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/420d5d06f37d42616defb10f9f9b5c523d19c035/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "40937a5cc6132f6a786b50f275a1db74c68ebb23",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/40937a5cc6132f6a786b50f275a1db74c68ebb23",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/40937a5cc6132f6a786b50f275a1db74c68ebb23"
        },
        {
          "sha": "a7cd052b7c264229c24a3c0ed7622441e1e9520d",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a7cd052b7c264229c24a3c0ed7622441e1e9520d",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/a7cd052b7c264229c24a3c0ed7622441e1e9520d"
        }
      ]
    },
    {
      "sha": "a7b4c97020b9e95f1555768bf9df96141edfb4da",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmE3YjRjOTcwMjBiOWU5NWYxNTU1NzY4YmY5ZGY5NjE0MWVkZmI0ZGE=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-19T20:17:31Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-19T20:17:31Z"
        },
        "message": "Merge pull request #1062 from gsmet/add-missing-label-info\n\nAdd the missing fields for GHLabel",
        "tree": {
          "sha": "b0c03a2b3cc645af27ca401e4e3da53a164bf859",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/b0c03a2b3cc645af27ca401e4e3da53a164bf859"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/a7b4c97020b9e95f1555768bf9df96141edfb4da",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVQbbCRBK7hj4Ov3rIwAAdHIIAG8/UDnVb1l1iwW5pJ2YtoDv\nf6f1Dh6oi2Ej+g4tqYhvfWLDkggHbZDNgUEo/5WRiomQb+Y4l/LiHgED+ALp9MPt\n1+SQM6VB90ao5dU5fsBc/FlS8us+m0ql5UQ1JQHZ9pu59smr0PESHcstOXZO+Hhq\nItmzHC2etCGT9uebXG4muM34q73Gtmt9GKycXZUkmKQD9SD7hPGQ7S8VHJttY4Xm\nsosMKTwD8fW6NddzIVPnC/xOab7eKBCrPMGfpKgum+AEzSANEqSp0Dt1GdO78TFR\ntt1IS5DyKfphnmiiGPX8xkOuvM2stY7rl1wrT7QTz6tGHzp+xHAVm1Y4RLGl8lQ=\n=+l/Z\n-----END PGP SIGNATURE-----\n",
          "payload": "tree b0c03a2b3cc645af27ca401e4e3da53a164bf859\nparent a7cd052b7c264229c24a3c0ed7622441e1e9520d\nparent 420d5d06f37d42616defb10f9f9b5c523d19c035\nauthor Liam Newman <bitwiseman@gmail.com> 1616185051 -0700\ncommitter GitHub <noreply@github.com> 1616185051 -0700\n\nMerge pull request #1062 from gsmet/add-missing-label-info\n\nAdd the missing fields for GHLabel"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a7b4c97020b9e95f1555768bf9df96141edfb4da",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/a7b4c97020b9e95f1555768bf9df96141edfb4da",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a7b4c97020b9e95f1555768bf9df96141edfb4da/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "a7cd052b7c264229c24a3c0ed7622441e1e9520d",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a7cd052b7c264229c24a3c0ed7622441e1e9520d",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/a7cd052b7c264229c24a3c0ed7622441e1e9520d"
        },
        {
          "sha": "420d5d06f37d42616defb10f9f9b5c523d19c035",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/420d5d06f37d42616defb10f9f9b5c523d19c035",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/420d5d06f37d42616defb10f9f9b5c523d19c035"
        }
      ]
    },
    {
      "sha": "daf5c5eb98dd85e29aeec35fa907a62d86045315",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmRhZjVjNWViOThkZDg1ZTI5YWVlYzM1ZmE5MDdhNjJkODYwNDUzMTU=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-19T20:23:36Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-19T20:23:36Z"
        },
        "message": "Merge branch 'master' into remove-add-label-payload",
        "tree": {
          "sha": "2bf35f4985622bb7eaeaf2f88afc9af263d76eea",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/2bf35f4985622bb7eaeaf2f88afc9af263d76eea"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/daf5c5eb98dd85e29aeec35fa907a62d86045315",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVQhICRBK7hj4Ov3rIwAAdHIIAJ4Jy+b9QOFAJ5gY7+GnzESx\n5q7NqgvuKGAUD7mLwP+PfE/UovhuBEGjlvG5S7j8Hji6VS11IctVevcjwjn5oDrY\n5dtaoMMUBbItDEWZeEQ6RhMW+gThxs7zyoDfNTFA+6xMrry0FE83wlpi2zn/Fmho\nCl1zJw1s5TJjVJy/WnjcbtvX8ZT9K1Sj+RVrGkNWbN15bWyzK6WR4fxwUzm0YhqX\nDCkRCN713LyzolGKf/3ZvVFumTTDitf8qv28/+IWg6mZ7fV73Gb8TXWifeA0EboC\nwnGmRNl+/aRk3OUKHsIydpHR0buou5AezXP8gVmoe097//uuiCXOYsif1XyBRwE=\n=IArL\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 2bf35f4985622bb7eaeaf2f88afc9af263d76eea\nparent 850995710251520deff656ca1bad7240494c45bd\nparent a7b4c97020b9e95f1555768bf9df96141edfb4da\nauthor Liam Newman <bitwiseman@gmail.com> 1616185416 -0700\ncommitter GitHub <noreply@github.com> 1616185416 -0700\n\nMerge branch 'master' into remove-add-label-payload"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/daf5c5eb98dd85e29aeec35fa907a62d86045315",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/daf5c5eb98dd85e29aeec35fa907a62d86045315",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/daf5c5eb98dd85e29aeec35fa907a62d86045315/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "850995710251520deff656ca1bad7240494c45bd",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/850995710251520deff656ca1bad7240494c45bd",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/850995710251520deff656ca1bad7240494c45bd"
        },
        {
          "sha": "a7b4c97020b9e95f1555768bf9df96141edfb4da",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a7b4c97020b9e95f1555768bf9df96141edfb4da",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/a7b4c97020b9e95f1555768bf9df96141edfb4da"
        }
      ]
    },
    {
      "sha": "5194c2d9bc4086de97a9ae95879572e62e93f6fa",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjUxOTRjMmQ5YmM0MDg2ZGU5N2E5YWU5NTg3OTU3MmU2MmU5M2Y2ZmE=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-19T20:45:12Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-19T20:45:12Z"
        },
        "message": "Merge pull request #1061 from gsmet/remove-add-label-payload\n\nImplement getLabel() and getChanges() for GHEventPayload.Issue",
        "tree": {
          "sha": "2bf35f4985622bb7eaeaf2f88afc9af263d76eea",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/2bf35f4985622bb7eaeaf2f88afc9af263d76eea"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/5194c2d9bc4086de97a9ae95879572e62e93f6fa",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVQ1YCRBK7hj4Ov3rIwAAdHIIAAOQ6kpL+1chx2DN5ATijoVD\nQ2R3iPUjJrq9qlmsIXKqO4bgA4K3Sw2wEbXdude676Gp8FjNottJdUF0ADIc7gs4\nMeOdgppGmK4avnVvnIRcnYllcRdc4nKxqqcWm82bSypjILJI70+prjRjf06P2GUr\n9jvwtZz1OAwTW1rDXtOZhdbryGIDEy68OH+ItQGDzKM8eLVLwDsXDB2Zwmkphkin\nCzewgO6G1wzs7v/VN6LgoODCoZpSvgmxYUJ9+X+/gdpUU8ZnIJF6YX1hXeYry185\nD3Ti/HIcI2p1Ry9dgaIu9C/MibsAdB6qoMZkjukWnuB0j9ltvmcWizdyM6x5iWA=\n=IgHp\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 2bf35f4985622bb7eaeaf2f88afc9af263d76eea\nparent a7b4c97020b9e95f1555768bf9df96141edfb4da\nparent daf5c5eb98dd85e29aeec35fa907a62d86045315\nauthor Liam Newman <bitwiseman@gmail.com> 1616186712 -0700\ncommitter GitHub <noreply@github.com> 1616186712 -0700\n\nMerge pull request #1061 from gsmet/remove-add-label-payload\n\nImplement getLabel() and getChanges() for GHEventPayload.Issue"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/5194c2d9bc4086de97a9ae95879572e62e93f6fa",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/5194c2d9bc4086de97a9ae95879572e62e93f6fa",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/5194c2d9bc4086de97a9ae95879572e62e93f6fa/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "a7b4c97020b9e95f1555768bf9df96141edfb4da",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a7b4c97020b9e95f1555768bf9df96141edfb4da",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/a7b4c97020b9e95f1555768bf9df96141edfb4da"
        },
        {
          "sha": "daf5c5eb98dd85e29aeec35fa907a62d86045315",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/daf5c5eb98dd85e29aeec35fa907a62d86045315",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/daf5c5eb98dd85e29aeec35fa907a62d86045315"
        }
      ]
    },
    {
      "sha": "ae69324196c995a44244857b4fee3e34530a884f",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmFlNjkzMjQxOTZjOTk1YTQ0MjQ0ODU3YjRmZWUzZTM0NTMwYTg4NGY=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-19T20:48:39Z"
        },
        "committer": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-19T20:48:39Z"
        },
        "message": "[maven-release-plugin] prepare release github-api-1.124",
        "tree": {
          "sha": "185dc7080f6576dd96e2bb529fb4f0dcc6131b8f",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/185dc7080f6576dd96e2bb529fb4f0dcc6131b8f"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/ae69324196c995a44244857b4fee3e34530a884f",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/ae69324196c995a44244857b4fee3e34530a884f",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/ae69324196c995a44244857b4fee3e34530a884f",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/ae69324196c995a44244857b4fee3e34530a884f/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "5194c2d9bc4086de97a9ae95879572e62e93f6fa",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/5194c2d9bc4086de97a9ae95879572e62e93f6fa",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/5194c2d9bc4086de97a9ae95879572e62e93f6fa"
        }
      ]
    },
    {
      "sha": "e5222398328111b6672e485578addfa4a226869d",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmU1MjIyMzk4MzI4MTExYjY2NzJlNDg1NTc4YWRkZmE0YTIyNjg2OWQ=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-19T20:48:47Z"
        },
        "committer": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-19T20:48:47Z"
        },
        "message": "[maven-release-plugin] prepare for next development iteration",
        "tree": {
          "sha": "9383eb9f549551ac346e73fe2b97216b59e8e52f",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/9383eb9f549551ac346e73fe2b97216b59e8e52f"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/e5222398328111b6672e485578addfa4a226869d",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/e5222398328111b6672e485578addfa4a226869d",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/e5222398328111b6672e485578addfa4a226869d",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/e5222398328111b6672e485578addfa4a226869d/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "ae69324196c995a44244857b4fee3e34530a884f",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/ae69324196c995a44244857b4fee3e34530a884f",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/ae69324196c995a44244857b4fee3e34530a884f"
        }
      ]
    },
    {
      "sha": "fb03e749bdbe2f9c7be888b4148b171365588283",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmZiMDNlNzQ5YmRiZTJmOWM3YmU4ODhiNDE0OGIxNzEzNjU1ODgyODM=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-22T15:10:22Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-22T15:10:44Z"
        },
        "message": "Only execute slow-or-flaky-test if -Dtest= is not defined",
        "tree": {
          "sha": "4e4e86c4812bbc7b84025b59eec659dede244bc4",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/4e4e86c4812bbc7b84025b59eec659dede244bc4"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/fb03e749bdbe2f9c7be888b4148b171365588283",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fb03e749bdbe2f9c7be888b4148b171365588283",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/fb03e749bdbe2f9c7be888b4148b171365588283",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fb03e749bdbe2f9c7be888b4148b171365588283/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e5222398328111b6672e485578addfa4a226869d",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/e5222398328111b6672e485578addfa4a226869d",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/e5222398328111b6672e485578addfa4a226869d"
        }
      ]
    },
    {
      "sha": "042038f48049e6d568e78cf0eaefbe57cdfb5bf2",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjA0MjAzOGY0ODA0OWU2ZDU2OGU3OGNmMGVhZWZiZTU3Y2RmYjViZjI=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-15T19:22:36Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-23T14:35:39Z"
        },
        "message": "Implement GHWorkflow and GHWorkflowRun\n\nMost of the actions are implemented but not all.\nLooks like a good first step.",
        "tree": {
          "sha": "9e020ed7bc154be245209ba738c992d3a7b78fad",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/9e020ed7bc154be245209ba738c992d3a7b78fad"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/042038f48049e6d568e78cf0eaefbe57cdfb5bf2",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/042038f48049e6d568e78cf0eaefbe57cdfb5bf2",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/042038f48049e6d568e78cf0eaefbe57cdfb5bf2",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/042038f48049e6d568e78cf0eaefbe57cdfb5bf2/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "fb03e749bdbe2f9c7be888b4148b171365588283",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fb03e749bdbe2f9c7be888b4148b171365588283",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/fb03e749bdbe2f9c7be888b4148b171365588283"
        }
      ]
    },
    {
      "sha": "b8f00bc699c7de3667b236899fff6ec87d7038a8",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmI4ZjAwYmM2OTljN2RlMzY2N2IyMzY4OTlmZmY2ZWM4N2Q3MDM4YTg=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-23T14:34:11Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-23T14:35:58Z"
        },
        "message": "Adjust GHCheckRun so that status and conclusion are returned as enums\n\nProvide bridge methods for compatibility.",
        "tree": {
          "sha": "71bf6c8eb7a3fc4f894ca021adfdb1c36c36d0ef",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/71bf6c8eb7a3fc4f894ca021adfdb1c36c36d0ef"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/b8f00bc699c7de3667b236899fff6ec87d7038a8",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b8f00bc699c7de3667b236899fff6ec87d7038a8",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/b8f00bc699c7de3667b236899fff6ec87d7038a8",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b8f00bc699c7de3667b236899fff6ec87d7038a8/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "042038f48049e6d568e78cf0eaefbe57cdfb5bf2",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/042038f48049e6d568e78cf0eaefbe57cdfb5bf2",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/042038f48049e6d568e78cf0eaefbe57cdfb5bf2"
        }
      ]
    },
    {
      "sha": "8919c5f8c71611f77fc6fdeabe818c4016ca39c8",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjg5MTljNWY4YzcxNjExZjc3ZmM2ZmRlYWJlODE4YzQwMTZjYTM5Yzg=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-24T09:38:24Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-24T09:38:24Z"
        },
        "message": "Implement GHEventPayload.WorkflowRun and GHEventPayload.WorkflowDispatch\n\nFixes #1037",
        "tree": {
          "sha": "bdfdd0c5a8472ba30c104ec8061fb80d61592082",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/bdfdd0c5a8472ba30c104ec8061fb80d61592082"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/8919c5f8c71611f77fc6fdeabe818c4016ca39c8",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8919c5f8c71611f77fc6fdeabe818c4016ca39c8",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/8919c5f8c71611f77fc6fdeabe818c4016ca39c8",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8919c5f8c71611f77fc6fdeabe818c4016ca39c8/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "b8f00bc699c7de3667b236899fff6ec87d7038a8",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b8f00bc699c7de3667b236899fff6ec87d7038a8",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/b8f00bc699c7de3667b236899fff6ec87d7038a8"
        }
      ]
    },
    {
      "sha": "57cdc308e846673c727539a10a492c166f03f97c",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjU3Y2RjMzA4ZTg0NjY3M2M3Mjc1MzlhMTBhNDkyYzE2NmYwM2Y5N2M=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-24T20:32:10Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-24T20:32:10Z"
        },
        "message": "Adjust EnumUtils method name and add javadoc",
        "tree": {
          "sha": "b7a29f7503427d6b9f71df862ab5c8e0ec830c81",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/b7a29f7503427d6b9f71df862ab5c8e0ec830c81"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/57cdc308e846673c727539a10a492c166f03f97c",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/57cdc308e846673c727539a10a492c166f03f97c",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/57cdc308e846673c727539a10a492c166f03f97c",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/57cdc308e846673c727539a10a492c166f03f97c/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8919c5f8c71611f77fc6fdeabe818c4016ca39c8",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8919c5f8c71611f77fc6fdeabe818c4016ca39c8",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/8919c5f8c71611f77fc6fdeabe818c4016ca39c8"
        }
      ]
    },
    {
      "sha": "47e2a5aea1553806829d93170f42b9d0b11bbf68",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjQ3ZTJhNWFlYTE1NTM4MDY4MjlkOTMxNzBmNDJiOWQwYjExYmJmNjg=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-25T10:00:17Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-25T10:00:17Z"
        },
        "message": "Rearchitecture GHWorkflowRunTest\n\nWe don't record the polling requests and we avoid any polling when not\nrecording.",
        "tree": {
          "sha": "01de9e452b88e6c64518c5874419a5ffc523a119",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/01de9e452b88e6c64518c5874419a5ffc523a119"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/47e2a5aea1553806829d93170f42b9d0b11bbf68",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/47e2a5aea1553806829d93170f42b9d0b11bbf68",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/47e2a5aea1553806829d93170f42b9d0b11bbf68",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/47e2a5aea1553806829d93170f42b9d0b11bbf68/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "57cdc308e846673c727539a10a492c166f03f97c",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/57cdc308e846673c727539a10a492c166f03f97c",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/57cdc308e846673c727539a10a492c166f03f97c"
        }
      ]
    },
    {
      "sha": "d734237788418567f071921a171208b293c81fb3",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmQ3MzQyMzc3ODg0MTg1NjdmMDcxOTIxYTE3MTIwOGIyOTNjODFmYjM=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-25T10:37:13Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-25T10:37:13Z"
        },
        "message": "Add some assertions for GHWorkflow dispatch tests",
        "tree": {
          "sha": "55080d8595c7ecd678dd650628365a74422c59ba",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/55080d8595c7ecd678dd650628365a74422c59ba"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/d734237788418567f071921a171208b293c81fb3",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/d734237788418567f071921a171208b293c81fb3",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/d734237788418567f071921a171208b293c81fb3",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/d734237788418567f071921a171208b293c81fb3/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "47e2a5aea1553806829d93170f42b9d0b11bbf68",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/47e2a5aea1553806829d93170f42b9d0b11bbf68",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/47e2a5aea1553806829d93170f42b9d0b11bbf68"
        }
      ]
    },
    {
      "sha": "551dbf2a064f83f671aab942de83f3ca3f482096",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjU1MWRiZjJhMDY0ZjgzZjY3MWFhYjk0MmRlODNmM2NhM2Y0ODIwOTY=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-25T19:20:46Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-25T19:20:46Z"
        },
        "message": "Merge pull request #1064 from gsmet/workflow-runs\n\nImplement GHWorkflow, GHWorkflowRun and associated payloads",
        "tree": {
          "sha": "55080d8595c7ecd678dd650628365a74422c59ba",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/55080d8595c7ecd678dd650628365a74422c59ba"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/551dbf2a064f83f671aab942de83f3ca3f482096",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgXOKOCRBK7hj4Ov3rIwAAdHIIAIqRCnoeGmo9d7NbqxlpeWg0\nfHsvaAhQYlRoqD9B50jR3IwwFaw1fhMz+TDhwJUAXoH0ZTgzQRdoauut0xXQ5b1V\n2hiBM6CkRGlELswn2qdVl6cxC/Ckjh7IloGhGbcwYaId1HKZNiFvsL6i1JIbKFtI\nhZjgdfcLF8W5c71GNEfVvPUWOnK5FrftI6bZCLfSsCzvxDwSBr2jeJ7EFCapoUiQ\nDVRMV6L+Pi0Ap2+KpLnh/UL3H3ie/7WwB83rJK1mAfwiGJ33368klzFBDsecAfgg\nTvdah0GE9tPR+Q9yUGZKx2NoOEHA4Ikv8Cpd9GyjTSK7sIRQ/FF0JqOD9RS8LgQ=\n=n5WL\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 55080d8595c7ecd678dd650628365a74422c59ba\nparent e5222398328111b6672e485578addfa4a226869d\nparent d734237788418567f071921a171208b293c81fb3\nauthor Liam Newman <bitwiseman@gmail.com> 1616700046 -0700\ncommitter GitHub <noreply@github.com> 1616700046 -0700\n\nMerge pull request #1064 from gsmet/workflow-runs\n\nImplement GHWorkflow, GHWorkflowRun and associated payloads"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/551dbf2a064f83f671aab942de83f3ca3f482096",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/551dbf2a064f83f671aab942de83f3ca3f482096",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/551dbf2a064f83f671aab942de83f3ca3f482096/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e5222398328111b6672e485578addfa4a226869d",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/e5222398328111b6672e485578addfa4a226869d",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/e5222398328111b6672e485578addfa4a226869d"
        },
        {
          "sha": "d734237788418567f071921a171208b293c81fb3",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/d734237788418567f071921a171208b293c81fb3",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/d734237788418567f071921a171208b293c81fb3"
        }
      ]
    },
    {
      "sha": "6606b5c7d1b5b830792a0aa6ba74e72edae77905",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjY2MDZiNWM3ZDFiNWI4MzA3OTJhMGFhNmJhNzRlNzJlZGFlNzc5MDU=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-25T19:44:06Z"
        },
        "committer": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-25T19:44:06Z"
        },
        "message": "[maven-release-plugin] prepare release github-api-1.125",
        "tree": {
          "sha": "838c581781c6a6f0d6f2c065afb1751ce92a9cb9",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/838c581781c6a6f0d6f2c065afb1751ce92a9cb9"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/6606b5c7d1b5b830792a0aa6ba74e72edae77905",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6606b5c7d1b5b830792a0aa6ba74e72edae77905",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/6606b5c7d1b5b830792a0aa6ba74e72edae77905",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6606b5c7d1b5b830792a0aa6ba74e72edae77905/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "551dbf2a064f83f671aab942de83f3ca3f482096",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/551dbf2a064f83f671aab942de83f3ca3f482096",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/551dbf2a064f83f671aab942de83f3ca3f482096"
        }
      ]
    },
    {
      "sha": "cdc0e2ad6bc395af0a731bbe47e1eae3edd6a1d8",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmNkYzBlMmFkNmJjMzk1YWYwYTczMWJiZTQ3ZTFlYWUzZWRkNmExZDg=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-25T19:44:21Z"
        },
        "committer": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-25T19:44:21Z"
        },
        "message": "[maven-release-plugin] prepare for next development iteration",
        "tree": {
          "sha": "b38b58111e25487edd65c54c3f20057ae88bc66a",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/b38b58111e25487edd65c54c3f20057ae88bc66a"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/cdc0e2ad6bc395af0a731bbe47e1eae3edd6a1d8",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/cdc0e2ad6bc395af0a731bbe47e1eae3edd6a1d8",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/cdc0e2ad6bc395af0a731bbe47e1eae3edd6a1d8",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/cdc0e2ad6bc395af0a731bbe47e1eae3edd6a1d8/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "6606b5c7d1b5b830792a0aa6ba74e72edae77905",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6606b5c7d1b5b830792a0aa6ba74e72edae77905",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/6606b5c7d1b5b830792a0aa6ba74e72edae77905"
        }
      ]
    },
    {
      "sha": "c19cfd98d136de18e3ea96d9c1bb722c627776ca",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmMxOWNmZDk4ZDEzNmRlMThlM2VhOTZkOWMxYmI3MjJjNjI3Nzc2Y2E=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-29T18:10:18Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-03-30T17:56:52Z"
        },
        "message": "Fix GHRepository#listWorkflows() and add a test",
        "tree": {
          "sha": "75914df5baeccd44fe6d302ebb7e17e9ef781939",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/75914df5baeccd44fe6d302ebb7e17e9ef781939"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/c19cfd98d136de18e3ea96d9c1bb722c627776ca",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/c19cfd98d136de18e3ea96d9c1bb722c627776ca",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/c19cfd98d136de18e3ea96d9c1bb722c627776ca",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/c19cfd98d136de18e3ea96d9c1bb722c627776ca/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "cdc0e2ad6bc395af0a731bbe47e1eae3edd6a1d8",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/cdc0e2ad6bc395af0a731bbe47e1eae3edd6a1d8",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/cdc0e2ad6bc395af0a731bbe47e1eae3edd6a1d8"
        }
      ]
    },
    {
      "sha": "b0693037f388c32d0c7bad60ae351e84d75367d0",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmIwNjkzMDM3ZjM4OGMzMmQwYzdiYWQ2MGFlMzUxZTg0ZDc1MzY3ZDA=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-30T18:42:20Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-03-30T18:42:20Z"
        },
        "message": "Merge pull request #1067 from gsmet/proper-workflow-list-test\n\nFix GHRepository#listWorkflows() and add a test",
        "tree": {
          "sha": "75914df5baeccd44fe6d302ebb7e17e9ef781939",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/75914df5baeccd44fe6d302ebb7e17e9ef781939"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/b0693037f388c32d0c7bad60ae351e84d75367d0",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgY3EMCRBK7hj4Ov3rIwAAdHIIAHBFL6pWq3hZa/8O7wn07TO1\ne7X87Ux7Y1xbbpQSV2W0+bws+J+mZtlCP8PZ2LB4iSLQiZiZoI6nzLfv4niHENXZ\ntkc2XLgqsYPadRx3I+QyQbbsSpcYglud/AJ8EOnylIk40jsiH8xBQt0ZlFxzIxDs\njQ2azne3CW5jTF3w/MRxeXTfWa2ZbxhZ1GISZZVDAqLwukyJH/Sl90JYKkNtZx2M\nKpRasQBgeG/n0c2wA0Agyhwe3+t8AHFn/KHwNTys6ZscZYadYHqZEskrFGnvMJle\nYfjzCCMifeVPq24XZKFRVvOLcDUIbb5FkBYFDDXLyxWNfX6pXobadPTOtYKoEdk=\n=spYa\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 75914df5baeccd44fe6d302ebb7e17e9ef781939\nparent cdc0e2ad6bc395af0a731bbe47e1eae3edd6a1d8\nparent c19cfd98d136de18e3ea96d9c1bb722c627776ca\nauthor Liam Newman <bitwiseman@gmail.com> 1617129740 -0700\ncommitter GitHub <noreply@github.com> 1617129740 -0700\n\nMerge pull request #1067 from gsmet/proper-workflow-list-test\n\nFix GHRepository#listWorkflows() and add a test"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b0693037f388c32d0c7bad60ae351e84d75367d0",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/b0693037f388c32d0c7bad60ae351e84d75367d0",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b0693037f388c32d0c7bad60ae351e84d75367d0/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "cdc0e2ad6bc395af0a731bbe47e1eae3edd6a1d8",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/cdc0e2ad6bc395af0a731bbe47e1eae3edd6a1d8",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/cdc0e2ad6bc395af0a731bbe47e1eae3edd6a1d8"
        },
        {
          "sha": "c19cfd98d136de18e3ea96d9c1bb722c627776ca",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/c19cfd98d136de18e3ea96d9c1bb722c627776ca",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/c19cfd98d136de18e3ea96d9c1bb722c627776ca"
        }
      ]
    },
    {
      "sha": "99aea9296e442093ff7e542d4a7f3170c514ff4f",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjk5YWVhOTI5NmU0NDIwOTNmZjdlNTQyZDRhN2YzMTcwYzUxNGZmNGY=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-30T18:45:11Z"
        },
        "committer": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-30T18:45:11Z"
        },
        "message": "[maven-release-plugin] prepare release github-api-1.126",
        "tree": {
          "sha": "69e133e0aa85233119f170f77be9bc44f7bb42d4",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/69e133e0aa85233119f170f77be9bc44f7bb42d4"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/99aea9296e442093ff7e542d4a7f3170c514ff4f",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/99aea9296e442093ff7e542d4a7f3170c514ff4f",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/99aea9296e442093ff7e542d4a7f3170c514ff4f",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/99aea9296e442093ff7e542d4a7f3170c514ff4f/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "b0693037f388c32d0c7bad60ae351e84d75367d0",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b0693037f388c32d0c7bad60ae351e84d75367d0",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/b0693037f388c32d0c7bad60ae351e84d75367d0"
        }
      ]
    },
    {
      "sha": "dc46341432471aaa7383a7421192b14ac8dadaf2",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmRjNDYzNDE0MzI0NzFhYWE3MzgzYTc0MjExOTJiMTRhYzhkYWRhZjI=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-30T18:51:11Z"
        },
        "committer": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-30T18:51:11Z"
        },
        "message": "Revert \"[maven-release-plugin] prepare release github-api-1.126\"\n\nThis reverts commit 99aea9296e442093ff7e542d4a7f3170c514ff4f.",
        "tree": {
          "sha": "75914df5baeccd44fe6d302ebb7e17e9ef781939",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/75914df5baeccd44fe6d302ebb7e17e9ef781939"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/dc46341432471aaa7383a7421192b14ac8dadaf2",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/dc46341432471aaa7383a7421192b14ac8dadaf2",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/dc46341432471aaa7383a7421192b14ac8dadaf2",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/dc46341432471aaa7383a7421192b14ac8dadaf2/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "99aea9296e442093ff7e542d4a7f3170c514ff4f",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/99aea9296e442093ff7e542d4a7f3170c514ff4f",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/99aea9296e442093ff7e542d4a7f3170c514ff4f"
        }
      ]
    },
    {
      "sha": "304ab10cf9b9f60a8e605805d78a7ae616b3eff4",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjMwNGFiMTBjZjliOWY2MGE4ZTYwNTgwNWQ3OGE3YWU2MTZiM2VmZjQ=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-30T18:52:06Z"
        },
        "committer": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-30T18:52:06Z"
        },
        "message": "[maven-release-plugin] prepare release github-api-1.126",
        "tree": {
          "sha": "69e133e0aa85233119f170f77be9bc44f7bb42d4",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/69e133e0aa85233119f170f77be9bc44f7bb42d4"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/304ab10cf9b9f60a8e605805d78a7ae616b3eff4",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/304ab10cf9b9f60a8e605805d78a7ae616b3eff4",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/304ab10cf9b9f60a8e605805d78a7ae616b3eff4",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/304ab10cf9b9f60a8e605805d78a7ae616b3eff4/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "dc46341432471aaa7383a7421192b14ac8dadaf2",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/dc46341432471aaa7383a7421192b14ac8dadaf2",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/dc46341432471aaa7383a7421192b14ac8dadaf2"
        }
      ]
    },
    {
      "sha": "a68d16d5de6da437fa493f3bd524de03eaaee1ad",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmE2OGQxNmQ1ZGU2ZGE0MzdmYTQ5M2YzYmQ1MjRkZTAzZWFhZWUxYWQ=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-30T18:52:44Z"
        },
        "committer": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-03-30T18:52:44Z"
        },
        "message": "[maven-release-plugin] prepare for next development iteration",
        "tree": {
          "sha": "5aad8a22daed7aa480d31ffe1e001332e4384c78",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/5aad8a22daed7aa480d31ffe1e001332e4384c78"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/a68d16d5de6da437fa493f3bd524de03eaaee1ad",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a68d16d5de6da437fa493f3bd524de03eaaee1ad",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/a68d16d5de6da437fa493f3bd524de03eaaee1ad",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a68d16d5de6da437fa493f3bd524de03eaaee1ad/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "304ab10cf9b9f60a8e605805d78a7ae616b3eff4",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/304ab10cf9b9f60a8e605805d78a7ae616b3eff4",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/304ab10cf9b9f60a8e605805d78a7ae616b3eff4"
        }
      ]
    },
    {
      "sha": "2682e0a1e276b0bab4ed6be47de9d761fb986bac",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjI2ODJlMGExZTI3NmIwYmFiNGVkNmJlNDdkZTlkNzYxZmI5ODZiYWM=",
      "commit": {
        "author": {
          "name": "dependabot[bot]",
          "email": "49699333+dependabot[bot]@users.noreply.github.com",
          "date": "2021-04-01T02:00:30Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-01T02:00:30Z"
        },
        "message": "Chore(deps): Bump spotless-maven-plugin from 2.8.1 to 2.9.0\n\nBumps [spotless-maven-plugin](https://github.com/diffplug/project) from 2.8.1 to 2.9.0.\n- [Release notes](https://github.com/diffplug/project/releases)\n- [Commits](https://github.com/diffplug/project/commits)\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "tree": {
          "sha": "96ee6fd8a343a9ddfd91a67091da29f6e0b96337",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/96ee6fd8a343a9ddfd91a67091da29f6e0b96337"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/2682e0a1e276b0bab4ed6be47de9d761fb986bac",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZSk+CRBK7hj4Ov3rIwAAdHIIAKq/VZIh3dU11qXqDBAZuOaD\n/hK8TQg3870bGwGrDmx7DlomUbPzE8Z3b8o+417EhpUN7kxVTcLqb2QIS/6r/IpS\nDBwUTkWrbHmc7duzFuq3ZntyfTE7AsGXwTDnK7TrCCbk1/uIUAhIkyZ/wTVbp2Cd\nDdTaHv9uqzCYmaDOTM7Iq2KM5rfX5tuAFUyyS7zkh5xdf6W4NHShtadl5vbwO+ht\nEwm7F+uW0dM/vxMII5S6M0TgXs7vf9iXqelhqiaYAkui1K9Cxb3Ho/7f6Cwp4h2k\n/Z6Ust0tBFdWETmGIxhTQ74UYleNXYksXcu/ZqFDUTG/Zl+ktDXbz+AtmPATz7E=\n=UsA/\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 96ee6fd8a343a9ddfd91a67091da29f6e0b96337\nparent a68d16d5de6da437fa493f3bd524de03eaaee1ad\nauthor dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> 1617242430 +0000\ncommitter GitHub <noreply@github.com> 1617242430 +0000\n\nChore(deps): Bump spotless-maven-plugin from 2.8.1 to 2.9.0\n\nBumps [spotless-maven-plugin](https://github.com/diffplug/project) from 2.8.1 to 2.9.0.\n- [Release notes](https://github.com/diffplug/project/releases)\n- [Commits](https://github.com/diffplug/project/commits)\n\nSigned-off-by: dependabot[bot] <support@github.com>"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/2682e0a1e276b0bab4ed6be47de9d761fb986bac",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/2682e0a1e276b0bab4ed6be47de9d761fb986bac",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/2682e0a1e276b0bab4ed6be47de9d761fb986bac/comments",
      "author": {
        "login": "dependabot[bot]",
        "id": 49699333,
        "node_id": "MDM6Qm90NDk2OTkzMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/in/29110?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dependabot%5Bbot%5D",
        "html_url": "https://github.com/apps/dependabot",
        "followers_url": "https://api.github.com/users/dependabot%5Bbot%5D/followers",
        "following_url": "https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}",
        "gists_url": "https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dependabot%5Bbot%5D/subscriptions",
        "organizations_url": "https://api.github.com/users/dependabot%5Bbot%5D/orgs",
        "repos_url": "https://api.github.com/users/dependabot%5Bbot%5D/repos",
        "events_url": "https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dependabot%5Bbot%5D/received_events",
        "type": "Bot",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "a68d16d5de6da437fa493f3bd524de03eaaee1ad",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a68d16d5de6da437fa493f3bd524de03eaaee1ad",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/a68d16d5de6da437fa493f3bd524de03eaaee1ad"
        }
      ]
    },
    {
      "sha": "5eef764cbaa8bbc1d426e83a0df78789522803bf",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjVlZWY3NjRjYmFhOGJiYzFkNDI2ZTgzYTBkZjc4Nzg5NTIyODAzYmY=",
      "commit": {
        "author": {
          "name": "dependabot[bot]",
          "email": "49699333+dependabot[bot]@users.noreply.github.com",
          "date": "2021-04-01T02:00:41Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-01T02:00:41Z"
        },
        "message": "Chore(deps-dev): Bump org.eclipse.jgit\n\nBumps org.eclipse.jgit from 5.10.0.202012080955-r to 5.11.0.202103091610-r.\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "tree": {
          "sha": "c6a3f4d4618ec21e5246b65bac209a864e4d3556",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/c6a3f4d4618ec21e5246b65bac209a864e4d3556"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/5eef764cbaa8bbc1d426e83a0df78789522803bf",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZSlJCRBK7hj4Ov3rIwAAdHIIAExn/cS0FGT7bdsS8FGfiUyX\nHWuSamhFpAA8DmMeH7OQP9JQ7SB0ax6jhT5vEUj0uMNjCZM+pYyphe4GgjM4E1F6\nKwwdo19riRDxUdBxhFIKen+hI88CsozjusCMHuRrc2VsQFdmH3re2oHLv8N25uMy\nyLU7bYWgJ8nbwGpWy890R+MLy7OosBv9axCgoo4VEL8GtO/RFw5EhssJ/6cguzv7\nembMF21T6agvM4lgoDt46/R2nC6fN37vA74yYhPsJVIt4xWuCfdthZJDQJUFuo5y\n0uY8WozBWPLjHPusApWC1P23rIh0yVqjUNx/ihfgeGlgiXIwwVCSqk+Zvj4uWrM=\n=QV5w\n-----END PGP SIGNATURE-----\n",
          "payload": "tree c6a3f4d4618ec21e5246b65bac209a864e4d3556\nparent a68d16d5de6da437fa493f3bd524de03eaaee1ad\nauthor dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> 1617242441 +0000\ncommitter GitHub <noreply@github.com> 1617242441 +0000\n\nChore(deps-dev): Bump org.eclipse.jgit\n\nBumps org.eclipse.jgit from 5.10.0.202012080955-r to 5.11.0.202103091610-r.\n\nSigned-off-by: dependabot[bot] <support@github.com>"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/5eef764cbaa8bbc1d426e83a0df78789522803bf",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/5eef764cbaa8bbc1d426e83a0df78789522803bf",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/5eef764cbaa8bbc1d426e83a0df78789522803bf/comments",
      "author": {
        "login": "dependabot[bot]",
        "id": 49699333,
        "node_id": "MDM6Qm90NDk2OTkzMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/in/29110?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dependabot%5Bbot%5D",
        "html_url": "https://github.com/apps/dependabot",
        "followers_url": "https://api.github.com/users/dependabot%5Bbot%5D/followers",
        "following_url": "https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}",
        "gists_url": "https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dependabot%5Bbot%5D/subscriptions",
        "organizations_url": "https://api.github.com/users/dependabot%5Bbot%5D/orgs",
        "repos_url": "https://api.github.com/users/dependabot%5Bbot%5D/repos",
        "events_url": "https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dependabot%5Bbot%5D/received_events",
        "type": "Bot",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "a68d16d5de6da437fa493f3bd524de03eaaee1ad",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a68d16d5de6da437fa493f3bd524de03eaaee1ad",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/a68d16d5de6da437fa493f3bd524de03eaaee1ad"
        }
      ]
    },
    {
      "sha": "c5c04672fca731b58ef24109b748ac77ebb3f0e9",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmM1YzA0NjcyZmNhNzMxYjU4ZWYyNDEwOWI3NDhhYzc3ZWJiM2YwZTk=",
      "commit": {
        "author": {
          "name": "dependabot[bot]",
          "email": "49699333+dependabot[bot]@users.noreply.github.com",
          "date": "2021-04-01T02:00:51Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-01T02:00:51Z"
        },
        "message": "Chore(deps-dev): Bump mockito-core from 3.7.7 to 3.8.0\n\nBumps [mockito-core](https://github.com/mockito/mockito) from 3.7.7 to 3.8.0.\n- [Release notes](https://github.com/mockito/mockito/releases)\n- [Commits](https://github.com/mockito/mockito/compare/v3.7.7...v3.8.0)\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "tree": {
          "sha": "44bee9d39247d1e44d5e47e3119492bcbb6c4d80",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/44bee9d39247d1e44d5e47e3119492bcbb6c4d80"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/c5c04672fca731b58ef24109b748ac77ebb3f0e9",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZSlTCRBK7hj4Ov3rIwAAdHIIAINgKOdL/fLYMQ/Vtjecz3TQ\nV/oOgqXLTRBmxWhvz3MbiBS6afN3tAtHqwblYeRTZdPO39BV9TmT8OwKJGRYY9iw\no+4QZkBS9bXGORrFeCekuNVQ1I/MZjvJLWOuxEJNl/b21CiWCX7iXGgUin2vi470\nxp9i0FEDHRvCKsipQhBIq079pd4if6gBeteZRoaSjV4e8eOehB7H1GvI3M482Oc4\nUwCZGwo7MN7zTNvd2/d+VDHzM4GEPFmgQcVtJ2F4gXUvUIvGJGHGuswTXBu1Mums\nIzk85Ta4N/1uH/HU8YeiZj+vLvqfqQo6S8Hl32ZYMY+1cqQLtuskR3hH2/gsGwo=\n=cUa0\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 44bee9d39247d1e44d5e47e3119492bcbb6c4d80\nparent a68d16d5de6da437fa493f3bd524de03eaaee1ad\nauthor dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> 1617242451 +0000\ncommitter GitHub <noreply@github.com> 1617242451 +0000\n\nChore(deps-dev): Bump mockito-core from 3.7.7 to 3.8.0\n\nBumps [mockito-core](https://github.com/mockito/mockito) from 3.7.7 to 3.8.0.\n- [Release notes](https://github.com/mockito/mockito/releases)\n- [Commits](https://github.com/mockito/mockito/compare/v3.7.7...v3.8.0)\n\nSigned-off-by: dependabot[bot] <support@github.com>"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/c5c04672fca731b58ef24109b748ac77ebb3f0e9",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/c5c04672fca731b58ef24109b748ac77ebb3f0e9",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/c5c04672fca731b58ef24109b748ac77ebb3f0e9/comments",
      "author": {
        "login": "dependabot[bot]",
        "id": 49699333,
        "node_id": "MDM6Qm90NDk2OTkzMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/in/29110?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dependabot%5Bbot%5D",
        "html_url": "https://github.com/apps/dependabot",
        "followers_url": "https://api.github.com/users/dependabot%5Bbot%5D/followers",
        "following_url": "https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}",
        "gists_url": "https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dependabot%5Bbot%5D/subscriptions",
        "organizations_url": "https://api.github.com/users/dependabot%5Bbot%5D/orgs",
        "repos_url": "https://api.github.com/users/dependabot%5Bbot%5D/repos",
        "events_url": "https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dependabot%5Bbot%5D/received_events",
        "type": "Bot",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "a68d16d5de6da437fa493f3bd524de03eaaee1ad",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a68d16d5de6da437fa493f3bd524de03eaaee1ad",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/a68d16d5de6da437fa493f3bd524de03eaaee1ad"
        }
      ]
    },
    {
      "sha": "435272065ff795608fa590d6aae996a351999e2c",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjQzNTI3MjA2NWZmNzk1NjA4ZmE1OTBkNmFhZTk5NmEzNTE5OTllMmM=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-01T19:54:37Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-01T19:54:37Z"
        },
        "message": "Merge pull request #1069 from hub4j/dependabot/maven/com.diffplug.spotless-spotless-maven-plugin-2.9.0\n\nChore(deps): Bump spotless-maven-plugin from 2.8.1 to 2.9.0",
        "tree": {
          "sha": "96ee6fd8a343a9ddfd91a67091da29f6e0b96337",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/96ee6fd8a343a9ddfd91a67091da29f6e0b96337"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/435272065ff795608fa590d6aae996a351999e2c",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZiT9CRBK7hj4Ov3rIwAAdHIIAEEkPhHyhAZQrPmcw6lKDsRm\nBqtzWAkGYz4XZqh0DoW0uL1YhYFWfyvSFh8kzWkhv2fCjdvdSqpj8QlDEPrsh+t3\nZaYlF9TFqoTcWzDLeUMJnCYoUtGaOwUL9CruBb7OHYpOG/tz4hS+UQvhJm/9cmHf\ntMG7nebl03l7TV4TerdncRoC7rbJRDLniwSamgYtzFJNQSs4+ovb1iZWWTsTjTqO\nmwz0v6v4DAQjomBZ5FsQIYLiMtsUa+4/ldLTaqWGyfyj25syFJQbIgNL3NpE1hf3\n0vUYIgUx/sI7Wr7Q57Y7NZmF0v2jzYIMhtbP7RI1jW0jlZZCRdF5c+ZUiA9sCFw=\n=rt24\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 96ee6fd8a343a9ddfd91a67091da29f6e0b96337\nparent a68d16d5de6da437fa493f3bd524de03eaaee1ad\nparent 2682e0a1e276b0bab4ed6be47de9d761fb986bac\nauthor Liam Newman <bitwiseman@gmail.com> 1617306877 -0700\ncommitter GitHub <noreply@github.com> 1617306877 -0700\n\nMerge pull request #1069 from hub4j/dependabot/maven/com.diffplug.spotless-spotless-maven-plugin-2.9.0\n\nChore(deps): Bump spotless-maven-plugin from 2.8.1 to 2.9.0"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/435272065ff795608fa590d6aae996a351999e2c",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/435272065ff795608fa590d6aae996a351999e2c",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/435272065ff795608fa590d6aae996a351999e2c/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "a68d16d5de6da437fa493f3bd524de03eaaee1ad",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/a68d16d5de6da437fa493f3bd524de03eaaee1ad",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/a68d16d5de6da437fa493f3bd524de03eaaee1ad"
        },
        {
          "sha": "2682e0a1e276b0bab4ed6be47de9d761fb986bac",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/2682e0a1e276b0bab4ed6be47de9d761fb986bac",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/2682e0a1e276b0bab4ed6be47de9d761fb986bac"
        }
      ]
    },
    {
      "sha": "acab40b704e3d6ad2a1883b1b363d711a2bee955",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmFjYWI0MGI3MDRlM2Q2YWQyYTE4ODNiMWIzNjNkNzExYTJiZWU5NTU=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-01T19:54:51Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-01T19:54:51Z"
        },
        "message": "Merge pull request #1073 from hub4j/dependabot/maven/org.mockito-mockito-core-3.8.0\n\nChore(deps-dev): Bump mockito-core from 3.7.7 to 3.8.0",
        "tree": {
          "sha": "465f53da182db561ded27783881080f1f5f1c019",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/465f53da182db561ded27783881080f1f5f1c019"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/acab40b704e3d6ad2a1883b1b363d711a2bee955",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZiULCRBK7hj4Ov3rIwAAdHIIABWgbgXIV2B6JzYo5tuShw65\nOT06oGe1w21VvfgFGt67nQuHMJ1h/0tRd5nPj1qpFIbCqhtFeg3LFrvSFyu2M9cV\n8bPqVqNMZ7j5NrAvAobQslp3XfD6DvvGXyziG3ePCNPuvwS3kbWIT/blElyj4aDN\ndvV3QU2ewo8m499bRrBqVnoRLglURsnCRPdohAjdyBpq0Dfu9xl02w/qlZEKnxwi\nTAqYlygLkJ4X6d6ndFBdiAHYfcMVks2aQgN1J5rbxnDA2z0oNwOpQmSESWXSqCJG\nL3KvsZBx1p3qsbb1HHIJtiaM7K7UjG90qO+omlc7LERExCozlZI55ZOLix3qw4s=\n=6vCH\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 465f53da182db561ded27783881080f1f5f1c019\nparent 435272065ff795608fa590d6aae996a351999e2c\nparent c5c04672fca731b58ef24109b748ac77ebb3f0e9\nauthor Liam Newman <bitwiseman@gmail.com> 1617306891 -0700\ncommitter GitHub <noreply@github.com> 1617306891 -0700\n\nMerge pull request #1073 from hub4j/dependabot/maven/org.mockito-mockito-core-3.8.0\n\nChore(deps-dev): Bump mockito-core from 3.7.7 to 3.8.0"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/acab40b704e3d6ad2a1883b1b363d711a2bee955",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/acab40b704e3d6ad2a1883b1b363d711a2bee955",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/acab40b704e3d6ad2a1883b1b363d711a2bee955/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "435272065ff795608fa590d6aae996a351999e2c",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/435272065ff795608fa590d6aae996a351999e2c",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/435272065ff795608fa590d6aae996a351999e2c"
        },
        {
          "sha": "c5c04672fca731b58ef24109b748ac77ebb3f0e9",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/c5c04672fca731b58ef24109b748ac77ebb3f0e9",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/c5c04672fca731b58ef24109b748ac77ebb3f0e9"
        }
      ]
    },
    {
      "sha": "feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmZlYmE2ZWQ4YjY1YTAzZDBiOWJjYjdmMTc3YTQ3YjdlOWM3NzQ4Zjc=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-01T19:55:05Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-01T19:55:05Z"
        },
        "message": "Merge pull request #1072 from hub4j/dependabot/maven/org.eclipse.jgit-org.eclipse.jgit-5.11.0.202103091610-r\n\nChore(deps-dev): Bump org.eclipse.jgit from 5.10.0.202012080955-r to 5.11.0.202103091610-r",
        "tree": {
          "sha": "e95f62d27eb9baee97b5ffa33f783291ef949d92",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/e95f62d27eb9baee97b5ffa33f783291ef949d92"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZiUZCRBK7hj4Ov3rIwAAdHIIAJniD6yZgkaFSM9l9PoKl9/X\njbtT9pmUhzYMymfAQPVtyhBY++j5LAxqx8lQt+M9oWZiehQVhnwhnCerREVhJUnk\n5o9a97j1AC3EJqgxg2kRIUeqFFiXb+Ecrp9BhZZ+7MNff68CCT2AOcZsFI5BVNg2\nCgxT7uXpTxRPcGuwZVTljJx5v2n7j39nvll5XTCzZw2DSipvx7LQ4ot/TOhWChGy\n5ycO6BBLlg4yPT8rrAF0U9No84oDhxG+tWVxQXGLyRw1CYfgMFVh+jDwV/DEbYiP\nD1D2jqM4gv6m7H4uVxV5RrXyYyHgJ7IIHNkOuNUAoSU/wPxjOVORvsxehV37zsU=\n=HVze\n-----END PGP SIGNATURE-----\n",
          "payload": "tree e95f62d27eb9baee97b5ffa33f783291ef949d92\nparent acab40b704e3d6ad2a1883b1b363d711a2bee955\nparent 5eef764cbaa8bbc1d426e83a0df78789522803bf\nauthor Liam Newman <bitwiseman@gmail.com> 1617306905 -0700\ncommitter GitHub <noreply@github.com> 1617306905 -0700\n\nMerge pull request #1072 from hub4j/dependabot/maven/org.eclipse.jgit-org.eclipse.jgit-5.11.0.202103091610-r\n\nChore(deps-dev): Bump org.eclipse.jgit from 5.10.0.202012080955-r to 5.11.0.202103091610-r"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "acab40b704e3d6ad2a1883b1b363d711a2bee955",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/acab40b704e3d6ad2a1883b1b363d711a2bee955",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/acab40b704e3d6ad2a1883b1b363d711a2bee955"
        },
        {
          "sha": "5eef764cbaa8bbc1d426e83a0df78789522803bf",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/5eef764cbaa8bbc1d426e83a0df78789522803bf",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/5eef764cbaa8bbc1d426e83a0df78789522803bf"
        }
      ]
    },
    {
      "sha": "9e47a2b8c679e02aa763495fc1a6cc9b5aaa4dd1",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjllNDdhMmI4YzY3OWUwMmFhNzYzNDk1ZmMxYTZjYzliNWFhYTRkZDE=",
      "commit": {
        "author": {
          "name": "dependabot[bot]",
          "email": "49699333+dependabot[bot]@users.noreply.github.com",
          "date": "2021-04-01T19:55:54Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-01T19:55:54Z"
        },
        "message": "Chore(deps): Bump spotbugs.version from 4.2.1 to 4.2.2\n\nBumps `spotbugs.version` from 4.2.1 to 4.2.2.\n\nUpdates `spotbugs` from 4.2.1 to 4.2.2\n- [Release notes](https://github.com/spotbugs/spotbugs/releases)\n- [Changelog](https://github.com/spotbugs/spotbugs/blob/master/CHANGELOG.md)\n- [Commits](https://github.com/spotbugs/spotbugs/compare/4.2.1...4.2.2)\n\nUpdates `spotbugs-annotations` from 4.2.1 to 4.2.2\n- [Release notes](https://github.com/spotbugs/spotbugs/releases)\n- [Changelog](https://github.com/spotbugs/spotbugs/blob/master/CHANGELOG.md)\n- [Commits](https://github.com/spotbugs/spotbugs/compare/4.2.1...4.2.2)\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "tree": {
          "sha": "6f8f319fdd85dc811027161355b0670e53d5c011",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/6f8f319fdd85dc811027161355b0670e53d5c011"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/9e47a2b8c679e02aa763495fc1a6cc9b5aaa4dd1",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZiVKCRBK7hj4Ov3rIwAAdHIIADq13a7EVxhLUzl3gmRWESic\nbcd3qiorpW8LSqVUDmCCENTp9IIPQaX4ecHA9hW/28HN3Xl6MZBhTgZwBK47vvuJ\nJyWClDfDN+tdLxJtJanG27p9APaUQKsJLqv18FOpgGTR6kXTQh3sjSg8BjygTlK8\nlYFeRgrBZDhSjomdwX2DYM3g3nxiJtvbBciLh+oaTwW74Rh1panMVKhjGbi5rKmQ\no9GKYuY+cPwlp/k024Mw0PyjsmTpRzk6imCBJae+vQKfP/lerXzQv9XsRT4cthlR\nG3hfrhXxFCa9F4VdZaOrzfRoLupncQsYHGcsTIye6S109dSeJ8wkMZoXe2HqOV0=\n=Fxcj\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 6f8f319fdd85dc811027161355b0670e53d5c011\nparent feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7\nauthor dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> 1617306954 +0000\ncommitter GitHub <noreply@github.com> 1617306954 +0000\n\nChore(deps): Bump spotbugs.version from 4.2.1 to 4.2.2\n\nBumps `spotbugs.version` from 4.2.1 to 4.2.2.\n\nUpdates `spotbugs` from 4.2.1 to 4.2.2\n- [Release notes](https://github.com/spotbugs/spotbugs/releases)\n- [Changelog](https://github.com/spotbugs/spotbugs/blob/master/CHANGELOG.md)\n- [Commits](https://github.com/spotbugs/spotbugs/compare/4.2.1...4.2.2)\n\nUpdates `spotbugs-annotations` from 4.2.1 to 4.2.2\n- [Release notes](https://github.com/spotbugs/spotbugs/releases)\n- [Changelog](https://github.com/spotbugs/spotbugs/blob/master/CHANGELOG.md)\n- [Commits](https://github.com/spotbugs/spotbugs/compare/4.2.1...4.2.2)\n\nSigned-off-by: dependabot[bot] <support@github.com>"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/9e47a2b8c679e02aa763495fc1a6cc9b5aaa4dd1",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/9e47a2b8c679e02aa763495fc1a6cc9b5aaa4dd1",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/9e47a2b8c679e02aa763495fc1a6cc9b5aaa4dd1/comments",
      "author": {
        "login": "dependabot[bot]",
        "id": 49699333,
        "node_id": "MDM6Qm90NDk2OTkzMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/in/29110?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dependabot%5Bbot%5D",
        "html_url": "https://github.com/apps/dependabot",
        "followers_url": "https://api.github.com/users/dependabot%5Bbot%5D/followers",
        "following_url": "https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}",
        "gists_url": "https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dependabot%5Bbot%5D/subscriptions",
        "organizations_url": "https://api.github.com/users/dependabot%5Bbot%5D/orgs",
        "repos_url": "https://api.github.com/users/dependabot%5Bbot%5D/repos",
        "events_url": "https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dependabot%5Bbot%5D/received_events",
        "type": "Bot",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7"
        }
      ]
    },
    {
      "sha": "9abfdc805bd97feb7b599c7f5f7fd58a6040386b",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjlhYmZkYzgwNWJkOTdmZWI3YjU5OWM3ZjVmN2ZkNThhNjA0MDM4NmI=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-01T18:26:51Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-02T20:53:08Z"
        },
        "message": "Add support for artifacts and logs of workflow runs",
        "tree": {
          "sha": "60bae0a639f5350f232426de73e3dbc916fa7c87",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/60bae0a639f5350f232426de73e3dbc916fa7c87"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/9abfdc805bd97feb7b599c7f5f7fd58a6040386b",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/9abfdc805bd97feb7b599c7f5f7fd58a6040386b",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/9abfdc805bd97feb7b599c7f5f7fd58a6040386b",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/9abfdc805bd97feb7b599c7f5f7fd58a6040386b/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7"
        }
      ]
    },
    {
      "sha": "78ffe5a759f60515616bb07eae249df666d93e4c",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjc4ZmZlNWE3NTlmNjA1MTU2MTZiYjA3ZWFlMjQ5ZGY2NjZkOTNlNGM=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-02T21:13:43Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-02T21:13:43Z"
        },
        "message": "Merge pull request #1075 from gsmet/more-workflows\n\nAdd support for artifacts and logs of workflow runs",
        "tree": {
          "sha": "60bae0a639f5350f232426de73e3dbc916fa7c87",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/60bae0a639f5350f232426de73e3dbc916fa7c87"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/78ffe5a759f60515616bb07eae249df666d93e4c",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZ4kHCRBK7hj4Ov3rIwAAdHIIAG+ElY0TiAKY0vU4Ai9mDgwi\n+vXKCXrhT+QUnIFnPVbnvZ9rgnndfQQhLMAJz3xiYEd9oQKAqsTv98d8Sds9d6BC\nxWFGmJVnfRVDNsibofLwB2D8H3eC50ZyKcs72VFVwonouXDv3ZL1yX6Q/9qQn7Vu\nhoVDVs5h6EEclTpW0lPpirDQeEh8tFrWzJGaIlD2YsYmFxopJfwKiPGf9yLLIfCX\n+u+pmLwLQUqU6e00Td7g5A/ic3sNuRXFYDYP4snl/epzahS5R5ehCyBbK+uEWg/G\nq4pq7RKG4XcHvQ13xLUz54Tj6vUZoD3vtuVptVegzQ0m9S56ESyHM9vPIzqFq4Y=\n=inHh\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 60bae0a639f5350f232426de73e3dbc916fa7c87\nparent feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7\nparent 9abfdc805bd97feb7b599c7f5f7fd58a6040386b\nauthor Liam Newman <bitwiseman@gmail.com> 1617398023 -0700\ncommitter GitHub <noreply@github.com> 1617398023 -0700\n\nMerge pull request #1075 from gsmet/more-workflows\n\nAdd support for artifacts and logs of workflow runs"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/78ffe5a759f60515616bb07eae249df666d93e4c",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/78ffe5a759f60515616bb07eae249df666d93e4c",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/78ffe5a759f60515616bb07eae249df666d93e4c/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/feba6ed8b65a03d0b9bcb7f177a47b7e9c7748f7"
        },
        {
          "sha": "9abfdc805bd97feb7b599c7f5f7fd58a6040386b",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/9abfdc805bd97feb7b599c7f5f7fd58a6040386b",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/9abfdc805bd97feb7b599c7f5f7fd58a6040386b"
        }
      ]
    },
    {
      "sha": "3e6a5bc718625aa747142ea05bb8040a0702112e",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjNlNmE1YmM3MTg2MjVhYTc0NzE0MmVhMDViYjgwNDBhMDcwMjExMmU=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-02T21:14:05Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-02T21:14:05Z"
        },
        "message": "Merge pull request #1070 from hub4j/dependabot/maven/spotbugs.version-4.2.2\n\nChore(deps): Bump spotbugs.version from 4.2.1 to 4.2.2",
        "tree": {
          "sha": "dbc7d0e88845cfd07ba1ac147a55af49ed21ae74",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/dbc7d0e88845cfd07ba1ac147a55af49ed21ae74"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/3e6a5bc718625aa747142ea05bb8040a0702112e",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZ4kdCRBK7hj4Ov3rIwAAdHIIAEdr1xVDF+J80oY4wuYax34G\nbdJ6eHUaTFBOII2X5+DY3FOVZ7LE4BI8o8+Fyv2nIWH+RY7UkrvE780ANErkHae6\nqAE8He743escKjbKUmz8UcNvleQj9L0kV8IhFZT1kjH1VkrPrIv0DyuxiffLzki+\nureO4u/psgmou1DfhjDk9lEb1ftZQKCZc52rxtVXZGhNeL4NTrOxGjaDQT5WUH0U\nobT3gJSyf3SXMNcBFMpjqAVLclxP6Z1rc1t0/1eBAv9eMKAWpgKLBabKxqJEmSOs\nGBWL8UtH7OlRAiQkXONfkcs2X2ghIiJ/2Iqrv6527863L4DSb2HmCA4jvCvn9WY=\n=+l7y\n-----END PGP SIGNATURE-----\n",
          "payload": "tree dbc7d0e88845cfd07ba1ac147a55af49ed21ae74\nparent 78ffe5a759f60515616bb07eae249df666d93e4c\nparent 9e47a2b8c679e02aa763495fc1a6cc9b5aaa4dd1\nauthor Liam Newman <bitwiseman@gmail.com> 1617398045 -0700\ncommitter GitHub <noreply@github.com> 1617398045 -0700\n\nMerge pull request #1070 from hub4j/dependabot/maven/spotbugs.version-4.2.2\n\nChore(deps): Bump spotbugs.version from 4.2.1 to 4.2.2"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/3e6a5bc718625aa747142ea05bb8040a0702112e",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/3e6a5bc718625aa747142ea05bb8040a0702112e",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/3e6a5bc718625aa747142ea05bb8040a0702112e/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "78ffe5a759f60515616bb07eae249df666d93e4c",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/78ffe5a759f60515616bb07eae249df666d93e4c",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/78ffe5a759f60515616bb07eae249df666d93e4c"
        },
        {
          "sha": "9e47a2b8c679e02aa763495fc1a6cc9b5aaa4dd1",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/9e47a2b8c679e02aa763495fc1a6cc9b5aaa4dd1",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/9e47a2b8c679e02aa763495fc1a6cc9b5aaa4dd1"
        }
      ]
    },
    {
      "sha": "f40daf848840841b9525a9ec24d39fdca6d3f835",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmY0MGRhZjg0ODg0MDg0MWI5NTI1YTllYzI0ZDM5ZmRjYTZkM2Y4MzU=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-03T18:45:52Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-03T18:45:52Z"
        },
        "message": "Add some missing javadoc in the newly added GHArtifact",
        "tree": {
          "sha": "b355343a95a896c16989009c03da9233e5c3c21c",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/b355343a95a896c16989009c03da9233e5c3c21c"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/f40daf848840841b9525a9ec24d39fdca6d3f835",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/f40daf848840841b9525a9ec24d39fdca6d3f835",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/f40daf848840841b9525a9ec24d39fdca6d3f835",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/f40daf848840841b9525a9ec24d39fdca6d3f835/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "3e6a5bc718625aa747142ea05bb8040a0702112e",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/3e6a5bc718625aa747142ea05bb8040a0702112e",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/3e6a5bc718625aa747142ea05bb8040a0702112e"
        }
      ]
    },
    {
      "sha": "97652c680358327b73e5a13bc42d94d7c6700cb8",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjk3NjUyYzY4MDM1ODMyN2I3M2U1YTEzYmM0MmQ5NGQ3YzY3MDBjYjg=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-03T18:54:31Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-03T18:54:31Z"
        },
        "message": "Expose repository for artifacts, workflows and workflow runs",
        "tree": {
          "sha": "63c7cb2fc98548d51a54c0bb9b6b941a741bf1e7",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/63c7cb2fc98548d51a54c0bb9b6b941a741bf1e7"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/97652c680358327b73e5a13bc42d94d7c6700cb8",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/97652c680358327b73e5a13bc42d94d7c6700cb8",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/97652c680358327b73e5a13bc42d94d7c6700cb8",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/97652c680358327b73e5a13bc42d94d7c6700cb8/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "f40daf848840841b9525a9ec24d39fdca6d3f835",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/f40daf848840841b9525a9ec24d39fdca6d3f835",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/f40daf848840841b9525a9ec24d39fdca6d3f835"
        }
      ]
    },
    {
      "sha": "83aa9d04efe909751f5873e3615f5791ef8e5792",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjgzYWE5ZDA0ZWZlOTA5NzUxZjU4NzNlMzYxNWY1NzkxZWY4ZTU3OTI=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-03T23:33:08Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-03T23:33:08Z"
        },
        "message": "Merge pull request #1078 from gsmet/expose-repository-workflows-artifacts\n\nExpose repository for artifacts, workflows and workflow runs",
        "tree": {
          "sha": "63c7cb2fc98548d51a54c0bb9b6b941a741bf1e7",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/63c7cb2fc98548d51a54c0bb9b6b941a741bf1e7"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/83aa9d04efe909751f5873e3615f5791ef8e5792",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgaPs0CRBK7hj4Ov3rIwAAdHIIAFNBe1zwGKqKNtI4XrYlgXsF\nqEV1nCPY3AnsAJZ04SZ0ftATRPvCM2nKiENb7T05gUuc1hsdg7W9F46qUF2wo7nR\nBZH5qNtosWyGc8HUJKuNZkEfl2kd+YLgGP8j7StOMLBhKW4fPlkP02/ctniyWBbl\nkD5YjbajVc77YCOhGu9Sh0bPhqaCSnLknDeRU0nRFbTJQcpIX8bae9mHCPDWhu0+\nhH7OZINNzZ6eww6vQhJr07MfkRaZGEO3PlHblpfmh0F3hWtut1sKUEqn3NURu1fv\n5QWzk6No9LNaYvjsxOpfw19s4ud+NcHntpMTsdl800YDivJZ28rEJEG5iPbGu18=\n=dAjX\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 63c7cb2fc98548d51a54c0bb9b6b941a741bf1e7\nparent 3e6a5bc718625aa747142ea05bb8040a0702112e\nparent 97652c680358327b73e5a13bc42d94d7c6700cb8\nauthor Liam Newman <bitwiseman@gmail.com> 1617492788 -0700\ncommitter GitHub <noreply@github.com> 1617492788 -0700\n\nMerge pull request #1078 from gsmet/expose-repository-workflows-artifacts\n\nExpose repository for artifacts, workflows and workflow runs"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/83aa9d04efe909751f5873e3615f5791ef8e5792",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/83aa9d04efe909751f5873e3615f5791ef8e5792",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/83aa9d04efe909751f5873e3615f5791ef8e5792/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "3e6a5bc718625aa747142ea05bb8040a0702112e",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/3e6a5bc718625aa747142ea05bb8040a0702112e",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/3e6a5bc718625aa747142ea05bb8040a0702112e"
        },
        {
          "sha": "97652c680358327b73e5a13bc42d94d7c6700cb8",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/97652c680358327b73e5a13bc42d94d7c6700cb8",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/97652c680358327b73e5a13bc42d94d7c6700cb8"
        }
      ]
    },
    {
      "sha": "73d2e1db5c6edc32a3c31fa4c5648ed833418a59",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjczZDJlMWRiNWM2ZWRjMzJhM2MzMWZhNGM1NjQ4ZWQ4MzM0MThhNTk=",
      "commit": {
        "author": {
          "name": "nv035674",
          "email": "nathan.vahrenberg@cerner.com",
          "date": "2021-04-01T14:27:37Z"
        },
        "committer": {
          "name": "Nathan Vahrenberg",
          "email": "nvahren@gmail.com",
          "date": "2021-04-04T11:07:25Z"
        },
        "message": "Add support for repository visibility",
        "tree": {
          "sha": "8f94d8c8b5b104cc94f18f88784f72f7a39b998a",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/8f94d8c8b5b104cc94f18f88784f72f7a39b998a"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/73d2e1db5c6edc32a3c31fa4c5648ed833418a59",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/73d2e1db5c6edc32a3c31fa4c5648ed833418a59",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/73d2e1db5c6edc32a3c31fa4c5648ed833418a59",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/73d2e1db5c6edc32a3c31fa4c5648ed833418a59/comments",
      "author": {
        "login": "nv035674",
        "id": 37336037,
        "node_id": "MDQ6VXNlcjM3MzM2MDM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37336037?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nv035674",
        "html_url": "https://github.com/nv035674",
        "followers_url": "https://api.github.com/users/nv035674/followers",
        "following_url": "https://api.github.com/users/nv035674/following{/other_user}",
        "gists_url": "https://api.github.com/users/nv035674/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nv035674/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nv035674/subscriptions",
        "organizations_url": "https://api.github.com/users/nv035674/orgs",
        "repos_url": "https://api.github.com/users/nv035674/repos",
        "events_url": "https://api.github.com/users/nv035674/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nv035674/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "vahrennd",
        "id": 8679583,
        "node_id": "MDQ6VXNlcjg2Nzk1ODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8679583?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vahrennd",
        "html_url": "https://github.com/vahrennd",
        "followers_url": "https://api.github.com/users/vahrennd/followers",
        "following_url": "https://api.github.com/users/vahrennd/following{/other_user}",
        "gists_url": "https://api.github.com/users/vahrennd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vahrennd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vahrennd/subscriptions",
        "organizations_url": "https://api.github.com/users/vahrennd/orgs",
        "repos_url": "https://api.github.com/users/vahrennd/repos",
        "events_url": "https://api.github.com/users/vahrennd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vahrennd/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "83aa9d04efe909751f5873e3615f5791ef8e5792",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/83aa9d04efe909751f5873e3615f5791ef8e5792",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/83aa9d04efe909751f5873e3615f5791ef8e5792"
        }
      ]
    },
    {
      "sha": "52705ac69533e55d11e9d126a041f295695223f7",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjUyNzA1YWM2OTUzM2U1NWQxMWU5ZDEyNmEwNDFmMjk1Njk1MjIzZjc=",
      "commit": {
        "author": {
          "name": "nv035674",
          "email": "nathan.vahrenberg@cerner.com",
          "date": "2021-04-01T14:31:31Z"
        },
        "committer": {
          "name": "Nathan Vahrenberg",
          "email": "nvahren@gmail.com",
          "date": "2021-04-04T11:07:25Z"
        },
        "message": "revert testing version",
        "tree": {
          "sha": "70688f36dee187bf3c26454ba1ad1a57993d17c4",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/70688f36dee187bf3c26454ba1ad1a57993d17c4"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/52705ac69533e55d11e9d126a041f295695223f7",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/52705ac69533e55d11e9d126a041f295695223f7",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/52705ac69533e55d11e9d126a041f295695223f7",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/52705ac69533e55d11e9d126a041f295695223f7/comments",
      "author": {
        "login": "nv035674",
        "id": 37336037,
        "node_id": "MDQ6VXNlcjM3MzM2MDM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37336037?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nv035674",
        "html_url": "https://github.com/nv035674",
        "followers_url": "https://api.github.com/users/nv035674/followers",
        "following_url": "https://api.github.com/users/nv035674/following{/other_user}",
        "gists_url": "https://api.github.com/users/nv035674/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nv035674/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nv035674/subscriptions",
        "organizations_url": "https://api.github.com/users/nv035674/orgs",
        "repos_url": "https://api.github.com/users/nv035674/repos",
        "events_url": "https://api.github.com/users/nv035674/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nv035674/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "vahrennd",
        "id": 8679583,
        "node_id": "MDQ6VXNlcjg2Nzk1ODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8679583?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vahrennd",
        "html_url": "https://github.com/vahrennd",
        "followers_url": "https://api.github.com/users/vahrennd/followers",
        "following_url": "https://api.github.com/users/vahrennd/following{/other_user}",
        "gists_url": "https://api.github.com/users/vahrennd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vahrennd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vahrennd/subscriptions",
        "organizations_url": "https://api.github.com/users/vahrennd/orgs",
        "repos_url": "https://api.github.com/users/vahrennd/repos",
        "events_url": "https://api.github.com/users/vahrennd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vahrennd/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "73d2e1db5c6edc32a3c31fa4c5648ed833418a59",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/73d2e1db5c6edc32a3c31fa4c5648ed833418a59",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/73d2e1db5c6edc32a3c31fa4c5648ed833418a59"
        }
      ]
    },
    {
      "sha": "bab539932789bb8b4daac8000bf1460b8617d5b9",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmJhYjUzOTkzMjc4OWJiOGI0ZGFhYzgwMDBiZjE0NjBiODYxN2Q1Yjk=",
      "commit": {
        "author": {
          "name": "nv035674",
          "email": "nathan.vahrenberg@cerner.com",
          "date": "2021-04-01T15:54:48Z"
        },
        "committer": {
          "name": "Nathan Vahrenberg",
          "email": "nvahren@gmail.com",
          "date": "2021-04-04T11:07:25Z"
        },
        "message": "update existing test data",
        "tree": {
          "sha": "10e949b02331845d3d817c999f46f7a8cf03bf33",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/10e949b02331845d3d817c999f46f7a8cf03bf33"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/bab539932789bb8b4daac8000bf1460b8617d5b9",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/bab539932789bb8b4daac8000bf1460b8617d5b9",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/bab539932789bb8b4daac8000bf1460b8617d5b9",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/bab539932789bb8b4daac8000bf1460b8617d5b9/comments",
      "author": {
        "login": "nv035674",
        "id": 37336037,
        "node_id": "MDQ6VXNlcjM3MzM2MDM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37336037?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nv035674",
        "html_url": "https://github.com/nv035674",
        "followers_url": "https://api.github.com/users/nv035674/followers",
        "following_url": "https://api.github.com/users/nv035674/following{/other_user}",
        "gists_url": "https://api.github.com/users/nv035674/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nv035674/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nv035674/subscriptions",
        "organizations_url": "https://api.github.com/users/nv035674/orgs",
        "repos_url": "https://api.github.com/users/nv035674/repos",
        "events_url": "https://api.github.com/users/nv035674/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nv035674/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "vahrennd",
        "id": 8679583,
        "node_id": "MDQ6VXNlcjg2Nzk1ODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8679583?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vahrennd",
        "html_url": "https://github.com/vahrennd",
        "followers_url": "https://api.github.com/users/vahrennd/followers",
        "following_url": "https://api.github.com/users/vahrennd/following{/other_user}",
        "gists_url": "https://api.github.com/users/vahrennd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vahrennd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vahrennd/subscriptions",
        "organizations_url": "https://api.github.com/users/vahrennd/orgs",
        "repos_url": "https://api.github.com/users/vahrennd/repos",
        "events_url": "https://api.github.com/users/vahrennd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vahrennd/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "52705ac69533e55d11e9d126a041f295695223f7",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/52705ac69533e55d11e9d126a041f295695223f7",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/52705ac69533e55d11e9d126a041f295695223f7"
        }
      ]
    },
    {
      "sha": "4a2244e6610ce842c4e046e3237e17de833bdaa9",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjRhMjI0NGU2NjEwY2U4NDJjNGUwNDZlMzIzN2UxN2RlODMzYmRhYTk=",
      "commit": {
        "author": {
          "name": "nv035674",
          "email": "nathan.vahrenberg@cerner.com",
          "date": "2021-04-01T17:07:14Z"
        },
        "committer": {
          "name": "Nathan Vahrenberg",
          "email": "nvahren@gmail.com",
          "date": "2021-04-04T11:07:25Z"
        },
        "message": "self review",
        "tree": {
          "sha": "4cc459eb0e5b3b2a52ca4cef9d5a5171d449147b",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/4cc459eb0e5b3b2a52ca4cef9d5a5171d449147b"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/4a2244e6610ce842c4e046e3237e17de833bdaa9",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/4a2244e6610ce842c4e046e3237e17de833bdaa9",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/4a2244e6610ce842c4e046e3237e17de833bdaa9",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/4a2244e6610ce842c4e046e3237e17de833bdaa9/comments",
      "author": {
        "login": "nv035674",
        "id": 37336037,
        "node_id": "MDQ6VXNlcjM3MzM2MDM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37336037?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nv035674",
        "html_url": "https://github.com/nv035674",
        "followers_url": "https://api.github.com/users/nv035674/followers",
        "following_url": "https://api.github.com/users/nv035674/following{/other_user}",
        "gists_url": "https://api.github.com/users/nv035674/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nv035674/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nv035674/subscriptions",
        "organizations_url": "https://api.github.com/users/nv035674/orgs",
        "repos_url": "https://api.github.com/users/nv035674/repos",
        "events_url": "https://api.github.com/users/nv035674/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nv035674/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "vahrennd",
        "id": 8679583,
        "node_id": "MDQ6VXNlcjg2Nzk1ODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8679583?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vahrennd",
        "html_url": "https://github.com/vahrennd",
        "followers_url": "https://api.github.com/users/vahrennd/followers",
        "following_url": "https://api.github.com/users/vahrennd/following{/other_user}",
        "gists_url": "https://api.github.com/users/vahrennd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vahrennd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vahrennd/subscriptions",
        "organizations_url": "https://api.github.com/users/vahrennd/orgs",
        "repos_url": "https://api.github.com/users/vahrennd/repos",
        "events_url": "https://api.github.com/users/vahrennd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vahrennd/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "bab539932789bb8b4daac8000bf1460b8617d5b9",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/bab539932789bb8b4daac8000bf1460b8617d5b9",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/bab539932789bb8b4daac8000bf1460b8617d5b9"
        }
      ]
    },
    {
      "sha": "fab848a0d37b97f144cfaaf986e8d035c1fcf7a1",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmZhYjg0OGEwZDM3Yjk3ZjE0NGNmYWFmOTg2ZThkMDM1YzFmY2Y3YTE=",
      "commit": {
        "author": {
          "name": "nv035674",
          "email": "nathan.vahrenberg@cerner.com",
          "date": "2021-04-02T16:08:11Z"
        },
        "committer": {
          "name": "Nathan Vahrenberg",
          "email": "nvahren@gmail.com",
          "date": "2021-04-04T11:07:25Z"
        },
        "message": "review comments",
        "tree": {
          "sha": "06ba22b8d76662624dd6f4a4f67bb4acfe6cda2a",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/06ba22b8d76662624dd6f4a4f67bb4acfe6cda2a"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/fab848a0d37b97f144cfaaf986e8d035c1fcf7a1",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fab848a0d37b97f144cfaaf986e8d035c1fcf7a1",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/fab848a0d37b97f144cfaaf986e8d035c1fcf7a1",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fab848a0d37b97f144cfaaf986e8d035c1fcf7a1/comments",
      "author": {
        "login": "nv035674",
        "id": 37336037,
        "node_id": "MDQ6VXNlcjM3MzM2MDM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37336037?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nv035674",
        "html_url": "https://github.com/nv035674",
        "followers_url": "https://api.github.com/users/nv035674/followers",
        "following_url": "https://api.github.com/users/nv035674/following{/other_user}",
        "gists_url": "https://api.github.com/users/nv035674/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nv035674/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nv035674/subscriptions",
        "organizations_url": "https://api.github.com/users/nv035674/orgs",
        "repos_url": "https://api.github.com/users/nv035674/repos",
        "events_url": "https://api.github.com/users/nv035674/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nv035674/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "vahrennd",
        "id": 8679583,
        "node_id": "MDQ6VXNlcjg2Nzk1ODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8679583?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vahrennd",
        "html_url": "https://github.com/vahrennd",
        "followers_url": "https://api.github.com/users/vahrennd/followers",
        "following_url": "https://api.github.com/users/vahrennd/following{/other_user}",
        "gists_url": "https://api.github.com/users/vahrennd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vahrennd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vahrennd/subscriptions",
        "organizations_url": "https://api.github.com/users/vahrennd/orgs",
        "repos_url": "https://api.github.com/users/vahrennd/repos",
        "events_url": "https://api.github.com/users/vahrennd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vahrennd/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4a2244e6610ce842c4e046e3237e17de833bdaa9",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/4a2244e6610ce842c4e046e3237e17de833bdaa9",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/4a2244e6610ce842c4e046e3237e17de833bdaa9"
        }
      ]
    },
    {
      "sha": "ad2990b1b681e3927609f7d6035644d4adce9a64",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmFkMjk5MGIxYjY4MWUzOTI3NjA5ZjdkNjAzNTY0NGQ0YWRjZTlhNjQ=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-02T21:46:22Z"
        },
        "committer": {
          "name": "Nathan Vahrenberg",
          "email": "nvahren@gmail.com",
          "date": "2021-04-04T11:07:25Z"
        },
        "message": "Remove bridge method",
        "tree": {
          "sha": "d9368dd9193c0a91769e49ceafd6a5242eb16df2",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/d9368dd9193c0a91769e49ceafd6a5242eb16df2"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/ad2990b1b681e3927609f7d6035644d4adce9a64",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/ad2990b1b681e3927609f7d6035644d4adce9a64",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/ad2990b1b681e3927609f7d6035644d4adce9a64",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/ad2990b1b681e3927609f7d6035644d4adce9a64/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "vahrennd",
        "id": 8679583,
        "node_id": "MDQ6VXNlcjg2Nzk1ODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8679583?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vahrennd",
        "html_url": "https://github.com/vahrennd",
        "followers_url": "https://api.github.com/users/vahrennd/followers",
        "following_url": "https://api.github.com/users/vahrennd/following{/other_user}",
        "gists_url": "https://api.github.com/users/vahrennd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vahrennd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vahrennd/subscriptions",
        "organizations_url": "https://api.github.com/users/vahrennd/orgs",
        "repos_url": "https://api.github.com/users/vahrennd/repos",
        "events_url": "https://api.github.com/users/vahrennd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vahrennd/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "fab848a0d37b97f144cfaaf986e8d035c1fcf7a1",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fab848a0d37b97f144cfaaf986e8d035c1fcf7a1",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/fab848a0d37b97f144cfaaf986e8d035c1fcf7a1"
        }
      ]
    },
    {
      "sha": "fc3bac0e775f7fb0543a35ae44068e3d192e7009",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmZjM2JhYzBlNzc1ZjdmYjA1NDNhMzVhZTQ0MDY4ZTNkMTkyZTcwMDk=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-02T21:52:59Z"
        },
        "committer": {
          "name": "Nathan Vahrenberg",
          "email": "nvahren@gmail.com",
          "date": "2021-04-04T11:07:25Z"
        },
        "message": "Clean before building",
        "tree": {
          "sha": "b9599be900d0911fdc1db17f356eb8b9580b7a5e",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/b9599be900d0911fdc1db17f356eb8b9580b7a5e"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/fc3bac0e775f7fb0543a35ae44068e3d192e7009",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fc3bac0e775f7fb0543a35ae44068e3d192e7009",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/fc3bac0e775f7fb0543a35ae44068e3d192e7009",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fc3bac0e775f7fb0543a35ae44068e3d192e7009/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "vahrennd",
        "id": 8679583,
        "node_id": "MDQ6VXNlcjg2Nzk1ODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8679583?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vahrennd",
        "html_url": "https://github.com/vahrennd",
        "followers_url": "https://api.github.com/users/vahrennd/followers",
        "following_url": "https://api.github.com/users/vahrennd/following{/other_user}",
        "gists_url": "https://api.github.com/users/vahrennd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vahrennd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vahrennd/subscriptions",
        "organizations_url": "https://api.github.com/users/vahrennd/orgs",
        "repos_url": "https://api.github.com/users/vahrennd/repos",
        "events_url": "https://api.github.com/users/vahrennd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vahrennd/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "ad2990b1b681e3927609f7d6035644d4adce9a64",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/ad2990b1b681e3927609f7d6035644d4adce9a64",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/ad2990b1b681e3927609f7d6035644d4adce9a64"
        }
      ]
    },
    {
      "sha": "99f192d33c6904030fb133c97a4ba0bd4aa76039",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjk5ZjE5MmQzM2M2OTA0MDMwZmIxMzNjOTdhNGJhMGJkNGFhNzYwMzk=",
      "commit": {
        "author": {
          "name": "Nathan Vahrenberg",
          "email": "nvahren@gmail.com",
          "date": "2021-04-04T11:15:47Z"
        },
        "committer": {
          "name": "Nathan Vahrenberg",
          "email": "nvahren@gmail.com",
          "date": "2021-04-04T11:15:47Z"
        },
        "message": "import nebula",
        "tree": {
          "sha": "4b229430a1d0f0596ba8b5347415972d7afb0270",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/4b229430a1d0f0596ba8b5347415972d7afb0270"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/99f192d33c6904030fb133c97a4ba0bd4aa76039",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/99f192d33c6904030fb133c97a4ba0bd4aa76039",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/99f192d33c6904030fb133c97a4ba0bd4aa76039",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/99f192d33c6904030fb133c97a4ba0bd4aa76039/comments",
      "author": {
        "login": "vahrennd",
        "id": 8679583,
        "node_id": "MDQ6VXNlcjg2Nzk1ODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8679583?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vahrennd",
        "html_url": "https://github.com/vahrennd",
        "followers_url": "https://api.github.com/users/vahrennd/followers",
        "following_url": "https://api.github.com/users/vahrennd/following{/other_user}",
        "gists_url": "https://api.github.com/users/vahrennd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vahrennd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vahrennd/subscriptions",
        "organizations_url": "https://api.github.com/users/vahrennd/orgs",
        "repos_url": "https://api.github.com/users/vahrennd/repos",
        "events_url": "https://api.github.com/users/vahrennd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vahrennd/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "vahrennd",
        "id": 8679583,
        "node_id": "MDQ6VXNlcjg2Nzk1ODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8679583?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vahrennd",
        "html_url": "https://github.com/vahrennd",
        "followers_url": "https://api.github.com/users/vahrennd/followers",
        "following_url": "https://api.github.com/users/vahrennd/following{/other_user}",
        "gists_url": "https://api.github.com/users/vahrennd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vahrennd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vahrennd/subscriptions",
        "organizations_url": "https://api.github.com/users/vahrennd/orgs",
        "repos_url": "https://api.github.com/users/vahrennd/repos",
        "events_url": "https://api.github.com/users/vahrennd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vahrennd/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "fc3bac0e775f7fb0543a35ae44068e3d192e7009",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fc3bac0e775f7fb0543a35ae44068e3d192e7009",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/fc3bac0e775f7fb0543a35ae44068e3d192e7009"
        }
      ]
    },
    {
      "sha": "4770316898afbf37d4fce2b50b27d111b0982f9e",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjQ3NzAzMTY4OThhZmJmMzdkNGZjZTJiNTBiMjdkMTExYjA5ODJmOWU=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-04T13:21:53Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-04T13:21:53Z"
        },
        "message": "Fix JaCoCo execution when we have additional Surefire options\n\nTypically on Java 16.",
        "tree": {
          "sha": "7bafba7d4b50365aae60144af8b9cef2b02d92b9",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/7bafba7d4b50365aae60144af8b9cef2b02d92b9"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/4770316898afbf37d4fce2b50b27d111b0982f9e",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/4770316898afbf37d4fce2b50b27d111b0982f9e",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/4770316898afbf37d4fce2b50b27d111b0982f9e",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/4770316898afbf37d4fce2b50b27d111b0982f9e/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "83aa9d04efe909751f5873e3615f5791ef8e5792",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/83aa9d04efe909751f5873e3615f5791ef8e5792",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/83aa9d04efe909751f5873e3615f5791ef8e5792"
        }
      ]
    },
    {
      "sha": "2553a79b0203978031bc881c03f9cfd409f1c558",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjI1NTNhNzliMDIwMzk3ODAzMWJjODgxYzAzZjljZmQ0MDlmMWM1NTg=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-05T05:53:25Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-05T05:53:25Z"
        },
        "message": "Update maven-build.yml",
        "tree": {
          "sha": "fe9598a7083e524b98213cecbb9f1d17b50998aa",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/fe9598a7083e524b98213cecbb9f1d17b50998aa"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/2553a79b0203978031bc881c03f9cfd409f1c558",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgaqXWCRBK7hj4Ov3rIwAAdHIIAB6IahG+d8qGm0RC4TkA61Oa\ndmO34jjnPJV8YHAgGc3YVHMIPjAsUZQckyQ1ErQcji4gGmyfX/5+u6QMd1BBa4EV\n4Hei1EOSYWVWnVvGkykwmpRZBYGEhCfqOioPCb2NtDMGtf0VFOY56N0ZyEgJY5ug\nVHLg8UrPw7cBFuB/0tsoe6/ogVfINBLGLPbI3NV/f3p4QU+vB9RFbsYFpX+/nixH\n8NlBWwetKIrX3BEjQE/5u+v5yswSDeCB/i3VftJVZNQ0p3ALq3qPcOiag8WjdWjZ\nsAExxDQVh/6ZL1x8HrQ2sjnhQkN4O0IlmwRfNpDi+ZKP/gVPeyJGUaoygRP0FXU=\n=ANVJ\n-----END PGP SIGNATURE-----\n",
          "payload": "tree fe9598a7083e524b98213cecbb9f1d17b50998aa\nparent 99f192d33c6904030fb133c97a4ba0bd4aa76039\nauthor Liam Newman <bitwiseman@gmail.com> 1617602005 -0700\ncommitter GitHub <noreply@github.com> 1617602005 -0700\n\nUpdate maven-build.yml"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/2553a79b0203978031bc881c03f9cfd409f1c558",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/2553a79b0203978031bc881c03f9cfd409f1c558",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/2553a79b0203978031bc881c03f9cfd409f1c558/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "99f192d33c6904030fb133c97a4ba0bd4aa76039",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/99f192d33c6904030fb133c97a4ba0bd4aa76039",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/99f192d33c6904030fb133c97a4ba0bd4aa76039"
        }
      ]
    },
    {
      "sha": "578fe085ce4c8b5cc36c76c28b70febdeeca665e",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjU3OGZlMDg1Y2U0YzhiNWNjMzZjNzZjMjhiNzBmZWJkZWVjYTY2NWU=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-05T06:31:53Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-05T06:31:53Z"
        },
        "message": "Merge pull request #1074 from nvahren/repository-visibility\n\nAdd support for repository visibility",
        "tree": {
          "sha": "fe9598a7083e524b98213cecbb9f1d17b50998aa",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/fe9598a7083e524b98213cecbb9f1d17b50998aa"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/578fe085ce4c8b5cc36c76c28b70febdeeca665e",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgaq7ZCRBK7hj4Ov3rIwAAdHIIAKNtIhs8cRidEcFbZQFZtgkJ\n9M4t4eUg3lL9ASAKFqXVSDNTWhJKJBMxF62NsGx46QsHG9xl/ecyFROLRxfdxcp7\nHvZYa7dtDUjcNcLTU9/Tye6apPJZ77hKlK+7AMMzTrJY4jSVsjtfm2qoCfJWe5KF\naJau+KK4LUEGp9UqvYW/hmGYYpC8j78nheo3iipny5N5Hxe7c/aAjwmXQabOrcSN\nm4XpNUHx+3YjOpUCsxAWAbtypCiBG+LrLo3bx+r/RkZfdF2fZlm8wItvtzh7laen\ncnFlQI2NYaLHkRkLwNaZSUHg9cLgXG8SoHedmHotwzPQLg+Eb1dd79424ERzoRo=\n=mzXl\n-----END PGP SIGNATURE-----\n",
          "payload": "tree fe9598a7083e524b98213cecbb9f1d17b50998aa\nparent 83aa9d04efe909751f5873e3615f5791ef8e5792\nparent 2553a79b0203978031bc881c03f9cfd409f1c558\nauthor Liam Newman <bitwiseman@gmail.com> 1617604313 -0700\ncommitter GitHub <noreply@github.com> 1617604313 -0700\n\nMerge pull request #1074 from nvahren/repository-visibility\n\nAdd support for repository visibility"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/578fe085ce4c8b5cc36c76c28b70febdeeca665e",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/578fe085ce4c8b5cc36c76c28b70febdeeca665e",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/578fe085ce4c8b5cc36c76c28b70febdeeca665e/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "83aa9d04efe909751f5873e3615f5791ef8e5792",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/83aa9d04efe909751f5873e3615f5791ef8e5792",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/83aa9d04efe909751f5873e3615f5791ef8e5792"
        },
        {
          "sha": "2553a79b0203978031bc881c03f9cfd409f1c558",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/2553a79b0203978031bc881c03f9cfd409f1c558",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/2553a79b0203978031bc881c03f9cfd409f1c558"
        }
      ]
    },
    {
      "sha": "f57ea4c4e9eab34968dcf570158360ae30ec81c1",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmY1N2VhNGM0ZTllYWIzNDk2OGRjZjU3MDE1ODM2MGFlMzBlYzgxYzE=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-05T09:29:06Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-05T13:31:30Z"
        },
        "message": "Fix some infelicities in GHWorkflowRun javadoc",
        "tree": {
          "sha": "9c09fc665c79c674843d3a627f1ee538de2ccd25",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/9c09fc665c79c674843d3a627f1ee538de2ccd25"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/f57ea4c4e9eab34968dcf570158360ae30ec81c1",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/f57ea4c4e9eab34968dcf570158360ae30ec81c1",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/f57ea4c4e9eab34968dcf570158360ae30ec81c1",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/f57ea4c4e9eab34968dcf570158360ae30ec81c1/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "578fe085ce4c8b5cc36c76c28b70febdeeca665e",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/578fe085ce4c8b5cc36c76c28b70febdeeca665e",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/578fe085ce4c8b5cc36c76c28b70febdeeca665e"
        }
      ]
    },
    {
      "sha": "b509076d6f100dfc0fa7c394fb4bad6aa3e7f864",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmI1MDkwNzZkNmYxMDBkZmMwZmE3YzM5NGZiNGJhZDZhYTNlN2Y4NjQ=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-05T13:06:57Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-05T13:32:46Z"
        },
        "message": "Add ability to get jobs and download logs from jobs",
        "tree": {
          "sha": "3b0a6d8e81724e9df8a909e6b63a303105d77dee",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/3b0a6d8e81724e9df8a909e6b63a303105d77dee"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/b509076d6f100dfc0fa7c394fb4bad6aa3e7f864",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b509076d6f100dfc0fa7c394fb4bad6aa3e7f864",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/b509076d6f100dfc0fa7c394fb4bad6aa3e7f864",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b509076d6f100dfc0fa7c394fb4bad6aa3e7f864/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "f57ea4c4e9eab34968dcf570158360ae30ec81c1",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/f57ea4c4e9eab34968dcf570158360ae30ec81c1",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/f57ea4c4e9eab34968dcf570158360ae30ec81c1"
        }
      ]
    },
    {
      "sha": "258acf79f6fccbd9e954daaa41ba530f32fa5861",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjI1OGFjZjc5ZjZmY2NiZDllOTU0ZGFhYTQxYmE1MzBmMzJmYTU4NjE=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-05T15:43:55Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-05T15:43:55Z"
        },
        "message": "Small adjustments to the API exposed to get jobs",
        "tree": {
          "sha": "005221ed1402364806bad3e93222e6651c8b2a22",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/005221ed1402364806bad3e93222e6651c8b2a22"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/258acf79f6fccbd9e954daaa41ba530f32fa5861",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/258acf79f6fccbd9e954daaa41ba530f32fa5861",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/258acf79f6fccbd9e954daaa41ba530f32fa5861",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/258acf79f6fccbd9e954daaa41ba530f32fa5861/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "b509076d6f100dfc0fa7c394fb4bad6aa3e7f864",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b509076d6f100dfc0fa7c394fb4bad6aa3e7f864",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/b509076d6f100dfc0fa7c394fb4bad6aa3e7f864"
        }
      ]
    },
    {
      "sha": "fc98e725692cfa06a150c1e3aa191914e460cb48",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmZjOThlNzI1NjkyY2ZhMDZhMTUwYzFlM2FhMTkxOTE0ZTQ2MGNiNDg=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-05T16:26:16Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-05T16:26:16Z"
        },
        "message": "Rename GHWorkflowRunJob to GHWorkflowJob",
        "tree": {
          "sha": "2bec2f4c3af823310f12dc1c53f10623b1c3ec46",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/2bec2f4c3af823310f12dc1c53f10623b1c3ec46"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/fc98e725692cfa06a150c1e3aa191914e460cb48",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fc98e725692cfa06a150c1e3aa191914e460cb48",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/fc98e725692cfa06a150c1e3aa191914e460cb48",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fc98e725692cfa06a150c1e3aa191914e460cb48/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "258acf79f6fccbd9e954daaa41ba530f32fa5861",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/258acf79f6fccbd9e954daaa41ba530f32fa5861",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/258acf79f6fccbd9e954daaa41ba530f32fa5861"
        }
      ]
    },
    {
      "sha": "43ed7c7ac7182034e5fac7c0a311a97a549120aa",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjQzZWQ3YzdhYzcxODIwMzRlNWZhYzdjMGEzMTFhOTdhNTQ5MTIwYWE=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-05T16:58:55Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-05T16:58:55Z"
        },
        "message": "Add verification that jacoco.exec exists after run",
        "tree": {
          "sha": "5336822f91bd9e787bef470786fc9accdb9fb598",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/5336822f91bd9e787bef470786fc9accdb9fb598"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/43ed7c7ac7182034e5fac7c0a311a97a549120aa",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJga0HPCRBK7hj4Ov3rIwAAdHIIAIfy8oygoq4EFgi/BHPcbQsb\nWMDSXp6LuxUAykk0GoeK5rgyNSGl/jXr8EHUr1ffKSo34BTuqEN/bHGtVZVO7uE6\n2oHmE7rGQdcGmKuDDRt/eSAx7sZgR6z2F0+Yp26rmOllaWiSx8NwN6jswdSgN5xw\nwNsNl5AHBnIpW02SACCJBeeuqa57q4bMEN9lIu/zIVhtxVzswculsyMmQqu5RhzO\n5/Z+g7RzTXCFXNZZfSVL/s4yboaTnb8OCKNoVSPhwIqsBbr8ElVVMoT3J5vLpS67\nIJdAxWDGgnL3JH9vc3OB9rrMMUplAx6BHHgddQsiCSGjlj4H9SCU8RIh15icxxc=\n=XBt9\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 5336822f91bd9e787bef470786fc9accdb9fb598\nparent 4770316898afbf37d4fce2b50b27d111b0982f9e\nauthor Liam Newman <bitwiseman@gmail.com> 1617641935 -0700\ncommitter GitHub <noreply@github.com> 1617641935 -0700\n\nAdd verification that jacoco.exec exists after run"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/43ed7c7ac7182034e5fac7c0a311a97a549120aa",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/43ed7c7ac7182034e5fac7c0a311a97a549120aa",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/43ed7c7ac7182034e5fac7c0a311a97a549120aa/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4770316898afbf37d4fce2b50b27d111b0982f9e",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/4770316898afbf37d4fce2b50b27d111b0982f9e",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/4770316898afbf37d4fce2b50b27d111b0982f9e"
        }
      ]
    },
    {
      "sha": "6167d196d9f3323e1026e22914032d806ab70c9b",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjYxNjdkMTk2ZDlmMzMyM2UxMDI2ZTIyOTE0MDMyZDgwNmFiNzBjOWI=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-05T17:13:14Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-05T17:13:14Z"
        },
        "message": "Remove enable-ci from build-only job\n\n`enable-ci` doesn't make sense with `skipTests`.  \r\nThe point of this job is get quick results.",
        "tree": {
          "sha": "409528f9c20d166e2c663b3a30ac9e735d6447f7",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/409528f9c20d166e2c663b3a30ac9e735d6447f7"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/6167d196d9f3323e1026e22914032d806ab70c9b",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJga0UqCRBK7hj4Ov3rIwAAdHIIAIu6Edw7GKLotupB6lgSnfkl\nwOHXdFI+3tvfj73+Q3e5ICFG+Gutq2/x+9j3fk5isqXsSCMRBJlwQQAIE5Xf+daD\narov4O9bUCjOP+RKIYmcXx7soVqp+a33bM5EBfMfFEK5Nw8uPuNg5AQE+1x+QYUV\n2xZpmq30APUBrz4WKFZwj287gN12hcPoHb0vY30+kZsWxn7KmAtGWLEFBAWA3slm\nQudsMlUQIUHCOWqNPqmF3mieTNwidE5uZRbWWpMHWFxN5+QGVzGB7uEzJa0Y09Ed\nLNzNa4cNGijGIzSZtWo07sG8pRb3Eh7hffH0jB5JoehnfWsNFOp0URDr9+ZJWgM=\n=vEaT\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 409528f9c20d166e2c663b3a30ac9e735d6447f7\nparent 43ed7c7ac7182034e5fac7c0a311a97a549120aa\nauthor Liam Newman <bitwiseman@gmail.com> 1617642794 -0700\ncommitter GitHub <noreply@github.com> 1617642794 -0700\n\nRemove enable-ci from build-only job\n\n`enable-ci` doesn't make sense with `skipTests`.  \r\nThe point of this job is get quick results."
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6167d196d9f3323e1026e22914032d806ab70c9b",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/6167d196d9f3323e1026e22914032d806ab70c9b",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6167d196d9f3323e1026e22914032d806ab70c9b/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "43ed7c7ac7182034e5fac7c0a311a97a549120aa",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/43ed7c7ac7182034e5fac7c0a311a97a549120aa",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/43ed7c7ac7182034e5fac7c0a311a97a549120aa"
        }
      ]
    },
    {
      "sha": "bfb3b944785ec01831296c3b11a002694185379a",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmJmYjNiOTQ0Nzg1ZWMwMTgzMTI5NmMzYjExYTAwMjY5NDE4NTM3OWE=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-05T20:07:32Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-05T20:07:32Z"
        },
        "message": "Update src/main/java/org/kohsuke/github/GHWorkflowRun.java",
        "tree": {
          "sha": "124cd52854981004fef3d83bf4af49cfd01762e0",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/124cd52854981004fef3d83bf4af49cfd01762e0"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/bfb3b944785ec01831296c3b11a002694185379a",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJga24ECRBK7hj4Ov3rIwAAdHIIAByCrMpGcBPIFZIIOHIIVDgy\nzZ7wLFuJMLccZjgWi9tuG2vLxDtwWiJB8/FdGlCtWCuS+XKXtOfCIHcKyBpP8Y5j\nLZSi1BZSY2dUKgcqB2hGzy33dLANaZ5Xu6YfFcU27J+PN0wvHp1bhg1+7d3zSlG9\nOig5HnHe9jXggOLMj9ohtRCJWLYYrwVPphrcqbB7bYxX9boe65asQb5LT2COL3dC\nIn93cd+FsLizAFosnyoV9hWeo0WFfnIVVst22QDKf+Q1kAH/WdgTOJVrgv+CXjTj\nD3MvV7/53IenXFfJpclmF21GX3NuINMeSUmso0OB1+Dshau5uCqNiZaDUMCLgHk=\n=j8vF\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 124cd52854981004fef3d83bf4af49cfd01762e0\nparent fc98e725692cfa06a150c1e3aa191914e460cb48\nauthor Liam Newman <bitwiseman@gmail.com> 1617653252 -0700\ncommitter GitHub <noreply@github.com> 1617653252 -0700\n\nUpdate src/main/java/org/kohsuke/github/GHWorkflowRun.java"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/bfb3b944785ec01831296c3b11a002694185379a",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/bfb3b944785ec01831296c3b11a002694185379a",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/bfb3b944785ec01831296c3b11a002694185379a/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "fc98e725692cfa06a150c1e3aa191914e460cb48",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/fc98e725692cfa06a150c1e3aa191914e460cb48",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/fc98e725692cfa06a150c1e3aa191914e460cb48"
        }
      ]
    },
    {
      "sha": "18e71388126ac99bbd55554eb6a6c732313add8e",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjE4ZTcxMzg4MTI2YWM5OWJiZDU1NTU0ZWI2YTZjNzMyMzEzYWRkOGU=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-05T20:07:40Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-05T20:07:40Z"
        },
        "message": "Update src/main/java/org/kohsuke/github/GHWorkflowRun.java",
        "tree": {
          "sha": "9f4a989fc01ebeb93ea5192a38ac0d956f479b1e",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/9f4a989fc01ebeb93ea5192a38ac0d956f479b1e"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/18e71388126ac99bbd55554eb6a6c732313add8e",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJga24MCRBK7hj4Ov3rIwAAdHIIAEa/COWgP2ycd/1/hn+AdZDd\naPvem9b3pHOZeJjJaLgC6vg60J5qLQ66BSfZM7okvHNbXtF1120au2UBoxGyFuxt\nKJvY50c//ruiEKAiTVEjply3w6Dc5eYgBZrbAvVmQaj0WQo9Qnag8fvOp6pOGP/c\nskVbgxWGjZ5xWGZwuvYRuwzj2L1aKArclp3ko+rIj4kZ4nJdEZqb7IjEUg8M3t/4\nlpEIncIgARYefRUtKtUd43T0B8H7K+9kwCxkH3JW2HfJTR1SF3H0LgbYBZPAh6KG\nBiwtBSPnJSOAJOska4rbLSl5mObV+mzK3kO13dysMwpB8NuK0RI0PWiVlD9e8ig=\n=erMy\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 9f4a989fc01ebeb93ea5192a38ac0d956f479b1e\nparent bfb3b944785ec01831296c3b11a002694185379a\nauthor Liam Newman <bitwiseman@gmail.com> 1617653260 -0700\ncommitter GitHub <noreply@github.com> 1617653260 -0700\n\nUpdate src/main/java/org/kohsuke/github/GHWorkflowRun.java"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/18e71388126ac99bbd55554eb6a6c732313add8e",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/18e71388126ac99bbd55554eb6a6c732313add8e",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/18e71388126ac99bbd55554eb6a6c732313add8e/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "bfb3b944785ec01831296c3b11a002694185379a",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/bfb3b944785ec01831296c3b11a002694185379a",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/bfb3b944785ec01831296c3b11a002694185379a"
        }
      ]
    },
    {
      "sha": "b8b3cf9c80362a61e63c41723e58c85d7e5c30eb",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmI4YjNjZjljODAzNjJhNjFlNjNjNDE3MjNlNThjODVkN2U1YzMwZWI=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-05T20:08:53Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-05T20:08:53Z"
        },
        "message": "Merge branch 'master' into fix-jacoco-java16",
        "tree": {
          "sha": "abbb629fe8f8e82a17ee858220df2921a4b0bc02",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/abbb629fe8f8e82a17ee858220df2921a4b0bc02"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/b8b3cf9c80362a61e63c41723e58c85d7e5c30eb",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJga25VCRBK7hj4Ov3rIwAAdHIIAJs2LIjr/73jEc6aB1pP2zud\n2hP6Ppxu5LzVyZhfZaEXz8WSHJhvWJI22OpIwegF3fiYXBfT+sFu1IRoCbdrqPOJ\norGf4kVE6dzEblHUgZR6VuBfEAQxHzWEsICtq33+x5hu4FO+thtglKPdyZ65ZbuG\nEZtDjut5CIynZPUf9Ji9qj7MHFdM6YKQdIbM8Gf6HJK+VpkuxlltWIhvlZ4Da84Q\nVuJwzhPClx+XPhEiOz/7l+qKcRDwSMmKtCdiBQH8TIeKiBWNrPtSxyf55rMXOuqA\n6ZFw+T9v0rO1LEWZIYxOjMk9PRBWQSi4VKaUYc57yyVRjcT2v4BVCOAUt5/3yj0=\n=2NaJ\n-----END PGP SIGNATURE-----\n",
          "payload": "tree abbb629fe8f8e82a17ee858220df2921a4b0bc02\nparent 6167d196d9f3323e1026e22914032d806ab70c9b\nparent 578fe085ce4c8b5cc36c76c28b70febdeeca665e\nauthor Liam Newman <bitwiseman@gmail.com> 1617653333 -0700\ncommitter GitHub <noreply@github.com> 1617653333 -0700\n\nMerge branch 'master' into fix-jacoco-java16"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b8b3cf9c80362a61e63c41723e58c85d7e5c30eb",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/b8b3cf9c80362a61e63c41723e58c85d7e5c30eb",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b8b3cf9c80362a61e63c41723e58c85d7e5c30eb/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "6167d196d9f3323e1026e22914032d806ab70c9b",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6167d196d9f3323e1026e22914032d806ab70c9b",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/6167d196d9f3323e1026e22914032d806ab70c9b"
        },
        {
          "sha": "578fe085ce4c8b5cc36c76c28b70febdeeca665e",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/578fe085ce4c8b5cc36c76c28b70febdeeca665e",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/578fe085ce4c8b5cc36c76c28b70febdeeca665e"
        }
      ]
    },
    {
      "sha": "064d6944f319c7af816ccc1548cf41901ae10a49",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjA2NGQ2OTQ0ZjMxOWM3YWY4MTZjY2MxNTQ4Y2Y0MTkwMWFlMTBhNDk=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-05T21:10:28Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-05T21:10:28Z"
        },
        "message": "Merge pull request #1081 from gsmet/workflow-jobs\n\nAdd support for workflow jobs",
        "tree": {
          "sha": "9f4a989fc01ebeb93ea5192a38ac0d956f479b1e",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/9f4a989fc01ebeb93ea5192a38ac0d956f479b1e"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/064d6944f319c7af816ccc1548cf41901ae10a49",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJga3zECRBK7hj4Ov3rIwAAdHIIAANsa//gghWKNDQvH9hVrcxT\n1EcS/3aNMlwtYtv2iuh0NP5GpwljVTkXgj7m44Z+MQOIEJWYwMG+XN9k+bj2TWcH\nZA8y/8rPaqMSGGUU569/PL0/iuWavyU8n1ipoGAaSblXEWdXr2So6X4HrJrnj028\nBuVyRUXugUhgKOa0330JU8NlfFFa7UpmNi65GlgXFycyBqsWLPA+42FE2gf6e29U\nypqUYxF/GacbJPVXIHBH1toUOLDaDNQKuRBrnPbZ625naEu5CGC3N7MjENRHFzJJ\nYqhZ2cb9h2yWmObnETIfnW4R3ZxHkZHat5/hn7sOP0xje2DZG7kbZyA4GyrKeAQ=\n=yAoO\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 9f4a989fc01ebeb93ea5192a38ac0d956f479b1e\nparent 578fe085ce4c8b5cc36c76c28b70febdeeca665e\nparent 18e71388126ac99bbd55554eb6a6c732313add8e\nauthor Liam Newman <bitwiseman@gmail.com> 1617657028 -0700\ncommitter GitHub <noreply@github.com> 1617657028 -0700\n\nMerge pull request #1081 from gsmet/workflow-jobs\n\nAdd support for workflow jobs"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/064d6944f319c7af816ccc1548cf41901ae10a49",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/064d6944f319c7af816ccc1548cf41901ae10a49",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/064d6944f319c7af816ccc1548cf41901ae10a49/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "578fe085ce4c8b5cc36c76c28b70febdeeca665e",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/578fe085ce4c8b5cc36c76c28b70febdeeca665e",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/578fe085ce4c8b5cc36c76c28b70febdeeca665e"
        },
        {
          "sha": "18e71388126ac99bbd55554eb6a6c732313add8e",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/18e71388126ac99bbd55554eb6a6c732313add8e",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/18e71388126ac99bbd55554eb6a6c732313add8e"
        }
      ]
    },
    {
      "sha": "7c8a7ff26ebfb31aed3bfdd8f0825ea56142ba4e",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjdjOGE3ZmYyNmViZmIzMWFlZDNiZmRkOGYwODI1ZWE1NjE0MmJhNGU=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-05T21:11:01Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-05T21:11:01Z"
        },
        "message": "Merge pull request #1079 from gsmet/fix-jacoco-java16\n\nFix JaCoCo execution when we have additional Surefire options",
        "tree": {
          "sha": "7192a66653f191823c73464952cd90d19dcef025",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/7192a66653f191823c73464952cd90d19dcef025"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/7c8a7ff26ebfb31aed3bfdd8f0825ea56142ba4e",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJga3zlCRBK7hj4Ov3rIwAAdHIIAHhrsjMJfmKdjkVbZ5fxRY1A\nCnRdQiXObtIetBbSqYXtKybjmAWbE5OdpwAkBnOcujcba7Y41s4BiibopxOuFuIF\ntD9R4ial2bUpUfCZp32fM5UOiy21w2a9lVLP9OlXxGn3vff1VfS/wWFRmf/7bGxs\nCXc2HRUwAG/c4lJSUUifAukltTE9JW4iovAn7AvEV5l9YQGYOfafTEqiWfbykz7V\nRQBBTLvZBCrdy8FQ4c9jEKVu/4vme+dd1EsGcAoc67QtG0MVPkqFbXAT6haz4Z9C\npjCEmX3BbNJBX2LFbhsEcwUfOf/S0JTZvZzzmTAlE6EYrgguvVfp55IjRcBEk5M=\n=z78z\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 7192a66653f191823c73464952cd90d19dcef025\nparent 064d6944f319c7af816ccc1548cf41901ae10a49\nparent b8b3cf9c80362a61e63c41723e58c85d7e5c30eb\nauthor Liam Newman <bitwiseman@gmail.com> 1617657061 -0700\ncommitter GitHub <noreply@github.com> 1617657061 -0700\n\nMerge pull request #1079 from gsmet/fix-jacoco-java16\n\nFix JaCoCo execution when we have additional Surefire options"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/7c8a7ff26ebfb31aed3bfdd8f0825ea56142ba4e",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/7c8a7ff26ebfb31aed3bfdd8f0825ea56142ba4e",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/7c8a7ff26ebfb31aed3bfdd8f0825ea56142ba4e/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "064d6944f319c7af816ccc1548cf41901ae10a49",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/064d6944f319c7af816ccc1548cf41901ae10a49",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/064d6944f319c7af816ccc1548cf41901ae10a49"
        },
        {
          "sha": "b8b3cf9c80362a61e63c41723e58c85d7e5c30eb",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/b8b3cf9c80362a61e63c41723e58c85d7e5c30eb",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/b8b3cf9c80362a61e63c41723e58c85d7e5c30eb"
        }
      ]
    },
    {
      "sha": "8e20f4d9f5ec8e90a6ce673d47b0049cc4ba26fa",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjhlMjBmNGQ5ZjVlYzhlOTBhNmNlNjczZDQ3YjAwNDljYzRiYTI2ZmE=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-08T21:36:40Z"
        },
        "committer": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-08T21:36:40Z"
        },
        "message": "Replace reflection with X-HTTP-Method-Override\n\nFixes #754",
        "tree": {
          "sha": "4d96f47007325f671635ffba33e1120e91216df1",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/4d96f47007325f671635ffba33e1120e91216df1"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/8e20f4d9f5ec8e90a6ce673d47b0049cc4ba26fa",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8e20f4d9f5ec8e90a6ce673d47b0049cc4ba26fa",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/8e20f4d9f5ec8e90a6ce673d47b0049cc4ba26fa",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8e20f4d9f5ec8e90a6ce673d47b0049cc4ba26fa/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "7c8a7ff26ebfb31aed3bfdd8f0825ea56142ba4e",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/7c8a7ff26ebfb31aed3bfdd8f0825ea56142ba4e",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/7c8a7ff26ebfb31aed3bfdd8f0825ea56142ba4e"
        }
      ]
    },
    {
      "sha": "9022455d856d1ccd605203ef68fb3ea146d13b20",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjkwMjI0NTVkODU2ZDFjY2Q2MDUyMDNlZjY4ZmIzZWExNDZkMTNiMjA=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-09T08:25:56Z"
        },
        "committer": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-09T08:25:56Z"
        },
        "message": "[maven-release-plugin] prepare release github-api-1.127",
        "tree": {
          "sha": "d28ee7a407a97580ee45e6218b4fdb58258b0a91",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/d28ee7a407a97580ee45e6218b4fdb58258b0a91"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/9022455d856d1ccd605203ef68fb3ea146d13b20",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/9022455d856d1ccd605203ef68fb3ea146d13b20",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/9022455d856d1ccd605203ef68fb3ea146d13b20",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/9022455d856d1ccd605203ef68fb3ea146d13b20/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "7c8a7ff26ebfb31aed3bfdd8f0825ea56142ba4e",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/7c8a7ff26ebfb31aed3bfdd8f0825ea56142ba4e",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/7c8a7ff26ebfb31aed3bfdd8f0825ea56142ba4e"
        }
      ]
    },
    {
      "sha": "8b3f50d4d3d4ca798de22263740f8bdfbfd13ca2",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjhiM2Y1MGQ0ZDNkNGNhNzk4ZGUyMjI2Mzc0MGY4YmRmYmZkMTNjYTI=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-09T08:26:09Z"
        },
        "committer": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-09T08:26:09Z"
        },
        "message": "[maven-release-plugin] prepare for next development iteration",
        "tree": {
          "sha": "94c702666e58e6d4fa9a6868323bca15b51e936c",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/94c702666e58e6d4fa9a6868323bca15b51e936c"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/8b3f50d4d3d4ca798de22263740f8bdfbfd13ca2",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8b3f50d4d3d4ca798de22263740f8bdfbfd13ca2",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/8b3f50d4d3d4ca798de22263740f8bdfbfd13ca2",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8b3f50d4d3d4ca798de22263740f8bdfbfd13ca2/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9022455d856d1ccd605203ef68fb3ea146d13b20",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/9022455d856d1ccd605203ef68fb3ea146d13b20",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/9022455d856d1ccd605203ef68fb3ea146d13b20"
        }
      ]
    },
    {
      "sha": "afcfa906b86ff327082143301f0ae2f3d01e4207",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmFmY2ZhOTA2Yjg2ZmYzMjcwODIxNDMzMDFmMGFlMmYzZDAxZTQyMDc=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-09T16:06:07Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-09T16:06:07Z"
        },
        "message": "Merge branch 'master' into issue/754",
        "tree": {
          "sha": "6cc5eaab765a52cf414454fea4d4d83e51e7350c",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/6cc5eaab765a52cf414454fea4d4d83e51e7350c"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/afcfa906b86ff327082143301f0ae2f3d01e4207",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgcHtvCRBK7hj4Ov3rIwAAdHIIAIWlbE5YpOOlRvPB41kFJeIA\nkPgky1HBveA6WCBIUW45hQ+QvnjcJI8SK9QPpW8m2dZ0znJ+2tlNsFu7HUOR7KKE\nxILc8nfjF0Nqhvt9Dg02B2g/NPAKk9ct/0m/aetoEgq90PLYM2tTg0bc7ieG3JAG\nl54IJuvwBOrfjK5JTMSvYL30Q3DHJhh4RIwLHJHOAM2Bh1TlcemnjeuInT2TJFcY\njr35niEgIHuGN9Cx05aes1hOpZYsmXa4UPOFbbmIjUUgMvK1cyUJFCRvsaW9FOuL\nIdMpKHnqlTAuxj8gWoRNdOHuebAimaoHlUwr+n0VkygLAXbxQZ3aI0EXsCtPrBA=\n=e7Eu\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 6cc5eaab765a52cf414454fea4d4d83e51e7350c\nparent 8e20f4d9f5ec8e90a6ce673d47b0049cc4ba26fa\nparent 8b3f50d4d3d4ca798de22263740f8bdfbfd13ca2\nauthor Liam Newman <bitwiseman@gmail.com> 1617984367 -0700\ncommitter GitHub <noreply@github.com> 1617984367 -0700\n\nMerge branch 'master' into issue/754"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/afcfa906b86ff327082143301f0ae2f3d01e4207",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/afcfa906b86ff327082143301f0ae2f3d01e4207",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/afcfa906b86ff327082143301f0ae2f3d01e4207/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8e20f4d9f5ec8e90a6ce673d47b0049cc4ba26fa",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8e20f4d9f5ec8e90a6ce673d47b0049cc4ba26fa",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/8e20f4d9f5ec8e90a6ce673d47b0049cc4ba26fa"
        },
        {
          "sha": "8b3f50d4d3d4ca798de22263740f8bdfbfd13ca2",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8b3f50d4d3d4ca798de22263740f8bdfbfd13ca2",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/8b3f50d4d3d4ca798de22263740f8bdfbfd13ca2"
        }
      ]
    },
    {
      "sha": "837526ce5dd57161bd3e127005a28ea8171c7639",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjgzNzUyNmNlNWRkNTcxNjFiZDNlMTI3MDA1YTI4ZWE4MTcxYzc2Mzk=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-09T16:49:10Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-09T16:49:10Z"
        },
        "message": "Merge pull request #1083 from bitwiseman/issue/754\n\nReplace reflection with X-HTTP-Method-Override",
        "tree": {
          "sha": "6cc5eaab765a52cf414454fea4d4d83e51e7350c",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/6cc5eaab765a52cf414454fea4d4d83e51e7350c"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/837526ce5dd57161bd3e127005a28ea8171c7639",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgcIWGCRBK7hj4Ov3rIwAAdHIIAFtrOZb0KWNZpjjWrRSud9rZ\nq+j76q4cVtYn3Dh1XOZnTw1dze2p0y2lvqyqTPlJESsfNgo867U3E+BoE4ZzetQ4\nWVs2TkhpKrDwLSEGADZDLPlATW0ZGV460RpY2qigQ06V36cMu7SRo5Ilk19C3lB0\nEAxsoGAABOovBZhLSsNLXJhNmf2AP9dJ9GgLouzjo5WbG9wuRD4+ySqJ5QwZ0nhG\nIpcIkVBbI/ox5rnX2uPbxWpiZFP1VjBOM5kS788YwgFY8awIpWrAN4XNYEespPZ3\ndCQZyB1aRbLPMYuXS4hxouWxcFdjf5PK71YOE6Ko1Iu5jLv4p9Lj1Tez7lqm6gk=\n=cKYk\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 6cc5eaab765a52cf414454fea4d4d83e51e7350c\nparent 8b3f50d4d3d4ca798de22263740f8bdfbfd13ca2\nparent afcfa906b86ff327082143301f0ae2f3d01e4207\nauthor Liam Newman <bitwiseman@gmail.com> 1617986950 -0700\ncommitter GitHub <noreply@github.com> 1617986950 -0700\n\nMerge pull request #1083 from bitwiseman/issue/754\n\nReplace reflection with X-HTTP-Method-Override"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/837526ce5dd57161bd3e127005a28ea8171c7639",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/837526ce5dd57161bd3e127005a28ea8171c7639",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/837526ce5dd57161bd3e127005a28ea8171c7639/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8b3f50d4d3d4ca798de22263740f8bdfbfd13ca2",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8b3f50d4d3d4ca798de22263740f8bdfbfd13ca2",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/8b3f50d4d3d4ca798de22263740f8bdfbfd13ca2"
        },
        {
          "sha": "afcfa906b86ff327082143301f0ae2f3d01e4207",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/afcfa906b86ff327082143301f0ae2f3d01e4207",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/afcfa906b86ff327082143301f0ae2f3d01e4207"
        }
      ]
    },
    {
      "sha": "0c4728f46addd0a855cb74ea827fa0a85d93b27c",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjBjNDcyOGY0NmFkZGQwYTg1NWNiNzRlYTgyN2ZhMGE4NWQ5M2IyN2M=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-09T16:52:10Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-09T16:52:10Z"
        },
        "message": "Create codeql-analysis.yml",
        "tree": {
          "sha": "4af448a62c4f2c87fa6cfbc8d22eb7c0768714f8",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/4af448a62c4f2c87fa6cfbc8d22eb7c0768714f8"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/0c4728f46addd0a855cb74ea827fa0a85d93b27c",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgcIY6CRBK7hj4Ov3rIwAAdHIIAACfwRM520cjMel34leXIOru\ngLBQG8KryRf4EIaYGs5A6G6+MlYpo14YgHufYOSDZdXKsJddDiB2cDLfCgkkrY6L\nUETLlhmtkV9PTZc47wV/Vh+/hyWdAYXeXlDiOoSJufZv1EQDiueiwZvy6Fn8l2hu\n4QKUmF/EiNVT82iBendLYdpaYdHumK+NUcThQL0yrsNrwV367NDen/UNa7vpLzOC\nxYwXmmTXwOCc3elkD+b8AUP+hlv/9JALWvZzSrfObHEeMKhKNAs8m8alWCNM7iJY\nVsxbvqw9hYViorx/ptIZW4dQTEGVs+RiVl7WQ2z8q98Tjz+3rNj7SsidoNONaLw=\n=CYq/\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 4af448a62c4f2c87fa6cfbc8d22eb7c0768714f8\nparent 837526ce5dd57161bd3e127005a28ea8171c7639\nauthor Liam Newman <bitwiseman@gmail.com> 1617987130 -0700\ncommitter GitHub <noreply@github.com> 1617987130 -0700\n\nCreate codeql-analysis.yml"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/0c4728f46addd0a855cb74ea827fa0a85d93b27c",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/0c4728f46addd0a855cb74ea827fa0a85d93b27c",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/0c4728f46addd0a855cb74ea827fa0a85d93b27c/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "837526ce5dd57161bd3e127005a28ea8171c7639",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/837526ce5dd57161bd3e127005a28ea8171c7639",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/837526ce5dd57161bd3e127005a28ea8171c7639"
        }
      ]
    },
    {
      "sha": "8c9eb3393bdebda06f260e7dc47ecee696e13edb",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjhjOWViMzM5M2JkZWJkYTA2ZjI2MGU3ZGM0N2VjZWU2OTZlMTNlZGI=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-10T10:50:49Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-10T10:55:05Z"
        },
        "message": "Add label payload",
        "tree": {
          "sha": "debedbee466cef56900d2983fada59fff91fd414",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/debedbee466cef56900d2983fada59fff91fd414"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/8c9eb3393bdebda06f260e7dc47ecee696e13edb",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8c9eb3393bdebda06f260e7dc47ecee696e13edb",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/8c9eb3393bdebda06f260e7dc47ecee696e13edb",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8c9eb3393bdebda06f260e7dc47ecee696e13edb/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "0c4728f46addd0a855cb74ea827fa0a85d93b27c",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/0c4728f46addd0a855cb74ea827fa0a85d93b27c",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/0c4728f46addd0a855cb74ea827fa0a85d93b27c"
        }
      ]
    },
    {
      "sha": "626574ae365c7c73063396dafff985572555c3bf",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjYyNjU3NGFlMzY1YzdjNzMwNjMzOTZkYWZmZjk4NTU3MjU1NWMzYmY=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-10T10:54:29Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-10T10:55:05Z"
        },
        "message": "Add missing javadoc for GHEventPayload.WorkflowRun",
        "tree": {
          "sha": "7f968ca2270866bcbff61f1eaea90c44d6e613e7",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/7f968ca2270866bcbff61f1eaea90c44d6e613e7"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/626574ae365c7c73063396dafff985572555c3bf",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/626574ae365c7c73063396dafff985572555c3bf",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/626574ae365c7c73063396dafff985572555c3bf",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/626574ae365c7c73063396dafff985572555c3bf/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8c9eb3393bdebda06f260e7dc47ecee696e13edb",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8c9eb3393bdebda06f260e7dc47ecee696e13edb",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/8c9eb3393bdebda06f260e7dc47ecee696e13edb"
        }
      ]
    },
    {
      "sha": "8fac7d317e2f316e44fde159ae2824bdee5bf3b6",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjhmYWM3ZDMxN2UyZjMxNmU0NGZkZTE1OWFlMjgyNGJkZWU1YmYzYjY=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-12T15:34:18Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-12T15:34:18Z"
        },
        "message": "Use codecov.io to report coverage",
        "tree": {
          "sha": "11a5bf70ac69d582213975a340b2b4d6968e062e",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/11a5bf70ac69d582213975a340b2b4d6968e062e"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/8fac7d317e2f316e44fde159ae2824bdee5bf3b6",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgdGh6CRBK7hj4Ov3rIwAAdHIIAGInjzTAVH3FV5CaHqgsbKFJ\nAEh8zuJlaWfR2dLcgEmthQkIbUPyGhhy28b4Z0rx22+KyBvutQ08en+IqwY7Zf5q\nBKBlDJrz7vhoRUHBzX9SZMn928s/0IJCMYBpSkkjsK/W5p+RSEI/RKWkjRRwLaL3\nw3YGhzgNDmAhHIh9zKEWl/bbAOI7d5MLCCJhblHQwgXN2TfD/1Odg5eAg5M2MBZN\nr5WAqqUdGfV1N8d5HGCbz8nM39k4KO5AMbY3s6o90KDq7kdZjZu8uB2VJjLoE65e\n6JaXS6esFh5Dj2hhTbfg4HVqZ9kd0v9zaRsxXQoR7qPyfQjkNEGd7gvUqKTGaT8=\n=Ovlv\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 11a5bf70ac69d582213975a340b2b4d6968e062e\nparent 0c4728f46addd0a855cb74ea827fa0a85d93b27c\nauthor Liam Newman <bitwiseman@gmail.com> 1618241658 -0700\ncommitter GitHub <noreply@github.com> 1618241658 -0700\n\nUse codecov.io to report coverage"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8fac7d317e2f316e44fde159ae2824bdee5bf3b6",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/8fac7d317e2f316e44fde159ae2824bdee5bf3b6",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8fac7d317e2f316e44fde159ae2824bdee5bf3b6/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "0c4728f46addd0a855cb74ea827fa0a85d93b27c",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/0c4728f46addd0a855cb74ea827fa0a85d93b27c",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/0c4728f46addd0a855cb74ea827fa0a85d93b27c"
        }
      ]
    },
    {
      "sha": "927843ea8373a97fd4b25ac3275e38f904808875",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjkyNzg0M2VhODM3M2E5N2ZkNGIyNWFjMzI3NWUzOGY5MDQ4MDg4NzU=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-12T15:54:38Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-12T15:54:38Z"
        },
        "message": "Exclude some files from coverage entirely",
        "tree": {
          "sha": "b7e7240175aea19bac0e87357b9ed8456cd55b8e",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/b7e7240175aea19bac0e87357b9ed8456cd55b8e"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/927843ea8373a97fd4b25ac3275e38f904808875",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgdG0+CRBK7hj4Ov3rIwAAdHIIAGkceN4dr0GwyUDbA5gyN20f\nY6/qzLQf56tYziuPX7Y9QTtzb51ldXOHYz5BZDXcBGygw+Z+ysbvLIPCeA38Vhxc\n5dFAS0X4tMtX2sVVb9FpoUtDUnIwjeVNyLtR8MP2XH0NCebV1pAPq5gAXR3TUj2d\n1IuEtX1Q6QZtbhU0vrHZ/98cASRkzVmZBgBkciBELvU+hhWe7dTaqa78itzI5c3l\no8FwZ7p2xRpv81lexDGmHEihWaTlHlpNJ6sZwPOQEI3XPX0USL9IyIrWJctME/Vy\n3RTdL9+JAkESkZazdtUO9qjVnAPm0YzH8j/8x45CtYMfRtQ3D5s1gvw/8I6NHw4=\n=7q5c\n-----END PGP SIGNATURE-----\n",
          "payload": "tree b7e7240175aea19bac0e87357b9ed8456cd55b8e\nparent 8fac7d317e2f316e44fde159ae2824bdee5bf3b6\nauthor Liam Newman <bitwiseman@gmail.com> 1618242878 -0700\ncommitter GitHub <noreply@github.com> 1618242878 -0700\n\nExclude some files from coverage entirely"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/927843ea8373a97fd4b25ac3275e38f904808875",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/927843ea8373a97fd4b25ac3275e38f904808875",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/927843ea8373a97fd4b25ac3275e38f904808875/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8fac7d317e2f316e44fde159ae2824bdee5bf3b6",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/8fac7d317e2f316e44fde159ae2824bdee5bf3b6",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/8fac7d317e2f316e44fde159ae2824bdee5bf3b6"
        }
      ]
    },
    {
      "sha": "672febd88bd36da6470b8f5ede8e2ba4809170ce",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjY3MmZlYmQ4OGJkMzZkYTY0NzBiOGY1ZWRlOGUyYmE0ODA5MTcwY2U=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-12T16:07:48Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-12T16:07:48Z"
        },
        "message": "Update pom.xml",
        "tree": {
          "sha": "20c49884a29f56a544414f0908af33f8a84576ab",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/20c49884a29f56a544414f0908af33f8a84576ab"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/672febd88bd36da6470b8f5ede8e2ba4809170ce",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgdHBUCRBK7hj4Ov3rIwAAdHIIAGnaf5h3gZt1GBNJrlK6iY28\nN36mMglTYG0PliPa7o3RTkSjsx8aWGkuP8VRCISKG3fyaWNjIgBYI1o84Yx2xMzg\nQ1EHfne0cJl8RD4rzipcsfr6ZEHD2ndnKfJCjy0iLtEPFdscWuafNuB35BoecP8v\ny0BmGauPY7J0Wn7mJ2+rzJPqKPECb6pDItY1YTlvuWAhheYnAxVG6AP/5Ntj5GpV\nH6jA4tPy9u65npuZipB4V19wX+yjmG2vtOYwqix4HEmDYZ7sTjeQF1l5uo3KMBow\nT2bxXuQTy7+LHYEeqJ6DV3qbdez5VysUIeK5OZtmXYsw148SX8wTX3cTsenQSuU=\n=nfHh\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 20c49884a29f56a544414f0908af33f8a84576ab\nparent 927843ea8373a97fd4b25ac3275e38f904808875\nauthor Liam Newman <bitwiseman@gmail.com> 1618243668 -0700\ncommitter GitHub <noreply@github.com> 1618243668 -0700\n\nUpdate pom.xml"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/672febd88bd36da6470b8f5ede8e2ba4809170ce",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/672febd88bd36da6470b8f5ede8e2ba4809170ce",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/672febd88bd36da6470b8f5ede8e2ba4809170ce/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "927843ea8373a97fd4b25ac3275e38f904808875",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/927843ea8373a97fd4b25ac3275e38f904808875",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/927843ea8373a97fd4b25ac3275e38f904808875"
        }
      ]
    },
    {
      "sha": "bf082f2a4650641ec545b7dadaecffba3b58806a",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmJmMDgyZjJhNDY1MDY0MWVjNTQ1YjdkYWRhZWNmZmJhM2I1ODgwNmE=",
      "commit": {
        "author": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-12T16:15:23Z"
        },
        "committer": {
          "name": "Guillaume Smet",
          "email": "guillaume.smet@gmail.com",
          "date": "2021-04-12T16:15:23Z"
        },
        "message": "Properly wrap the check runs with the repository when listing them",
        "tree": {
          "sha": "0e306dc861e359426ef86b9b0bd5bdba8cca5465",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/0e306dc861e359426ef86b9b0bd5bdba8cca5465"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/bf082f2a4650641ec545b7dadaecffba3b58806a",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/bf082f2a4650641ec545b7dadaecffba3b58806a",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/bf082f2a4650641ec545b7dadaecffba3b58806a",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/bf082f2a4650641ec545b7dadaecffba3b58806a/comments",
      "author": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "gsmet",
        "id": 1279749,
        "node_id": "MDQ6VXNlcjEyNzk3NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gsmet",
        "html_url": "https://github.com/gsmet",
        "followers_url": "https://api.github.com/users/gsmet/followers",
        "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
        "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
        "organizations_url": "https://api.github.com/users/gsmet/orgs",
        "repos_url": "https://api.github.com/users/gsmet/repos",
        "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gsmet/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "0c4728f46addd0a855cb74ea827fa0a85d93b27c",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/0c4728f46addd0a855cb74ea827fa0a85d93b27c",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/0c4728f46addd0a855cb74ea827fa0a85d93b27c"
        }
      ]
    },
    {
      "sha": "c5b45523d689b966bfdab56b1db4f0fa68cef5d4",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOmM1YjQ1NTIzZDY4OWI5NjZiZmRhYjU2YjFkYjRmMGZhNjhjZWY1ZDQ=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-12T16:28:04Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-12T16:28:04Z"
        },
        "message": "Update pom.xml",
        "tree": {
          "sha": "af05b2466a5ee728f8448e1cf3e5a854cca9bd98",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/af05b2466a5ee728f8448e1cf3e5a854cca9bd98"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/c5b45523d689b966bfdab56b1db4f0fa68cef5d4",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgdHUVCRBK7hj4Ov3rIwAAdHIIAAUDKCa2kajP/T13F2UGdjFi\nLLzWy3Zlxtvw5KKc/s+uR1Q44uc8uGlweyHylAGvql5ih2U/YzlqkQvLCXRmBSaj\nryj5pnz8zkKGlBY31Ug6+834ImSFbk3KhNS/6ad/DZU+KdQd/iLDV3hbbqMeKP3a\n38lv5ymfHKUzJKF5ml3yYK/yji9TArHmdWbuorBAT0mBOTD8mz9vOeAu9UnIFSp4\n2mTzBZYA83QZasjYtBDPE9zV+HP1SiN6Kr7Gv+9pZRlSiHhXU5XqTQRkkem/pO7d\ncBrXuJMAY+qc/R7krM7/Q+X4U6SxwDahdrO/QyAIF+AKkWo4JoCDyJ8Pq589ObQ=\n=JD9e\n-----END PGP SIGNATURE-----\n",
          "payload": "tree af05b2466a5ee728f8448e1cf3e5a854cca9bd98\nparent 672febd88bd36da6470b8f5ede8e2ba4809170ce\nauthor Liam Newman <bitwiseman@gmail.com> 1618244884 -0700\ncommitter GitHub <noreply@github.com> 1618244884 -0700\n\nUpdate pom.xml"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/c5b45523d689b966bfdab56b1db4f0fa68cef5d4",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/c5b45523d689b966bfdab56b1db4f0fa68cef5d4",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/c5b45523d689b966bfdab56b1db4f0fa68cef5d4/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "672febd88bd36da6470b8f5ede8e2ba4809170ce",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/672febd88bd36da6470b8f5ede8e2ba4809170ce",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/672febd88bd36da6470b8f5ede8e2ba4809170ce"
        }
      ]
    },
    {
      "sha": "3a1ed5a5b7ce593252ef66931e20d966d29a128c",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjNhMWVkNWE1YjdjZTU5MzI1MmVmNjY5MzFlMjBkOTY2ZDI5YTEyOGM=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-12T16:28:21Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-12T16:28:21Z"
        },
        "message": "Create codecov.yml",
        "tree": {
          "sha": "c898e44672ca63ae66c7cd39b8a6c1f9c8aac276",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/c898e44672ca63ae66c7cd39b8a6c1f9c8aac276"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/3a1ed5a5b7ce593252ef66931e20d966d29a128c",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgdHUmCRBK7hj4Ov3rIwAAdHIIAGkX74Q+SzUAq24ybtMZSkyR\ngNBrxRERFLNLZQviW6P1Nud1DDJVn5DDfTaylaej4HO+e6VO0nbjCEYVc3iO5JbP\nOLbq0O/LWqF3BeNC9RCx8gBPFgc68imMOqqdFnm7Pda45eVlXCFDaHdC83I6a9uO\nYeGZhyGerD7Im64o/8rK7cdRCLrb4UBy+6ix6kWUR5n1yAkq8K8be/e5DI7GQgIq\niljdztmS6G9nO8qm9Jo97IrarzrpdnO26zOn1u1Gx86CZPMy3EbIXePcNpwXfC0L\nJx1v2rIPzk9kGzVmTATz0bIeUGJXzhMovFEBUgMzXfChViNEri6jEtSeV6xD6jI=\n=9FdL\n-----END PGP SIGNATURE-----\n",
          "payload": "tree c898e44672ca63ae66c7cd39b8a6c1f9c8aac276\nparent c5b45523d689b966bfdab56b1db4f0fa68cef5d4\nauthor Liam Newman <bitwiseman@gmail.com> 1618244901 -0700\ncommitter GitHub <noreply@github.com> 1618244901 -0700\n\nCreate codecov.yml"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/3a1ed5a5b7ce593252ef66931e20d966d29a128c",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/3a1ed5a5b7ce593252ef66931e20d966d29a128c",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/3a1ed5a5b7ce593252ef66931e20d966d29a128c/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c5b45523d689b966bfdab56b1db4f0fa68cef5d4",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/c5b45523d689b966bfdab56b1db4f0fa68cef5d4",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/c5b45523d689b966bfdab56b1db4f0fa68cef5d4"
        }
      ]
    },
    {
      "sha": "6453e585a9ead46c47dd895d1c09ba8ffc313ada",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjY0NTNlNTg1YTllYWQ0NmM0N2RkODk1ZDFjMDliYThmZmMzMTNhZGE=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-12T16:41:14Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-12T16:41:14Z"
        },
        "message": "Merge pull request #1091 from hub4j/bitwiseman-patch-2\n\nUse codecov.io to report coverage",
        "tree": {
          "sha": "c898e44672ca63ae66c7cd39b8a6c1f9c8aac276",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/c898e44672ca63ae66c7cd39b8a6c1f9c8aac276"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/6453e585a9ead46c47dd895d1c09ba8ffc313ada",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgdHgqCRBK7hj4Ov3rIwAAdHIIAH0x3kaR2sJPEoXVcVIxapQ/\naPZb+TkG1wJZnozz/FqFJ0KkI7SSElyUqNZ0Jk/34IttbEzocsvnyMn1UmnKSSrp\nCSVYS+xIyBqPHnthLJwPIDWsQ/MssZbAF3nhLAmxeM/gGDaPgH0BwyTzns6j6HLo\nWTrfJFnSdnQNstKwqgkTjmHqeeI1QynLx3wOg5/dNLrb/yrH/pFyAYgZwXDBvRiH\nyCCABSxPkE5ldUKX6Oj/D4tU3KQ8/FfI76bX0pzP1m/pCkTVCZ+6weTnRM4DZ5o7\nvQxm7qsdEdsoVdZ5GA6GbsVP9QFiVuBsfP9lbpUvCo9SkMkMQ0nFdogUJ/TKes4=\n=t2Ua\n-----END PGP SIGNATURE-----\n",
          "payload": "tree c898e44672ca63ae66c7cd39b8a6c1f9c8aac276\nparent 0c4728f46addd0a855cb74ea827fa0a85d93b27c\nparent 3a1ed5a5b7ce593252ef66931e20d966d29a128c\nauthor Liam Newman <bitwiseman@gmail.com> 1618245674 -0700\ncommitter GitHub <noreply@github.com> 1618245674 -0700\n\nMerge pull request #1091 from hub4j/bitwiseman-patch-2\n\nUse codecov.io to report coverage"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6453e585a9ead46c47dd895d1c09ba8ffc313ada",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/6453e585a9ead46c47dd895d1c09ba8ffc313ada",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6453e585a9ead46c47dd895d1c09ba8ffc313ada/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "0c4728f46addd0a855cb74ea827fa0a85d93b27c",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/0c4728f46addd0a855cb74ea827fa0a85d93b27c",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/0c4728f46addd0a855cb74ea827fa0a85d93b27c"
        },
        {
          "sha": "3a1ed5a5b7ce593252ef66931e20d966d29a128c",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/3a1ed5a5b7ce593252ef66931e20d966d29a128c",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/3a1ed5a5b7ce593252ef66931e20d966d29a128c"
        }
      ]
    },
    {
      "sha": "93abb0ed365df2a6d30a14658c76b7a20c03cd0f",
      "node_id": "MDY6Q29tbWl0MjA2ODg4MjAxOjkzYWJiMGVkMzY1ZGYyYTZkMzBhMTQ2NThjNzZiN2EyMGMwM2NkMGY=",
      "commit": {
        "author": {
          "name": "Liam Newman",
          "email": "bitwiseman@gmail.com",
          "date": "2021-04-12T16:42:11Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2021-04-12T16:42:11Z"
        },
        "message": "Merge branch 'master' into label-payload",
        "tree": {
          "sha": "679c9104dc8301732a4ac96721939e1f8e102562",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/trees/679c9104dc8301732a4ac96721939e1f8e102562"
        },
        "url": "https://api.github.com/repos/hub4j-test-org/github-api/git/commits/93abb0ed365df2a6d30a14658c76b7a20c03cd0f",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgdHhjCRBK7hj4Ov3rIwAAdHIIAAME6ICIQjYVmockZEkPDDMx\nWnXc0nrfCPB6kjy385+cvzpi+kGyAJY0Uo4A/hGAzYObaXoUQsheftiMNU69aREW\nPYGRuDtbCYLLvxNYXmuWoeMkwPs4lCdudHCoD2QqmKGgnQZaiaeMQE9btF/x5jCR\ntxSSirvWZU56l+P8rmqYWztupUiSwyjjELsmPDQEl59pNHHOMwGR3ycbBsb0/CNC\nUw7CsqNCLaP27JsnAzB6UvdDM+30rCsyV45InmcAYx4IvxxwDjG1/nv4j0Eac31Z\nTOvfrIW+ACyaRXq3ad68GujczzpINFIHZ/h2SC0DmVgA97Ju7KG9Cni1fj0+wJE=\n=9CMC\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 679c9104dc8301732a4ac96721939e1f8e102562\nparent 626574ae365c7c73063396dafff985572555c3bf\nparent 6453e585a9ead46c47dd895d1c09ba8ffc313ada\nauthor Liam Newman <bitwiseman@gmail.com> 1618245731 -0700\ncommitter GitHub <noreply@github.com> 1618245731 -0700\n\nMerge branch 'master' into label-payload"
        }
      },
      "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/93abb0ed365df2a6d30a14658c76b7a20c03cd0f",
      "html_url": "https://github.com/hub4j-test-org/github-api/commit/93abb0ed365df2a6d30a14658c76b7a20c03cd0f",
      "comments_url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/93abb0ed365df2a6d30a14658c76b7a20c03cd0f/comments",
      "author": {
        "login": "bitwiseman",
        "id": 1958953,
        "node_id": "MDQ6VXNlcjE5NTg5NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitwiseman",
        "html_url": "https://github.com/bitwiseman",
        "followers_url": "https://api.github.com/users/bitwiseman/followers",
        "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
        "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
        "repos_url": "https://api.github.com/users/bitwiseman/repos",
        "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "626574ae365c7c73063396dafff985572555c3bf",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/626574ae365c7c73063396dafff985572555c3bf",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/626574ae365c7c73063396dafff985572555c3bf"
        },
        {
          "sha": "6453e585a9ead46c47dd895d1c09ba8ffc313ada",
          "url": "https://api.github.com/repos/hub4j-test-org/github-api/commits/6453e585a9ead46c47dd895d1c09ba8ffc313ada",
          "html_url": "https://github.com/hub4j-test-org/github-api/commit/6453e585a9ead46c47dd895d1c09ba8ffc313ada"
        }
      ]
    }
  ],
  "files": [
    {
      "sha": "e4234f5f6f39899282a6ef1edff343ae1269222e",
      "filename": ".github/PULL_REQUEST_TEMPLATE.md",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/.github/PULL_REQUEST_TEMPLATE.md",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/.github/PULL_REQUEST_TEMPLATE.md",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/.github/PULL_REQUEST_TEMPLATE.md?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1,15 +1,16 @@\n-# Description \n-** Describe your change here** \n+# Description\n+\n+<!-- Describe your change here -->\n \n # Before submitting a PR:\n-We love getting PRs, but we hate asking people for the same basic changes every time. \n+We love getting PRs, but we hate asking people for the same basic changes every time.\n \n-- [ ] Push your changes to a branch other than `master`. Create your PR from that branch.    \n+- [ ] Push your changes to a branch other than `main`. Create your PR from that branch.\n - [ ] Add JavaDocs and other comments\n - [ ] Write tests that run and pass in CI. See [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to capture snapshot data.\n-- [ ] Run `mvn -D enable-ci clean install site` locally. If this command doesn't succeed, your change will not pass CI. \n+- [ ] Run `mvn -D enable-ci clean install site` locally. If this command doesn't succeed, your change will not pass CI.\n \n # When creating a PR: \n \n-- [ ] Fill in the \"Description\" above. \n-- [ ] Enable \"Allow edits from maintainers\". \n+- [ ] Fill in the \"Description\" above.\n+- [ ] Enable \"Allow edits from maintainers\"."
    },
    {
      "sha": "ddc1e952ee7d105872a7b62fb03c2529fce9f34d",
      "filename": ".github/workflows/codeql-analysis.yml",
      "status": "added",
      "additions": 67,
      "deletions": 0,
      "changes": 67,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/.github/workflows/codeql-analysis.yml",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/.github/workflows/codeql-analysis.yml",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/.github/workflows/codeql-analysis.yml?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,67 @@\n+# For most projects, this workflow file will not need changing; you simply need\n+# to commit it to your repository.\n+#\n+# You may wish to alter this file to override the set of languages analyzed,\n+# or to provide custom queries or build logic.\n+#\n+# ******** NOTE ********\n+# We have attempted to detect the languages in your repository. Please check\n+# the `language` matrix defined below to confirm you have the correct set of\n+# supported CodeQL languages.\n+#\n+name: \"CodeQL\"\n+\n+on:\n+  push:\n+    branches: [ main, gh-pages ]\n+  pull_request:\n+    # The branches below must be a subset of the branches above\n+    branches: [ main ]\n+  schedule:\n+    - cron: '20 0 * * 6'\n+\n+jobs:\n+  analyze:\n+    name: Analyze\n+    runs-on: ubuntu-latest\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        language: [ 'java' ]\n+        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n+        # Learn more:\n+        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n+\n+    steps:\n+    - name: Checkout repository\n+      uses: actions/checkout@v2\n+\n+    # Initializes the CodeQL tools for scanning.\n+    - name: Initialize CodeQL\n+      uses: github/codeql-action/init@v1\n+      with:\n+        languages: ${{ matrix.language }}\n+        # If you wish to specify custom queries, you can do so here or in a config file.\n+        # By default, queries listed here will override any specified in a config file.\n+        # Prefix the list here with \"+\" to use these queries and those in the config file.\n+        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n+\n+    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n+    # If this step fails, then you should remove it and run the build manually (see below)\n+    - name: Autobuild\n+      uses: github/codeql-action/autobuild@v1\n+\n+    # ℹ️ Command-line programs to run using the OS shell.\n+    # 📚 https://git.io/JvXDl\n+\n+    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines\n+    #    and modify them (or add more) to build your code if your project\n+    #    uses a compiled language\n+\n+    #- run: |\n+    #   make bootstrap\n+    #   make release\n+\n+    - name: Perform CodeQL Analysis\n+      uses: github/codeql-action/analyze@v1"
    },
    {
      "sha": "ad222cf192092f6bd22172eb7a46c9a402177059",
      "filename": ".github/workflows/maven-build.yml",
      "status": "modified",
      "additions": 37,
      "deletions": 11,
      "changes": 48,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/.github/workflows/maven-build.yml",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/.github/workflows/maven-build.yml",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/.github/workflows/maven-build.yml?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -2,42 +2,51 @@ name: CI\n \n on: [push, pull_request]\n \n+# this is required by spotless for JDK 16+\n+env:\n+  JAVA_11_PLUS_MAVEN_OPTS: \"--add-opens jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED\"\n \n jobs:\n   build:\n     name: build-only (Java ${{ matrix.java }})\n     runs-on: ubuntu-latest\n     strategy:\n+      fail-fast: false\n       matrix:\n-        java: [ 13 ]\n+        java: [ 16 ]\n     steps:\n       - uses: actions/checkout@v2\n       - name: Set up JDK\n-        uses: actions/setup-java@v1\n+        uses: actions/setup-java@v2\n         with:\n           java-version: ${{ matrix.java }}\n+          distribution: 'adopt'\n       - name: Cached .m2\n-        uses: actions/cache@v2\n+        uses: actions/cache@v2.1.6\n         with:\n           path: ~/.m2/repository\n           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n           restore-keys: |\n             ${{ runner.os }}-maven-\n       - name: Maven Install (skipTests)\n-        run: mvn -B install -DskipTests -D enable-ci --file pom.xml\n+        env:\n+          MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}\n+        run: mvn -B install -DskipTests --file pom.xml\n   site:\n     name: site (Java ${{ matrix.java }})\n     runs-on: ubuntu-latest\n     strategy:\n+      fail-fast: false\n       matrix:\n         java: [ 8, 11 ]\n     steps:\n       - uses: actions/checkout@v2\n       - name: Set up JDK\n-        uses: actions/setup-java@v1\n+        uses: actions/setup-java@v2\n         with:\n           java-version: ${{ matrix.java }}\n-      - uses: actions/cache@v2\n+          distribution: 'adopt'\n+      - uses: actions/cache@v2.1.6\n         with:\n           path: ~/.m2/repository\n           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n@@ -49,24 +58,41 @@ jobs:\n     name: test (${{ matrix.os }}, Java ${{ matrix.java }})\n     runs-on: ${{ matrix.os }}-latest\n     strategy:\n+      fail-fast: false\n       matrix:\n         os: [ ubuntu, windows ]\n-        java: [ 8, 11, 13, 15-ea ]\n+        java: [ 8, 11, 16 ]\n     steps:\n     - uses: actions/checkout@v2\n     - name: Set up JDK\n-      uses: actions/setup-java@v1\n+      uses: actions/setup-java@v2\n       with:\n         java-version: ${{ matrix.java }}\n-    - uses: actions/cache@v2\n+        distribution: 'adopt'\n+    - uses: actions/cache@v2.1.6\n       with:\n         path: ~/.m2/repository\n         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n         restore-keys: |\n           ${{ runner.os }}-maven-\n+    # JDK 8\n     - name: Maven Install without Code Coverage\n-      if: matrix.os == 'windows'\n+      if: matrix.os == 'windows' && matrix.java == '8'\n       run: mvn -B install --file pom.xml\n     - name: Maven Install with Code Coverage\n-      if: matrix.os != 'windows'\n+      if: matrix.os != 'windows' && matrix.java == '8'\n       run: mvn -B install -D enable-ci --file pom.xml\n+    - name: Codecov Report \n+      if: matrix.os != 'windows' && matrix.java == '8'\n+      uses: codecov/codecov-action@v1.5.0  \n+    # JDK 11+\n+    - name: Maven Install without Code Coverage\n+      if: matrix.os == 'windows' && matrix.java != '8'\n+      env:\n+        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}\n+      run: mvn -B install --file pom.xml \"-Dsurefire.argLine=--add-opens java.base/java.net=ALL-UNNAMED\"\n+    - name: Maven Install with Code Coverage\n+      if: matrix.os != 'windows' && matrix.java != '8'\n+      env:\n+        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}\n+      run: mvn -B install -D enable-ci --file pom.xml \"-Dsurefire.argLine=--add-opens java.base/java.net=ALL-UNNAMED\""
    },
    {
      "sha": "cdff903bd93ca03ac0b86c1c15f3e4bd3089011e",
      "filename": ".github/workflows/release-drafter.yml",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/.github/workflows/release-drafter.yml",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/.github/workflows/release-drafter.yml",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/.github/workflows/release-drafter.yml?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,16 @@\n+\n+name: Release Drafter\n+\n+on:\n+  push:\n+    branches:\n+      - main\n+\n+jobs:\n+  update_release_draft:\n+    runs-on: ubuntu-latest\n+    steps:\n+      - name: Release Drafter\n+        uses: release-drafter/release-drafter@v5\n+        env:\n+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        "
    },
    {
      "sha": "47e969ded79e7d764ef825291c7b85988c3af91c",
      "filename": "CONTRIBUTING.md",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/CONTRIBUTING.md",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/CONTRIBUTING.md",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/CONTRIBUTING.md?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -21,7 +21,7 @@ Example for a single test case:\n \n ### Setting up credential\n \n-1. Create an OAuth token on github.com\n+1. Create a \"Personal access token\" on https://github.com/ (`Settings` > `Developer settings` > `Personal access tokens`)\n 2. Set the GITHUB_OAUTH environment variable to the value of that token\n 3. Set the system property `test.github.useProxy` (usually like \"-Dtest.github.useProxy\" as a Java VM option)\n \n@@ -41,7 +41,7 @@ Once you have credentials setup, you add new test classes and test methods as yo\n \n Keep `useProxy` enabled and iterate on your tests as needed. With `useProxy` enabled your tests will interact with \n GitHub - you will need to clean up your server-state between runs. This can be done manually to start with.\n-Once your test code is somewhat stable, use `getGitHubBeforeAfter()` to get a `GitHub` instance for test setup and cleanup.\n+Once your test code is somewhat stable, use `getNonRecordingGitHub()` to get a `GitHub` instance for test setup and cleanup.\n Interactions with that `GitHub` instance will not be recorded as part of the test, keeping the test data files to a minimum. \n \n #### Running tests against your personal GitHub user account"
    },
    {
      "sha": "76474f45b495ab63537f08515e857ee8b3c1dad4",
      "filename": "README.md",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/README.md",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/README.md",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/README.md?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -2,8 +2,8 @@\n \n [![Sonatype Nexus (Releases)](https://img.shields.io/nexus/r/org.kohsuke/github-api?server=https%3A%2F%2Foss.sonatype.org)](https://mvnrepository.com/artifact/org.kohsuke/github-api)\n [![Join the chat at https://gitter.im/hub4j/github-api](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/hub4j/github-api?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n-![CI](https://github.com/hub4j/github-api/workflows/CI/badge.svg?branch=master)\n-\n+![CI](https://github.com/hub4j/github-api/workflows/CI/badge.svg?branch=main)\n+[![codecov](https://codecov.io/gh/hub4j/github-api/branch/main/graph/badge.svg?token=j1jQqydZLJ)](https://codecov.io/gh/hub4j/github-api)\n \n \n See https://github-api.kohsuke.org/ for more details"
    },
    {
      "sha": "b54ee1fa97dd9563e527a43483e27a321fb27b08",
      "filename": "codecov.yml",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/codecov.yml",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/codecov.yml",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/codecov.yml?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,7 @@\n+ignore:\n+  - \"**/extras/okhttp3/ObsoleteUrlFactory**\"\n+  - \"**/extras/OkHttpConnector\"\n+  - \"**/extras/OkHttp3Connector\"\n+  - \"**/example/**\"\n+  - \"**/github/EnforcementLevel\"\n+"
    },
    {
      "sha": "dd3aa05ebfce3bb684b0193e7c27d674626eddb1",
      "filename": "pom.xml",
      "status": "modified",
      "additions": 94,
      "deletions": 33,
      "changes": 127,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/pom.xml",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/pom.xml",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/pom.xml?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -2,7 +2,7 @@\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>org.kohsuke</groupId>\n   <artifactId>github-api</artifactId>\n-  <version>1.123</version>\n+  <version>1.131</version>\n   <name>GitHub API for Java</name>\n   <url>https://github-api.kohsuke.org/</url>\n   <description>GitHub API for Java</description>\n@@ -11,7 +11,7 @@\n     <connection>scm:git:git@github.com/hub4j/${project.artifactId}.git</connection>\n     <developerConnection>scm:git:ssh://git@github.com/hub4j/${project.artifactId}.git</developerConnection>\n     <url>https://github.com/hub4j/github-api/</url>\n-    <tag>github-api-1.123</tag>\n+    <tag>github-api-1.131</tag>\n   </scm>\n \n   <distributionManagement>\n@@ -33,8 +33,8 @@\n \n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    <spotbugs-maven-plugin.version>4.2.0</spotbugs-maven-plugin.version>\n-    <spotbugs.version>4.1.3</spotbugs.version>\n+    <spotbugs-maven-plugin.version>4.2.3</spotbugs-maven-plugin.version>\n+    <spotbugs.version>4.2.3</spotbugs.version>\n     <spotbugs-maven-plugin.failOnError>true</spotbugs-maven-plugin.failOnError>\n     <hamcrest.version>2.2</hamcrest.version>\n     <okhttp3.version>4.4.1</okhttp3.version>\n@@ -45,6 +45,9 @@\n     <!-- For non-ci builds we'd like the build to still complete if jacoco metrics aren't met. -->\n     <jacoco.haltOnFailure>false</jacoco.haltOnFailure>\n     <jjwt.suite.version>0.11.2</jjwt.suite.version>\n+\n+    <jacoco.surefire.argLine />\n+    <surefire.argLine />\n   </properties>\n \n   <build>\n@@ -94,17 +97,22 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-gpg-plugin</artifactId>\n-          <version>1.6</version>\n+          <version>3.0.1</version>\n         </plugin>\n         <plugin>\n           <groupId>org.jacoco</groupId>\n           <artifactId>jacoco-maven-plugin</artifactId>\n-          <version>0.8.6</version>\n+          <version>0.8.7</version>\n           <executions>\n             <execution>\n               <goals>\n                 <goal>prepare-agent</goal>\n               </goals>\n+              <configuration>\n+                <propertyName>jacoco.surefire.argLine</propertyName>\n+                <!-- no need to get data about external code. It dramatically reduces performance of JaCoCo for nothing -->\n+                <include>org.kohsuke.*</include>\n+              </configuration>\n             </execution>\n             <!-- attached to Maven test phase -->\n             <execution>\n@@ -154,9 +162,11 @@\n \n \n                       <!-- Deprecated -->\n+                      <exclude>org.kohsuke.github.extras.OkHttpConnector</exclude>\n                       <exclude>org.kohsuke.github.extras.OkHttp3Connector</exclude>\n                       <exclude>org.kohsuke.github.EnforcementLevel</exclude>\n                       <exclude>org.kohsuke.github.GHPerson.1</exclude>\n+                      \n                       <!-- TODO: Some coverage, but more needed -->\n                       <exclude>org.kohsuke.github.GHPullRequestReviewBuilder.DraftReviewComment</exclude>\n                       <exclude>org.kohsuke.github.GHIssue.PullRequest</exclude>\n@@ -196,7 +206,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>3.2.0</version>\n+          <version>3.3.0</version>\n           <configuration>\n             <source>8</source>\n             <failOnWarnings>true</failOnWarnings>\n@@ -240,7 +250,7 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-project-info-reports-plugin</artifactId>\n-        <version>3.1.1</version>\n+        <version>3.1.2</version>\n         <dependencies>\n           <dependency>\n             <groupId>org.apache.bcel</groupId>\n@@ -272,26 +282,15 @@\n             <id>default-test</id>\n             <configuration>\n               <excludesFile>src/test/resources/slow-or-flaky-tests.txt</excludesFile>\n-            </configuration>\n-          </execution>\n-          <execution>\n-            <id>slow-or-flaky-test</id>\n-            <phase>test</phase>\n-            <goals>\n-              <goal>test</goal>\n-            </goals>\n-            <configuration>\n-              <rerunFailingTestsCount>2</rerunFailingTestsCount>\n-              <!-- There are some tests that take longer or are a little flaky.  Run them here. -->\n-              <includesFile>src/test/resources/slow-or-flaky-tests.txt</includesFile>\n+              <argLine>@{jacoco.surefire.argLine} ${surefire.argLine}</argLine>\n             </configuration>\n           </execution>\n         </executions>\n       </plugin>\n       <plugin>\n         <groupId>org.codehaus.mojo</groupId>\n         <artifactId>animal-sniffer-maven-plugin</artifactId>\n-        <version>1.19</version>\n+        <version>1.20</version>\n         <configuration>\n           <signature>\n             <groupId>org.codehaus.mojo.signature</groupId>\n@@ -324,7 +323,7 @@\n       <plugin>\n         <groupId>com.diffplug.spotless</groupId>\n         <artifactId>spotless-maven-plugin</artifactId>\n-        <version>2.8.1</version>\n+        <version>2.11.1</version>\n         <executions>\n           <execution>\n             <id>spotless-check</id>\n@@ -390,7 +389,7 @@\n     <dependency>\n       <groupId>com.tngtech.archunit</groupId>\n       <artifactId>archunit</artifactId>\n-      <version>0.16.0</version>\n+      <version>0.19.0</version>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n@@ -415,23 +414,29 @@\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>4.13.1</version>\n+      <version>4.13.2</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.awaitility</groupId>\n+      <artifactId>awaitility</artifactId>\n+      <version>4.1.0</version>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-databind</artifactId>\n-      <version>2.12.1</version>\n+      <version>2.12.3</version>\n     </dependency>\n     <dependency>\n       <groupId>commons-io</groupId>\n       <artifactId>commons-io</artifactId>\n-      <version>2.4</version>\n+      <version>2.8.0</version>\n     </dependency>\n     <dependency>\n       <groupId>com.infradna.tool</groupId>\n       <artifactId>bridge-method-annotation</artifactId>\n-      <version>1.18</version>\n+      <version>1.21</version>\n       <optional>true</optional>\n     </dependency>\n     <!-- for stapler-jetty -->\n@@ -452,7 +457,7 @@\n     <dependency>\n       <groupId>org.kohsuke.stapler</groupId>\n       <artifactId>stapler</artifactId>\n-      <version>1.262</version>\n+      <version>1.263</version>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n@@ -464,7 +469,7 @@\n     <dependency>\n       <groupId>org.eclipse.jgit</groupId>\n       <artifactId>org.eclipse.jgit</artifactId>\n-      <version>5.10.0.202012080955-r</version>\n+      <version>5.11.1.202105131744-r</version>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n@@ -514,13 +519,13 @@\n     <dependency>\n       <groupId>org.kohsuke</groupId>\n       <artifactId>wordnet-random-name</artifactId>\n-      <version>1.3</version>\n+      <version>1.5</version>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.mockito</groupId>\n       <artifactId>mockito-core</artifactId>\n-      <version>3.7.7</version>\n+      <version>3.10.0</version>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n@@ -532,13 +537,13 @@\n     <dependency>\n       <groupId>com.github.tomakehurst</groupId>\n       <artifactId>wiremock-jre8-standalone</artifactId>\n-      <version>2.27.2</version>\n+      <version>2.28.0</version>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n-      <version>2.8.6</version>\n+      <version>2.8.7</version>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n@@ -561,6 +566,38 @@\n     </pluginRepository>\n   </pluginRepositories>\n   <profiles>\n+    <!-- only enable slow-or-flaky-test if -Dtest= is not present -->\n+    <profile>\n+      <id>slow-or-flaky-test</id>\n+      <activation>\n+        <property>\n+          <name>!test</name>\n+        </property>\n+      </activation>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <artifactId>maven-surefire-plugin</artifactId>\n+            <executions>\n+              <execution>\n+                <id>slow-or-flaky-test</id>\n+                <phase>test</phase>\n+                <goals>\n+                  <goal>test</goal>\n+                </goals>\n+                <configuration>\n+                  <rerunFailingTestsCount>2</rerunFailingTestsCount>\n+                  <!-- There are some tests that take longer or are a little\n+                    flaky. Run them here. -->\n+                  <includesFile>src/test/resources/slow-or-flaky-tests.txt</includesFile>\n+                  <argLine>@{jacoco.surefire.argLine} ${surefire.argLine}</argLine>\n+                </configuration>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n     <profile>\n       <id>ci-non-windows</id>\n       <activation>\n@@ -603,6 +640,30 @@\n               </execution>\n             </executions>\n           </plugin>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-enforcer-plugin</artifactId>\n+            <version>3.0.0-M3</version>\n+            <executions>\n+              <execution>\n+                <id>enforce-jacoco-exist</id>\n+                <phase>verify</phase>\n+                <goals>\n+                  <goal>enforce</goal>\n+                </goals>\n+                <configuration>\n+                  <rules>\n+                    <requireFilesExist>\n+                      <files>\n+                        <file>${project.build.directory}/jacoco.exec</file>\n+                      </files>\n+                    </requireFilesExist>\n+                  </rules>\n+                  <fail>true</fail>\n+                </configuration>\n+              </execution>\n+            </executions>\n+          </plugin>\n         </plugins>\n       </build>\n     </profile>"
    },
    {
      "sha": "51b5177032e38fc44a671731114304ada4974770",
      "filename": "src/main/java/org/kohsuke/github/AbstractBuilder.java",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/AbstractBuilder.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/AbstractBuilder.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/AbstractBuilder.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -99,7 +99,6 @@ protected AbstractBuilder(@Nonnull Class<R> finalReturnType,\n      */\n     @Nonnull\n     @BetaApi\n-    @Deprecated\n     public R done() throws IOException {\n         R result;\n         if (updateInPlace && baseInstance != null) {\n@@ -129,7 +128,6 @@ public R done() throws IOException {\n      */\n     @Nonnull\n     @BetaApi\n-    @Deprecated\n     protected S with(@Nonnull String name, Object value) throws IOException {\n         requester.with(name, value);\n         return continueOrDone();\n@@ -150,7 +148,6 @@ protected S with(@Nonnull String name, Object value) throws IOException {\n      */\n     @Nonnull\n     @BetaApi\n-    @Deprecated\n     protected S continueOrDone() throws IOException {\n         // This little bit of roughness in this base class means all inheriting builders get to create Updater and\n         // Setter classes from almost identical code. Creator can often be implemented with significant code reuse as"
    },
    {
      "sha": "d0fd17e06bf583d406f269056df42a9dd308453e",
      "filename": "src/main/java/org/kohsuke/github/GHApp.java",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHApp.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHApp.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHApp.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1,9 +1,12 @@\n package org.kohsuke.github;\n \n+import org.kohsuke.github.internal.EnumUtils;\n+\n import java.io.IOException;\n import java.net.URL;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import static org.kohsuke.github.internal.Previews.MACHINE_MAN;\n \n@@ -20,7 +23,7 @@\n     private String description;\n     private String externalUrl;\n     private Map<String, String> permissions;\n-    private List<GHEvent> events;\n+    private List<String> events;\n     private long installationsCount;\n     private String htmlUrl;\n \n@@ -114,7 +117,9 @@ public void setExternalUrl(String externalUrl) {\n      * @return the events\n      */\n     public List<GHEvent> getEvents() {\n-        return events;\n+        return events.stream()\n+                .map(e -> EnumUtils.getEnumOrDefault(GHEvent.class, e, GHEvent.UNKNOWN))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n@@ -126,7 +131,7 @@ public void setExternalUrl(String externalUrl) {\n      */\n     @Deprecated\n     public void setEvents(List<GHEvent> events) {\n-        this.events = events;\n+        this.events = events.stream().map(GHEvent::symbol).collect(Collectors.toList());\n     }\n \n     /**\n@@ -189,7 +194,6 @@ GHApp wrapUp(GitHub root) {\n      * @see <a href=\"https://developer.github.com/v3/apps/#list-installations\">List installations</a>\n      */\n     @Preview(MACHINE_MAN)\n-    @Deprecated\n     public PagedIterable<GHAppInstallation> listInstallations() {\n         return root.createRequest()\n                 .withPreview(MACHINE_MAN)\n@@ -210,7 +214,6 @@ GHApp wrapUp(GitHub root) {\n      * @see <a href=\"https://developer.github.com/v3/apps/#get-an-installation\">Get an installation</a>\n      */\n     @Preview(MACHINE_MAN)\n-    @Deprecated\n     public GHAppInstallation getInstallationById(long id) throws IOException {\n         return root.createRequest()\n                 .withPreview(MACHINE_MAN)\n@@ -233,7 +236,6 @@ public GHAppInstallation getInstallationById(long id) throws IOException {\n      *      installation</a>\n      */\n     @Preview(MACHINE_MAN)\n-    @Deprecated\n     public GHAppInstallation getInstallationByOrganization(String name) throws IOException {\n         return root.createRequest()\n                 .withPreview(MACHINE_MAN)\n@@ -258,7 +260,6 @@ public GHAppInstallation getInstallationByOrganization(String name) throws IOExc\n      *      installation</a>\n      */\n     @Preview(MACHINE_MAN)\n-    @Deprecated\n     public GHAppInstallation getInstallationByRepository(String ownerName, String repositoryName) throws IOException {\n         return root.createRequest()\n                 .withPreview(MACHINE_MAN)\n@@ -280,7 +281,6 @@ public GHAppInstallation getInstallationByRepository(String ownerName, String re\n      * @see <a href=\"https://developer.github.com/v3/apps/#get-a-user-installation\">Get a user installation</a>\n      */\n     @Preview(MACHINE_MAN)\n-    @Deprecated\n     public GHAppInstallation getInstallationByUser(String name) throws IOException {\n         return root.createRequest()\n                 .withPreview(MACHINE_MAN)"
    },
    {
      "sha": "c05198969dfdb106699ae83c1063188d0f54fa45",
      "filename": "src/main/java/org/kohsuke/github/GHAppCreateTokenBuilder.java",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHAppCreateTokenBuilder.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHAppCreateTokenBuilder.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHAppCreateTokenBuilder.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -19,15 +19,13 @@\n     private final String apiUrlTail;\n \n     @BetaApi\n-    @Deprecated\n     GHAppCreateTokenBuilder(GitHub root, String apiUrlTail) {\n         this.root = root;\n         this.apiUrlTail = apiUrlTail;\n         this.builder = root.createRequest();\n     }\n \n     @BetaApi\n-    @Deprecated\n     GHAppCreateTokenBuilder(GitHub root, String apiUrlTail, Map<String, GHPermissionType> permissions) {\n         this(root, apiUrlTail);\n         permissions(permissions);\n@@ -43,7 +41,6 @@\n      * @return a GHAppCreateTokenBuilder\n      */\n     @BetaApi\n-    @Deprecated\n     public GHAppCreateTokenBuilder repositoryIds(List<Long> repositoryIds) {\n         this.builder.with(\"repository_ids\", repositoryIds);\n         return this;\n@@ -58,7 +55,6 @@ public GHAppCreateTokenBuilder repositoryIds(List<Long> repositoryIds) {\n      * @return a GHAppCreateTokenBuilder\n      */\n     @BetaApi\n-    @Deprecated\n     public GHAppCreateTokenBuilder permissions(Map<String, GHPermissionType> permissions) {\n         Map<String, String> retMap = new HashMap<>();\n         for (Map.Entry<String, GHPermissionType> entry : permissions.entrySet()) {\n@@ -78,7 +74,6 @@ public GHAppCreateTokenBuilder permissions(Map<String, GHPermissionType> permiss\n      *             on error\n      */\n     @Preview(MACHINE_MAN)\n-    @Deprecated\n     public GHAppInstallationToken create() throws IOException {\n         return builder.method(\"POST\")\n                 .withPreview(MACHINE_MAN)"
    },
    {
      "sha": "ecf2c6f5cdc9f1dc953bea03c700ee3665237e04",
      "filename": "src/main/java/org/kohsuke/github/GHAppInstallation.java",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHAppInstallation.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHAppInstallation.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHAppInstallation.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1,12 +1,14 @@\n package org.kohsuke.github;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.kohsuke.github.internal.EnumUtils;\n \n import java.io.IOException;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import static org.kohsuke.github.internal.Previews.GAMBIT;\n import static org.kohsuke.github.internal.Previews.MACHINE_MAN;\n@@ -35,7 +37,7 @@\n     @JsonProperty(\"target_type\")\n     private GHTargetType targetType;\n     private Map<String, GHPermissionType> permissions;\n-    private List<GHEvent> events;\n+    private List<String> events;\n     @JsonProperty(\"single_file_name\")\n     private String singleFileName;\n     @JsonProperty(\"repository_selection\")\n@@ -124,7 +126,6 @@ public String getRepositoriesUrl() {\n      * @return the paged iterable\n      */\n     @Preview(MACHINE_MAN)\n-    @Deprecated\n     public PagedSearchIterable<GHRepository> listRepositories() {\n         GitHubRequest request;\n \n@@ -250,7 +251,9 @@ public void setPermissions(Map<String, GHPermissionType> permissions) {\n      * @return the events\n      */\n     public List<GHEvent> getEvents() {\n-        return events;\n+        return events.stream()\n+                .map(e -> EnumUtils.getEnumOrDefault(GHEvent.class, e, GHEvent.UNKNOWN))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n@@ -262,7 +265,7 @@ public void setPermissions(Map<String, GHPermissionType> permissions) {\n      */\n     @Deprecated\n     public void setEvents(List<GHEvent> events) {\n-        this.events = events;\n+        this.events = events.stream().map(GHEvent::symbol).collect(Collectors.toList());\n     }\n \n     /**\n@@ -322,7 +325,6 @@ GHAppInstallation wrapUp(GitHub root) {\n      * @see <a href=\"https://developer.github.com/v3/apps/#delete-an-installation\">Delete an installation</a>\n      */\n     @Preview(GAMBIT)\n-    @Deprecated\n     public void deleteInstallation() throws IOException {\n         root.createRequest()\n                 .method(\"DELETE\")\n@@ -344,7 +346,6 @@ public void deleteInstallation() throws IOException {\n      * @deprecated Use {@link GHAppInstallation#createToken()} instead.\n      */\n     @BetaApi\n-    @Deprecated\n     public GHAppCreateTokenBuilder createToken(Map<String, GHPermissionType> permissions) {\n         return new GHAppCreateTokenBuilder(root,\n                 String.format(\"/app/installations/%d/access_tokens\", getId()),\n@@ -361,7 +362,6 @@ public GHAppCreateTokenBuilder createToken(Map<String, GHPermissionType> permiss\n      * @return a GHAppCreateTokenBuilder instance\n      */\n     @BetaApi\n-    @Deprecated\n     public GHAppCreateTokenBuilder createToken() {\n         return new GHAppCreateTokenBuilder(root, String.format(\"/app/installations/%d/access_tokens\", getId()));\n     }"
    },
    {
      "sha": "e570abedd78b5d6258581c6a51e0d4d2a72457e1",
      "filename": "src/main/java/org/kohsuke/github/GHArtifact.java",
      "status": "added",
      "additions": 140,
      "deletions": 0,
      "changes": 140,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHArtifact.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHArtifact.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHArtifact.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,140 @@\n+package org.kohsuke.github;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.lang3.StringUtils;\n+import org.kohsuke.github.function.InputStreamFunction;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Date;\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * An artifact from a workflow run.\n+ *\n+ * @author Guillaume Smet\n+ */\n+public class GHArtifact extends GHObject {\n+\n+    // Not provided by the API.\n+    @JsonIgnore\n+    private GHRepository owner;\n+\n+    private String name;\n+    private long sizeInBytes;\n+    private String archiveDownloadUrl;\n+    private boolean expired;\n+    private String expiresAt;\n+\n+    /**\n+     * Gets the name.\n+     *\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the size of the artifact in bytes.\n+     *\n+     * @return the size\n+     */\n+    public long getSizeInBytes() {\n+        return sizeInBytes;\n+    }\n+\n+    /**\n+     * Gets the archive download URL.\n+     *\n+     * @return the archive download URL\n+     */\n+    public URL getArchiveDownloadUrl() {\n+        return GitHubClient.parseURL(archiveDownloadUrl);\n+    }\n+\n+    /**\n+     * If this artifact has expired.\n+     *\n+     * @return if the artifact has expired\n+     */\n+    public boolean isExpired() {\n+        return expired;\n+    }\n+\n+    /**\n+     * Gets the date at which this artifact will expire.\n+     *\n+     * @return the date of expiration\n+     */\n+    public Date getExpiresAt() {\n+        return GitHubClient.parseDate(expiresAt);\n+    }\n+\n+    /**\n+     * Repository to which the artifact belongs.\n+     *\n+     * @return the repository\n+     */\n+    public GHRepository getRepository() {\n+        return owner;\n+    }\n+\n+    /**\n+     * @deprecated This object has no HTML URL.\n+     */\n+    @Override\n+    public URL getHtmlUrl() throws IOException {\n+        return null;\n+    }\n+\n+    /**\n+     * Deletes the artifact.\n+     *\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public void delete() throws IOException {\n+        root.createRequest().method(\"DELETE\").withUrlPath(getApiRoute()).fetchHttpStatusCode();\n+    }\n+\n+    /**\n+     * Downloads the artifact.\n+     *\n+     * @param <T>\n+     *            the type of result\n+     * @param streamFunction\n+     *            The {@link InputStreamFunction} that will process the stream\n+     * @throws IOException\n+     *             The IO exception.\n+     * @return the result of reading the stream.\n+     */\n+    public <T> T download(InputStreamFunction<T> streamFunction) throws IOException {\n+        requireNonNull(streamFunction, \"Stream function must not be null\");\n+\n+        return root.createRequest().method(\"GET\").withUrlPath(getApiRoute(), \"zip\").fetchStream(streamFunction);\n+    }\n+\n+    private String getApiRoute() {\n+        if (owner == null) {\n+            // Workflow runs returned from search to do not have an owner. Attempt to use url.\n+            final URL url = Objects.requireNonNull(getUrl(), \"Missing instance URL!\");\n+            return StringUtils.prependIfMissing(url.toString().replace(root.getApiUrl(), \"\"), \"/\");\n+        }\n+        return \"/repos/\" + owner.getOwnerName() + \"/\" + owner.getName() + \"/actions/artifacts/\" + getId();\n+    }\n+\n+    GHArtifact wrapUp(GHRepository owner) {\n+        this.owner = owner;\n+        return wrapUp(owner.root);\n+    }\n+\n+    GHArtifact wrapUp(GitHub root) {\n+        this.root = root;\n+        if (owner != null)\n+            owner.wrap(root);\n+        return this;\n+    }\n+}"
    },
    {
      "sha": "6e83cd569cb4c85a4024489cf94bbb5b8cd41f23",
      "filename": "src/main/java/org/kohsuke/github/GHArtifactsIterable.java",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHArtifactsIterable.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHArtifactsIterable.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHArtifactsIterable.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,49 @@\n+package org.kohsuke.github;\n+\n+import java.net.MalformedURLException;\n+import java.util.Iterator;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Iterable for artifacts listing.\n+ */\n+class GHArtifactsIterable extends PagedIterable<GHArtifact> {\n+    private final transient GHRepository owner;\n+    private final GitHubRequest request;\n+\n+    private GHArtifactsPage result;\n+\n+    public GHArtifactsIterable(GHRepository owner, GitHubRequest.Builder<?> requestBuilder) {\n+        this.owner = owner;\n+        try {\n+            this.request = requestBuilder.build();\n+        } catch (MalformedURLException e) {\n+            throw new GHException(\"Malformed URL\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public PagedIterator<GHArtifact> _iterator(int pageSize) {\n+        return new PagedIterator<>(\n+                adapt(GitHubPageIterator.create(owner.getRoot().getClient(), GHArtifactsPage.class, request, pageSize)),\n+                null);\n+    }\n+\n+    protected Iterator<GHArtifact[]> adapt(final Iterator<GHArtifactsPage> base) {\n+        return new Iterator<GHArtifact[]>() {\n+            public boolean hasNext() {\n+                return base.hasNext();\n+            }\n+\n+            public GHArtifact[] next() {\n+                GHArtifactsPage v = base.next();\n+                if (result == null) {\n+                    result = v;\n+                }\n+                return v.getArtifacts(owner);\n+            }\n+        };\n+    }\n+}"
    },
    {
      "sha": "f295f44f806948e0b7a0413e8d15b097d2cca60c",
      "filename": "src/main/java/org/kohsuke/github/GHArtifactsPage.java",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHArtifactsPage.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHArtifactsPage.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHArtifactsPage.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,20 @@\n+package org.kohsuke.github;\n+\n+/**\n+ * Represents the one page of artifacts result when listing artifacts.\n+ */\n+class GHArtifactsPage {\n+    private int total_count;\n+    private GHArtifact[] artifacts;\n+\n+    public int getTotalCount() {\n+        return total_count;\n+    }\n+\n+    GHArtifact[] getArtifacts(GHRepository owner) {\n+        for (GHArtifact artifact : artifacts) {\n+            artifact.wrapUp(owner);\n+        }\n+        return artifacts;\n+    }\n+}"
    },
    {
      "sha": "7ae45e59bfad210482ffe5c079cd50bb17e3c0c8",
      "filename": "src/main/java/org/kohsuke/github/GHBranch.java",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHBranch.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHBranch.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHBranch.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -79,7 +79,6 @@ public String getName() {\n      * @return true if the push to this branch is restricted via branch protection.\n      */\n     @Preview(Previews.LUKE_CAGE)\n-    @Deprecated\n     public boolean isProtected() {\n         return protection;\n     }\n@@ -90,7 +89,6 @@ public boolean isProtected() {\n      * @return API URL that deals with the protection of this branch.\n      */\n     @Preview(Previews.LUKE_CAGE)\n-    @Deprecated\n     public URL getProtectionUrl() {\n         return GitHubClient.parseURL(protection_url);\n     }\n@@ -103,7 +101,6 @@ public URL getProtectionUrl() {\n      *             the io exception\n      */\n     @Preview(Previews.LUKE_CAGE)\n-    @Deprecated\n     public GHBranchProtection getProtection() throws IOException {\n         return root.createRequest()\n                 .withPreview(Previews.LUKE_CAGE)\n@@ -138,7 +135,6 @@ public void disableProtection() throws IOException {\n      * @see GHCommitStatus#getContext() GHCommitStatus#getContext()\n      */\n     @Preview(Previews.LUKE_CAGE)\n-    @Deprecated\n     public GHBranchProtectionBuilder enableProtection() {\n         return new GHBranchProtectionBuilder(this);\n     }"
    },
    {
      "sha": "f01f5c2e5e34119b0b3e7fc8407f92d3707e77d1",
      "filename": "src/main/java/org/kohsuke/github/GHBranchProtection.java",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHBranchProtection.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHBranchProtection.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHBranchProtection.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -42,7 +42,6 @@\n      *             the io exception\n      */\n     @Preview(ZZZAX)\n-    @Deprecated\n     public void enabledSignedCommits() throws IOException {\n         requester().method(\"POST\").withUrlPath(url + REQUIRE_SIGNATURES_URI).fetch(RequiredSignatures.class);\n     }\n@@ -54,7 +53,6 @@ public void enabledSignedCommits() throws IOException {\n      *             the io exception\n      */\n     @Preview(ZZZAX)\n-    @Deprecated\n     public void disableSignedCommits() throws IOException {\n         requester().method(\"DELETE\").withUrlPath(url + REQUIRE_SIGNATURES_URI).send();\n     }\n@@ -85,7 +83,6 @@ public RequiredReviews getRequiredReviews() {\n      *             the io exception\n      */\n     @Preview(ZZZAX)\n-    @Deprecated\n     public boolean getRequiredSignatures() throws IOException {\n         return requester().withUrlPath(url + REQUIRE_SIGNATURES_URI).fetch(RequiredSignatures.class).enabled;\n     }"
    },
    {
      "sha": "fa6f4ad2866566cdd705b0b3eb661981fdebfa98",
      "filename": "src/main/java/org/kohsuke/github/GHCheckRun.java",
      "status": "modified",
      "additions": 39,
      "deletions": 5,
      "changes": 44,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCheckRun.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCheckRun.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHCheckRun.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1,8 +1,12 @@\n package org.kohsuke.github;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.infradna.tool.bridge_method_injector.WithBridgeMethods;\n import edu.umd.cs.findbugs.annotations.NonNull;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.kohsuke.github.GHWorkflowRun.Conclusion;\n+import org.kohsuke.github.GHWorkflowRun.Status;\n+import org.kohsuke.github.internal.EnumUtils;\n import org.kohsuke.github.internal.Previews;\n \n import java.io.IOException;\n@@ -11,6 +15,7 @@\n import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.Locale;\n \n /**\n  * Represents a check run.\n@@ -80,12 +85,27 @@ GHCheckRun wrap(GitHub root) {\n      * @return Status of the check run\n      * @see Status\n      */\n-    public String getStatus() {\n+    @WithBridgeMethods(value = String.class, adapterMethod = \"statusAsStr\")\n+    public Status getStatus() {\n+        return Status.from(status);\n+    }\n+\n+    @SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"Bridge method of getStatus\")\n+    private Object statusAsStr(Status status, Class type) {\n         return status;\n     }\n \n     public static enum Status {\n-        QUEUED, IN_PROGRESS, COMPLETED\n+        QUEUED, IN_PROGRESS, COMPLETED, UNKNOWN;\n+\n+        public static Status from(String value) {\n+            return EnumUtils.getNullableEnumOrDefault(Status.class, value, Status.UNKNOWN);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name().toLowerCase(Locale.ROOT);\n+        }\n     }\n \n     /**\n@@ -94,7 +114,13 @@ public String getStatus() {\n      * @return Status of the check run\n      * @see Conclusion\n      */\n-    public String getConclusion() {\n+    @WithBridgeMethods(value = String.class, adapterMethod = \"conclusionAsStr\")\n+    public Conclusion getConclusion() {\n+        return Conclusion.from(conclusion);\n+    }\n+\n+    @SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"Bridge method of getConclusion\")\n+    private Object conclusionAsStr(Conclusion conclusion, Class type) {\n         return conclusion;\n     }\n \n@@ -105,7 +131,16 @@ public String getConclusion() {\n      * Parameters - <code>conclusion</code></a>.\n      */\n     public static enum Conclusion {\n-        SUCCESS, FAILURE, NEUTRAL, CANCELLED, TIMED_OUT, ACTION_REQUIRED, SKIPPED\n+        ACTION_REQUIRED, CANCELLED, FAILURE, NEUTRAL, SUCCESS, SKIPPED, STALE, TIMED_OUT, UNKNOWN;\n+\n+        public static Conclusion from(String value) {\n+            return EnumUtils.getNullableEnumOrDefault(Conclusion.class, value, Conclusion.UNKNOWN);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name().toLowerCase(Locale.ROOT);\n+        }\n     }\n \n     /**\n@@ -299,7 +334,6 @@ public URL getAnnotationsUrl() {\n      * @return a builder which you should customize, then call {@link GHCheckRunBuilder#create}\n      */\n     @Preview(Previews.ANTIOPE)\n-    @Deprecated\n     public @NonNull GHCheckRunBuilder update() {\n         return new GHCheckRunBuilder(owner, getId());\n     }"
    },
    {
      "sha": "913ce273d7840791dbe88e85f75170264066c586",
      "filename": "src/main/java/org/kohsuke/github/GHCheckRunBuilder.java",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCheckRunBuilder.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCheckRunBuilder.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHCheckRunBuilder.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -48,7 +48,6 @@\n  */\n @SuppressFBWarnings(value = \"URF_UNREAD_FIELD\", justification = \"Jackson serializes these even without a getter\")\n @Preview(Previews.ANTIOPE)\n-@Deprecated\n public final class GHCheckRunBuilder {\n \n     protected final GHRepository repo;"
    },
    {
      "sha": "7dbc88bc1dd050a1492592ea7fed50a9872824da",
      "filename": "src/main/java/org/kohsuke/github/GHCheckRunsIterable.java",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCheckRunsIterable.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCheckRunsIterable.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHCheckRunsIterable.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -8,21 +8,21 @@\n  * Iterable for check-runs listing.\n  */\n class GHCheckRunsIterable extends PagedIterable<GHCheckRun> {\n-    private final transient GitHub root;\n+    private final GHRepository owner;\n     private final GitHubRequest request;\n \n     private GHCheckRunsPage result;\n \n-    public GHCheckRunsIterable(GitHub root, GitHubRequest request) {\n-        this.root = root;\n+    public GHCheckRunsIterable(GHRepository owner, GitHubRequest request) {\n+        this.owner = owner;\n         this.request = request;\n     }\n \n     @Nonnull\n     @Override\n     public PagedIterator<GHCheckRun> _iterator(int pageSize) {\n         return new PagedIterator<>(\n-                adapt(GitHubPageIterator.create(root.getClient(), GHCheckRunsPage.class, request, pageSize)),\n+                adapt(GitHubPageIterator.create(owner.getRoot().getClient(), GHCheckRunsPage.class, request, pageSize)),\n                 null);\n     }\n \n@@ -37,7 +37,7 @@ public boolean hasNext() {\n                 if (result == null) {\n                     result = v;\n                 }\n-                return v.getCheckRuns(root);\n+                return v.getCheckRuns(owner);\n             }\n         };\n     }"
    },
    {
      "sha": "a946a23b7f5363ada62f268064f45ea9863164df",
      "filename": "src/main/java/org/kohsuke/github/GHCheckRunsPage.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCheckRunsPage.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCheckRunsPage.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHCheckRunsPage.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -11,9 +11,9 @@ public int getTotalCount() {\n         return total_count;\n     }\n \n-    GHCheckRun[] getCheckRuns(GitHub root) {\n+    GHCheckRun[] getCheckRuns(GHRepository owner) {\n         for (GHCheckRun check_run : check_runs) {\n-            check_run.wrap(root);\n+            check_run.wrap(owner);\n         }\n         return check_runs;\n     }"
    },
    {
      "sha": "6393465f0039ffbb41ab948b31d01ed56f91144e",
      "filename": "src/main/java/org/kohsuke/github/GHCommit.java",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCommit.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCommit.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHCommit.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -454,7 +454,6 @@ private GHUser resolveUser(User author) throws IOException {\n      * @return {@link PagedIterable} with the pull requests which contain this commit\n      */\n     @Preview(GROOT)\n-    @Deprecated\n     public PagedIterable<GHPullRequest> listPullRequests() {\n         return owner.root.createRequest()\n                 .withPreview(GROOT)\n@@ -470,7 +469,6 @@ private GHUser resolveUser(User author) throws IOException {\n      *             the io exception\n      */\n     @Preview(GROOT)\n-    @Deprecated\n     public PagedIterable<GHBranch> listBranchesWhereHead() throws IOException {\n         return owner.root.createRequest()\n                 .withPreview(GROOT)\n@@ -566,7 +564,6 @@ public GHCommitStatus getLastStatus() throws IOException {\n      *             on error\n      */\n     @Preview(ANTIOPE)\n-    @Deprecated\n     public PagedIterable<GHCheckRun> getCheckRuns() throws IOException {\n         return owner.getCheckRuns(sha);\n     }"
    },
    {
      "sha": "858cb1b734523ed74fc6bdbb54301f2bd896d4c1",
      "filename": "src/main/java/org/kohsuke/github/GHCommitComment.java",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCommitComment.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCommitComment.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHCommitComment.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -122,7 +122,6 @@ public void update(String body) throws IOException {\n     }\n \n     @Preview(SQUIRREL_GIRL)\n-    @Deprecated\n     public GHReaction createReaction(ReactionContent content) throws IOException {\n         return owner.root.createRequest()\n                 .method(\"POST\")\n@@ -134,7 +133,6 @@ public GHReaction createReaction(ReactionContent content) throws IOException {\n     }\n \n     @Preview(SQUIRREL_GIRL)\n-    @Deprecated\n     public PagedIterable<GHReaction> listReactions() {\n         return owner.root.createRequest()\n                 .withPreview(SQUIRREL_GIRL)"
    },
    {
      "sha": "4ffee972d74028cb9dc7a254d5f485dfff7d26d7",
      "filename": "src/main/java/org/kohsuke/github/GHCommitSearchBuilder.java",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCommitSearchBuilder.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCommitSearchBuilder.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHCommitSearchBuilder.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -12,7 +12,6 @@\n  * @see GitHub#searchCommits() GitHub#searchCommits()\n  */\n @Preview(Previews.CLOAK)\n-@Deprecated\n public class GHCommitSearchBuilder extends GHSearchBuilder<GHCommit> {\n     GHCommitSearchBuilder(GitHub root) {\n         super(root, CommitSearchResult.class);"
    },
    {
      "sha": "8f156cde5825ea8b132347f3054976b959e0c112",
      "filename": "src/main/java/org/kohsuke/github/GHContentSearchBuilder.java",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHContentSearchBuilder.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHContentSearchBuilder.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHContentSearchBuilder.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -118,6 +118,41 @@ public GHContentSearchBuilder repo(String v) {\n         return q(\"repo:\" + v);\n     }\n \n+    /**\n+     * Order gh content search builder.\n+     *\n+     * @param v\n+     *            the v\n+     * @return the gh content search builder\n+     */\n+    public GHContentSearchBuilder order(GHDirection v) {\n+        req.with(\"order\", v);\n+        return this;\n+    }\n+\n+    /**\n+     * Sort gh content search builder.\n+     *\n+     * @param sort\n+     *            the sort\n+     * @return the gh content search builder\n+     */\n+    public GHContentSearchBuilder sort(GHContentSearchBuilder.Sort sort) {\n+        if (Sort.BEST_MATCH.equals(sort)) {\n+            req.remove(\"sort\");\n+        } else {\n+            req.with(\"sort\", sort);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * The enum Sort.\n+     */\n+    public enum Sort {\n+        BEST_MATCH, INDEXED\n+    }\n+\n     private static class ContentSearchResult extends SearchResult<GHContent> {\n         private GHContent[] items;\n "
    },
    {
      "sha": "a2a4a137ab5db9d93221d6d4306593ec183803c0",
      "filename": "src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -115,7 +115,6 @@ public GHCreateRepositoryBuilder owner(String owner) throws IOException {\n      * @see <a href=\"https://developer.github.com/v3/previews/\">GitHub API Previews</a>\n      */\n     @Preview(BAPTISTE)\n-    @Deprecated\n     public GHCreateRepositoryBuilder fromTemplateRepository(String templateOwner, String templateRepo) {\n         requester.withPreview(BAPTISTE).withUrlPath(\"/repos/\" + templateOwner + \"/\" + templateRepo + \"/generate\");\n         return this;"
    },
    {
      "sha": "e8279a12f3b52f468add3e0fd21944c53532ce2a",
      "filename": "src/main/java/org/kohsuke/github/GHDeployment.java",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHDeployment.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHDeployment.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHDeployment.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -100,7 +100,6 @@ public Object getPayloadObject() {\n      *\n      * @return the original deployment environment\n      */\n-    @Deprecated\n     @Preview(Previews.FLASH)\n     public String getOriginalEnvironment() {\n         return original_environment;\n@@ -123,7 +122,6 @@ public String getEnvironment() {\n      *\n      * @return the environment is transient\n      */\n-    @Deprecated\n     @Preview(Previews.ANT_MAN)\n     public boolean isTransientEnvironment() {\n         return transient_environment;\n@@ -136,7 +134,6 @@ public boolean isTransientEnvironment() {\n      *\n      * @return the environment is used by end-users directly\n      */\n-    @Deprecated\n     @Preview(Previews.ANT_MAN)\n     public boolean isProductionEnvironment() {\n         return production_environment;"
    },
    {
      "sha": "ff6f5d0072a2118a136a6b0c871f939bd0dcc9ef",
      "filename": "src/main/java/org/kohsuke/github/GHDeploymentBuilder.java",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHDeploymentBuilder.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHDeploymentBuilder.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHDeploymentBuilder.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -129,7 +129,6 @@ public GHDeploymentBuilder environment(String environment) {\n      *\n      * @return the gh deployment builder\n      */\n-    @Deprecated\n     @Preview(Previews.ANT_MAN)\n     public GHDeploymentBuilder transientEnvironment(boolean transientEnvironment) {\n         builder.with(\"transient_environment\", transientEnvironment);\n@@ -146,7 +145,6 @@ public GHDeploymentBuilder transientEnvironment(boolean transientEnvironment) {\n      *\n      * @return the gh deployment builder\n      */\n-    @Deprecated\n     @Preview(Previews.ANT_MAN)\n     public GHDeploymentBuilder productionEnvironment(boolean productionEnvironment) {\n         builder.with(\"production_environment\", productionEnvironment);"
    },
    {
      "sha": "71ab32e8010e449ac13ad392a135a429b2f3ada8",
      "filename": "src/main/java/org/kohsuke/github/GHDeploymentState.java",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHDeploymentState.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHDeploymentState.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHDeploymentState.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -16,7 +16,6 @@\n      *\n      * @deprecated until preview feature has graduated to stable\n      */\n-    @Deprecated\n     @Preview(Previews.FLASH)\n     IN_PROGRESS,\n \n@@ -25,7 +24,6 @@\n      *\n      * @deprecated until preview feature has graduated to stable\n      */\n-    @Deprecated\n     @Preview(Previews.FLASH)\n     QUEUED,\n \n@@ -34,7 +32,6 @@\n      *\n      * @deprecated until preview feature has graduated to stable\n      */\n-    @Deprecated\n     @Preview(Previews.ANT_MAN)\n     INACTIVE\n }"
    },
    {
      "sha": "09a02d7d6d00931f6220a6b9ba3ae9c2e0ecda45",
      "filename": "src/main/java/org/kohsuke/github/GHDeploymentStatus.java",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHDeploymentStatus.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHDeploymentStatus.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHDeploymentStatus.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -56,7 +56,6 @@ public URL getTargetUrl() {\n      *\n      * @return the target url\n      */\n-    @Deprecated\n     @Preview(Previews.ANT_MAN)\n     public URL getLogUrl() {\n         return GitHubClient.parseURL(log_url);\n@@ -78,7 +77,6 @@ public URL getDeploymentUrl() {\n      *\n      * @return the deployment environment url\n      */\n-    @Deprecated\n     @Preview(Previews.ANT_MAN)\n     public URL getEnvironmentUrl() {\n         return GitHubClient.parseURL(environment_url);"
    },
    {
      "sha": "26a4dd7128c7754add886fa34c612238b837b89d",
      "filename": "src/main/java/org/kohsuke/github/GHDeploymentStatusBuilder.java",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHDeploymentStatusBuilder.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHDeploymentStatusBuilder.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHDeploymentStatusBuilder.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -53,7 +53,6 @@ public GHDeploymentStatusBuilder(GHRepository repo, int deploymentId, GHDeployme\n      *\n      * @return the gh deployment status builder\n      */\n-    @Deprecated\n     @Preview({ Previews.ANT_MAN, Previews.FLASH })\n     public GHDeploymentStatusBuilder autoInactive(boolean autoInactive) {\n         this.builder.with(\"auto_inactive\", autoInactive);\n@@ -83,7 +82,6 @@ public GHDeploymentStatusBuilder description(String description) {\n      *\n      * @return the gh deployment status builder\n      */\n-    @Deprecated\n     @Preview(Previews.FLASH)\n     public GHDeploymentStatusBuilder environment(String environment) {\n         this.builder.with(\"environment\", environment);\n@@ -100,7 +98,6 @@ public GHDeploymentStatusBuilder environment(String environment) {\n      *\n      * @return the gh deployment status builder\n      */\n-    @Deprecated\n     @Preview(Previews.ANT_MAN)\n     public GHDeploymentStatusBuilder environmentUrl(String environmentUrl) {\n         this.builder.with(\"environment_url\", environmentUrl);\n@@ -119,7 +116,6 @@ public GHDeploymentStatusBuilder environmentUrl(String environmentUrl) {\n      *\n      * @return the gh deployment status builder\n      */\n-    @Deprecated\n     @Preview(Previews.ANT_MAN)\n     public GHDeploymentStatusBuilder logUrl(String logUrl) {\n         this.builder.with(\"log_url\", logUrl);"
    },
    {
      "sha": "14278d98caaa98998d9a3352e226d2c4cfc5c118",
      "filename": "src/main/java/org/kohsuke/github/GHDiscussion.java",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHDiscussion.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHDiscussion.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHDiscussion.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -129,7 +129,6 @@ static GHDiscussion read(GHTeam team, long discussionNumber) throws IOException\n      * @return a {@link GHDiscussion.Updater}\n      */\n     @Preview(Previews.SQUIRREL_GIRL)\n-    @Deprecated\n     public GHDiscussion.Updater update() {\n         return new GHDiscussion.Updater(this);\n     }\n@@ -140,7 +139,6 @@ static GHDiscussion read(GHTeam team, long discussionNumber) throws IOException\n      * @return a {@link GHDiscussion.Setter}\n      */\n     @Preview(Previews.SQUIRREL_GIRL)\n-    @Deprecated\n     public GHDiscussion.Setter set() {\n         return new GHDiscussion.Setter(this);\n     }"
    },
    {
      "sha": "a8c3b245be71487891b98f47bfc1f5a596be8171",
      "filename": "src/main/java/org/kohsuke/github/GHEvent.java",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHEvent.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHEvent.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHEvent.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -20,6 +20,8 @@\n     DEPLOY_KEY,\n     DEPLOYMENT,\n     DEPLOYMENT_STATUS,\n+    DISCUSSION,\n+    DISCUSSION_COMMENT,\n     DOWNLOAD,\n     FOLLOW,\n     FORK,\n@@ -57,6 +59,7 @@\n     REPOSITORY,\n     REPOSITORY_IMPORT,\n     REPOSITORY_VULNERABILITY_ALERT,\n+    SCHEDULE,\n     SECURITY_ADVISORY,\n     STAR,\n     STATUS,\n@@ -66,6 +69,11 @@\n     WORKFLOW_DISPATCH,\n     WORKFLOW_RUN,\n \n+    /**\n+     * Special event type that means we haven't found an enum value corresponding to the event.\n+     */\n+    UNKNOWN,\n+\n     /**\n      * Special event type that means \"every possible event\"\n      */"
    },
    {
      "sha": "f550c9bccdcc3f53e12534557e53fc50489cfb63",
      "filename": "src/main/java/org/kohsuke/github/GHEventInfo.java",
      "status": "modified",
      "additions": 44,
      "deletions": 9,
      "changes": 53,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHEventInfo.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHEventInfo.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHEventInfo.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -4,7 +4,7 @@\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n \n import java.io.IOException;\n-import java.util.Date;\n+import java.util.*;\n \n /**\n  * Represents an event.\n@@ -18,6 +18,16 @@\n \n     private long id;\n     private String created_at;\n+\n+    /**\n+     * Representation of GitHub Event API Event Type.\n+     *\n+     * This is not the same as the values used for hook methods such as\n+     * {@link GHRepository#createHook(String, Map, Collection, boolean)}.\n+     *\n+     * @see <a href=\"https://docs.github.com/en/developers/webhooks-and-events/github-event-types\">GitHub event\n+     *      types</a>\n+     */\n     private String type;\n \n     // these are all shallow objects\n@@ -40,20 +50,45 @@\n         private String name; // owner/repo\n     }\n \n+    static final Map<String, GHEvent> mapTypeStringToEvent = createEventMap();\n+\n+    /**\n+     * Map for GitHub Event API Event Type to GHEvent.\n+     *\n+     * @see <a href=\"https://docs.github.com/en/developers/webhooks-and-events/github-event-types\">GitHub event\n+     *      types</a>\n+     */\n+    private static Map<String, GHEvent> createEventMap() {\n+        HashMap<String, GHEvent> map = new HashMap<>();\n+        map.put(\"CommitCommentEvent\", GHEvent.COMMIT_COMMENT);\n+        map.put(\"CreateEvent\", GHEvent.CREATE);\n+        map.put(\"DeleteEvent\", GHEvent.DELETE);\n+        map.put(\"ForkEvent\", GHEvent.FORK);\n+        map.put(\"GollumEvent\", GHEvent.GOLLUM);\n+        map.put(\"IssueCommentEvent\", GHEvent.ISSUE_COMMENT);\n+        map.put(\"IssuesEvent\", GHEvent.ISSUES);\n+        map.put(\"MemberEvent\", GHEvent.MEMBER);\n+        map.put(\"PublicEvent\", GHEvent.PUBLIC);\n+        map.put(\"PullRequestEvent\", GHEvent.PULL_REQUEST);\n+        map.put(\"PullRequestReviewEvent\", GHEvent.PULL_REQUEST_REVIEW);\n+        map.put(\"PullRequestReviewCommentEvent\", GHEvent.PULL_REQUEST_REVIEW_COMMENT);\n+        map.put(\"PushEvent\", GHEvent.PUSH);\n+        map.put(\"ReleaseEvent\", GHEvent.RELEASE);\n+        map.put(\"WatchEvent\", GHEvent.WATCH);\n+        return Collections.unmodifiableMap(map);\n+    }\n+\n+    static GHEvent transformTypeToGHEvent(String type) {\n+        return mapTypeStringToEvent.getOrDefault(type, GHEvent.UNKNOWN);\n+    }\n+\n     /**\n      * Gets type.\n      *\n      * @return the type\n      */\n     public GHEvent getType() {\n-        String t = type;\n-        if (t.endsWith(\"Event\"))\n-            t = t.substring(0, t.length() - 5);\n-        for (GHEvent e : GHEvent.values()) {\n-            if (e.name().replace(\"_\", \"\").equalsIgnoreCase(t))\n-                return e;\n-        }\n-        return null; // unknown event type\n+        return transformTypeToGHEvent(type);\n     }\n \n     GHEventInfo wrapUp(GitHub root) {"
    },
    {
      "sha": "4503d09cb5e23c36d2530145ad455242478c80f8",
      "filename": "src/main/java/org/kohsuke/github/GHEventPayload.java",
      "status": "modified",
      "additions": 151,
      "deletions": 5,
      "changes": 156,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHEventPayload.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHEventPayload.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHEventPayload.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -7,6 +7,7 @@\n import java.io.Reader;\n import java.util.Date;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Base type for types used in databinding of the event payload.\n@@ -381,9 +382,9 @@ public GHPullRequest getPullRequest() {\n         }\n \n         /**\n-         * Gets label.\n+         * Gets the added or removed label for labeled/unlabeled events.\n          *\n-         * @return the label\n+         * @return label the added or removed label\n          */\n         public GHLabel getLabel() {\n             return label;\n@@ -520,6 +521,10 @@ void wrapUp(GitHub root) {\n     public static class Issue extends GHEventPayload {\n         private GHIssue issue;\n \n+        private GHLabel label;\n+\n+        private GHIssueChanges changes;\n+\n         /**\n          * Gets issue.\n          *\n@@ -539,6 +544,24 @@ public void setIssue(GHIssue issue) {\n             this.issue = issue;\n         }\n \n+        /**\n+         * Gets the added or removed label for labeled/unlabeled events.\n+         *\n+         * @return label the added or removed label\n+         */\n+        public GHLabel getLabel() {\n+            return label;\n+        }\n+\n+        /**\n+         * Get changes (for action=\"edited\")\n+         *\n+         * @return changes\n+         */\n+        public GHIssueChanges getChanges() {\n+            return changes;\n+        }\n+\n         @Override\n         void wrapUp(GitHub root) {\n             super.wrapUp(root);\n@@ -688,9 +711,11 @@ public String getRefType() {\n         }\n \n         /**\n-         * Gets master branch.\n+         * Gets default branch.\n+         *\n+         * Name is an artifact of when \"master\" was the most common default.\n          *\n-         * @return the master branch\n+         * @return the default branch\n          */\n         @SuppressFBWarnings(value = \"UWF_UNWRITTEN_FIELD\", justification = \"Comes from JSON deserialization\")\n         public String getMasterBranch() {\n@@ -936,7 +961,7 @@ private void setAfter(String after) {\n         }\n \n         /**\n-         * The full Git ref that was pushed. Example: “refs/heads/master”\n+         * The full Git ref that was pushed. Example: “refs/heads/main”\n          *\n          * @return the ref\n          */\n@@ -1304,4 +1329,125 @@ void wrapUp(GitHub root) {\n             }\n         }\n     }\n+\n+    /**\n+     * Occurs when someone triggered a workflow run or sends a POST request to the \"Create a workflow dispatch event\"\n+     * endpoint.\n+     *\n+     * @see <a href=\n+     *      \"https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch\">\n+     *      workflow dispatch event</a>\n+     * @see <a href=\n+     *      \"https://docs.github.com/en/actions/reference/events-that-trigger-workflows#workflow_dispatch\">Events that\n+     *      trigger workflows</a>\n+     */\n+    public static class WorkflowDispatch extends GHEventPayload {\n+        private Map<String, Object> inputs;\n+        private String ref;\n+        private String workflow;\n+\n+        /**\n+         * Gets the map of input parameters passed to the workflow.\n+         *\n+         * @return the map of input parameters\n+         */\n+        public Map<String, Object> getInputs() {\n+            return inputs;\n+        }\n+\n+        /**\n+         * Gets the ref of the branch (e.g. refs/heads/main)\n+         *\n+         * @return the ref of the branch\n+         */\n+        public String getRef() {\n+            return ref;\n+        }\n+\n+        /**\n+         * Gets the path of the workflow file (e.g. .github/workflows/hello-world-workflow.yml).\n+         *\n+         * @return the path of the workflow file\n+         */\n+        public String getWorkflow() {\n+            return workflow;\n+        }\n+    }\n+\n+    /**\n+     * A workflow run was requested or completed.\n+     *\n+     * @see <a href=\n+     *      \"https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#workflow_run\">\n+     *      workflow run event</a>\n+     * @see <a href=\"https://docs.github.com/en/rest/reference/actions#workflow-runs\">Actions Workflow Runs</a>\n+     */\n+    public static class WorkflowRun extends GHEventPayload {\n+        private GHWorkflowRun workflowRun;\n+        private GHWorkflow workflow;\n+\n+        /**\n+         * Gets the workflow run.\n+         *\n+         * @return the workflow run\n+         */\n+        public GHWorkflowRun getWorkflowRun() {\n+            return workflowRun;\n+        }\n+\n+        /**\n+         * Gets the associated workflow.\n+         *\n+         * @return the associated workflow\n+         */\n+        public GHWorkflow getWorkflow() {\n+            return workflow;\n+        }\n+\n+        @Override\n+        void wrapUp(GitHub root) {\n+            super.wrapUp(root);\n+            if (workflowRun == null || workflow == null) {\n+                throw new IllegalStateException(\n+                        \"Expected workflow and workflow_run payload, but got something else. Maybe we've got another type of event?\");\n+            }\n+            GHRepository repository = getRepository();\n+            if (repository == null) {\n+                throw new IllegalStateException(\"Repository must not be null\");\n+            }\n+            workflowRun.wrapUp(repository);\n+            workflow.wrapUp(repository);\n+        }\n+    }\n+\n+    /**\n+     * A label was created, edited or deleted.\n+     *\n+     * @see <a href= \"https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#label\">\n+     *      label event</a>\n+     */\n+    public static class Label extends GHEventPayload {\n+\n+        private GHLabel label;\n+\n+        private GHLabelChanges changes;\n+\n+        /**\n+         * Gets the label.\n+         *\n+         * @return the label\n+         */\n+        public GHLabel getLabel() {\n+            return label;\n+        }\n+\n+        /**\n+         * Gets changes (for action=\"edited\")\n+         *\n+         * @return changes\n+         */\n+        public GHLabelChanges getChanges() {\n+            return changes;\n+        }\n+    }\n }"
    },
    {
      "sha": "0d8193213d73d88b0190e30f900b24b5e3b33f1a",
      "filename": "src/main/java/org/kohsuke/github/GHHook.java",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHHook.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHHook.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHHook.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1,13 +1,13 @@\n package org.kohsuke.github;\n \n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.kohsuke.github.internal.EnumUtils;\n \n import java.io.IOException;\n import java.net.URL;\n import java.util.Collections;\n import java.util.EnumSet;\n import java.util.List;\n-import java.util.Locale;\n import java.util.Map;\n \n /**\n@@ -40,10 +40,7 @@ public String getName() {\n     public EnumSet<GHEvent> getEvents() {\n         EnumSet<GHEvent> s = EnumSet.noneOf(GHEvent.class);\n         for (String e : events) {\n-            if (e.equals(\"*\"))\n-                s.add(GHEvent.ALL);\n-            else\n-                s.add(Enum.valueOf(GHEvent.class, e.toUpperCase(Locale.ENGLISH)));\n+            s.add(e.equals(\"*\") ? GHEvent.ALL : EnumUtils.getEnumOrDefault(GHEvent.class, e, GHEvent.UNKNOWN));\n         }\n         return s;\n     }"
    },
    {
      "sha": "9b34f12c88e56397b98f76814ce631010fd980d3",
      "filename": "src/main/java/org/kohsuke/github/GHIssue.java",
      "status": "modified",
      "additions": 72,
      "deletions": 37,
      "changes": 109,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHIssue.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHIssue.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHIssue.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -312,7 +312,7 @@ public void assignTo(GHUser user) throws IOException {\n     }\n \n     /**\n-     * Sets labels.\n+     * Sets labels on the target to a specific list.\n      *\n      * @param labels\n      *            the labels\n@@ -326,100 +326,137 @@ public void setLabels(String... labels) throws IOException {\n     /**\n      * Adds labels to the issue.\n      *\n+     * Labels that are already present on the target are ignored.\n+     *\n+     * @return the complete list of labels including the new additions\n      * @param names\n      *            Names of the label\n      * @throws IOException\n      *             the io exception\n      */\n-    public void addLabels(String... names) throws IOException {\n-        _addLabels(Arrays.asList(names));\n+    @WithBridgeMethods(void.class)\n+    public List<GHLabel> addLabels(String... names) throws IOException {\n+        return _addLabels(Arrays.asList(names));\n     }\n \n     /**\n      * Add labels.\n      *\n+     * Labels that are already present on the target are ignored.\n+     *\n+     * @return the complete list of labels including the new additions\n      * @param labels\n      *            the labels\n      * @throws IOException\n      *             the io exception\n      */\n-    public void addLabels(GHLabel... labels) throws IOException {\n-        addLabels(Arrays.asList(labels));\n+    @WithBridgeMethods(void.class)\n+    public List<GHLabel> addLabels(GHLabel... labels) throws IOException {\n+        return addLabels(Arrays.asList(labels));\n     }\n \n     /**\n      * Add labels.\n      *\n+     * Labels that are already present on the target are ignored.\n+     *\n+     * @return the complete list of labels including the new additions\n      * @param labels\n      *            the labels\n      * @throws IOException\n      *             the io exception\n      */\n-    public void addLabels(Collection<GHLabel> labels) throws IOException {\n-        _addLabels(GHLabel.toNames(labels));\n+    @WithBridgeMethods(void.class)\n+    public List<GHLabel> addLabels(Collection<GHLabel> labels) throws IOException {\n+        return _addLabels(GHLabel.toNames(labels));\n     }\n \n-    private void _addLabels(Collection<String> names) throws IOException {\n-        List<String> newLabels = new ArrayList<String>();\n+    private List<GHLabel> _addLabels(Collection<String> names) throws IOException {\n+        return Arrays.asList(root.createRequest()\n+                .with(\"labels\", names)\n+                .method(\"POST\")\n+                .withUrlPath(getIssuesApiRoute() + \"/labels\")\n+                .fetch(GHLabel[].class));\n+    }\n \n-        for (GHLabel label : getLabels()) {\n-            newLabels.add(label.getName());\n-        }\n-        for (String name : names) {\n-            if (!newLabels.contains(name)) {\n-                newLabels.add(name);\n-            }\n-        }\n-        setLabels(newLabels.toArray(new String[0]));\n+    /**\n+     * Remove a single label.\n+     *\n+     * Attempting to remove a label that is not present throws {@link GHFileNotFoundException}.\n+     *\n+     * @return the remaining list of labels\n+     * @param name\n+     *            the name\n+     * @throws IOException\n+     *             the io exception, throws {@link GHFileNotFoundException} if label was not present.\n+     */\n+    @WithBridgeMethods(void.class)\n+    public List<GHLabel> removeLabel(String name) throws IOException {\n+        return Arrays.asList(root.createRequest()\n+                .method(\"DELETE\")\n+                .withUrlPath(getIssuesApiRoute() + \"/labels\", name)\n+                .fetch(GHLabel[].class));\n     }\n \n     /**\n-     * Remove a given label by name from this issue.\n+     * Remove a collection of labels.\n      *\n+     * Attempting to remove labels that are not present on the target are ignored.\n+     *\n+     * @return the remaining list of labels\n      * @param names\n      *            the names\n      * @throws IOException\n      *             the io exception\n      */\n-    public void removeLabels(String... names) throws IOException {\n-        _removeLabels(Arrays.asList(names));\n+    @WithBridgeMethods(void.class)\n+    public List<GHLabel> removeLabels(String... names) throws IOException {\n+        return _removeLabels(Arrays.asList(names));\n     }\n \n     /**\n-     * Remove labels.\n+     * Remove a collection of labels.\n      *\n+     * Attempting to remove labels that are not present on the target are ignored.\n+     *\n+     * @return the remaining list of labels\n      * @param labels\n      *            the labels\n      * @throws IOException\n      *             the io exception\n      * @see #removeLabels(String...) #removeLabels(String...)\n      */\n-    public void removeLabels(GHLabel... labels) throws IOException {\n-        removeLabels(Arrays.asList(labels));\n+    @WithBridgeMethods(void.class)\n+    public List<GHLabel> removeLabels(GHLabel... labels) throws IOException {\n+        return removeLabels(Arrays.asList(labels));\n     }\n \n     /**\n-     * Remove labels.\n+     * Remove a collection of labels.\n      *\n+     * Attempting to remove labels that are not present on the target are ignored.\n+     *\n+     * @return the remaining list of labels\n      * @param labels\n      *            the labels\n      * @throws IOException\n      *             the io exception\n      */\n-    public void removeLabels(Collection<GHLabel> labels) throws IOException {\n-        _removeLabels(GHLabel.toNames(labels));\n+    @WithBridgeMethods(void.class)\n+    public List<GHLabel> removeLabels(Collection<GHLabel> labels) throws IOException {\n+        return _removeLabels(GHLabel.toNames(labels));\n     }\n \n-    private void _removeLabels(Collection<String> names) throws IOException {\n-        List<String> newLabels = new ArrayList<String>();\n-\n-        for (GHLabel l : getLabels()) {\n-            if (!names.contains(l.getName())) {\n-                newLabels.add(l.getName());\n+    private List<GHLabel> _removeLabels(Collection<String> names) throws IOException {\n+        List<GHLabel> remainingLabels = Collections.emptyList();\n+        for (String name : names) {\n+            try {\n+                remainingLabels = removeLabel(name);\n+            } catch (GHFileNotFoundException e) {\n+                // when trying to remove multiple labels, we ignore already removed\n             }\n         }\n-\n-        setLabels(newLabels.toArray(new String[0]));\n+        return remainingLabels;\n     }\n \n     /**\n@@ -448,7 +485,6 @@ private void _removeLabels(Collection<String> names) throws IOException {\n     }\n \n     @Preview(SQUIRREL_GIRL)\n-    @Deprecated\n     public GHReaction createReaction(ReactionContent content) throws IOException {\n         return root.createRequest()\n                 .method(\"POST\")\n@@ -460,7 +496,6 @@ public GHReaction createReaction(ReactionContent content) throws IOException {\n     }\n \n     @Preview(SQUIRREL_GIRL)\n-    @Deprecated\n     public PagedIterable<GHReaction> listReactions() {\n         return root.createRequest()\n                 .withPreview(SQUIRREL_GIRL)"
    },
    {
      "sha": "4f861ddae9935ff866c4f26a60962ad76bbdfa6d",
      "filename": "src/main/java/org/kohsuke/github/GHIssueChanges.java",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHIssueChanges.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHIssueChanges.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHIssueChanges.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,49 @@\n+package org.kohsuke.github;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+/**\n+ * Wrapper to define changed fields on issues action=\"edited\"\n+ *\n+ * @see GHEventPayload.Issue\n+ */\n+@SuppressFBWarnings(\"UWF_UNWRITTEN_FIELD\")\n+public class GHIssueChanges {\n+\n+    private GHFrom title;\n+    private GHFrom body;\n+\n+    /**\n+     * Old issue title.\n+     *\n+     * @return old issue title (or null if not changed)\n+     */\n+    public GHFrom getTitle() {\n+        return title;\n+    }\n+\n+    /**\n+     * Old issue body.\n+     *\n+     * @return old issue body (or null if not changed)\n+     */\n+    public GHFrom getBody() {\n+        return body;\n+    }\n+\n+    /**\n+     * Wrapper for changed values.\n+     */\n+    public static class GHFrom {\n+        private String from;\n+\n+        /**\n+         * Previous value that was changed.\n+         *\n+         * @return previous value\n+         */\n+        public String getFrom() {\n+            return from;\n+        }\n+    }\n+}"
    },
    {
      "sha": "316f8632933d91236128c65212a73d1dcdd2f060",
      "filename": "src/main/java/org/kohsuke/github/GHIssueComment.java",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHIssueComment.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHIssueComment.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHIssueComment.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -127,7 +127,6 @@ public void delete() throws IOException {\n     }\n \n     @Preview(SQUIRREL_GIRL)\n-    @Deprecated\n     public GHReaction createReaction(ReactionContent content) throws IOException {\n         return owner.root.createRequest()\n                 .method(\"POST\")\n@@ -139,7 +138,6 @@ public GHReaction createReaction(ReactionContent content) throws IOException {\n     }\n \n     @Preview(SQUIRREL_GIRL)\n-    @Deprecated\n     public PagedIterable<GHReaction> listReactions() {\n         return owner.root.createRequest()\n                 .withPreview(SQUIRREL_GIRL)"
    },
    {
      "sha": "3bcb94ab22d2ea49f85fe7cf83dd426a682a8c26",
      "filename": "src/main/java/org/kohsuke/github/GHIssueEvent.java",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHIssueEvent.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHIssueEvent.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHIssueEvent.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -21,6 +21,7 @@\n     private GHMilestone milestone;\n     private GHLabel label;\n     private GHUser assignee;\n+    private GHIssueRename rename;\n \n     private GHIssue issue;\n \n@@ -144,6 +145,16 @@ public GHUser getAssignee() {\n         return assignee;\n     }\n \n+    /**\n+     * Get the {@link GHIssueRename} that contains information about issue old and new name. Only present for event\n+     * \"renamed\", <code>null</code> otherwise.\n+     *\n+     * @return the GHIssueRename\n+     */\n+    public GHIssueRename getRename() {\n+        return this.rename;\n+    }\n+\n     GHIssueEvent wrapUp(GitHub root) {\n         this.root = root;\n         return this;"
    },
    {
      "sha": "6a08754a1033ef7bab75f7e44b19be5f65c04af0",
      "filename": "src/main/java/org/kohsuke/github/GHIssueRename.java",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHIssueRename.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHIssueRename.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHIssueRename.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,32 @@\n+package org.kohsuke.github;\n+\n+/**\n+ * The type GHIssueRename.\n+ *\n+ * @see <a href=\"https://docs.github.com/en/developers/webhooks-and-events/events/issue-event-types#renamed\">Github\n+ *      documentation for renamed event</a>\n+ *\n+ * @author Andrii Tomchuk\n+ */\n+public class GHIssueRename {\n+    private String from = \"\";\n+    private String to = \"\";\n+\n+    /**\n+     * Old issue name.\n+     *\n+     * @return old issue name\n+     */\n+    public String getFrom() {\n+        return this.from;\n+    }\n+\n+    /**\n+     * New issue name.\n+     *\n+     * @return new issue name\n+     */\n+    public String getTo() {\n+        return this.to;\n+    }\n+}"
    },
    {
      "sha": "6d932f614abc108aa48a91ede6e47912d8611830",
      "filename": "src/main/java/org/kohsuke/github/GHLabel.java",
      "status": "modified",
      "additions": 33,
      "deletions": 6,
      "changes": 39,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHLabel.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHLabel.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHLabel.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -2,6 +2,7 @@\n \n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n \n import java.io.IOException;\n import java.util.ArrayList;\n@@ -22,6 +23,11 @@\n  */\n public class GHLabel extends GitHubInteractiveObject {\n \n+    private long id;\n+    private String nodeId;\n+    @JsonProperty(\"default\")\n+    private boolean default_;\n+\n     @Nonnull\n     private String url, name, color;\n \n@@ -42,6 +48,24 @@ GitHub getApiRoot() {\n         return Objects.requireNonNull(root);\n     }\n \n+    /**\n+     * Gets id.\n+     *\n+     * @return the id\n+     */\n+    public long getId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Gets node id.\n+     *\n+     * @return the node id.\n+     */\n+    public String getNodeId() {\n+        return nodeId;\n+    }\n+\n     /**\n      * Gets url.\n      *\n@@ -82,6 +106,15 @@ public String getDescription() {\n         return description;\n     }\n \n+    /**\n+     * If the label is one of the default labels created by GitHub automatically.\n+     *\n+     * @return true if the label is a default one\n+     */\n+    public boolean isDefault() {\n+        return default_;\n+    }\n+\n     /**\n      * Sets color.\n      *\n@@ -130,7 +163,6 @@ public void setDescription(String newDescription) throws IOException {\n      *             the io exception\n      */\n     @BetaApi\n-    @Deprecated\n     static Creator create(GHRepository repository) throws IOException {\n         return new Creator(repository);\n     }\n@@ -177,7 +209,6 @@ static GHLabel read(@Nonnull GHRepository repository, @Nonnull String name) thro\n      * @return a {@link Updater}\n      */\n     @BetaApi\n-    @Deprecated\n     public Updater update() {\n         return new Updater(this);\n     }\n@@ -188,7 +219,6 @@ public Updater update() {\n      * @return a {@link Setter}\n      */\n     @BetaApi\n-    @Deprecated\n     public Setter set() {\n         return new Setter(this);\n     }\n@@ -225,7 +255,6 @@ public int hashCode() {\n      * {@link #done()} is called automatically after the property is set.\n      */\n     @BetaApi\n-    @Deprecated\n     public static class Setter extends GHLabelBuilder<GHLabel> {\n         private Setter(@Nonnull GHLabel base) {\n             super(GHLabel.class, base.getApiRoot(), base);\n@@ -239,7 +268,6 @@ private Setter(@Nonnull GHLabel base) {\n      * Consumer must call {@link #done()} to commit changes.\n      */\n     @BetaApi\n-    @Deprecated\n     public static class Updater extends GHLabelBuilder<Updater> {\n         private Updater(@Nonnull GHLabel base) {\n             super(Updater.class, base.getApiRoot(), base);\n@@ -253,7 +281,6 @@ private Updater(@Nonnull GHLabel base) {\n      * Consumer must call {@link #done()} to create the new instance.\n      */\n     @BetaApi\n-    @Deprecated\n     public static class Creator extends GHLabelBuilder<Creator> {\n         private Creator(@Nonnull GHRepository repository) {\n             super(Creator.class, repository.root, null);"
    },
    {
      "sha": "a7d13fa8a9a5812031a48cb225cdc52dd756a76f",
      "filename": "src/main/java/org/kohsuke/github/GHLabelBuilder.java",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHLabelBuilder.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHLabelBuilder.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHLabelBuilder.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -39,21 +39,18 @@ protected GHLabelBuilder(@Nonnull Class<S> intermediateReturnType,\n \n     @Nonnull\n     @BetaApi\n-    @Deprecated\n     public S name(String value) throws IOException {\n         return with(\"name\", value);\n     }\n \n     @Nonnull\n     @BetaApi\n-    @Deprecated\n     public S color(String value) throws IOException {\n         return with(\"color\", value);\n     }\n \n     @Nonnull\n     @BetaApi\n-    @Deprecated\n     public S description(String value) throws IOException {\n         return with(\"description\", value);\n     }"
    },
    {
      "sha": "b3f5c8cfd25b481c00f4d263f172edb302791f1a",
      "filename": "src/main/java/org/kohsuke/github/GHLabelChanges.java",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHLabelChanges.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHLabelChanges.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHLabelChanges.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,49 @@\n+package org.kohsuke.github;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+/**\n+ * Wrapper to define changed fields on label action=\"edited\"\n+ *\n+ * @see GHEventPayload.Label\n+ */\n+@SuppressFBWarnings(\"UWF_UNWRITTEN_FIELD\")\n+public class GHLabelChanges {\n+\n+    private GHFrom name;\n+    private GHFrom color;\n+\n+    /**\n+     * Old label name.\n+     *\n+     * @return old label name (or null if not changed)\n+     */\n+    public GHFrom getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Old label color.\n+     *\n+     * @return old label color (or null if not changed)\n+     */\n+    public GHFrom getColor() {\n+        return color;\n+    }\n+\n+    /**\n+     * Wrapper for changed values.\n+     */\n+    public static class GHFrom {\n+        private String from;\n+\n+        /**\n+         * Previous value that was changed.\n+         *\n+         * @return previous value\n+         */\n+        public String getFrom() {\n+            return from;\n+        }\n+    }\n+}"
    },
    {
      "sha": "b77f530b821bd6a17a486c4c0f014dd62702f4ed",
      "filename": "src/main/java/org/kohsuke/github/GHMeta.java",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHMeta.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHMeta.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHMeta.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -23,6 +23,9 @@\n     private List<String> api;\n     private List<String> pages;\n     private List<String> importer = new ArrayList<>();\n+    private List<String> packages;\n+    private List<String> actions;\n+    private List<String> dependabot;\n \n     /**\n      * Is verifiable password authentication boolean.\n@@ -86,4 +89,31 @@ public boolean isVerifiablePasswordAuthentication() {\n     public List<String> getImporter() {\n         return Collections.unmodifiableList(importer);\n     }\n+\n+    /**\n+     * Gets package.\n+     *\n+     * @return the package\n+     */\n+    public List<String> getPackages() {\n+        return Collections.unmodifiableList(packages);\n+    }\n+\n+    /**\n+     * Gets actions.\n+     *\n+     * @return the actions\n+     */\n+    public List<String> getActions() {\n+        return Collections.unmodifiableList(actions);\n+    }\n+\n+    /**\n+     * Gets dependabot.\n+     *\n+     * @return the dependabot\n+     */\n+    public List<String> getDependabot() {\n+        return Collections.unmodifiableList(dependabot);\n+    }\n }"
    },
    {
      "sha": "6291454175c6597e7064fa831ef0147cc78bf672",
      "filename": "src/main/java/org/kohsuke/github/GHOrganization.java",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHOrganization.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHOrganization.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHOrganization.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -18,6 +18,9 @@\n  * @author Kohsuke Kawaguchi\n  */\n public class GHOrganization extends GHPerson {\n+\n+    private boolean has_organization_projects;\n+\n     GHOrganization wrapUp(GitHub root) {\n         return (GHOrganization) super.wrapUp(root);\n     }\n@@ -367,6 +370,35 @@ public void conceal(GHUser u) throws IOException {\n         root.createRequest().method(\"DELETE\").withUrlPath(\"/orgs/\" + login + \"/public_members/\" + u.getLogin()).send();\n     }\n \n+    /**\n+     * Are projects enabled for organization boolean.\n+     *\n+     * @return the boolean\n+     */\n+    public boolean areOrganizationProjectsEnabled() {\n+        return has_organization_projects;\n+    }\n+\n+    /**\n+     * Sets organization projects enabled status boolean\n+     *\n+     * @param newStatus\n+     *            enable status\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public void enableOrganizationProjects(boolean newStatus) throws IOException {\n+        edit(\"has_organization_projects\", newStatus);\n+    }\n+\n+    private void edit(String key, Object value) throws IOException {\n+        root.createRequest()\n+                .withUrlPath(String.format(\"/orgs/%s\", login))\n+                .method(\"PATCH\")\n+                .with(key, value)\n+                .fetchInto(this);\n+    }\n+\n     /**\n      * Returns the projects for this organization.\n      *"
    },
    {
      "sha": "4c397e93d288e6d127e83b575a492a0b99f224b4",
      "filename": "src/main/java/org/kohsuke/github/GHPullRequest.java",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHPullRequest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHPullRequest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHPullRequest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -577,7 +577,6 @@ public GHPullRequest setBaseBranch(String newBaseBranch) throws IOException {\n      *             the io exception\n      */\n     @Preview(LYDIAN)\n-    @Deprecated\n     public void updateBranch() throws IOException {\n         root.createRequest()\n                 .withPreview(LYDIAN)"
    },
    {
      "sha": "a8c5d44515b303fd69d1c1ed1b9eb76b6bb66007",
      "filename": "src/main/java/org/kohsuke/github/GHPullRequestReviewComment.java",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHPullRequestReviewComment.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHPullRequestReviewComment.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHPullRequestReviewComment.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -211,7 +211,6 @@ public GHPullRequestReviewComment reply(String body) throws IOException {\n     }\n \n     @Preview(SQUIRREL_GIRL)\n-    @Deprecated\n     public GHReaction createReaction(ReactionContent content) throws IOException {\n         return owner.root.createRequest()\n                 .method(\"POST\")\n@@ -223,7 +222,6 @@ public GHReaction createReaction(ReactionContent content) throws IOException {\n     }\n \n     @Preview(SQUIRREL_GIRL)\n-    @Deprecated\n     public PagedIterable<GHReaction> listReactions() {\n         return owner.root.createRequest()\n                 .withPreview(SQUIRREL_GIRL)"
    },
    {
      "sha": "8a1d90a288daf00d389cd85cfb64a75ac5bb1072",
      "filename": "src/main/java/org/kohsuke/github/GHRateLimit.java",
      "status": "modified",
      "additions": 10,
      "deletions": 7,
      "changes": 17,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHRateLimit.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHRateLimit.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHRateLimit.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -12,6 +12,7 @@\n import java.time.format.DateTimeParseException;\n import java.util.Date;\n import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n import java.util.logging.Logger;\n \n import javax.annotation.CheckForNull;\n@@ -344,7 +345,7 @@ Record getRecord(@Nonnull RateLimitTarget rateLimitTarget) {\n         private static final UnknownLimitRecord DEFAULT = new UnknownLimitRecord(Long.MIN_VALUE);\n \n         // The starting current UnknownLimitRecord is an expired record.\n-        private static UnknownLimitRecord current = DEFAULT;\n+        private static final AtomicReference<UnknownLimitRecord> current = new AtomicReference<>(DEFAULT);\n \n         /**\n          * Create a new unknown record that resets at the specified time.\n@@ -356,18 +357,20 @@ private UnknownLimitRecord(long resetEpochSeconds) {\n             super(unknownLimit, unknownRemaining, resetEpochSeconds);\n         }\n \n-        static synchronized Record current() {\n-            if (current.isExpired()) {\n-                current = new UnknownLimitRecord(System.currentTimeMillis() / 1000L + unknownLimitResetSeconds);\n+        static Record current() {\n+            Record result = current.get();\n+            if (result.isExpired()) {\n+                current.set(new UnknownLimitRecord(System.currentTimeMillis() / 1000L + unknownLimitResetSeconds));\n+                result = current.get();\n             }\n-            return current;\n+            return result;\n         }\n \n         /**\n          * Reset the current UnknownLimitRecord. For use during testing only.\n          */\n-        static synchronized void reset() {\n-            current = DEFAULT;\n+        static void reset() {\n+            current.set(DEFAULT);\n             unknownLimitResetSeconds = defaultUnknownLimitResetSeconds;\n         }\n     }"
    },
    {
      "sha": "120ea3b18cb8493ec9a1fb01d672c0adb032dfea",
      "filename": "src/main/java/org/kohsuke/github/GHReaction.java",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHReaction.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHReaction.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHReaction.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -12,7 +12,6 @@\n  * @see Reactable\n  */\n @Preview(SQUIRREL_GIRL)\n-@Deprecated\n public class GHReaction extends GHObject {\n \n     private GHUser user;"
    },
    {
      "sha": "cb140bb751bfcc91263c40abbebdfc267c12e129",
      "filename": "src/main/java/org/kohsuke/github/GHRelease.java",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHRelease.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHRelease.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHRelease.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -34,6 +34,16 @@\n     private Date published_at;\n     private String tarball_url;\n     private String zipball_url;\n+    private String discussion_url;\n+\n+    /**\n+     * Gets discussion url. Only present if a discussion relating to the release exists\n+     *\n+     * @return the discussion url\n+     */\n+    public String getDiscussionUrl() {\n+        return discussion_url;\n+    }\n \n     /**\n      * Gets assets url."
    },
    {
      "sha": "3254c806b8832766de4a3fd81861ad10dfe44678",
      "filename": "src/main/java/org/kohsuke/github/GHReleaseBuilder.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHReleaseBuilder.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHReleaseBuilder.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHReleaseBuilder.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -41,7 +41,7 @@ public GHReleaseBuilder body(String body) {\n      * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA.\n      *\n      * @param commitish\n-     *            Defaults to the repository’s default branch (usually \"master\"). Unused if the Git tag already exists.\n+     *            Defaults to the repository’s default branch (usually \"main\"). Unused if the Git tag already exists.\n      * @return the gh release builder\n      */\n     public GHReleaseBuilder commitish(String commitish) {\n@@ -87,6 +87,18 @@ public GHReleaseBuilder prerelease(boolean prerelease) {\n         return this;\n     }\n \n+    /**\n+     * Optional\n+     *\n+     * @param categoryName\n+     *            the category of the discussion to be created for the release. Category should already exist\n+     * @return the gh release builder\n+     */\n+    public GHReleaseBuilder categoryName(String categoryName) {\n+        builder.with(\"discussion_category_name\", categoryName);\n+        return this;\n+    }\n+\n     /**\n      * Create gh release.\n      *"
    },
    {
      "sha": "9000f99467a56153c031bcc63b0592368ea68780",
      "filename": "src/main/java/org/kohsuke/github/GHReleaseUpdater.java",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHReleaseUpdater.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHReleaseUpdater.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHReleaseUpdater.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -45,7 +45,7 @@ public GHReleaseUpdater body(String body) {\n      * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA.\n      *\n      * @param commitish\n-     *            Defaults to the repository’s default branch (usually \"master\"). Unused if the Git tag already exists.\n+     *            Defaults to the repository’s default branch (usually \"main\"). Unused if the Git tag already exists.\n      * @return the gh release updater\n      */\n     public GHReleaseUpdater commitish(String commitish) {\n@@ -91,6 +91,18 @@ public GHReleaseUpdater prerelease(boolean prerelease) {\n         return this;\n     }\n \n+    /**\n+     * Optional\n+     *\n+     * @param categoryName\n+     *            the category of the discussion to be created for the release. Category should already exist\n+     * @return the gh release builder\n+     */\n+    public GHReleaseUpdater categoryName(String categoryName) {\n+        builder.with(\"discussion_category_name\", categoryName);\n+        return this;\n+    }\n+\n     /**\n      * Update gh release.\n      *"
    },
    {
      "sha": "ef65299b472cdae2e6dac350d6905e245d7cedd1",
      "filename": "src/main/java/org/kohsuke/github/GHRepository.java",
      "status": "modified",
      "additions": 197,
      "deletions": 19,
      "changes": 216,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHRepository.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHRepository.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHRepository.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -31,6 +31,7 @@\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n import org.apache.commons.lang3.StringUtils;\n import org.kohsuke.github.function.InputStreamFunction;\n+import org.kohsuke.github.internal.EnumUtils;\n \n import java.io.FileNotFoundException;\n import java.io.IOException;\n@@ -49,16 +50,24 @@\n import java.util.Iterator;\n import java.util.LinkedHashSet;\n import java.util.List;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.TreeMap;\n import java.util.WeakHashMap;\n \n import javax.annotation.Nonnull;\n \n-import static java.util.Arrays.*;\n+import static java.util.Arrays.asList;\n import static java.util.Objects.requireNonNull;\n-import static org.kohsuke.github.internal.Previews.*;\n+import static org.kohsuke.github.internal.Previews.ANTIOPE;\n+import static org.kohsuke.github.internal.Previews.ANT_MAN;\n+import static org.kohsuke.github.internal.Previews.BAPTISTE;\n+import static org.kohsuke.github.internal.Previews.FLASH;\n+import static org.kohsuke.github.internal.Previews.INERTIA;\n+import static org.kohsuke.github.internal.Previews.MERCY;\n+import static org.kohsuke.github.internal.Previews.NEBULA;\n+import static org.kohsuke.github.internal.Previews.SHADOW_CAT;\n \n /**\n  * A repository on GitHub.\n@@ -98,6 +107,8 @@\n     @JsonProperty(\"private\")\n     private boolean _private;\n \n+    private String visibility;\n+\n     private int forks_count, stargazers_count, watchers_count, size, open_issues_count, subscribers_count;\n \n     private String pushed_at;\n@@ -450,7 +461,7 @@ public GHReleaseBuilder createRelease(String tag) {\n      * Creates a named ref, such as tag, branch, etc.\n      *\n      * @param name\n-     *            The name of the fully qualified reference (ie: refs/heads/master). If it doesn't start with 'refs' and\n+     *            The name of the fully qualified reference (ie: refs/heads/main). If it doesn't start with 'refs' and\n      *            have at least two slashes, it will be rejected.\n      * @param sha\n      *            The SHA1 value to set this reference to\n@@ -567,7 +578,15 @@ public GHRelease getLatestRelease() throws IOException {\n      *             the io exception\n      */\n     public Map<String, Long> listLanguages() throws IOException {\n-        return root.createRequest().withUrlPath(getApiTailUrl(\"languages\")).fetch(HashMap.class);\n+        HashMap<String, Long> result = new HashMap<>();\n+        root.createRequest().withUrlPath(getApiTailUrl(\"languages\")).fetch(HashMap.class).forEach((key, value) -> {\n+            Long addValue = -1L;\n+            if (value instanceof Integer) {\n+                addValue = Long.valueOf((Integer) value);\n+            }\n+            result.put(key.toString(), addValue);\n+        });\n+        return result;\n     }\n \n     /**\n@@ -704,12 +723,45 @@ public boolean isPrivate() {\n         return _private;\n     }\n \n+    /**\n+     * Visibility of a repository.\n+     */\n+    public enum Visibility {\n+        PUBLIC, INTERNAL, PRIVATE, UNKNOWN;\n+\n+        public static Visibility from(String value) {\n+            return EnumUtils.getNullableEnumOrDefault(Visibility.class, value, Visibility.UNKNOWN);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name().toLowerCase(Locale.ROOT);\n+        }\n+    }\n+\n+    /**\n+     * Gets the visibility of the repository.\n+     *\n+     * @return the visibility\n+     */\n+    @Preview(NEBULA)\n+    public Visibility getVisibility() {\n+        if (visibility == null) {\n+            try {\n+                populate();\n+            } catch (final IOException e) {\n+                // Convert this to a runtime exception to avoid messy method signature\n+                throw new GHException(\"Could not populate the visibility of the repository\", e);\n+            }\n+        }\n+        return Visibility.from(visibility);\n+    }\n+\n     /**\n      * Is template boolean.\n      *\n      * @return the boolean\n      */\n-    @Deprecated\n     @Preview(BAPTISTE)\n     public boolean isTemplate() {\n         // isTemplate is still in preview, we do not want to retrieve it unless needed.\n@@ -794,16 +846,18 @@ public Date getPushedAt() {\n     /**\n      * Returns the primary branch you'll configure in the \"Admin &gt; Options\" config page.\n      *\n-     * @return This field is null until the user explicitly configures the master branch.\n+     * @return This field is null until the user explicitly configures the default branch.\n      */\n     public String getDefaultBranch() {\n         return default_branch;\n     }\n \n     /**\n-     * Gets master branch.\n+     * Gets default branch.\n+     *\n+     * Name is an artifact of when \"master\" was the most common default.\n      *\n-     * @return the master branch\n+     * @return the default branch\n      * @deprecated Renamed to {@link #getDefaultBranch()}\n      */\n     @Deprecated\n@@ -1196,6 +1250,25 @@ public void setPrivate(boolean value) throws IOException {\n         set().private_(value);\n     }\n \n+    /**\n+     * Sets visibility.\n+     *\n+     * @param value\n+     *            the value\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    @Preview(NEBULA)\n+    public void setVisibility(final Visibility value) throws IOException {\n+        root.createRequest()\n+                .method(\"PATCH\")\n+                .withPreview(NEBULA)\n+                .with(\"name\", name)\n+                .with(\"visibility\", value)\n+                .withUrlPath(getApiTailUrl(\"\"))\n+                .send();\n+    }\n+\n     /**\n      * Allow squash merge.\n      *\n@@ -1701,7 +1774,7 @@ public GHTagObject getTagObject(String sha) throws IOException {\n      * Retrive a tree of the given type for the current GitHub repository.\n      *\n      * @param sha\n-     *            sha number or branch name ex: \"master\"\n+     *            sha number or branch name ex: \"main\"\n      * @return refs matching the request type\n      * @throws IOException\n      *             on failure communicating with GitHub, potentially due to an invalid tree type being requested\n@@ -1725,7 +1798,7 @@ public GHTreeBuilder createTree() {\n      * https://developer.github.com/v3/git/trees/#get-a-tree-recursively\n      *\n      * @param sha\n-     *            sha number or branch name ex: \"master\"\n+     *            sha number or branch name ex: \"main\"\n      * @param recursive\n      *            use 1\n      * @return the tree recursive\n@@ -1938,13 +2011,12 @@ public GHCommitStatus getLastCommitStatus(String sha1) throws IOException {\n      *      for a specific ref</a>\n      */\n     @Preview(ANTIOPE)\n-    @Deprecated\n     public PagedIterable<GHCheckRun> getCheckRuns(String ref) throws IOException {\n         GitHubRequest request = root.createRequest()\n                 .withUrlPath(String.format(\"/repos/%s/%s/commits/%s/check-runs\", getOwnerName(), name, ref))\n                 .withPreview(ANTIOPE)\n                 .build();\n-        return new GHCheckRunsIterable(root, request);\n+        return new GHCheckRunsIterable(this, request);\n     }\n \n     /**\n@@ -2012,7 +2084,6 @@ public GHCommitStatus createCommitStatus(String sha1, GHCommitState state, Strin\n      * @return a builder which you should customize, then call {@link GHCheckRunBuilder#create}\n      */\n     @Preview(ANTIOPE)\n-    @Deprecated\n     public @NonNull GHCheckRunBuilder createCheckRun(@NonNull String name, @NonNull String headSHA) {\n         return new GHCheckRunBuilder(this, name, headSHA);\n     }\n@@ -2025,7 +2096,6 @@ public GHCommitStatus createCommitStatus(String sha1, GHCommitState state, Strin\n      * @return a builder which you should customize, then call {@link GHCheckRunBuilder#create}\n      */\n     @Preview(BAPTISTE)\n-    @Deprecated\n     public @NonNull GHCheckRunBuilder updateCheckRun(long checkId) {\n         return new GHCheckRunBuilder(this, checkId);\n     }\n@@ -2898,6 +2968,110 @@ public GHIssueEvent getIssueEvent(long id) throws IOException {\n                 .wrapUp(root);\n     }\n \n+    /**\n+     * Lists all the workflows of this repository.\n+     *\n+     * @return the paged iterable\n+     */\n+    public PagedIterable<GHWorkflow> listWorkflows() {\n+        return new GHWorkflowsIterable(this);\n+    }\n+\n+    /**\n+     * Gets a workflow by id.\n+     *\n+     * @param id\n+     *            the id of the workflow run\n+     * @return the workflow run\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public GHWorkflow getWorkflow(long id) throws IOException {\n+        return getWorkflow(String.valueOf(id));\n+    }\n+\n+    /**\n+     * Gets a workflow by name of the file.\n+     *\n+     * @param nameOrId\n+     *            either the name of the file (e.g. my-workflow.yml) or the id as a string\n+     * @return the workflow run\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public GHWorkflow getWorkflow(String nameOrId) throws IOException {\n+        return root.createRequest()\n+                .withUrlPath(getApiTailUrl(\"actions/workflows\"), nameOrId)\n+                .fetch(GHWorkflow.class)\n+                .wrapUp(this);\n+    }\n+\n+    /**\n+     * Retrieves workflow runs.\n+     *\n+     * @return the workflow run query builder\n+     */\n+    public GHWorkflowRunQueryBuilder queryWorkflowRuns() {\n+        return new GHWorkflowRunQueryBuilder(this);\n+    }\n+\n+    /**\n+     * Gets a workflow run.\n+     *\n+     * @param id\n+     *            the id of the workflow run\n+     * @return the workflow run\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public GHWorkflowRun getWorkflowRun(long id) throws IOException {\n+        return root.createRequest()\n+                .withUrlPath(getApiTailUrl(\"actions/runs\"), String.valueOf(id))\n+                .fetch(GHWorkflowRun.class)\n+                .wrapUp(this);\n+    }\n+\n+    /**\n+     * Lists all the artifacts of this repository.\n+     *\n+     * @return the paged iterable\n+     */\n+    public PagedIterable<GHArtifact> listArtifacts() {\n+        return new GHArtifactsIterable(this, root.createRequest().withUrlPath(getApiTailUrl(\"actions/artifacts\")));\n+    }\n+\n+    /**\n+     * Gets an artifact by id.\n+     *\n+     * @param id\n+     *            the id of the artifact\n+     * @return the artifact\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public GHArtifact getArtifact(long id) throws IOException {\n+        return root.createRequest()\n+                .withUrlPath(getApiTailUrl(\"actions/artifacts\"), String.valueOf(id))\n+                .fetch(GHArtifact.class)\n+                .wrapUp(this);\n+    }\n+\n+    /**\n+     * Gets a job from a workflow run by id.\n+     *\n+     * @param id\n+     *            the id of the job\n+     * @return the job\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public GHWorkflowJob getWorkflowJob(long id) throws IOException {\n+        return root.createRequest()\n+                .withUrlPath(getApiTailUrl(\"/actions/jobs\"), String.valueOf(id))\n+                .fetch(GHWorkflowJob.class)\n+                .wrapUp(this);\n+    }\n+\n     // Only used within listTopics().\n     private static class Topics {\n         public List<String> names;\n@@ -2972,7 +3146,7 @@ public GHTagObject createTag(String tag, String message, String object, String t\n      * @param streamFunction\n      *            The {@link InputStreamFunction} that will process the stream\n      * @param ref\n-     *            if <code>null</code> the repository's default branch, usually <code>master</code>,\n+     *            if <code>null</code> the repository's default branch, usually <code>main</code>,\n      * @throws IOException\n      *             The IO exception.\n      * @return the result of reading the stream.\n@@ -2989,7 +3163,7 @@ public GHTagObject createTag(String tag, String message, String object, String t\n      * @param streamFunction\n      *            The {@link InputStreamFunction} that will process the stream\n      * @param ref\n-     *            if <code>null</code> the repository's default branch, usually <code>master</code>,\n+     *            if <code>null</code> the repository's default branch, usually <code>main</code>,\n      * @throws IOException\n      *             The IO exception.\n      * @return the result of reading the stream.\n@@ -3028,11 +3202,17 @@ void populate() throws IOException {\n             // There is bug in Push event payloads that returns the wrong url.\n             // All other occurrences of \"url\" take the form \"https://api.github.com/...\".\n             // For Push event repository records, they take the form \"https://github.com/{fullName}\".\n-            root.createRequest().withPreview(BAPTISTE).setRawUrlPath(url.toString()).fetchInto(this).wrap(root);\n+            root.createRequest()\n+                    .withPreview(BAPTISTE)\n+                    .withPreview(NEBULA)\n+                    .setRawUrlPath(url.toString())\n+                    .fetchInto(this)\n+                    .wrap(root);\n         } catch (HttpException e) {\n             if (e.getCause() instanceof JsonParseException) {\n                 root.createRequest()\n                         .withPreview(BAPTISTE)\n+                        .withPreview(NEBULA)\n                         .withUrlPath(\"/repos/\" + full_name)\n                         .fetchInto(this)\n                         .wrap(root);\n@@ -3048,7 +3228,6 @@ void populate() throws IOException {\n      * Consumer must call {@link #done()} to commit changes.\n      */\n     @BetaApi\n-    @Deprecated\n     public static class Updater extends GHRepositoryBuilder<Updater> {\n         protected Updater(@Nonnull GHRepository repository) {\n             super(Updater.class, repository.root, null);\n@@ -3066,7 +3245,6 @@ protected Updater(@Nonnull GHRepository repository) {\n      * Consumer must call {@link #done()} to commit changes.\n      */\n     @BetaApi\n-    @Deprecated\n     public static class Setter extends GHRepositoryBuilder<GHRepository> {\n         protected Setter(@Nonnull GHRepository repository) {\n             super(GHRepository.class, repository.root, null);"
    },
    {
      "sha": "cfb218f4dbee67e80817b36860c00c2dd6a89587",
      "filename": "src/main/java/org/kohsuke/github/GHRepositoryBuilder.java",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHRepositoryBuilder.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHRepositoryBuilder.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHRepositoryBuilder.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1,9 +1,12 @@\n package org.kohsuke.github;\n \n+import org.kohsuke.github.GHRepository.Visibility;\n+\n import java.io.IOException;\n import java.net.URL;\n \n import static org.kohsuke.github.internal.Previews.BAPTISTE;\n+import static org.kohsuke.github.internal.Previews.NEBULA;\n \n abstract class GHRepositoryBuilder<S> extends AbstractBuilder<GHRepository, S> {\n \n@@ -146,6 +149,20 @@ public S private_(boolean enabled) throws IOException {\n         return with(\"private\", enabled);\n     }\n \n+    /**\n+     * Sets the repository visibility\n+     *\n+     * @param visibility\n+     *            visibility of repository\n+     * @return a builder to continue with building\n+     * @throws IOException\n+     *             In case of any networking error or error from the server.\n+     */\n+    public S visibility(final Visibility visibility) throws IOException {\n+        requester.withPreview(NEBULA);\n+        return with(\"visibility\", visibility);\n+    }\n+\n     /**\n      * Enables issue tracker\n      *\n@@ -214,7 +231,6 @@ public S downloads(boolean enabled) throws IOException {\n      *             In case of any networking error or error from the server.\n      */\n     @Preview(BAPTISTE)\n-    @Deprecated\n     public S isTemplate(boolean enabled) throws IOException {\n         requester.withPreview(BAPTISTE);\n         return with(\"is_template\", enabled);"
    },
    {
      "sha": "4fcf9eaca8b64de5f2fa06b5310b8e7c75e158a0",
      "filename": "src/main/java/org/kohsuke/github/GHRepositoryStatistics.java",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHRepositoryStatistics.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHRepositoryStatistics.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHRepositoryStatistics.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -60,7 +60,6 @@ public GHRepositoryStatistics(GHRepository repo) {\n      *             the interrupted exception\n      */\n     @BetaApi\n-    @Deprecated\n     @SuppressWarnings(\"SleepWhileInLoop\")\n     @SuppressFBWarnings(value = { \"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\" }, justification = \"JSON API\")\n     public PagedIterable<ContributorStats> getContributorStats(boolean waitTillReady)"
    },
    {
      "sha": "0e7973728377d90bcd56b7be3babf18f5961d692",
      "filename": "src/main/java/org/kohsuke/github/GHUser.java",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHUser.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHUser.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHUser.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -28,6 +28,8 @@\n import java.io.IOException;\n import java.util.*;\n \n+import static org.kohsuke.github.internal.Previews.INERTIA;\n+\n /**\n  * Represents an user of GitHub.\n  *\n@@ -134,6 +136,21 @@ public void unfollow() throws IOException {\n         return listRepositories(\"starred\");\n     }\n \n+    /**\n+     * Lists all the projects.\n+     * <p>\n+     * https://docs.github.com/en/rest/reference/projects#list-user-projects\n+     *\n+     * @return the paged iterable\n+     */\n+    @Preview(INERTIA)\n+    public PagedIterable<GHProject> listProjects() {\n+        return root.createRequest()\n+                .withPreview(INERTIA)\n+                .withUrlPath(getApiTailUrl(\"projects\"))\n+                .toIterable(GHProject[].class, item -> item.wrap(root));\n+    }\n+\n     private PagedIterable<GHRepository> listRepositories(final String suffix) {\n         return root.createRequest()\n                 .withUrlPath(getApiTailUrl(suffix))"
    },
    {
      "sha": "1d8548ecca202cfcb8409e112219862d17e94add",
      "filename": "src/main/java/org/kohsuke/github/GHWorkflow.java",
      "status": "added",
      "additions": 158,
      "deletions": 0,
      "changes": 158,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflow.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflow.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHWorkflow.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,158 @@\n+package org.kohsuke.github;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * A workflow.\n+ *\n+ * @author Guillaume Smet\n+ * @see GHRepository#getWorkflow(long)\n+ */\n+public class GHWorkflow extends GHObject {\n+\n+    // Not provided by the API.\n+    @JsonIgnore\n+    private GHRepository owner;\n+\n+    private String name;\n+    private String path;\n+    private String state;\n+\n+    private String htmlUrl;\n+    private String badgeUrl;\n+\n+    /**\n+     * The name of the workflow.\n+     *\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * The path of the workflow e.g. .github/workflows/blank.yaml\n+     *\n+     * @return the path\n+     */\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    /**\n+     * The state of the workflow.\n+     *\n+     * @return the state\n+     */\n+    public String getState() {\n+        return state;\n+    }\n+\n+    @Override\n+    public URL getHtmlUrl() throws IOException {\n+        return GitHubClient.parseURL(htmlUrl);\n+    }\n+\n+    /**\n+     * Repository to which the workflow belongs.\n+     *\n+     * @return the repository\n+     */\n+    public GHRepository getRepository() {\n+        return owner;\n+    }\n+\n+    /**\n+     * The badge URL, like https://github.com/octo-org/octo-repo/workflows/CI/badge.svg\n+     *\n+     * @return the badge url\n+     */\n+    public URL getBadgeUrl() {\n+        return GitHubClient.parseURL(badgeUrl);\n+    }\n+\n+    /**\n+     * Disable the workflow.\n+     *\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public void disable() throws IOException {\n+        root.createRequest().method(\"PUT\").withUrlPath(getApiRoute(), \"disable\").fetchHttpStatusCode();\n+    }\n+\n+    /**\n+     * Enable the workflow.\n+     *\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public void enable() throws IOException {\n+        root.createRequest().method(\"PUT\").withUrlPath(getApiRoute(), \"enable\").fetchHttpStatusCode();\n+    }\n+\n+    /**\n+     * Create a workflow dispatch event which triggers a manual workflow run.\n+     *\n+     * @param ref\n+     *            the git reference for the workflow. The reference can be a branch or tag name.\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public void dispatch(String ref) throws IOException {\n+        dispatch(ref, Collections.emptyMap());\n+    }\n+\n+    /**\n+     * Create a workflow dispatch event which triggers a manual workflow run.\n+     *\n+     * @param ref\n+     *            the git reference for the workflow. The reference can be a branch or tag name.\n+     * @param inputs\n+     *            input keys and values configured in the workflow file. The maximum number of properties is 10. Any\n+     *            default properties configured in the workflow file will be used when inputs are omitted.\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public void dispatch(String ref, Map<String, Object> inputs) throws IOException {\n+        Requester requester = root.createRequest()\n+                .method(\"POST\")\n+                .withUrlPath(getApiRoute(), \"dispatches\")\n+                .with(\"ref\", ref);\n+\n+        if (!inputs.isEmpty()) {\n+            requester.with(\"inputs\", inputs);\n+        }\n+\n+        requester.fetchHttpStatusCode();\n+    }\n+\n+    private String getApiRoute() {\n+        if (owner == null) {\n+            // Workflow runs returned from search to do not have an owner. Attempt to use url.\n+            final URL url = Objects.requireNonNull(getUrl(), \"Missing instance URL!\");\n+            return StringUtils.prependIfMissing(url.toString().replace(root.getApiUrl(), \"\"), \"/\");\n+\n+        }\n+        return \"/repos/\" + owner.getOwnerName() + \"/\" + owner.getName() + \"/actions/workflows/\" + getId();\n+    }\n+\n+    GHWorkflow wrapUp(GHRepository owner) {\n+        this.owner = owner;\n+        return wrapUp(owner.root);\n+    }\n+\n+    GHWorkflow wrapUp(GitHub root) {\n+        this.root = root;\n+        if (owner != null)\n+            owner.wrap(root);\n+        return this;\n+    }\n+}"
    },
    {
      "sha": "9afcc925d145c3ada543aac5513df601e0ed3acf",
      "filename": "src/main/java/org/kohsuke/github/GHWorkflowJob.java",
      "status": "added",
      "additions": 256,
      "deletions": 0,
      "changes": 256,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowJob.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowJob.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHWorkflowJob.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,256 @@\n+package org.kohsuke.github;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.commons.lang3.StringUtils;\n+import org.kohsuke.github.GHWorkflowRun.Conclusion;\n+import org.kohsuke.github.GHWorkflowRun.Status;\n+import org.kohsuke.github.function.InputStreamFunction;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A workflow run job.\n+ *\n+ * @author Guillaume Smet\n+ */\n+public class GHWorkflowJob extends GHObject {\n+\n+    // Not provided by the API.\n+    @JsonIgnore\n+    private GHRepository owner;\n+\n+    private String name;\n+\n+    private String headSha;\n+\n+    private String startedAt;\n+    private String completedAt;\n+\n+    private String status;\n+    private String conclusion;\n+\n+    private long runId;\n+\n+    private String htmlUrl;\n+    private String checkRunUrl;\n+\n+    private List<Step> steps = new ArrayList<>();\n+\n+    /**\n+     * The name of the job.\n+     *\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the HEAD SHA.\n+     *\n+     * @return sha for the HEAD commit\n+     */\n+    public String getHeadSha() {\n+        return headSha;\n+    }\n+\n+    /**\n+     * When was this job started?\n+     *\n+     * @return start date\n+     */\n+    public Date getStartedAt() {\n+        return GitHubClient.parseDate(startedAt);\n+    }\n+\n+    /**\n+     * When was this job completed?\n+     *\n+     * @return completion date\n+     */\n+    public Date getCompletedAt() {\n+        return GitHubClient.parseDate(completedAt);\n+    }\n+\n+    /**\n+     * Gets status of the job.\n+     * <p>\n+     * Can be {@code UNKNOWN} if the value returned by GitHub is unknown from the API.\n+     *\n+     * @return status of the job\n+     */\n+    public Status getStatus() {\n+        return Status.from(status);\n+    }\n+\n+    /**\n+     * Gets the conclusion of the job.\n+     * <p>\n+     * Can be {@code UNKNOWN} if the value returned by GitHub is unknown from the API.\n+     *\n+     * @return conclusion of the job\n+     */\n+    public Conclusion getConclusion() {\n+        return Conclusion.from(conclusion);\n+    }\n+\n+    /**\n+     * The run id.\n+     *\n+     * @return the run id\n+     */\n+    public long getRunId() {\n+        return runId;\n+    }\n+\n+    @Override\n+    public URL getHtmlUrl() {\n+        return GitHubClient.parseURL(htmlUrl);\n+    }\n+\n+    /**\n+     * The check run URL.\n+     *\n+     * @return the check run url\n+     */\n+    public URL getCheckRunUrl() {\n+        return GitHubClient.parseURL(checkRunUrl);\n+    }\n+\n+    /**\n+     * Gets the execution steps of this job.\n+     *\n+     * @return the execution steps\n+     */\n+    public List<Step> getSteps() {\n+        return steps;\n+    }\n+\n+    /**\n+     * Repository to which the job belongs.\n+     *\n+     * @return the repository\n+     */\n+    public GHRepository getRepository() {\n+        return owner;\n+    }\n+\n+    /**\n+     * Downloads the logs.\n+     * <p>\n+     * The logs are returned as a text file.\n+     *\n+     * @param <T>\n+     *            the type of result\n+     * @param streamFunction\n+     *            The {@link InputStreamFunction} that will process the stream\n+     * @throws IOException\n+     *             The IO exception.\n+     * @return the result of reading the stream.\n+     */\n+    public <T> T downloadLogs(InputStreamFunction<T> streamFunction) throws IOException {\n+        requireNonNull(streamFunction, \"Stream function must not be null\");\n+\n+        return root.createRequest().method(\"GET\").withUrlPath(getApiRoute(), \"logs\").fetchStream(streamFunction);\n+    }\n+\n+    private String getApiRoute() {\n+        if (owner == null) {\n+            // Workflow runs returned from search to do not have an owner. Attempt to use url.\n+            final URL url = Objects.requireNonNull(getUrl(), \"Missing instance URL!\");\n+            return StringUtils.prependIfMissing(url.toString().replace(root.getApiUrl(), \"\"), \"/\");\n+\n+        }\n+        return \"/repos/\" + owner.getOwnerName() + \"/\" + owner.getName() + \"/actions/jobs/\" + getId();\n+    }\n+\n+    GHWorkflowJob wrapUp(GHRepository owner) {\n+        this.owner = owner;\n+        return wrapUp(owner.root);\n+    }\n+\n+    GHWorkflowJob wrapUp(GitHub root) {\n+        this.root = root;\n+        if (owner != null) {\n+            owner.wrap(root);\n+        }\n+        return this;\n+    }\n+\n+    public static class Step {\n+\n+        private String name;\n+        private int number;\n+\n+        private String startedAt;\n+        private String completedAt;\n+\n+        private String status;\n+        private String conclusion;\n+\n+        /**\n+         * Gets the name of the step.\n+         *\n+         * @return name\n+         */\n+        public String getName() {\n+            return name;\n+        }\n+\n+        /**\n+         * Gets the sequential number of the step.\n+         *\n+         * @return number\n+         */\n+        public int getNumber() {\n+            return number;\n+        }\n+\n+        /**\n+         * When was this step started?\n+         *\n+         * @return start date\n+         */\n+        public Date getStartedAt() {\n+            return GitHubClient.parseDate(startedAt);\n+        }\n+\n+        /**\n+         * When was this step completed?\n+         *\n+         * @return completion date\n+         */\n+        public Date getCompletedAt() {\n+            return GitHubClient.parseDate(completedAt);\n+        }\n+\n+        /**\n+         * Gets status of the step.\n+         * <p>\n+         * Can be {@code UNKNOWN} if the value returned by GitHub is unknown from the API.\n+         *\n+         * @return status of the step\n+         */\n+        public Status getStatus() {\n+            return Status.from(status);\n+        }\n+\n+        /**\n+         * Gets the conclusion of the step.\n+         * <p>\n+         * Can be {@code UNKNOWN} if the value returned by GitHub is unknown from the API.\n+         *\n+         * @return conclusion of the step\n+         */\n+        public Conclusion getConclusion() {\n+            return Conclusion.from(conclusion);\n+        }\n+    }\n+}"
    },
    {
      "sha": "af2803b3757ddb55a7d589fbcc25b3d55587637a",
      "filename": "src/main/java/org/kohsuke/github/GHWorkflowJobQueryBuilder.java",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowJobQueryBuilder.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowJobQueryBuilder.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHWorkflowJobQueryBuilder.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,47 @@\n+package org.kohsuke.github;\n+\n+import java.net.MalformedURLException;\n+\n+/**\n+ * Lists up jobs of a workflow run with some filtering.\n+ *\n+ * @author Guillaume Smet\n+ */\n+public class GHWorkflowJobQueryBuilder extends GHQueryBuilder<GHWorkflowJob> {\n+    private final GHRepository repo;\n+\n+    GHWorkflowJobQueryBuilder(GHWorkflowRun workflowRun) {\n+        super(workflowRun.getRepository().root);\n+        this.repo = workflowRun.getRepository();\n+        req.withUrlPath(repo.getApiTailUrl(\"actions/runs\"), String.valueOf(workflowRun.getId()), \"jobs\");\n+    }\n+\n+    /**\n+     * Apply a filter to only return the jobs of the most recent execution of the workflow run.\n+     *\n+     * @return the workflow run job query builder\n+     */\n+    public GHWorkflowJobQueryBuilder latest() {\n+        req.with(\"filter\", \"latest\");\n+        return this;\n+    }\n+\n+    /**\n+     * Apply a filter to return jobs from all executions of this workflow run.\n+     *\n+     * @return the workflow run job run query builder\n+     */\n+    public GHWorkflowJobQueryBuilder all() {\n+        req.with(\"filter\", \"all\");\n+        return this;\n+    }\n+\n+    @Override\n+    public PagedIterable<GHWorkflowJob> list() {\n+        try {\n+            return new GHWorkflowJobsIterable(repo, req.build());\n+        } catch (MalformedURLException e) {\n+            throw new GHException(e.getMessage(), e);\n+        }\n+    }\n+}"
    },
    {
      "sha": "c3be99f4d7ba0db7e6b45037bddc69cd20770540",
      "filename": "src/main/java/org/kohsuke/github/GHWorkflowJobsIterable.java",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowJobsIterable.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowJobsIterable.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHWorkflowJobsIterable.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,44 @@\n+package org.kohsuke.github;\n+\n+import java.util.Iterator;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Iterable for workflow run jobs listing.\n+ */\n+class GHWorkflowJobsIterable extends PagedIterable<GHWorkflowJob> {\n+    private final GHRepository repo;\n+    private final GitHubRequest request;\n+\n+    private GHWorkflowJobsPage result;\n+\n+    public GHWorkflowJobsIterable(GHRepository repo, GitHubRequest request) {\n+        this.repo = repo;\n+        this.request = request;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public PagedIterator<GHWorkflowJob> _iterator(int pageSize) {\n+        return new PagedIterator<>(\n+                adapt(GitHubPageIterator.create(repo.root.getClient(), GHWorkflowJobsPage.class, request, pageSize)),\n+                null);\n+    }\n+\n+    protected Iterator<GHWorkflowJob[]> adapt(final Iterator<GHWorkflowJobsPage> base) {\n+        return new Iterator<GHWorkflowJob[]>() {\n+            public boolean hasNext() {\n+                return base.hasNext();\n+            }\n+\n+            public GHWorkflowJob[] next() {\n+                GHWorkflowJobsPage v = base.next();\n+                if (result == null) {\n+                    result = v;\n+                }\n+                return v.getWorkflowJobs(repo);\n+            }\n+        };\n+    }\n+}"
    },
    {
      "sha": "6371d3663d9b279b316f8b8ba5568654feacecc6",
      "filename": "src/main/java/org/kohsuke/github/GHWorkflowJobsPage.java",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowJobsPage.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowJobsPage.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHWorkflowJobsPage.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,20 @@\n+package org.kohsuke.github;\n+\n+/**\n+ * Represents the one page of jobs result when listing jobs from a workflow run.\n+ */\n+class GHWorkflowJobsPage {\n+    private int total_count;\n+    private GHWorkflowJob[] jobs;\n+\n+    public int getTotalCount() {\n+        return total_count;\n+    }\n+\n+    GHWorkflowJob[] getWorkflowJobs(GHRepository repo) {\n+        for (GHWorkflowJob job : jobs) {\n+            job.wrapUp(repo);\n+        }\n+        return jobs;\n+    }\n+}"
    },
    {
      "sha": "b66e5a01f4ac3a498363a71fc1da8a22d8329ef0",
      "filename": "src/main/java/org/kohsuke/github/GHWorkflowRun.java",
      "status": "added",
      "additions": 457,
      "deletions": 0,
      "changes": 457,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowRun.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowRun.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHWorkflowRun.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,457 @@\n+package org.kohsuke.github;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.commons.lang3.StringUtils;\n+import org.kohsuke.github.function.InputStreamFunction;\n+import org.kohsuke.github.internal.EnumUtils;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A workflow run.\n+ *\n+ * @author Guillaume Smet\n+ * @see GHRepository#getWorkflowRun(long)\n+ */\n+public class GHWorkflowRun extends GHObject {\n+\n+    @JsonProperty(\"repository\")\n+    private GHRepository owner;\n+\n+    private String name;\n+    private long runNumber;\n+    private long workflowId;\n+\n+    private String htmlUrl;\n+    private String jobsUrl;\n+    private String logsUrl;\n+    private String checkSuiteUrl;\n+    private String artifactsUrl;\n+    private String cancelUrl;\n+    private String rerunUrl;\n+    private String workflowUrl;\n+\n+    private String headBranch;\n+    private String headSha;\n+    private GHRepository headRepository;\n+    private HeadCommit headCommit;\n+\n+    private String event;\n+    private String status;\n+    private String conclusion;\n+\n+    private GHPullRequest[] pullRequests;\n+\n+    /**\n+     * The name of the workflow run.\n+     *\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * The run number.\n+     *\n+     * @return the run number\n+     */\n+    public long getRunNumber() {\n+        return runNumber;\n+    }\n+\n+    /**\n+     * The workflow id.\n+     *\n+     * @return the workflow id\n+     */\n+    public long getWorkflowId() {\n+        return workflowId;\n+    }\n+\n+    @Override\n+    public URL getHtmlUrl() throws IOException {\n+        return GitHubClient.parseURL(htmlUrl);\n+    }\n+\n+    /**\n+     * The jobs URL, like https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs\n+     *\n+     * @return the jobs url\n+     */\n+    public URL getJobsUrl() {\n+        return GitHubClient.parseURL(jobsUrl);\n+    }\n+\n+    /**\n+     * The logs URL, like https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs\n+     *\n+     * @return the logs url\n+     */\n+    public URL getLogsUrl() {\n+        return GitHubClient.parseURL(logsUrl);\n+    }\n+\n+    /**\n+     * The check suite URL, like https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374\n+     *\n+     * @return the check suite url\n+     */\n+    public URL getCheckSuiteUrl() {\n+        return GitHubClient.parseURL(checkSuiteUrl);\n+    }\n+\n+    /**\n+     * The artifacts URL, like https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts\n+     *\n+     * @return the artifacts url\n+     */\n+    public URL getArtifactsUrl() {\n+        return GitHubClient.parseURL(artifactsUrl);\n+    }\n+\n+    /**\n+     * The cancel URL, like https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel\n+     *\n+     * @return the cancel url\n+     */\n+    public URL getCancelUrl() {\n+        return GitHubClient.parseURL(cancelUrl);\n+    }\n+\n+    /**\n+     * The rerun URL, like https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun\n+     *\n+     * @return the rerun url\n+     */\n+    public URL getRerunUrl() {\n+        return GitHubClient.parseURL(rerunUrl);\n+    }\n+\n+    /**\n+     * The workflow URL, like https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038\n+     *\n+     * @return the workflow url\n+     */\n+    public URL getWorkflowUrl() {\n+        return GitHubClient.parseURL(workflowUrl);\n+    }\n+\n+    /**\n+     * The head branch name the changes are on.\n+     *\n+     * @return head branch name\n+     */\n+    public String getHeadBranch() {\n+        return headBranch;\n+    }\n+\n+    /**\n+     * Gets the HEAD SHA.\n+     *\n+     * @return sha for the HEAD commit\n+     */\n+    public String getHeadSha() {\n+        return headSha;\n+    }\n+\n+    /**\n+     * The commit of current head.\n+     *\n+     * @return head commit\n+     */\n+    public HeadCommit getHeadCommit() {\n+        return headCommit;\n+    }\n+\n+    /**\n+     * The repository of current head.\n+     *\n+     * @return head repository\n+     */\n+    public GHRepository getHeadRepository() {\n+        return headRepository;\n+    }\n+\n+    /**\n+     * The type of event that triggered the build.\n+     *\n+     * @return type of event\n+     */\n+    public GHEvent getEvent() {\n+        return EnumUtils.getNullableEnumOrDefault(GHEvent.class, event, GHEvent.UNKNOWN);\n+    }\n+\n+    /**\n+     * Gets status of the workflow run.\n+     * <p>\n+     * Can be {@code UNKNOWN} if the value returned by GitHub is unknown from the API.\n+     *\n+     * @return status of the workflow run\n+     */\n+    public Status getStatus() {\n+        return Status.from(status);\n+    }\n+\n+    /**\n+     * Gets the conclusion of the workflow run.\n+     * <p>\n+     * Can be {@code UNKNOWN} if the value returned by GitHub is unknown from the API.\n+     *\n+     * @return conclusion of the workflow run\n+     */\n+    public Conclusion getConclusion() {\n+        return Conclusion.from(conclusion);\n+    }\n+\n+    /**\n+     * Repository to which the workflow run belongs.\n+     *\n+     * @return the repository\n+     */\n+    public GHRepository getRepository() {\n+        return owner;\n+    }\n+\n+    /**\n+     * Gets the pull requests participated in this workflow run.\n+     *\n+     * Note this field is only populated for events. When getting a {@link GHWorkflowRun} outside of an event, this is\n+     * always empty.\n+     *\n+     * @return the list of {@link GHPullRequest}s for this workflow run. Only populated for events.\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public List<GHPullRequest> getPullRequests() throws IOException {\n+        if (pullRequests != null && pullRequests.length != 0) {\n+            for (GHPullRequest pullRequest : pullRequests) {\n+                // Only refresh if we haven't do so before\n+                pullRequest.refresh(pullRequest.getTitle());\n+            }\n+            return Collections.unmodifiableList(Arrays.asList(pullRequests));\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    /**\n+     * Cancel the workflow run.\n+     *\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public void cancel() throws IOException {\n+        root.createRequest().method(\"POST\").withUrlPath(getApiRoute(), \"cancel\").fetchHttpStatusCode();\n+    }\n+\n+    /**\n+     * Delete the workflow run.\n+     *\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public void delete() throws IOException {\n+        root.createRequest().method(\"DELETE\").withUrlPath(getApiRoute()).fetchHttpStatusCode();\n+    }\n+\n+    /**\n+     * Rerun the workflow run.\n+     *\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public void rerun() throws IOException {\n+        root.createRequest().method(\"POST\").withUrlPath(getApiRoute(), \"rerun\").fetchHttpStatusCode();\n+    }\n+\n+    /**\n+     * Lists the artifacts attached to this workflow run.\n+     *\n+     * @return the paged iterable\n+     */\n+    public PagedIterable<GHArtifact> listArtifacts() {\n+        return new GHArtifactsIterable(owner, root.createRequest().withUrlPath(getApiRoute(), \"artifacts\"));\n+    }\n+\n+    /**\n+     * Downloads the logs.\n+     * <p>\n+     * The logs are in the form of a zip archive.\n+     * <p>\n+     * Note that the archive is the same as the one downloaded from a workflow run so it contains the logs for all jobs.\n+     *\n+     * @param <T>\n+     *            the type of result\n+     * @param streamFunction\n+     *            The {@link InputStreamFunction} that will process the stream\n+     * @throws IOException\n+     *             The IO exception.\n+     * @return the result of reading the stream.\n+     */\n+    public <T> T downloadLogs(InputStreamFunction<T> streamFunction) throws IOException {\n+        requireNonNull(streamFunction, \"Stream function must not be null\");\n+\n+        return root.createRequest().method(\"GET\").withUrlPath(getApiRoute(), \"logs\").fetchStream(streamFunction);\n+    }\n+\n+    /**\n+     * Delete the logs.\n+     *\n+     * @throws IOException\n+     *             the io exception\n+     */\n+    public void deleteLogs() throws IOException {\n+        root.createRequest().method(\"DELETE\").withUrlPath(getApiRoute(), \"logs\").fetchHttpStatusCode();\n+    }\n+\n+    /**\n+     * Returns the list of jobs of this workflow run for the last execution.\n+     *\n+     * @return list of jobs from the last execution\n+     */\n+    public PagedIterable<GHWorkflowJob> listJobs() {\n+        return new GHWorkflowJobQueryBuilder(this).latest().list();\n+    }\n+\n+    /**\n+     * Returns the list of jobs from all the executions of this workflow run.\n+     *\n+     * @return list of jobs from all the executions\n+     */\n+    public PagedIterable<GHWorkflowJob> listAllJobs() {\n+        return new GHWorkflowJobQueryBuilder(this).all().list();\n+    }\n+\n+    private String getApiRoute() {\n+        if (owner == null) {\n+            // Workflow runs returned from search to do not have an owner. Attempt to use url.\n+            final URL url = Objects.requireNonNull(getUrl(), \"Missing instance URL!\");\n+            return StringUtils.prependIfMissing(url.toString().replace(root.getApiUrl(), \"\"), \"/\");\n+\n+        }\n+        return \"/repos/\" + owner.getOwnerName() + \"/\" + owner.getName() + \"/actions/runs/\" + getId();\n+    }\n+\n+    GHWorkflowRun wrapUp(GHRepository owner) {\n+        this.owner = owner;\n+        return wrapUp(owner.root);\n+    }\n+\n+    GHWorkflowRun wrapUp(GitHub root) {\n+        this.root = root;\n+        if (owner != null) {\n+            owner.wrap(root);\n+            if (pullRequests != null) {\n+                for (GHPullRequest singlePull : pullRequests) {\n+                    singlePull.wrap(owner);\n+                }\n+            }\n+        } else if (pullRequests != null) {\n+            for (GHPullRequest singlePull : pullRequests) {\n+                singlePull.wrap(root);\n+            }\n+        }\n+        if (headRepository != null) {\n+            headRepository.wrap(root);\n+        }\n+        return this;\n+    }\n+\n+    public static class HeadCommit {\n+        private String id;\n+        private String treeId;\n+        private String message;\n+        private String timestamp;\n+        private GitUser author;\n+        private GitUser committer;\n+\n+        /**\n+         * Gets id of the commit\n+         *\n+         * @return id of the commit\n+         */\n+        public String getId() {\n+            return id;\n+        }\n+\n+        /**\n+         * Gets id of the tree.\n+         *\n+         * @return id of the tree\n+         */\n+        public String getTreeId() {\n+            return treeId;\n+        }\n+\n+        /**\n+         * Gets message.\n+         *\n+         * @return commit message.\n+         */\n+        public String getMessage() {\n+            return message;\n+        }\n+\n+        /**\n+         * Gets timestamp of the commit.\n+         *\n+         * @return timestamp of the commit\n+         */\n+        public Date getTimestamp() {\n+            return GitHubClient.parseDate(timestamp);\n+        }\n+\n+        /**\n+         * Gets author.\n+         *\n+         * @return the author\n+         */\n+        public GitUser getAuthor() {\n+            return author;\n+        }\n+\n+        /**\n+         * Gets committer.\n+         *\n+         * @return the committer\n+         */\n+        public GitUser getCommitter() {\n+            return committer;\n+        }\n+    }\n+\n+    public static enum Status {\n+        QUEUED, IN_PROGRESS, COMPLETED, UNKNOWN;\n+\n+        public static Status from(String value) {\n+            return EnumUtils.getNullableEnumOrDefault(Status.class, value, Status.UNKNOWN);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name().toLowerCase(Locale.ROOT);\n+        }\n+    }\n+\n+    public static enum Conclusion {\n+        ACTION_REQUIRED, CANCELLED, FAILURE, NEUTRAL, SUCCESS, SKIPPED, STALE, TIMED_OUT, UNKNOWN;\n+\n+        public static Conclusion from(String value) {\n+            return EnumUtils.getNullableEnumOrDefault(Conclusion.class, value, Conclusion.UNKNOWN);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return name().toLowerCase(Locale.ROOT);\n+        }\n+    }\n+}"
    },
    {
      "sha": "66de1adb77b2d80470066e2da292a23d665c52a9",
      "filename": "src/main/java/org/kohsuke/github/GHWorkflowRunQueryBuilder.java",
      "status": "added",
      "additions": 101,
      "deletions": 0,
      "changes": 101,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowRunQueryBuilder.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowRunQueryBuilder.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHWorkflowRunQueryBuilder.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,101 @@\n+package org.kohsuke.github;\n+\n+import org.kohsuke.github.GHWorkflowRun.Status;\n+\n+import java.net.MalformedURLException;\n+\n+/**\n+ * Lists up workflow runs with some filtering and sorting.\n+ *\n+ * @author Guillaume Smet\n+ * @see GHRepository#queryWorkflowRuns()\n+ */\n+public class GHWorkflowRunQueryBuilder extends GHQueryBuilder<GHWorkflowRun> {\n+    private final GHRepository repo;\n+\n+    GHWorkflowRunQueryBuilder(GHRepository repo) {\n+        super(repo.root);\n+        this.repo = repo;\n+    }\n+\n+    /**\n+     * Actor workflow run query builder.\n+     *\n+     * @param actor\n+     *            the actor\n+     * @return the gh workflow run query builder\n+     */\n+    public GHWorkflowRunQueryBuilder actor(String actor) {\n+        req.with(\"actor\", actor);\n+        return this;\n+    }\n+\n+    /**\n+     * Actor workflow run query builder.\n+     *\n+     * @param actor\n+     *            the actor\n+     * @return the gh workflow run query builder\n+     */\n+    public GHWorkflowRunQueryBuilder actor(GHUser actor) {\n+        req.with(\"actor\", actor.getLogin());\n+        return this;\n+    }\n+\n+    /**\n+     * Branch workflow run query builder.\n+     *\n+     * @param branch\n+     *            the branch\n+     * @return the gh workflow run query builder\n+     */\n+    public GHWorkflowRunQueryBuilder branch(String branch) {\n+        req.with(\"branch\", branch);\n+        return this;\n+    }\n+\n+    /**\n+     * Event workflow run query builder.\n+     *\n+     * @param event\n+     *            the event\n+     * @return the gh workflow run query builder\n+     */\n+    public GHWorkflowRunQueryBuilder event(GHEvent event) {\n+        req.with(\"event\", event.symbol());\n+        return this;\n+    }\n+\n+    /**\n+     * Event workflow run query builder.\n+     *\n+     * @param event\n+     *            the event\n+     * @return the gh workflow run query builder\n+     */\n+    public GHWorkflowRunQueryBuilder event(String event) {\n+        req.with(\"event\", event);\n+        return this;\n+    }\n+\n+    /**\n+     * Status workflow run query builder.\n+     *\n+     * @param status\n+     *            the status\n+     * @return the gh workflow run query builder\n+     */\n+    public GHWorkflowRunQueryBuilder status(Status status) {\n+        req.with(\"status\", status.toString());\n+        return this;\n+    }\n+\n+    @Override\n+    public PagedIterable<GHWorkflowRun> list() {\n+        try {\n+            return new GHWorkflowRunsIterable(repo, req.withUrlPath(repo.getApiTailUrl(\"actions/runs\")).build());\n+        } catch (MalformedURLException e) {\n+            throw new GHException(e.getMessage(), e);\n+        }\n+    }\n+}"
    },
    {
      "sha": "0572ab32f215fa7050d656c1dd1e1080508bb4f4",
      "filename": "src/main/java/org/kohsuke/github/GHWorkflowRunsIterable.java",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowRunsIterable.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowRunsIterable.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHWorkflowRunsIterable.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,45 @@\n+package org.kohsuke.github;\n+\n+import java.util.Iterator;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Iterable for workflow runs listing.\n+ */\n+class GHWorkflowRunsIterable extends PagedIterable<GHWorkflowRun> {\n+    private final GHRepository owner;\n+    private final GitHubRequest request;\n+\n+    private GHWorkflowRunsPage result;\n+\n+    public GHWorkflowRunsIterable(GHRepository owner, GitHubRequest request) {\n+        this.owner = owner;\n+        this.request = request;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public PagedIterator<GHWorkflowRun> _iterator(int pageSize) {\n+        return new PagedIterator<>(\n+                adapt(GitHubPageIterator\n+                        .create(owner.getRoot().getClient(), GHWorkflowRunsPage.class, request, pageSize)),\n+                null);\n+    }\n+\n+    protected Iterator<GHWorkflowRun[]> adapt(final Iterator<GHWorkflowRunsPage> base) {\n+        return new Iterator<GHWorkflowRun[]>() {\n+            public boolean hasNext() {\n+                return base.hasNext();\n+            }\n+\n+            public GHWorkflowRun[] next() {\n+                GHWorkflowRunsPage v = base.next();\n+                if (result == null) {\n+                    result = v;\n+                }\n+                return v.getWorkflowRuns(owner);\n+            }\n+        };\n+    }\n+}"
    },
    {
      "sha": "d469e54af65ac90b71a84159dcacb5bd3783dee4",
      "filename": "src/main/java/org/kohsuke/github/GHWorkflowRunsPage.java",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowRunsPage.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowRunsPage.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHWorkflowRunsPage.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,20 @@\n+package org.kohsuke.github;\n+\n+/**\n+ * Represents the one page of workflow runs result when listing workflow runs.\n+ */\n+class GHWorkflowRunsPage {\n+    private int totalCount;\n+    private GHWorkflowRun[] workflowRuns;\n+\n+    public int getTotalCount() {\n+        return totalCount;\n+    }\n+\n+    GHWorkflowRun[] getWorkflowRuns(GHRepository owner) {\n+        for (GHWorkflowRun workflowRun : workflowRuns) {\n+            workflowRun.wrapUp(owner);\n+        }\n+        return workflowRuns;\n+    }\n+}"
    },
    {
      "sha": "19c77f3cae21716284822f7c87efc108848b4c15",
      "filename": "src/main/java/org/kohsuke/github/GHWorkflowsIterable.java",
      "status": "added",
      "additions": 53,
      "deletions": 0,
      "changes": 53,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowsIterable.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowsIterable.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHWorkflowsIterable.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,53 @@\n+package org.kohsuke.github;\n+\n+import java.net.MalformedURLException;\n+import java.util.Iterator;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Iterable for workflows listing.\n+ */\n+class GHWorkflowsIterable extends PagedIterable<GHWorkflow> {\n+    private final transient GHRepository owner;\n+\n+    private GHWorkflowsPage result;\n+\n+    public GHWorkflowsIterable(GHRepository owner) {\n+        this.owner = owner;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public PagedIterator<GHWorkflow> _iterator(int pageSize) {\n+        try {\n+            GitHubRequest request = owner.getRoot()\n+                    .createRequest()\n+                    .withUrlPath(owner.getApiTailUrl(\"actions/workflows\"))\n+                    .build();\n+\n+            return new PagedIterator<>(\n+                    adapt(GitHubPageIterator\n+                            .create(owner.getRoot().getClient(), GHWorkflowsPage.class, request, pageSize)),\n+                    null);\n+        } catch (MalformedURLException e) {\n+            throw new GHException(\"Malformed URL\", e);\n+        }\n+    }\n+\n+    protected Iterator<GHWorkflow[]> adapt(final Iterator<GHWorkflowsPage> base) {\n+        return new Iterator<GHWorkflow[]>() {\n+            public boolean hasNext() {\n+                return base.hasNext();\n+            }\n+\n+            public GHWorkflow[] next() {\n+                GHWorkflowsPage v = base.next();\n+                if (result == null) {\n+                    result = v;\n+                }\n+                return v.getWorkflows(owner);\n+            }\n+        };\n+    }\n+}"
    },
    {
      "sha": "01460ed827fde63df627ee56256d6f0cc2695425",
      "filename": "src/main/java/org/kohsuke/github/GHWorkflowsPage.java",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowsPage.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GHWorkflowsPage.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GHWorkflowsPage.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,20 @@\n+package org.kohsuke.github;\n+\n+/**\n+ * Represents the one page of workflow result when listing workflows.\n+ */\n+class GHWorkflowsPage {\n+    private int total_count;\n+    private GHWorkflow[] workflows;\n+\n+    public int getTotalCount() {\n+        return total_count;\n+    }\n+\n+    GHWorkflow[] getWorkflows(GHRepository owner) {\n+        for (GHWorkflow workflow : workflows) {\n+            workflow.wrapUp(owner);\n+        }\n+        return workflows;\n+    }\n+}"
    },
    {
      "sha": "195940f8cd991f47d567831c3fb2ba2576aa8fb0",
      "filename": "src/main/java/org/kohsuke/github/GitHub.java",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GitHub.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GitHub.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GitHub.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -146,7 +146,6 @@ private GitHub(GitHubClient client) {\n          *            A authorization provider to be used when refreshing this authorization provider.\n          */\n         @BetaApi\n-        @Deprecated\n         protected DependentAuthorizationProvider(AuthorizationProvider authorizationProvider) {\n             this.authorizationProvider = authorizationProvider;\n         }\n@@ -1106,7 +1105,6 @@ public GHAuthorization resetAuth(@Nonnull String clientId, @Nonnull String acces\n      *      GitHub App</a>\n      */\n     @Preview(MACHINE_MAN)\n-    @Deprecated\n     public GHApp getApp() throws IOException {\n         return createRequest().withPreview(MACHINE_MAN).withUrlPath(\"/app\").fetch(GHApp.class).wrapUp(this);\n     }\n@@ -1201,7 +1199,6 @@ public void checkApiUrlValidity() throws IOException {\n      * @return the gh commit search builder\n      */\n     @Preview(Previews.CLOAK)\n-    @Deprecated\n     public GHCommitSearchBuilder searchCommits() {\n         return new GHCommitSearchBuilder(this);\n     }"
    },
    {
      "sha": "80960b9799d38d8bbef755593c70b94df13edd66",
      "filename": "src/main/java/org/kohsuke/github/GitHubBuilder.java",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GitHubBuilder.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GitHubBuilder.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GitHubBuilder.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -24,6 +24,9 @@\n  */\n public class GitHubBuilder implements Cloneable {\n \n+    // for testing\n+    static File HOME_DIRECTORY = null;\n+\n     // default scoped so unit tests can read them.\n     /* private */ String endpoint = GitHubClient.GITHUB_URL;\n \n@@ -60,13 +63,13 @@ static GitHubBuilder fromCredentials() throws IOException {\n \n         builder = fromEnvironment();\n \n-        if (builder.authorizationProvider != null)\n+        if (builder.authorizationProvider != AuthorizationProvider.ANONYMOUS)\n             return builder;\n \n         try {\n             builder = fromPropertyFile();\n \n-            if (builder.authorizationProvider != null)\n+            if (builder.authorizationProvider != AuthorizationProvider.ANONYMOUS)\n                 return builder;\n         } catch (FileNotFoundException e) {\n             // fall through\n@@ -178,7 +181,7 @@ public static GitHubBuilder fromEnvironment() throws IOException {\n      *             the io exception\n      */\n     public static GitHubBuilder fromPropertyFile() throws IOException {\n-        File homeDir = new File(System.getProperty(\"user.home\"));\n+        File homeDir = HOME_DIRECTORY != null ? HOME_DIRECTORY : new File(System.getProperty(\"user.home\"));\n         File propertyFile = new File(homeDir, \".github\");\n         return fromPropertyFile(propertyFile.getPath());\n     }"
    },
    {
      "sha": "8d5883961924ea4396b80c740a860f5af8e24d0f",
      "filename": "src/main/java/org/kohsuke/github/GitHubClient.java",
      "status": "modified",
      "additions": 33,
      "deletions": 41,
      "changes": 74,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GitHubClient.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GitHubClient.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GitHubClient.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -14,6 +14,7 @@\n import java.time.format.DateTimeFormatter;\n import java.time.temporal.ChronoUnit;\n import java.util.*;\n+import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Consumer;\n import java.util.logging.Logger;\n \n@@ -52,10 +53,8 @@\n \n     private HttpConnector connector;\n \n-    private final Object rateLimitLock = new Object();\n-\n     @Nonnull\n-    private GHRateLimit rateLimit = GHRateLimit.DEFAULT;\n+    private final AtomicReference<GHRateLimit> rateLimit = new AtomicReference<>(GHRateLimit.DEFAULT);\n \n     private static final Logger LOGGER = Logger.getLogger(GitHubClient.class.getName());\n \n@@ -141,10 +140,9 @@ public boolean isCredentialValid() {\n             getRateLimit();\n             return true;\n         } catch (IOException e) {\n-            if (LOGGER.isLoggable(FINE))\n-                LOGGER.log(FINE,\n-                        \"Exception validating credentials on \" + getApiUrl() + \" with login '\" + login + \"' \" + e,\n-                        e);\n+            LOGGER.log(FINE,\n+                    \"Exception validating credentials on \" + getApiUrl() + \" with login '\" + login + \"' \" + e,\n+                    e);\n             return false;\n         }\n     }\n@@ -256,9 +254,7 @@ GHRateLimit getRateLimit(@Nonnull RateLimitTarget rateLimitTarget) throws IOExce\n     @Nonnull\n     @Deprecated\n     GHRateLimit lastRateLimit() {\n-        synchronized (rateLimitLock) {\n-            return rateLimit;\n-        }\n+        return rateLimit.get();\n     }\n \n     /**\n@@ -278,12 +274,19 @@ GHRateLimit lastRateLimit() {\n      */\n     @Nonnull\n     GHRateLimit rateLimit(@Nonnull RateLimitTarget rateLimitTarget) throws IOException {\n-        synchronized (rateLimitLock) {\n-            if (rateLimit.getRecord(rateLimitTarget).isExpired()) {\n-                getRateLimit(rateLimitTarget);\n+        GHRateLimit result = rateLimit.get();\n+        // Most of the time rate limit is not expired, so try to avoid locking.\n+        if (result.getRecord(rateLimitTarget).isExpired()) {\n+            // if the rate limit is expired, synchronize to ensure\n+            // only one call to getRateLimit() is made to refresh it.\n+            synchronized (this) {\n+                if (rateLimit.get().getRecord(rateLimitTarget).isExpired()) {\n+                    getRateLimit(rateLimitTarget);\n+                }\n             }\n-            return rateLimit;\n+            result = rateLimit.get();\n         }\n+        return result;\n     }\n \n     /**\n@@ -296,15 +299,9 @@ GHRateLimit rateLimit(@Nonnull RateLimitTarget rateLimitTarget) throws IOExcepti\n      *            {@link GHRateLimit.Record} constructed from the response header information\n      */\n     private GHRateLimit updateRateLimit(@Nonnull GHRateLimit observed) {\n-        synchronized (rateLimitLock) {\n-            observed = rateLimit.getMergedRateLimit(observed);\n-\n-            if (rateLimit != observed) {\n-                rateLimit = observed;\n-                LOGGER.log(FINE, \"Rate limit now: {0}\", rateLimit);\n-            }\n-            return rateLimit;\n-        }\n+        GHRateLimit result = rateLimit.accumulateAndGet(observed, (current, x) -> current.getMergedRateLimit(x));\n+        LOGGER.log(FINEST, \"Rate limit now: {0}\", rateLimit.get());\n+        return result;\n     }\n \n     /**\n@@ -384,11 +381,7 @@ public String getApiUrl() {\n             GitHubResponse.ResponseInfo connectorResponse = null;\n             try {\n                 try {\n-                    if (LOGGER.isLoggable(FINE)) {\n-                        LOGGER.log(FINE,\n-                                \"GitHub API request [\" + (login == null ? \"anonymous\" : login) + \"]: \"\n-                                        + request.method() + \" \" + request.url().toString());\n-                    }\n+                    logRequest(request);\n                     rateLimitChecker.checkRateLimit(this, request);\n \n                     connectorResponse = getResponseInfo(request);\n@@ -424,6 +417,12 @@ public String getApiUrl() {\n         throw new GHIOException(\"Ran out of retries for URL: \" + request.url().toString());\n     }\n \n+    private void logRequest(@Nonnull final GitHubRequest request) {\n+        LOGGER.log(FINE,\n+                () -> \"GitHub API request [\" + (login == null ? \"anonymous\" : login) + \"]: \" + request.method() + \" \"\n+                        + request.url().toString());\n+    }\n+\n     @Nonnull\n     protected abstract GitHubResponse.ResponseInfo getResponseInfo(GitHubRequest request) throws IOException;\n \n@@ -437,20 +436,15 @@ public String getApiUrl() {\n             // special case handling for 304 unmodified, as the content will be \"\"\n         } else if (connectorResponse.statusCode() == HttpURLConnection.HTTP_ACCEPTED) {\n \n-            // Response code 202 means data is being generated.\n+            // Response code 202 means data is being generated or an action that can require some time is triggered.\n             // This happens in specific cases:\n             // statistics - See https://developer.github.com/v3/repos/statistics/#a-word-about-caching\n             // fork creation - See https://developer.github.com/v3/repos/forks/#create-a-fork\n+            // workflow run cancellation - See https://docs.github.com/en/rest/reference/actions#cancel-a-workflow-run\n \n-            if (connectorResponse.url().toString().endsWith(\"/forks\")) {\n-                LOGGER.log(INFO, \"The fork is being created. Please try again in 5 seconds.\");\n-            } else if (connectorResponse.url().toString().endsWith(\"/statistics\")) {\n-                LOGGER.log(INFO, \"The statistics are being generated. Please try again in 5 seconds.\");\n-            } else {\n-                LOGGER.log(INFO,\n-                        \"Received 202 from \" + connectorResponse.url().toString() + \" . Please try again in 5 seconds.\");\n-            }\n-            // Maybe throw an exception instead?\n+            LOGGER.log(FINE,\n+                    \"Received HTTP_ACCEPTED(202) from \" + connectorResponse.url().toString()\n+                            + \" . Please try again in 5 seconds.\");\n         } else if (handler != null) {\n             body = handler.apply(connectorResponse);\n         }\n@@ -562,9 +556,7 @@ private void noteRateLimit(@Nonnull GitHubResponse.ResponseInfo connectorResponse) {\n             GHRateLimit.Record observed = new GHRateLimit.Record(limit, remaining, reset, connectorResponse);\n             updateRateLimit(GHRateLimit.fromRecord(observed, connectorResponse.request().rateLimitTarget()));\n         } catch (NumberFormatException | NullPointerException e) {\n-            if (LOGGER.isLoggable(FINEST)) {\n-                LOGGER.log(FINEST, \"Missing or malformed X-RateLimit header: \", e);\n-            }\n+            LOGGER.log(FINEST, \"Missing or malformed X-RateLimit header: \", e);\n         }\n     }\n "
    },
    {
      "sha": "aea8b99b1f3301f65c8bc86c657bfd187db5c178",
      "filename": "src/main/java/org/kohsuke/github/GitHubRequest.java",
      "status": "modified",
      "additions": 18,
      "deletions": 4,
      "changes": 22,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GitHubRequest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/GitHubRequest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/GitHubRequest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -602,13 +602,27 @@ public B with(String key, Object value) {\n          * @return the request builder\n          */\n         public B set(String key, Object value) {\n-            for (int index = 0; index < args.size(); index++) {\n+            remove(key);\n+            return with(key, value);\n+\n+        }\n+\n+        /**\n+         * Removes all arg entries for a specific key.\n+         *\n+         * @param key\n+         *            the key\n+         * @return the request builder\n+         */\n+        public B remove(String key) {\n+            for (int index = 0; index < args.size();) {\n                 if (args.get(index).key.equals(key)) {\n-                    args.set(index, new Entry(key, value));\n-                    return (B) this;\n+                    args.remove(index);\n+                } else {\n+                    index++;\n                 }\n             }\n-            return with(key, value);\n+            return (B) this;\n         }\n \n         /**"
    },
    {
      "sha": "cecddc484af50ef0a245618392c51b4ec6816cf8",
      "filename": "src/main/java/org/kohsuke/github/Preview.java",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/Preview.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/Preview.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/Preview.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -9,9 +9,9 @@\n /**\n  * Indicates that the method/class/etc marked maps to GitHub API in the preview period.\n  * <p>\n- * These APIs are subject to change and not a part of the backward compatibility commitment. Always used in conjunction\n- * with 'deprecated' to raise awareness to clients. In addition, it's advised to update the targets documentation to\n- * signify that the deprecation is required until preview feature being used is promoted to stable.\n+ * These APIs are subject to change and not a part of the backward compatibility commitment.\n+ *\n+ * It is advised to update the target's documentation with text indicating that a preview feature being used.\n  *\n  * @author Kohsuke Kawaguchi\n  */"
    },
    {
      "sha": "0e576faa6fa8543afa747f6150965df8c2d36d5c",
      "filename": "src/main/java/org/kohsuke/github/Reactable.java",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/Reactable.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/Reactable.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/Reactable.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -10,15 +10,13 @@\n  * @author Kohsuke Kawaguchi\n  */\n @Preview(SQUIRREL_GIRL)\n-@Deprecated\n public interface Reactable {\n     /**\n      * List all the reactions left to this object.\n      *\n      * @return the paged iterable\n      */\n     @Preview(SQUIRREL_GIRL)\n-    @Deprecated\n     PagedIterable<GHReaction> listReactions();\n \n     /**\n@@ -31,6 +29,5 @@\n      *             the io exception\n      */\n     @Preview(SQUIRREL_GIRL)\n-    @Deprecated\n     GHReaction createReaction(ReactionContent content) throws IOException;\n }"
    },
    {
      "sha": "075475ff1dd11cb4869902111744583576cb38c8",
      "filename": "src/main/java/org/kohsuke/github/authorization/OrgAppInstallationAuthorizationProvider.java",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/authorization/OrgAppInstallationAuthorizationProvider.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/authorization/OrgAppInstallationAuthorizationProvider.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/authorization/OrgAppInstallationAuthorizationProvider.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -35,7 +35,6 @@\n      *            token from GitHub.\n      */\n     @BetaApi\n-    @Deprecated\n     public OrgAppInstallationAuthorizationProvider(String organizationName,\n             AuthorizationProvider authorizationProvider) {\n         super(authorizationProvider);"
    },
    {
      "sha": "7d247ad8071e4b2b7172b2d217bdb097b0bd2dde",
      "filename": "src/main/java/org/kohsuke/github/internal/EnumUtils.java",
      "status": "added",
      "additions": 62,
      "deletions": 0,
      "changes": 62,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/internal/EnumUtils.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/main/java/org/kohsuke/github/internal/EnumUtils.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/main/java/org/kohsuke/github/internal/EnumUtils.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,62 @@\n+package org.kohsuke.github.internal;\n+\n+import java.util.Locale;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Utils for Enums.\n+ */\n+public final class EnumUtils {\n+\n+    private static final Logger LOGGER = Logger.getLogger(EnumUtils.class.getName());\n+\n+    /**\n+     * Returns an enum value matching the value if found, null if the value is null and {@code defaultEnum} if the value\n+     * cannot be matched to a value of the enum.\n+     * <p>\n+     * The value is converted to uppercase before being matched to the enum values.\n+     *\n+     * @param <E>\n+     *            the type of the enum\n+     * @param enumClass\n+     *            the type of the enum\n+     * @param value\n+     *            the value to interpret\n+     * @param defaultEnum\n+     *            the default enum value if the value doesn't match one of the enum value\n+     * @return an enum value or null\n+     */\n+    public static <E extends Enum<E>> E getNullableEnumOrDefault(Class<E> enumClass, String value, E defaultEnum) {\n+        if (value == null) {\n+            return null;\n+        }\n+        return getEnumOrDefault(enumClass, value, defaultEnum);\n+    }\n+\n+    /**\n+     * Returns an enum value matching the value if found, {@code defaultEnum} if the value is null or cannot be matched\n+     * to a value of the enum.\n+     *\n+     * @param <E>\n+     *            the type of the enum\n+     * @param enumClass\n+     *            the type of the enum\n+     * @param value\n+     *            the value to interpret\n+     * @param defaultEnum\n+     *            the default enum value if the value doesn't match one of the enum value\n+     * @return an enum value\n+     */\n+    public static <E extends Enum<E>> E getEnumOrDefault(Class<E> enumClass, String value, E defaultEnum) {\n+        try {\n+            return Enum.valueOf(enumClass, value.toUpperCase(Locale.ROOT));\n+        } catch (NullPointerException | IllegalArgumentException e) {\n+            LOGGER.warning(\"Unknown value \" + value + \" for enum class \" + enumClass.getName() + \", defaulting to \"\n+                    + defaultEnum.name());\n+            return defaultEnum;\n+        }\n+    }\n+\n+    private EnumUtils() {\n+    }\n+}"
    },
    {
      "sha": "f65f00bea62662d31a34ad5e440b7c2fa27edbfe",
      "filename": "src/test/java/org/kohsuke/github/AbstractGitHubWireMockTest.java",
      "status": "modified",
      "additions": 22,
      "deletions": 51,
      "changes": 73,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/AbstractGitHubWireMockTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/AbstractGitHubWireMockTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/AbstractGitHubWireMockTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -4,10 +4,9 @@\n import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n import com.github.tomakehurst.wiremock.extension.responsetemplating.helpers.HandlebarsCurrentDateHelper;\n import org.apache.commons.io.IOUtils;\n-import org.hamcrest.Description;\n import org.hamcrest.Matcher;\n+import org.hamcrest.MatcherAssert;\n import org.hamcrest.Matchers;\n-import org.hamcrest.StringDescription;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -21,13 +20,14 @@\n import java.io.IOException;\n import java.util.*;\n \n+import static org.hamcrest.Matchers.*;\n import static org.junit.Assume.assumeFalse;\n import static org.junit.Assume.assumeTrue;\n \n /**\n  * @author Liam Newman\n  */\n-public abstract class AbstractGitHubWireMockTest extends Assert {\n+public abstract class AbstractGitHubWireMockTest {\n \n     private final GitHubBuilder githubBuilder = createGitHubBuilder();\n \n@@ -45,7 +45,7 @@\n      */\n     protected GitHub gitHub;\n \n-    private GitHub gitHubBeforeAfter;\n+    private GitHub nonRecordingGitHub;\n \n     protected final String baseFilesClassPath = this.getClass().getName().replace('.', '/');\n     protected final String baseRecordPath = \"src/test/resources/\" + baseFilesClassPath + \"/wiremock\";\n@@ -115,9 +115,9 @@ public void wireMockSetup() throws Exception {\n         }\n \n         if (mockGitHub.isUseProxy()) {\n-            gitHubBeforeAfter = getGitHubBuilder().withEndpoint(\"https://api.github.com/\").build();\n+            nonRecordingGitHub = getGitHubBuilder().withEndpoint(\"https://api.github.com/\").build();\n         } else {\n-            gitHubBeforeAfter = null;\n+            nonRecordingGitHub = null;\n         }\n     }\n \n@@ -210,7 +210,7 @@ protected void cleanupRepository(String fullName) throws IOException {\n         if (mockGitHub.isUseProxy()) {\n             tempGitHubRepositories.add(fullName);\n             try {\n-                GHRepository repository = getGitHubBeforeAfter().getRepository(fullName);\n+                GHRepository repository = getNonRecordingGitHub().getRepository(fullName);\n                 if (repository != null) {\n                     repository.delete();\n                 }\n@@ -227,22 +227,22 @@ protected void cleanupRepository(String fullName) throws IOException {\n      *\n      * @return a github instance after checking Authentication\n      */\n-    public GitHub getGitHubBeforeAfter() {\n-        verifyAuthenticated(gitHubBeforeAfter);\n-        return gitHubBeforeAfter;\n+    public GitHub getNonRecordingGitHub() {\n+        verifyAuthenticated(nonRecordingGitHub);\n+        return nonRecordingGitHub;\n     }\n \n     protected void kohsuke() {\n         // No-op for now\n         // Generally this means the test is doing something that requires additional access rights\n         // Not always clear which ones.\n-        // TODO: Add helpers that assert the expected rights using gitHubBeforeAfter and only when proxy is enabled\n+        // TODO: Add helpers that assert the expected rights using nonRecordingGitHub and only when proxy is enabled\n         // String login = getUserTest().getLogin();\n         // assumeTrue(login.equals(\"kohsuke\") || login.equals(\"kohsuke2\"));\n     }\n \n     private GHCreateRepositoryBuilder getCreateBuilder(String name) throws IOException {\n-        GitHub github = getGitHubBeforeAfter();\n+        GitHub github = getNonRecordingGitHub();\n \n         if (mockGitHub.isTestWithOrg()) {\n             return github.getOrganization(GITHUB_API_TEST_ORG).createRepository(name);\n@@ -255,52 +255,23 @@ private String getOrganization() throws IOException {\n         return mockGitHub.isTestWithOrg() ? GITHUB_API_TEST_ORG : gitHub.getMyself().getLogin();\n     }\n \n-    public static <T> void assertThat(T actual, Matcher<? super T> matcher) {\n-        assertThat(\"\", actual, matcher);\n+    public static void fail() {\n+        Assert.fail();\n     }\n-\n-    public static <T> void assertThat(String reason, T actual, Matcher<? super T> matcher) {\n-        if (!matcher.matches(actual)) {\n-            Description description = new StringDescription();\n-            description.appendText(reason)\n-                    .appendText(System.lineSeparator())\n-                    .appendText(\"Expected: \")\n-                    .appendDescriptionOf(matcher)\n-                    .appendText(System.lineSeparator())\n-                    .appendText(\"     but: \");\n-            matcher.describeMismatch(actual, description);\n-            throw new AssertionError(description.toString());\n-        }\n+    public static void fail(String reason) {\n+        Assert.fail(reason);\n     }\n \n-    public static void assertThat(String reason, boolean assertion) {\n-        if (!assertion) {\n-            throw new AssertionError(reason);\n-        }\n-    }\n-\n-    public static void assertEquals(Object expected, Object actual) {\n-        assertThat(actual, Matchers.equalTo(expected));\n-    }\n-\n-    public static void assertNotEquals(Object expected, Object actual) {\n-        assertThat(actual, Matchers.not(expected));\n-    }\n-\n-    public static void assertNotNull(Object actual) {\n-        assertThat(actual, Matchers.notNullValue());\n-    }\n-\n-    public static void assertNull(Object actual) {\n-        assertThat(actual, Matchers.nullValue());\n+    public static <T> void assertThat(T actual, Matcher<? super T> matcher) {\n+        MatcherAssert.assertThat(\"\", actual, matcher);\n     }\n \n-    public static void assertTrue(Boolean condition) {\n-        assertThat(condition, Matchers.is(true));\n+    public static <T> void assertThat(String reason, T actual, Matcher<? super T> matcher) {\n+        MatcherAssert.assertThat(reason, actual, matcher);\n     }\n \n-    public static void assertFalse(Boolean condition) {\n-        assertThat(condition, Matchers.is(false));\n+    public static void assertThat(String reason, boolean assertion) {\n+        MatcherAssert.assertThat(reason, assertion);\n     }\n \n     protected static class TemplatingHelper {"
    },
    {
      "sha": "331f12eaa9df498c01b26363c574bc6f44b01fa1",
      "filename": "src/test/java/org/kohsuke/github/AppTest.java",
      "status": "modified",
      "additions": 147,
      "deletions": 176,
      "changes": 323,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/AppTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/AppTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/AppTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -17,7 +17,6 @@\n import java.nio.charset.StandardCharsets;\n import java.util.*;\n import java.util.Map.Entry;\n-import java.util.regex.Pattern;\n \n import static org.hamcrest.Matchers.*;\n \n@@ -84,28 +83,28 @@ public void testRepositoryWithAutoInitializationCRUD() throws Exception {\n         if (mockGitHub.isUseProxy()) {\n             Thread.sleep(3000);\n         }\n-        assertNotNull(r.getReadme());\n+        assertThat(r.getReadme(), notNullValue());\n \n         r.delete();\n     }\n \n     private void cleanupUserRepository(final String name) throws IOException {\n         if (mockGitHub.isUseProxy()) {\n-            cleanupRepository(getUser(getGitHubBeforeAfter()).getLogin() + \"/\" + name);\n+            cleanupRepository(getUser(getNonRecordingGitHub()).getLogin() + \"/\" + name);\n         }\n     }\n \n     @Test\n     public void testCredentialValid() throws IOException {\n-        assertTrue(gitHub.isCredentialValid());\n+        assertThat(gitHub.isCredentialValid(), is(true));\n         assertThat(gitHub.lastRateLimit().getCore(), not(instanceOf(GHRateLimit.UnknownLimitRecord.class)));\n         assertThat(gitHub.lastRateLimit().getCore().getLimit(), equalTo(5000));\n \n         gitHub = getGitHubBuilder().withOAuthToken(\"bogus\", \"user\")\n                 .withEndpoint(mockGitHub.apiServer().baseUrl())\n                 .build();\n         assertThat(gitHub.lastRateLimit(), sameInstance(GHRateLimit.DEFAULT));\n-        assertFalse(gitHub.isCredentialValid());\n+        assertThat(gitHub.isCredentialValid(), is(false));\n         // For invalid credentials, we get a 401 but it includes anonymous rate limit headers\n         assertThat(gitHub.lastRateLimit().getCore(), not(instanceOf(GHRateLimit.UnknownLimitRecord.class)));\n         assertThat(gitHub.lastRateLimit().getCore().getLimit(), equalTo(60));\n@@ -116,7 +115,7 @@ public void testCredentialValidEnterprise() throws IOException {\n         // Simulated GHE: getRateLimit returns 404\n         assertThat(gitHub.lastRateLimit(), sameInstance(GHRateLimit.DEFAULT));\n         assertThat(gitHub.lastRateLimit().getCore().isExpired(), is(true));\n-        assertTrue(gitHub.isCredentialValid());\n+        assertThat(gitHub.isCredentialValid(), is(true));\n \n         // lastRateLimitUpdates because 404 still includes header rate limit info\n         assertThat(gitHub.lastRateLimit(), notNullValue());\n@@ -127,7 +126,7 @@ public void testCredentialValidEnterprise() throws IOException {\n                 .withEndpoint(mockGitHub.apiServer().baseUrl())\n                 .build();\n         assertThat(gitHub.lastRateLimit(), sameInstance(GHRateLimit.DEFAULT));\n-        assertFalse(gitHub.isCredentialValid());\n+        assertThat(gitHub.isCredentialValid(), is(false));\n         // Simulated GHE: For invalid credentials, we get a 401 that does not include ratelimit info\n         assertThat(gitHub.lastRateLimit(), sameInstance(GHRateLimit.DEFAULT));\n     }\n@@ -138,7 +137,7 @@ public void testIssueWithNoComment() throws IOException {\n         GHIssue i = repository.getIssue(4);\n         List<GHIssueComment> v = i.getComments();\n         // System.out.println(v);\n-        assertTrue(v.isEmpty());\n+        assertThat(v, is(empty()));\n \n         i = repository.getIssue(3);\n         v = i.getComments();\n@@ -151,7 +150,7 @@ public void testIssueWithNoComment() throws IOException {\n         assertThat(v.get(0).getParent().getNumber(), equalTo(3));\n         assertThat(v.get(0).getParent().getId(), equalTo(6863845L));\n         assertThat(v.get(0).getUser().getLogin(), equalTo(\"kohsuke\"));\n-        assertThat(v.get(0).listReactions().toList().size(), equalTo(0));\n+        assertThat(v.get(0).listReactions().toList(), is(empty()));\n \n         assertThat(v.get(1).getHtmlUrl().toString(),\n                 equalTo(\"https://github.com/kohsuke/test/issues/3#issuecomment-8547251\"));\n@@ -179,7 +178,7 @@ public void testCreateIssue() throws IOException {\n                 .label(\"question\")\n                 .milestone(milestone)\n                 .create();\n-        assertNotNull(o);\n+        assertThat(o, notNullValue());\n         o.close();\n     }\n \n@@ -192,17 +191,17 @@ public void testCreateAndListDeployments() throws IOException {\n                 .environment(\"unittest\")\n                 .create();\n         try {\n-            assertNotNull(deployment.getCreator());\n-            assertNotNull(deployment.getId());\n+            assertThat(deployment.getCreator(), notNullValue());\n+            assertThat(deployment.getId(), notNullValue());\n             List<GHDeployment> deployments = repository.listDeployments(null, \"main\", null, \"unittest\").toList();\n-            assertNotNull(deployments);\n-            assertFalse(Iterables.isEmpty(deployments));\n+            assertThat(deployments, notNullValue());\n+            assertThat(deployments, is(not(emptyIterable())));\n             GHDeployment unitTestDeployment = deployments.get(0);\n-            assertEquals(\"unittest\", unitTestDeployment.getEnvironment());\n-            assertEquals(\"unittest\", unitTestDeployment.getOriginalEnvironment());\n-            assertEquals(false, unitTestDeployment.isProductionEnvironment());\n-            assertEquals(false, unitTestDeployment.isTransientEnvironment());\n-            assertEquals(\"main\", unitTestDeployment.getRef());\n+            assertThat(unitTestDeployment.getEnvironment(), equalTo(\"unittest\"));\n+            assertThat(unitTestDeployment.getOriginalEnvironment(), equalTo(\"unittest\"));\n+            assertThat(unitTestDeployment.isProductionEnvironment(), equalTo(false));\n+            assertThat(unitTestDeployment.isTransientEnvironment(), equalTo(false));\n+            assertThat(unitTestDeployment.getRef(), equalTo(\"main\"));\n         } finally {\n             // deployment.delete();\n             assert true;\n@@ -225,15 +224,15 @@ public void testGetDeploymentStatuses() throws IOException {\n                     .environment(\"new-ci-env\")\n                     .create();\n             Iterable<GHDeploymentStatus> deploymentStatuses = deployment.listStatuses();\n-            assertNotNull(deploymentStatuses);\n-            assertEquals(1, Iterables.size(deploymentStatuses));\n+            assertThat(deploymentStatuses, notNullValue());\n+            assertThat(Iterables.size(deploymentStatuses), equalTo(1));\n             GHDeploymentStatus actualStatus = Iterables.get(deploymentStatuses, 0);\n-            assertEquals(ghDeploymentStatus.getId(), actualStatus.getId());\n-            assertEquals(ghDeploymentStatus.getState(), actualStatus.getState());\n-            assertEquals(ghDeploymentStatus.getLogUrl(), actualStatus.getLogUrl());\n+            assertThat(actualStatus.getId(), equalTo(ghDeploymentStatus.getId()));\n+            assertThat(actualStatus.getState(), equalTo(ghDeploymentStatus.getState()));\n+            assertThat(actualStatus.getLogUrl(), equalTo(ghDeploymentStatus.getLogUrl()));\n             // Target url was deprecated and replaced with log url. The gh api will\n             // prefer the log url value and return it in place of target url.\n-            assertEquals(ghDeploymentStatus.getTargetUrl(), actualStatus.getLogUrl());\n+            assertThat(actualStatus.getLogUrl(), equalTo(ghDeploymentStatus.getTargetUrl()));\n             assertThat(ghDeploymentStatus.getDeploymentUrl(), equalTo(deployment.getUrl()));\n             assertThat(ghDeploymentStatus.getRepositoryUrl(), equalTo(repository.getUrl()));\n         } finally {\n@@ -248,7 +247,7 @@ public void testGetIssues() throws Exception {\n                 .getRepository(\"github-api\")\n                 .getIssues(GHIssueState.CLOSED);\n         // prior to using PagedIterable GHRepository.getIssues(GHIssueState) would only retrieve 30 issues\n-        assertTrue(closedIssues.size() > 150);\n+        assertThat(closedIssues.size(), greaterThan(150));\n         String readRepoString = GitHub.getMappingObjectWriter().writeValueAsString(closedIssues.get(0));\n     }\n \n@@ -264,11 +263,11 @@ public void testListIssues() throws IOException {\n \n         int x = 0;\n         for (GHIssue issue : closedIssues) {\n-            assertNotNull(issue);\n+            assertThat(issue, notNullValue());\n             x++;\n         }\n \n-        assertTrue(x > 150);\n+        assertThat(x, greaterThan(150));\n     }\n \n     @Test\n@@ -279,7 +278,7 @@ public void testRateLimit() throws IOException {\n     @Test\n     public void testMyOrganizations() throws IOException {\n         Map<String, GHOrganization> org = gitHub.getMyOrganizations();\n-        assertFalse(org.keySet().contains(null));\n+        assertThat(org.containsKey(null), is(false));\n         // System.out.println(org);\n     }\n \n@@ -289,7 +288,7 @@ public void testMyOrganizationsContainMyTeams() throws IOException {\n         Map<String, GHOrganization> myOrganizations = gitHub.getMyOrganizations();\n         // GitHub no longer has default 'owners' team, so there may be organization memberships without a team\n         // https://help.github.com/articles/about-improved-organization-permissions/\n-        assertTrue(myOrganizations.keySet().containsAll(teams.keySet()));\n+        assertThat(myOrganizations.keySet().containsAll(teams.keySet()), is(true));\n     }\n \n     @Test\n@@ -299,7 +298,7 @@ public void testMyTeamsShouldIncludeMyself() throws IOException {\n             String organizationName = teamsPerOrg.getKey();\n             for (GHTeam team : teamsPerOrg.getValue()) {\n                 String teamName = team.getName();\n-                assertTrue(\"Team \" + teamName + \" in organization \" + organizationName + \" does not contain myself\",\n+                assertThat(\"Team \" + teamName + \" in organization \" + organizationName + \" does not contain myself\",\n                         shouldBelongToTeam(organizationName, teamName));\n             }\n         }\n@@ -312,7 +311,7 @@ public void testUserPublicOrganizationsWhenThereAreSome() throws IOException {\n         user.login = \"kohsuke\";\n \n         Map<String, GHOrganization> orgs = gitHub.getUserPublicOrganizations(user);\n-        assertFalse(orgs.isEmpty());\n+        assertThat(orgs.size(), greaterThan(0));\n     }\n \n     @Test\n@@ -322,14 +321,14 @@ public void testUserPublicOrganizationsWhenThereAreNone() throws IOException {\n         user.login = \"bitwiseman\";\n \n         Map<String, GHOrganization> orgs = gitHub.getUserPublicOrganizations(user);\n-        assertTrue(orgs.isEmpty());\n+        assertThat(orgs.size(), equalTo(0));\n     }\n \n     private boolean shouldBelongToTeam(String organizationName, String teamName) throws IOException {\n         GHOrganization org = gitHub.getOrganization(organizationName);\n-        assertNotNull(org);\n+        assertThat(org, notNullValue());\n         GHTeam team = org.getTeamByName(teamName);\n-        assertNotNull(team);\n+        assertThat(team, notNullValue());\n         return team.hasMember(gitHub.getMyself());\n     }\n \n@@ -339,10 +338,10 @@ public void testShouldFetchTeam() throws Exception {\n         GHTeam teamByName = organization.getTeams().get(\"Core Developers\");\n \n         GHTeam teamById = gitHub.getTeam((int) teamByName.getId());\n-        assertNotNull(teamById);\n+        assertThat(teamById, notNullValue());\n \n-        assertEquals(teamByName.getId(), teamById.getId());\n-        assertEquals(teamByName.getDescription(), teamById.getDescription());\n+        assertThat(teamById.getId(), equalTo(teamByName.getId()));\n+        assertThat(teamById.getDescription(), equalTo(teamByName.getDescription()));\n     }\n \n     @Test\n@@ -351,24 +350,25 @@ public void testShouldFetchTeamFromOrganization() throws Exception {\n         GHTeam teamByName = organization.getTeams().get(\"Core Developers\");\n \n         GHTeam teamById = organization.getTeam(teamByName.getId());\n-        assertNotNull(teamById);\n+        assertThat(teamById, notNullValue());\n \n-        assertEquals(teamByName.getId(), teamById.getId());\n-        assertEquals(teamByName.getDescription(), teamById.getDescription());\n+        assertThat(teamById.getId(), equalTo(teamByName.getId()));\n+        assertThat(teamById.getDescription(), equalTo(teamByName.getDescription()));\n \n         GHTeam teamById2 = organization.getTeam(teamByName.getId());\n-        assertNotNull(teamById2);\n+        assertThat(teamById2, notNullValue());\n \n-        assertEquals(teamByName.getId(), teamById2.getId());\n-        assertEquals(teamByName.getDescription(), teamById2.getDescription());\n+        assertThat(teamById2.getId(), equalTo(teamByName.getId()));\n+        assertThat(teamById2.getDescription(), equalTo(teamByName.getDescription()));\n \n     }\n \n     @Ignore(\"Needs mocking check\")\n     @Test\n     public void testFetchPullRequest() throws Exception {\n         GHRepository r = gitHub.getOrganization(\"jenkinsci\").getRepository(\"jenkins\");\n-        assertEquals(\"master\", r.getMasterBranch());\n+        assertThat(r.getMasterBranch(), equalTo(\"main\"));\n+        assertThat(r.getDefaultBranch(), equalTo(\"main\"));\n         r.getPullRequest(1);\n         r.getPullRequests(GHIssueState.OPEN);\n     }\n@@ -377,11 +377,11 @@ public void testFetchPullRequest() throws Exception {\n     @Test\n     public void testFetchPullRequestAsList() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n-        assertEquals(\"master\", r.getMasterBranch());\n+        assertThat(r.getMasterBranch(), equalTo(\"main\"));\n         PagedIterable<GHPullRequest> i = r.listPullRequests(GHIssueState.CLOSED);\n         List<GHPullRequest> prs = i.toList();\n-        assertNotNull(prs);\n-        assertTrue(prs.size() > 0);\n+        assertThat(prs, notNullValue());\n+        assertThat(prs, is(not(empty())));\n     }\n \n     @Ignore(\"Needs mocking check\")\n@@ -390,26 +390,26 @@ public void testRepoPermissions() throws Exception {\n         kohsuke();\n \n         GHRepository r = gitHub.getOrganization(GITHUB_API_TEST_ORG).getRepository(\"github-api\");\n-        assertTrue(r.hasPullAccess());\n+        assertThat(r.hasPullAccess(), is(true));\n \n         r = gitHub.getOrganization(\"github\").getRepository(\"hub\");\n-        assertFalse(r.hasAdminAccess());\n+        assertThat(r.hasAdminAccess(), is(false));\n     }\n \n     @Test\n     public void testGetMyself() throws Exception {\n         GHMyself me = gitHub.getMyself();\n-        assertNotNull(me);\n-        assertNotNull(gitHub.getUser(\"bitwiseman\"));\n+        assertThat(me, notNullValue());\n+        assertThat(gitHub.getUser(\"bitwiseman\"), notNullValue());\n         PagedIterable<GHRepository> ghRepositories = me.listRepositories();\n-        assertTrue(ghRepositories.iterator().hasNext());\n+        assertThat(ghRepositories, is(not(emptyIterable())));\n     }\n \n     @Ignore(\"Needs mocking check\")\n     @Test\n     public void testPublicKeys() throws Exception {\n         List<GHKey> keys = gitHub.getMyself().getPublicKeys();\n-        assertFalse(keys.isEmpty());\n+        assertThat(keys, is(not(empty())));\n     }\n \n     @Test\n@@ -422,8 +422,8 @@ public void testOrgFork() throws Exception {\n     public void testGetTeamsForRepo() throws Exception {\n         kohsuke();\n         // 'Core Developers' and 'Owners'\n-        assertEquals(2,\n-                gitHub.getOrganization(GITHUB_API_TEST_ORG).getRepository(\"testGetTeamsForRepo\").getTeams().size());\n+        assertThat(gitHub.getOrganization(GITHUB_API_TEST_ORG).getRepository(\"testGetTeamsForRepo\").getTeams().size(),\n+                equalTo(2));\n     }\n \n     @Test\n@@ -445,38 +445,38 @@ public void testOrgTeams() throws Exception {\n         kohsuke();\n         int sz = 0;\n         for (GHTeam t : gitHub.getOrganization(GITHUB_API_TEST_ORG).listTeams()) {\n-            assertNotNull(t.getName());\n+            assertThat(t.getName(), notNullValue());\n             sz++;\n         }\n-        assertTrue(sz < 100);\n+        assertThat(sz, lessThan(100));\n     }\n \n     @Test\n     public void testOrgTeamByName() throws Exception {\n         kohsuke();\n         GHTeam e = gitHub.getOrganization(GITHUB_API_TEST_ORG).getTeamByName(\"Core Developers\");\n-        assertNotNull(e);\n+        assertThat(e, notNullValue());\n     }\n \n     @Test\n     public void testOrgTeamBySlug() throws Exception {\n         kohsuke();\n         GHTeam e = gitHub.getOrganization(GITHUB_API_TEST_ORG).getTeamBySlug(\"core-developers\");\n-        assertNotNull(e);\n+        assertThat(e, notNullValue());\n     }\n \n     @Test\n     public void testCommit() throws Exception {\n         GHCommit commit = gitHub.getUser(\"jenkinsci\")\n                 .getRepository(\"jenkins\")\n                 .getCommit(\"08c1c9970af4d609ae754fbe803e06186e3206f7\");\n-        assertEquals(1, commit.getParents().size());\n-        assertEquals(1, commit.getFiles().size());\n-        assertEquals(\"https://github.com/jenkinsci/jenkins/commit/08c1c9970af4d609ae754fbe803e06186e3206f7\",\n-                commit.getHtmlUrl().toString());\n+        assertThat(commit.getParents().size(), equalTo(1));\n+        assertThat(commit.getFiles().size(), equalTo(1));\n+        assertThat(commit.getHtmlUrl().toString(),\n+                equalTo(\"https://github.com/jenkinsci/jenkins/commit/08c1c9970af4d609ae754fbe803e06186e3206f7\"));\n \n         File f = commit.getFiles().get(0);\n-        assertEquals(48, f.getLinesChanged());\n+        assertThat(f.getLinesChanged(), equalTo(48));\n         assertThat(f.getLinesAdded(), equalTo(40));\n         assertThat(f.getLinesDeleted(), equalTo(8));\n         assertThat(f.getPreviousFilename(), nullValue());\n@@ -487,13 +487,13 @@ public void testCommit() throws Exception {\n         assertThat(f.getRawUrl().toString(),\n                 equalTo(\"https://github.com/jenkinsci/jenkins/raw/08c1c9970af4d609ae754fbe803e06186e3206f7/changelog.html\"));\n \n-        assertEquals(\"modified\", f.getStatus());\n-        assertEquals(\"changelog.html\", f.getFileName());\n+        assertThat(f.getStatus(), equalTo(\"modified\"));\n+        assertThat(f.getFileName(), equalTo(\"changelog.html\"));\n \n         // walk the tree\n         GHTree t = commit.getTree();\n         assertThat(IOUtils.toString(t.getEntry(\"todo.txt\").readAsBlob()), containsString(\"executor rendering\"));\n-        assertNotNull(t.getEntry(\"war\").asTree());\n+        assertThat(t.getEntry(\"war\").asTree(), notNullValue());\n     }\n \n     @Test\n@@ -502,8 +502,8 @@ public void testListCommits() throws Exception {\n         for (GHCommit c : gitHub.getUser(\"kohsuke\").getRepository(\"empty-commit\").listCommits()) {\n             sha1.add(c.getSHA1());\n         }\n-        assertEquals(\"fdfad6be4db6f96faea1f153fb447b479a7a9cb7\", sha1.get(0));\n-        assertEquals(1, sha1.size());\n+        assertThat(sha1.get(0), equalTo(\"fdfad6be4db6f96faea1f153fb447b479a7a9cb7\"));\n+        assertThat(sha1.size(), equalTo(1));\n     }\n \n     @Ignore(\"Needs mocking check\")\n@@ -520,7 +520,7 @@ public void testCommitComment() throws Exception {\n         List<GHCommitComment> batch = comments.iterator().nextPage();\n         for (GHCommitComment comment : batch) {\n             // System.out.println(comment.getBody());\n-            assertSame(comment.getOwner(), r);\n+            assertThat(r, sameInstance(comment.getOwner()));\n         }\n     }\n \n@@ -585,7 +585,7 @@ public void tryHook() throws Exception {\n             // System.out.println(hook);\n         } finally {\n             if (mockGitHub.isUseProxy()) {\n-                r = getGitHubBeforeAfter().getOrganization(GITHUB_API_TEST_ORG).getRepository(\"github-api\");\n+                r = getNonRecordingGitHub().getOrganization(GITHUB_API_TEST_ORG).getRepository(\"github-api\");\n                 for (GHHook h : r.getHooks()) {\n                     h.delete();\n                 }\n@@ -719,7 +719,7 @@ public void testOrganization() throws IOException {\n         GHOrganization j = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n         GHTeam t = j.getTeams().get(\"Core Developers\");\n \n-        assertNotNull(j.getRepository(\"jenkins\"));\n+        assertThat(j.getRepository(\"jenkins\"), notNullValue());\n \n         // t.add(labs.getRepository(\"xyz\"));\n     }\n@@ -736,18 +736,18 @@ public void testCommitStatus() throws Exception {\n         List<GHCommitStatus> lst = r.listCommitStatuses(\"ecbfdd7315ef2cf04b2be7f11a072ce0bd00c396\").toList();\n         state = lst.get(0);\n         // System.out.println(state);\n-        assertEquals(\"testing!\", state.getDescription());\n-        assertEquals(\"http://kohsuke.org/\", state.getTargetUrl());\n+        assertThat(state.getDescription(), equalTo(\"testing!\"));\n+        assertThat(state.getTargetUrl(), equalTo(\"http://kohsuke.org/\"));\n     }\n \n     @Test\n     public void testCommitShortInfo() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         GHCommit commit = r.getCommit(\"86a2e245aa6d71d54923655066049d9e21a15f23\");\n-        assertEquals(commit.getCommitShortInfo().getAuthor().getName(), \"Kohsuke Kawaguchi\");\n-        assertEquals(commit.getCommitShortInfo().getMessage(), \"doc\");\n-        assertFalse(commit.getCommitShortInfo().getVerification().isVerified());\n-        assertEquals(commit.getCommitShortInfo().getVerification().getReason(), GHVerification.Reason.UNSIGNED);\n+        assertThat(\"Kohsuke Kawaguchi\", equalTo(commit.getCommitShortInfo().getAuthor().getName()));\n+        assertThat(\"doc\", equalTo(commit.getCommitShortInfo().getMessage()));\n+        assertThat(commit.getCommitShortInfo().getVerification().isVerified(), is(false));\n+        assertThat(GHVerification.Reason.UNSIGNED, equalTo(commit.getCommitShortInfo().getVerification().getReason()));\n         assertThat(commit.getCommitShortInfo().getAuthor().getDate().toInstant().getEpochSecond(),\n                 equalTo(1271650361L));\n         assertThat(commit.getCommitShortInfo().getCommitter().getDate().toInstant().getEpochSecond(),\n@@ -760,7 +760,7 @@ public void testPullRequestPopulate() throws Exception {\n         GHRepository r = gitHub.getUser(\"kohsuke\").getRepository(\"github-api\");\n         GHPullRequest p = r.getPullRequest(17);\n         GHUser u = p.getUser();\n-        assertNotNull(u.getName());\n+        assertThat(u.getName(), notNullValue());\n     }\n \n     @Test\n@@ -770,55 +770,18 @@ public void testCheckMembership() throws Exception {\n         GHUser kohsuke = gitHub.getUser(\"kohsuke\");\n         GHUser b = gitHub.getUser(\"b\");\n \n-        assertTrue(j.hasMember(kohsuke));\n-        assertFalse(j.hasMember(b));\n+        assertThat(j.hasMember(kohsuke), is(true));\n+        assertThat(j.hasMember(b), is(false));\n \n-        assertTrue(j.hasPublicMember(kohsuke));\n-        assertFalse(j.hasPublicMember(b));\n-    }\n-\n-    @Ignore(\"Needs mocking check\")\n-    @Test\n-    public void testCreateRelease() throws Exception {\n-        kohsuke();\n-\n-        GHRepository r = gitHub.getRepository(\"kohsuke2/testCreateRelease\");\n-\n-        String tagName = UUID.randomUUID().toString();\n-        String releaseName = \"release-\" + tagName;\n-\n-        GHRelease rel = r.createRelease(tagName).name(releaseName).prerelease(false).create();\n-\n-        Thread.sleep(3000);\n-\n-        try {\n-\n-            for (GHTag tag : r.listTags()) {\n-                if (tagName.equals(tag.getName())) {\n-                    String ash = tag.getCommit().getSHA1();\n-                    GHRef ref = r.createRef(\"refs/heads/\" + releaseName, ash);\n-                    assertEquals(ref.getRef(), \"refs/heads/\" + releaseName);\n-\n-                    for (Map.Entry<String, GHBranch> entry : r.getBranches().entrySet()) {\n-                        // System.out.println(entry.getKey() + \"/\" + entry.getValue());\n-                        if (releaseName.equals(entry.getValue().getName())) {\n-                            return;\n-                        }\n-                    }\n-                    fail(\"branch not found\");\n-                }\n-            }\n-            fail(\"release creation failed! tag not found\");\n-        } finally {\n-            rel.delete();\n-        }\n+        assertThat(j.hasPublicMember(kohsuke), is(true));\n+        assertThat(j.hasPublicMember(b), is(false));\n     }\n \n     @Test\n     public void testRef() throws IOException {\n-        GHRef masterRef = gitHub.getRepository(\"jenkinsci/jenkins\").getRef(\"heads/master\");\n-        assertEquals(mockGitHub.apiServer().baseUrl() + \"/repos/jenkinsci/jenkins/git/refs/heads/master\",\n-                masterRef.getUrl().toString());\n+        GHRef mainRef = gitHub.getRepository(\"jenkinsci/jenkins\").getRef(\"heads/main\");\n+        assertThat(mainRef.getUrl().toString(),\n+                equalTo(mockGitHub.apiServer().baseUrl() + \"/repos/jenkinsci/jenkins/git/refs/heads/main\"));\n     }\n \n     @Test\n@@ -841,14 +804,14 @@ public void testAddDeployKey() throws IOException {\n         final GHDeployKey newDeployKey = myRepository.addDeployKey(\"test\",\n                 \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDUt0RAycC5cS42JKh6SecfFZBR1RrF+2hYMctz4mk74/arBE+wFb7fnSHGzdGKX2h5CFOWODifRCJVhB7hlVxodxe+QkQQYAEL/x1WVCJnGgTGQGOrhOMj95V3UE5pQKhsKD608C+u5tSofcWXLToP1/wZ7U4/AHjqYi08OLsWToHCax55TZkvdt2jo0hbIoYU+XI9Q8Uv4ONDN1oabiOdgeKi8+crvHAuvNleiBhWVBzFh8KdfzaH5uNdw7ihhFjEd1vzqACsjCINCjdMfzl6jD9ExuWuE92nZJnucls2cEoNC6k2aPmrZDg9hA32FXVpyseY+bDUWFU6LO2LG6PB kohsuke@atlas\");\n         try {\n-            assertNotNull(newDeployKey.getId());\n+            assertThat(newDeployKey.getId(), notNullValue());\n \n             GHDeployKey k = Iterables.find(myRepository.getDeployKeys(), new Predicate<GHDeployKey>() {\n                 public boolean apply(GHDeployKey deployKey) {\n                     return newDeployKey.getId() == deployKey.getId();\n                 }\n             });\n-            assertNotNull(k);\n+            assertThat(k, notNullValue());\n         } finally {\n             newDeployKey.delete();\n         }\n@@ -858,10 +821,10 @@ public boolean apply(GHDeployKey deployKey) {\n     @Test\n     public void testCommitStatusContext() throws IOException {\n         GHRepository myRepository = getTestRepository();\n-        GHRef masterRef = myRepository.getRef(\"heads/master\");\n-        GHCommitStatus commitStatus = myRepository.createCommitStatus(masterRef.getObject()\n+        GHRef mainRef = myRepository.getRef(\"heads/main\");\n+        GHCommitStatus commitStatus = myRepository.createCommitStatus(mainRef.getObject()\n                 .getSha(), GHCommitState.SUCCESS, \"http://www.example.com\", \"test\", \"test/context\");\n-        assertEquals(\"test/context\", commitStatus.getContext());\n+        assertThat(commitStatus.getContext(), equalTo(\"test/context\"));\n \n     }\n \n@@ -873,7 +836,7 @@ public void testMemberPagenation() throws IOException {\n             // System.out.println(u.getLogin());\n             all.add(u);\n         }\n-        assertFalse(all.isEmpty());\n+        assertThat(all, is(not(empty())));\n     }\n \n     @Test\n@@ -884,10 +847,10 @@ public void testCommitSearch() throws IOException {\n                 .author(\"kohsuke\")\n                 .sort(GHCommitSearchBuilder.Sort.COMMITTER_DATE)\n                 .list();\n-        assertTrue(r.getTotalCount() > 0);\n+        assertThat(r.getTotalCount(), greaterThan(0));\n \n         GHCommit firstCommit = r.iterator().next();\n-        assertTrue(firstCommit.getFiles().size() > 0);\n+        assertThat(firstCommit.getFiles(), is(not(empty())));\n     }\n \n     @Test\n@@ -897,7 +860,7 @@ public void testIssueSearch() throws IOException {\n                 .isOpen()\n                 .sort(GHIssueSearchBuilder.Sort.UPDATED)\n                 .list();\n-        assertTrue(r.getTotalCount() > 0);\n+        assertThat(r.getTotalCount(), greaterThan(0));\n         for (GHIssue issue : r) {\n             assertThat(issue.getTitle(), notNullValue());\n             PagedIterable<GHIssueComment> comments = issue.listComments();\n@@ -910,29 +873,29 @@ public void testIssueSearch() throws IOException {\n     @Test // issue #99\n     public void testReadme() throws IOException {\n         GHContent readme = gitHub.getRepository(\"hub4j-test-org/test-readme\").getReadme();\n-        assertEquals(readme.getName(), \"README.md\");\n-        assertEquals(readme.getContent(), \"This is a markdown readme.\\n\");\n+        assertThat(\"README.md\", equalTo(readme.getName()));\n+        assertThat(\"This is a markdown readme.\\n\", equalTo(readme.getContent()));\n     }\n \n     @Ignore(\"Needs mocking check\")\n     @Test\n     public void testTrees() throws IOException {\n-        GHTree masterTree = gitHub.getRepository(\"hub4j/github-api\").getTree(\"master\");\n+        GHTree mainTree = gitHub.getRepository(\"hub4j/github-api\").getTree(\"main\");\n         boolean foundReadme = false;\n-        for (GHTreeEntry e : masterTree.getTree()) {\n+        for (GHTreeEntry e : mainTree.getTree()) {\n             if (\"readme\".equalsIgnoreCase(e.getPath().replaceAll(\"\\\\.md\", \"\"))) {\n                 foundReadme = true;\n                 break;\n             }\n         }\n-        assertTrue(foundReadme);\n+        assertThat(foundReadme, is(true));\n     }\n \n     @Test\n     public void testTreesRecursive() throws IOException {\n-        GHTree masterTree = gitHub.getRepository(\"hub4j/github-api\").getTreeRecursive(\"master\", 1);\n+        GHTree mainTree = gitHub.getRepository(\"hub4j/github-api\").getTreeRecursive(\"main\", 1);\n         boolean foundThisFile = false;\n-        for (GHTreeEntry e : masterTree.getTree()) {\n+        for (GHTreeEntry e : mainTree.getTree()) {\n             if (e.getPath().endsWith(AppTest.class.getSimpleName() + \".java\")) {\n                 foundThisFile = true;\n                 assertThat(e.getPath(), equalTo(\"src/test/java/org/kohsuke/github/AppTest.java\"));\n@@ -948,7 +911,7 @@ public void testTreesRecursive() throws IOException {\n             }\n \n         }\n-        assertTrue(foundThisFile);\n+        assertThat(foundThisFile, is(true));\n     }\n \n     @Test\n@@ -961,11 +924,14 @@ public void testRepoLabel() throws IOException {\n         for (GHLabel l : lst) {\n             assertThat(l.getUrl(), containsString(l.getName().replace(\" \", \"%20\")));\n         }\n-        assertTrue(lst.size() > 5);\n+        assertThat(lst.size(), greaterThan(5));\n         GHLabel e = r.getLabel(\"enhancement\");\n-        assertEquals(\"enhancement\", e.getName());\n-        assertNotNull(e.getUrl());\n-        assertTrue(Pattern.matches(\"[0-9a-fA-F]{6}\", e.getColor()));\n+        assertThat(e.getName(), equalTo(\"enhancement\"));\n+        assertThat(e.getUrl(), notNullValue());\n+        assertThat(e.getId(), equalTo(177339106L));\n+        assertThat(e.getNodeId(), equalTo(\"MDU6TGFiZWwxNzczMzkxMDY=\"));\n+        assertThat(e.isDefault(), is(true));\n+        assertThat(e.getColor(), matchesPattern(\"[0-9a-fA-F]{6}\"));\n \n         GHLabel t = null;\n         GHLabel t2 = null;\n@@ -976,12 +942,17 @@ public void testRepoLabel() throws IOException {\n             assertThat(t, not(sameInstance(t2)));\n             assertThat(t, equalTo(t2));\n \n-            assertEquals(t.getName(), t2.getName());\n-            assertEquals(t.getColor(), \"123456\");\n-            assertEquals(t.getColor(), t2.getColor());\n-            assertEquals(t.getDescription(), \"\");\n-            assertEquals(t.getDescription(), t2.getDescription());\n-            assertEquals(t.getUrl(), t2.getUrl());\n+            assertThat(t2.isDefault(), is(false));\n+\n+            assertThat(t2.getId(), equalTo(t.getId()));\n+            assertThat(t2.getNodeId(), equalTo(t.getNodeId()));\n+            assertThat(t2.getName(), equalTo(t.getName()));\n+            assertThat(\"123456\", equalTo(t.getColor()));\n+            assertThat(t2.getColor(), equalTo(t.getColor()));\n+            assertThat(\"\", equalTo(t.getDescription()));\n+            assertThat(t2.getDescription(), equalTo(t.getDescription()));\n+            assertThat(t2.getUrl(), equalTo(t.getUrl()));\n+            assertThat(t2.isDefault(), equalTo(t.isDefault()));\n \n             // update works on multiple changes in one call\n             t3 = t.update().color(\"000000\").description(\"It is dark!\").done();\n@@ -993,24 +964,24 @@ public void testRepoLabel() throws IOException {\n             assertThat(t, not(sameInstance(t3)));\n             assertThat(t, not(equalTo(t3)));\n \n-            assertEquals(t.getColor(), \"123456\");\n-            assertEquals(t.getDescription(), \"\");\n-            assertEquals(t3.getColor(), \"000000\");\n-            assertEquals(t3.getDescription(), \"It is dark!\");\n+            assertThat(\"123456\", equalTo(t.getColor()));\n+            assertThat(\"\", equalTo(t.getDescription()));\n+            assertThat(\"000000\", equalTo(t3.getColor()));\n+            assertThat(\"It is dark!\", equalTo(t3.getDescription()));\n \n             // Test deprecated methods\n             t.setDescription(\"Deprecated\");\n             t = r.getLabel(\"test\");\n \n             // By using the old instance t when calling setDescription it also sets color to the old value\n             // this is a bad behavior, but it is expected\n-            assertEquals(t.getColor(), \"123456\");\n-            assertEquals(t.getDescription(), \"Deprecated\");\n+            assertThat(\"123456\", equalTo(t.getColor()));\n+            assertThat(\"Deprecated\", equalTo(t.getDescription()));\n \n             t.setColor(\"000000\");\n             t = r.getLabel(\"test\");\n-            assertEquals(t.getColor(), \"000000\");\n-            assertEquals(t.getDescription(), \"Deprecated\");\n+            assertThat(\"000000\", equalTo(t.getColor()));\n+            assertThat(\"Deprecated\", equalTo(t.getDescription()));\n \n             // set() makes a single change\n             t3 = t.set().description(\"this is also a test\");\n@@ -1019,8 +990,8 @@ public void testRepoLabel() throws IOException {\n             assertThat(t, not(sameInstance(t3)));\n             assertThat(t, not(equalTo(t3)));\n \n-            assertEquals(t3.getColor(), \"000000\");\n-            assertEquals(t3.getDescription(), \"this is also a test\");\n+            assertThat(\"000000\", equalTo(t3.getColor()));\n+            assertThat(\"this is also a test\", equalTo(t3.getDescription()));\n \n             t.delete();\n             try {\n@@ -1033,12 +1004,12 @@ public void testRepoLabel() throws IOException {\n             t = r.createLabel(\"test2\", \"123457\", \"this is a different test\");\n             t2 = r.getLabel(\"test2\");\n \n-            assertEquals(t.getName(), t2.getName());\n-            assertEquals(t.getColor(), \"123457\");\n-            assertEquals(t.getColor(), t2.getColor());\n-            assertEquals(t.getDescription(), \"this is a different test\");\n-            assertEquals(t.getDescription(), t2.getDescription());\n-            assertEquals(t.getUrl(), t2.getUrl());\n+            assertThat(t2.getName(), equalTo(t.getName()));\n+            assertThat(\"123457\", equalTo(t.getColor()));\n+            assertThat(t2.getColor(), equalTo(t.getColor()));\n+            assertThat(\"this is a different test\", equalTo(t.getDescription()));\n+            assertThat(t2.getDescription(), equalTo(t.getDescription()));\n+            assertThat(t2.getUrl(), equalTo(t.getUrl()));\n             t.delete();\n \n             // Allow null description\n@@ -1055,7 +1026,7 @@ public void testRepoLabel() throws IOException {\n     void cleanupLabel(String name) {\n         if (mockGitHub.isUseProxy()) {\n             try {\n-                GHLabel t = getGitHubBeforeAfter().getRepository(\"hub4j-test-org/test-labels\").getLabel(name);\n+                GHLabel t = getNonRecordingGitHub().getRepository(\"hub4j-test-org/test-labels\").getLabel(name);\n                 t.delete();\n             } catch (IOException e) {\n \n@@ -1070,13 +1041,13 @@ public void testSubscribers() throws IOException {\n         for (GHUser u : mr.listSubscribers()) {\n             bitwiseman |= u.getLogin().equals(\"bitwiseman\");\n         }\n-        assertTrue(bitwiseman);\n+        assertThat(bitwiseman, is(true));\n \n         boolean githubApiFound = false;\n         for (GHRepository r : gitHub.getUser(\"bitwiseman\").listRepositories()) {\n             githubApiFound |= r.equals(mr);\n         }\n-        assertTrue(githubApiFound);\n+        assertThat(githubApiFound, is(true));\n     }\n \n     @Test\n@@ -1107,7 +1078,7 @@ public void notifications() throws Exception {\n             assertThat(t.getCreatedAt(), nullValue());\n \n         }\n-        assertTrue(found);\n+        assertThat(found, is(true));\n         gitHub.listNotifications().markAsRead();\n     }\n \n@@ -1187,8 +1158,8 @@ public void listOrgMemberships() throws Exception {\n         GHMyself me = gitHub.getMyself();\n         for (GHMembership m : me.listOrgMemberships()) {\n             assertThat(m.getUser(), is((GHUser) me));\n-            assertNotNull(m.getState());\n-            assertNotNull(m.getRole());\n+            assertThat(m.getState(), notNullValue());\n+            assertThat(m.getRole(), notNullValue());\n         }\n     }\n \n@@ -1199,15 +1170,15 @@ public void blob() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         String sha1 = \"a12243f2fc5b8c2ba47dd677d0b0c7583539584d\";\n \n-        assertBlobContent(r.readBlob(sha1));\n+        verifyBlobContent(r.readBlob(sha1));\n \n         GHBlob blob = r.getBlob(sha1);\n-        assertBlobContent(blob.read());\n+        verifyBlobContent(blob.read());\n         assertThat(blob.getSha(), is(\"a12243f2fc5b8c2ba47dd677d0b0c7583539584d\"));\n         assertThat(blob.getSize(), is(1104L));\n     }\n \n-    private void assertBlobContent(InputStream is) throws Exception {\n+    private void verifyBlobContent(InputStream is) throws Exception {\n         String content = new String(IOUtils.toByteArray(is), StandardCharsets.UTF_8);\n         assertThat(content, containsString(\"Copyright (c) 2011- Kohsuke Kawaguchi and other contributors\"));\n         assertThat(content, containsString(\"FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\"));"
    },
    {
      "sha": "810e9b196f8aa311a31fdae9c716a8f5848ab7ba",
      "filename": "src/test/java/org/kohsuke/github/ArchTests.java",
      "status": "modified",
      "additions": 121,
      "deletions": 58,
      "changes": 179,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/ArchTests.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/ArchTests.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/ArchTests.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1,20 +1,40 @@\n package org.kohsuke.github;\n \n import com.tngtech.archunit.base.DescribedPredicate;\n-import com.tngtech.archunit.core.domain.JavaAnnotation;\n-import com.tngtech.archunit.core.domain.JavaClasses;\n+import com.tngtech.archunit.core.domain.*;\n+import com.tngtech.archunit.core.domain.properties.HasName;\n+import com.tngtech.archunit.core.domain.properties.HasOwner;\n import com.tngtech.archunit.core.importer.ClassFileImporter;\n import com.tngtech.archunit.core.importer.ImportOption;\n+import com.tngtech.archunit.lang.ArchCondition;\n import com.tngtech.archunit.lang.ArchRule;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n-import static com.tngtech.archunit.lang.conditions.ArchConditions.beAnnotatedWith;\n-import static com.tngtech.archunit.lang.conditions.ArchConditions.not;\n+import java.io.Closeable;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.lang.reflect.Field;\n+import java.nio.charset.Charset;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.tngtech.archunit.core.domain.JavaCall.Predicates.target;\n+import static com.tngtech.archunit.core.domain.JavaClass.Predicates.resideInAPackage;\n+import static com.tngtech.archunit.core.domain.JavaClass.Predicates.type;\n+import static com.tngtech.archunit.core.domain.JavaClass.namesOf;\n+import static com.tngtech.archunit.core.domain.properties.HasName.Predicates.name;\n+import static com.tngtech.archunit.core.domain.properties.HasName.Predicates.nameContaining;\n+import static com.tngtech.archunit.core.domain.properties.HasOwner.Predicates.With.owner;\n+import static com.tngtech.archunit.core.domain.properties.HasParameterTypes.Predicates.rawParameterTypes;\n+import static com.tngtech.archunit.lang.conditions.ArchConditions.*;\n import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;\n-import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.fields;\n-import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;\n-import static org.junit.Assert.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.greaterThan;\n \n public class ArchTests {\n \n@@ -23,6 +43,13 @@\n             .withImportOption(new ImportOption.DoNotIncludeJars())\n             .importPackages(\"org.kohsuke.github\");\n \n+    private static final JavaClasses apacheCommons = new ClassFileImporter().importPackages(\"org.apache.commons.lang3\");\n+\n+    private static final JavaClasses testClassFiles = new ClassFileImporter()\n+            .withImportOption(new ImportOption.OnlyIncludeTests())\n+            .withImportOption(new ImportOption.DoNotIncludeJars())\n+            .importPackages(\"org.kohsuke.github\");\n+\n     private static final DescribedPredicate<JavaAnnotation<?>> previewAnnotationWithNoMediaType = new DescribedPredicate<JavaAnnotation<?>>(\n             \"preview has no required media types defined\") {\n \n@@ -36,73 +63,109 @@ public boolean apply(JavaAnnotation<?> javaAnnotation) {\n \n     @BeforeClass\n     public static void beforeClass() {\n-        assertTrue(classFiles.size() > 0);\n+        assertThat(classFiles.size(), greaterThan(0));\n     }\n \n     @Test\n-    public void testPreviewsAreFlaggedAsDeprecated() {\n-\n-        String reason = \"all preview APIs must be annotated as @Deprecated until they are promoted to stable\";\n+    public void testRequireUseOfAssertThat() {\n \n-        ArchRule classRule = classes().that()\n-                .areAnnotatedWith(Preview.class)\n-                .should()\n-                .beAnnotatedWith(Deprecated.class)\n-                .andShould(not(beAnnotatedWith(previewAnnotationWithNoMediaType)))\n-                .because(reason);\n+        final String reason = \"This project uses `assertThat(...)` or `assertThrows(...)` instead of other `assert*()` methods.\";\n \n-        ArchRule methodRule = methods().that()\n-                .areAnnotatedWith(Preview.class)\n-                .should()\n-                .beAnnotatedWith(Deprecated.class)\n-                .andShould(not(beAnnotatedWith(previewAnnotationWithNoMediaType)))\n-                .because(reason);\n+        final DescribedPredicate<HasName> assertMethodOtherThanAssertThat = nameContaining(\"assert\")\n+                .and(DescribedPredicate.not(name(\"assertThat\")).and(DescribedPredicate.not(name(\"assertThrows\"))));\n \n-        ArchRule enumFieldsRule = fields().that()\n-                .areDeclaredInClassesThat()\n-                .areEnums()\n-                .and()\n-                .areAnnotatedWith(Preview.class)\n-                .should()\n-                .beAnnotatedWith(Deprecated.class)\n-                .andShould(not(beAnnotatedWith(previewAnnotationWithNoMediaType)))\n+        final ArchRule onlyAssertThatRule = classes()\n+                .should(not(callMethodWhere(target(assertMethodOtherThanAssertThat))))\n                 .because(reason);\n \n-        classRule.check(classFiles);\n-        enumFieldsRule.check(classFiles);\n-        methodRule.check(classFiles);\n-\n+        onlyAssertThatRule.check(testClassFiles);\n     }\n \n     @Test\n-    public void testBetaApisAreFlaggedAsDeprecated() {\n+    public void testRequireUseOfOnlySpecificApacheCommons() {\n+\n+        final ArchRule onlyApprovedApacheCommonsMethods = classes()\n+                .should(notCallMethodsInPackageUnless(\"org.apache.commons..\",\n+                        // unless it is one of these methods\n+                        targetMethodIs(StringUtils.class, \"capitalize\", String.class),\n+                        targetMethodIs(StringUtils.class, \"defaultString\", String.class, String.class),\n+                        targetMethodIs(StringUtils.class, \"equals\", CharSequence.class, CharSequence.class),\n+                        targetMethodIs(StringUtils.class, \"isBlank\", CharSequence.class),\n+                        targetMethodIs(StringUtils.class, \"isEmpty\", CharSequence.class),\n+                        targetMethodIs(StringUtils.class, \"join\", Iterable.class, String.class),\n+                        targetMethodIs(StringUtils.class,\n+                                \"prependIfMissing\",\n+                                String.class,\n+                                CharSequence.class,\n+                                CharSequence[].class),\n+                        targetMethodIs(ToStringBuilder.class, \"toString\"),\n+                        targetMethodIs(ToStringBuilder.class, \"append\", String.class, Object.class),\n+                        targetMethodIs(ToStringBuilder.class, \"append\", String.class, long.class),\n+                        targetMethodIs(ToStringBuilder.class, \"append\", String.class, int.class),\n+                        targetMethodIs(ToStringBuilder.class, \"isEmpty\"),\n+                        targetMethodIs(ToStringBuilder.class, \"equals\"),\n+                        targetMethodIs(ToStringBuilder.class, \"capitalize\"),\n+                        targetMethodIs(ToStringStyle.class,\n+                                \"append\",\n+                                StringBuffer.class,\n+                                String.class,\n+                                Object.class,\n+                                Boolean.class),\n+                        targetMethodIs(ReflectionToStringBuilder.class, \"accept\", Field.class),\n+                        targetMethodIs(IOUtils.class, \"closeQuietly\", InputStream.class),\n+                        targetMethodIs(IOUtils.class, \"closeQuietly\", Closeable.class),\n+                        targetMethodIs(IOUtils.class, \"toString\", InputStream.class, Charset.class),\n+                        targetMethodIs(IOUtils.class, \"toString\", Reader.class),\n+                        targetMethodIs(IOUtils.class, \"toByteArray\", InputStream.class)))\n+                .because(\n+                        \"Commons methods must be manually verified to be compatible with commons-io:2.4 or earlier and commons-lang3:3.9 or earlier.\");\n+\n+        onlyApprovedApacheCommonsMethods.check(classFiles);\n+    }\n \n-        String reason = \"all beta APIs must be annotated as @Deprecated until they are promoted to stable\";\n+    public static ArchCondition<JavaClass> notCallMethodsInPackageUnless(final String packageIdentifier,\n+            final DescribedPredicate<JavaCall<?>>... unlessPredicates) {\n+        DescribedPredicate<JavaCall<?>> restrictedPackageCalls = target(\n+                HasOwner.Predicates.With.<JavaClass>owner(resideInAPackage(packageIdentifier)));\n+\n+        if (unlessPredicates.length > 0) {\n+            DescribedPredicate<JavaCall<?>> allowed = unlessPredicates[0];\n+            for (int x = 1; x < unlessPredicates.length; x++) {\n+                allowed = allowed.or(unlessPredicates[x]);\n+            }\n+            restrictedPackageCalls = unless(restrictedPackageCalls, allowed);\n+        }\n+        return not(callMethodWhere(restrictedPackageCalls));\n+    }\n \n-        ArchRule classRule = classes().that()\n-                .areAnnotatedWith(BetaApi.class)\n-                .should()\n-                .beAnnotatedWith(Deprecated.class)\n-                .because(reason);\n+    public static DescribedPredicate<JavaCall<?>> targetMethodIs(Class<?> owner,\n+            String methodName,\n+            Class<?>... parameterTypes) {\n+        return JavaCall.Predicates.target(owner(type(owner)))\n+                .and(JavaCall.Predicates.target(name(methodName)))\n+                .and(JavaCall.Predicates.target(rawParameterTypes(parameterTypes)))\n+                .as(\"method is %s\",\n+                        Formatters.formatMethodSimple(owner.getSimpleName(), methodName, namesOf(parameterTypes)));\n+    }\n \n-        ArchRule methodRule = methods().that()\n-                .areAnnotatedWith(BetaApi.class)\n-                .should()\n-                .beAnnotatedWith(Deprecated.class)\n-                .because(reason);\n+    public static <T> DescribedPredicate<T> unless(DescribedPredicate<? super T> first,\n+            DescribedPredicate<? super T> second) {\n+        return new UnlessPredicate(first, second);\n+    }\n \n-        ArchRule enumFieldsRule = fields().that()\n-                .areDeclaredInClassesThat()\n-                .areEnums()\n-                .and()\n-                .areAnnotatedWith(BetaApi.class)\n-                .should()\n-                .beAnnotatedWith(Deprecated.class)\n-                .because(reason);\n+    private static class UnlessPredicate<T> extends DescribedPredicate<T> {\n+        private final DescribedPredicate<T> current;\n+        private final DescribedPredicate<? super T> other;\n \n-        classRule.check(classFiles);\n-        enumFieldsRule.check(classFiles);\n-        methodRule.check(classFiles);\n+        UnlessPredicate(DescribedPredicate<T> current, DescribedPredicate<? super T> other) {\n+            super(current.getDescription() + \" unless \" + other.getDescription());\n+            this.current = checkNotNull(current);\n+            this.other = checkNotNull(other);\n+        }\n \n+        @Override\n+        public boolean apply(T input) {\n+            return current.apply(input) && !other.apply(input);\n+        }\n     }\n }"
    },
    {
      "sha": "a08224e22c783ae914f4bdd483af932dd86d4ba3",
      "filename": "src/test/java/org/kohsuke/github/BridgeMethodTest.java",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/BridgeMethodTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/BridgeMethodTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/BridgeMethodTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -33,6 +33,7 @@ public void testBridgeMethods() throws IOException {\n         verifyBridgeMethods(GHIssue.class, \"getCreatedAt\", Date.class, String.class);\n         verifyBridgeMethods(GHIssue.class, \"getId\", int.class, long.class, String.class);\n         verifyBridgeMethods(GHIssue.class, \"getUrl\", String.class, URL.class);\n+        verifyBridgeMethods(GHIssue.class, \"comment\", 1, void.class, GHIssueComment.class);\n \n         verifyBridgeMethods(GHOrganization.class, \"getHtmlUrl\", String.class, URL.class);\n         verifyBridgeMethods(GHOrganization.class, \"getId\", int.class, long.class, String.class);\n@@ -55,12 +56,17 @@ public void testBridgeMethods() throws IOException {\n     }\n \n     void verifyBridgeMethods(@Nonnull Class<?> targetClass, @Nonnull String methodName, Class<?>... returnTypes) {\n+        verifyBridgeMethods(targetClass, methodName, 0, returnTypes);\n+    }\n+\n+    void verifyBridgeMethods(@Nonnull Class<?> targetClass,\n+            @Nonnull String methodName,\n+            int parameterCount,\n+            Class<?>... returnTypes) {\n         List<Class<?>> foundMethods = new ArrayList<>();\n         Method[] methods = targetClass.getMethods();\n         for (Method method : methods) {\n-            if (method.getName().equalsIgnoreCase(methodName)) {\n-                // Bridge methods are only\n-                assertThat(method.getParameterCount(), equalTo(0));\n+            if (method.getName().equalsIgnoreCase(methodName) && method.getParameterCount() == parameterCount) {\n                 foundMethods.add(method.getReturnType());\n             }\n         }"
    },
    {
      "sha": "fc33ac893150cfb175437a56dc458908d3cab3f1",
      "filename": "src/test/java/org/kohsuke/github/CommitTest.java",
      "status": "modified",
      "additions": 19,
      "deletions": 19,
      "changes": 38,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/CommitTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/CommitTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/CommitTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -9,7 +9,7 @@\n import java.util.Date;\n import java.util.List;\n \n-import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.*;\n \n /**\n  * @author Kohsuke Kawaguchi\n@@ -18,7 +18,7 @@\n     @Test // issue 152\n     public void lastStatus() throws IOException {\n         GHTag t = gitHub.getRepository(\"stapler/stapler\").listTags().iterator().next();\n-        assertNotNull(t.getCommit().getLastStatus());\n+        assertThat(t.getCommit().getLastStatus(), notNullValue());\n     }\n \n     @Test // issue 230\n@@ -27,7 +27,7 @@ public void listFiles() throws Exception {\n         PagedIterable<GHCommit> commits = repo.queryCommits().path(\"pom.xml\").list();\n         for (GHCommit commit : Iterables.limit(commits, 10)) {\n             GHCommit expected = repo.getCommit(commit.getSHA1());\n-            assertEquals(expected.getFiles().size(), commit.getFiles().size());\n+            assertThat(commit.getFiles().size(), equalTo(expected.getFiles().size()));\n         }\n     }\n \n@@ -83,7 +83,7 @@ public void testQueryCommits() throws Exception {\n                 .list()\n                 .toList();\n \n-        assertThat(commits.size(), equalTo(0));\n+        assertThat(commits, is(empty()));\n \n         commits = gitHub.getUser(\"jenkinsci\")\n                 .getRepository(\"jenkins\")\n@@ -129,7 +129,7 @@ public void listPullRequests() throws Exception {\n \n         List<GHPullRequest> listedPrs = commit.listPullRequests().toList();\n \n-        assertEquals(listedPrs.size(), 1);\n+        assertThat(1, equalTo(listedPrs.size()));\n \n         assertThat(\"Pull request \" + prNumber + \" not found by searching from commit.\",\n                 listedPrs.stream().findFirst().filter(it -> it.getNumber() == prNumber).isPresent());\n@@ -144,7 +144,7 @@ public void listPullRequestsOfCommitWith2PullRequests() throws Exception {\n \n         List<GHPullRequest> listedPrs = commit.listPullRequests().toList();\n \n-        assertEquals(listedPrs.size(), 2);\n+        assertThat(2, equalTo(listedPrs.size()));\n \n         listedPrs.stream()\n                 .forEach(pr -> assertThat(\"PR#\" + pr.getNumber() + \" not expected to be matched.\",\n@@ -157,12 +157,12 @@ public void listBranchesWhereHead() throws Exception {\n \n         GHCommit commit = repo.getCommit(\"ab92e13c0fc844fd51a379a48a3ad0b18231215c\");\n \n-        assertThat(\"Commit which was supposed to be HEAD in the \\\"master\\\" branch was not found.\",\n+        assertThat(\"Commit which was supposed to be HEAD in the \\\"main\\\" branch was not found.\",\n                 commit.listBranchesWhereHead()\n                         .toList()\n                         .stream()\n                         .findFirst()\n-                        .filter(it -> it.getName().equals(\"master\"))\n+                        .filter(it -> it.getName().equals(\"main\"))\n                         .isPresent());\n     }\n \n@@ -172,9 +172,9 @@ public void listBranchesWhereHead2Heads() throws Exception {\n \n         GHCommit commit = repo.getCommit(\"ab92e13c0fc844fd51a379a48a3ad0b18231215c\");\n \n-        assertEquals(\"Commit which was supposed to be HEAD in 2 branches was not found as such.\",\n-                2,\n-                commit.listBranchesWhereHead().toList().size());\n+        assertThat(\"Commit which was supposed to be HEAD in 2 branches was not found as such.\",\n+                commit.listBranchesWhereHead().toList().size(),\n+                equalTo(2));\n     }\n \n     @Test\n@@ -193,14 +193,14 @@ public void commitSignatureVerification() throws Exception {\n         PagedIterable<GHCommit> commits = repo.queryCommits().path(\"pom.xml\").list();\n         for (GHCommit commit : Iterables.limit(commits, 10)) {\n             GHCommit expected = repo.getCommit(commit.getSHA1());\n-            assertEquals(expected.getCommitShortInfo().getVerification().isVerified(),\n-                    commit.getCommitShortInfo().getVerification().isVerified());\n-            assertEquals(expected.getCommitShortInfo().getVerification().getReason(),\n-                    commit.getCommitShortInfo().getVerification().getReason());\n-            assertEquals(expected.getCommitShortInfo().getVerification().getSignature(),\n-                    commit.getCommitShortInfo().getVerification().getSignature());\n-            assertEquals(expected.getCommitShortInfo().getVerification().getPayload(),\n-                    commit.getCommitShortInfo().getVerification().getPayload());\n+            assertThat(commit.getCommitShortInfo().getVerification().isVerified(),\n+                    equalTo(expected.getCommitShortInfo().getVerification().isVerified()));\n+            assertThat(commit.getCommitShortInfo().getVerification().getReason(),\n+                    equalTo(expected.getCommitShortInfo().getVerification().getReason()));\n+            assertThat(commit.getCommitShortInfo().getVerification().getSignature(),\n+                    equalTo(expected.getCommitShortInfo().getVerification().getSignature()));\n+            assertThat(commit.getCommitShortInfo().getVerification().getPayload(),\n+                    equalTo(expected.getCommitShortInfo().getVerification().getPayload()));\n         }\n     }\n "
    },
    {
      "sha": "605d1c728590b436f11b37c5ddf0f6f2c7635d68",
      "filename": "src/test/java/org/kohsuke/github/EnumTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/EnumTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/EnumTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/EnumTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -14,8 +14,8 @@\n     @Test\n     public void touchEnums() {\n         assertThat(GHCheckRun.AnnotationLevel.values().length, equalTo(3));\n-        assertThat(GHCheckRun.Conclusion.values().length, equalTo(7));\n-        assertThat(GHCheckRun.Status.values().length, equalTo(3));\n+        assertThat(GHCheckRun.Conclusion.values().length, equalTo(9));\n+        assertThat(GHCheckRun.Status.values().length, equalTo(4));\n \n         assertThat(GHCommentAuthorAssociation.values().length, equalTo(7));\n \n@@ -27,7 +27,7 @@ public void touchEnums() {\n \n         assertThat(GHDirection.values().length, equalTo(2));\n \n-        assertThat(GHEvent.values().length, equalTo(56));\n+        assertThat(GHEvent.values().length, equalTo(60));\n         assertThat(GHEvent.ALL.symbol(), equalTo(\"*\"));\n         assertThat(GHEvent.PULL_REQUEST.symbol(), equalTo(GHEvent.PULL_REQUEST.toString().toLowerCase()));\n \n@@ -70,6 +70,7 @@ public void touchEnums() {\n \n         assertThat(GHRepository.CollaboratorAffiliation.values().length, equalTo(3));\n         assertThat(GHRepository.ForkSort.values().length, equalTo(3));\n+        assertThat(GHRepository.Visibility.values().length, equalTo(4));\n \n         assertThat(GHRepositorySearchBuilder.Sort.values().length, equalTo(3));\n "
    },
    {
      "sha": "4fa13f42d91108851a40c02211873e293e1d6700",
      "filename": "src/test/java/org/kohsuke/github/GHAppInstallationTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHAppInstallationTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHAppInstallationTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHAppInstallationTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -5,6 +5,8 @@\n import java.io.IOException;\n import java.util.List;\n \n+import static org.hamcrest.Matchers.*;\n+\n public class GHAppInstallationTest extends AbstractGHAppInstallationTest {\n \n     @Test\n@@ -13,16 +15,16 @@ public void testListRepositoriesTwoRepos() throws IOException {\n \n         List<GHRepository> repositories = appInstallation.listRepositories().toList();\n \n-        assertEquals(2, repositories.size());\n-        assertTrue(repositories.stream().anyMatch(it -> it.getName().equals(\"empty\")));\n-        assertTrue(repositories.stream().anyMatch(it -> it.getName().equals(\"test-readme\")));\n+        assertThat(repositories.size(), equalTo(2));\n+        assertThat(repositories.stream().map(GHRepository::getName).toArray(),\n+                arrayContainingInAnyOrder(\"empty\", \"test-readme\"));\n     }\n \n     @Test\n     public void testListRepositoriesNoPermissions() throws IOException {\n         GHAppInstallation appInstallation = getAppInstallationWithTokenApp2();\n \n-        assertTrue(\"App does not have permissions and should have 0 repositories\",\n+        assertThat(\"App does not have permissions and should have 0 repositories\",\n                 appInstallation.listRepositories().toList().isEmpty());\n     }\n "
    },
    {
      "sha": "e8b5ef0676be7a3bc22183ae7a588a7413c77f6d",
      "filename": "src/test/java/org/kohsuke/github/GHAppTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHAppTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHAppTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHAppTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -126,7 +126,7 @@ public void createToken() throws IOException {\n         assertThat(installationToken2.getRepositorySelection(), is(GHRepositorySelection.ALL));\n         assertThat(installationToken2.getExpiresAt(), is(GitHubClient.parseDate(\"2019-12-19T12:27:59Z\")));\n \n-        assertNull(installationToken2.getRepositories());;\n+        assertThat(installationToken2.getRepositories(), nullValue());;\n     }\n \n     private void testAppInstallation(GHAppInstallation appInstallation) throws IOException {\n@@ -154,7 +154,7 @@ private void testAppInstallation(GHAppInstallation appInstallation) throws IOExc\n         assertThat(appInstallation.getEvents(), containsInAnyOrder(events.toArray(new GHEvent[0])));\n         assertThat(appInstallation.getCreatedAt(), is(GitHubClient.parseDate(\"2019-07-04T01:19:36.000Z\")));\n         assertThat(appInstallation.getUpdatedAt(), is(GitHubClient.parseDate(\"2019-07-30T22:48:09.000Z\")));\n-        assertNull(appInstallation.getSingleFileName());\n+        assertThat(appInstallation.getSingleFileName(), nullValue());\n     }\n \n }"
    },
    {
      "sha": "6cd115a6bf4b551fa13878e79a9f58a75c24aaf3",
      "filename": "src/test/java/org/kohsuke/github/GHBranchProtectionTest.java",
      "status": "modified",
      "additions": 26,
      "deletions": 25,
      "changes": 51,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHBranchProtectionTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHBranchProtectionTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHBranchProtectionTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -6,10 +6,10 @@\n import org.kohsuke.github.GHBranchProtection.RequiredReviews;\n import org.kohsuke.github.GHBranchProtection.RequiredStatusChecks;\n \n-import static org.hamcrest.CoreMatchers.*;\n+import static org.hamcrest.Matchers.*;\n \n public class GHBranchProtectionTest extends AbstractGitHubWireMockTest {\n-    private static final String BRANCH = \"master\";\n+    private static final String BRANCH = \"main\";\n     private static final String BRANCH_REF = \"heads/\" + BRANCH;\n \n     private GHBranch branch;\n@@ -43,73 +43,74 @@ public void testEnableBranchProtections() throws Exception {\n \n     private void verifyBranchProtection(GHBranchProtection protection) {\n         RequiredStatusChecks statusChecks = protection.getRequiredStatusChecks();\n-        assertNotNull(statusChecks);\n-        assertTrue(statusChecks.isRequiresBranchUpToDate());\n-        assertTrue(statusChecks.getContexts().contains(\"test-status-check\"));\n+        assertThat(statusChecks, notNullValue());\n+        assertThat(statusChecks.isRequiresBranchUpToDate(), is(true));\n+        assertThat(statusChecks.getContexts(), contains(\"test-status-check\"));\n \n         RequiredReviews requiredReviews = protection.getRequiredReviews();\n-        assertNotNull(requiredReviews);\n-        assertTrue(requiredReviews.isDismissStaleReviews());\n-        assertTrue(requiredReviews.isRequireCodeOwnerReviews());\n-        assertEquals(2, requiredReviews.getRequiredReviewers());\n+        assertThat(requiredReviews, notNullValue());\n+        assertThat(requiredReviews.isDismissStaleReviews(), is(true));\n+        assertThat(requiredReviews.isRequireCodeOwnerReviews(), is(true));\n+        assertThat(requiredReviews.getRequiredReviewers(), equalTo(2));\n \n         EnforceAdmins enforceAdmins = protection.getEnforceAdmins();\n-        assertNotNull(enforceAdmins);\n-        assertTrue(enforceAdmins.isEnabled());\n+        assertThat(enforceAdmins, notNullValue());\n+        assertThat(enforceAdmins.isEnabled(), is(true));\n     }\n \n     @Test\n     public void testEnableProtectionOnly() throws Exception {\n         branch.enableProtection().enable();\n-        assertTrue(repo.getBranch(BRANCH).isProtected());\n+        assertThat(repo.getBranch(BRANCH).isProtected(), is(true));\n     }\n \n     @Test\n     public void testDisableProtectionOnly() throws Exception {\n         GHBranchProtection protection = branch.enableProtection().enable();\n-        assertTrue(repo.getBranch(BRANCH).isProtected());\n+        assertThat(repo.getBranch(BRANCH).isProtected(), is(true));\n         branch.disableProtection();\n-        assertFalse(repo.getBranch(BRANCH).isProtected());\n+        assertThat(repo.getBranch(BRANCH).isProtected(), is(false));\n     }\n \n     @Test\n     public void testEnableRequireReviewsOnly() throws Exception {\n         GHBranchProtection protection = branch.enableProtection().requireReviews().enable();\n \n         RequiredReviews requiredReviews = protection.getRequiredReviews();\n-        assertNotNull(protection.getRequiredReviews());\n-        assertFalse(requiredReviews.isDismissStaleReviews());\n-        assertFalse(requiredReviews.isRequireCodeOwnerReviews());\n+        assertThat(protection.getRequiredReviews(), notNullValue());\n+        assertThat(requiredReviews.isDismissStaleReviews(), is(false));\n+        assertThat(requiredReviews.isRequireCodeOwnerReviews(), is(false));\n         assertThat(protection.getRequiredReviews().getRequiredReviewers(), equalTo(1));\n \n         // Get goes through a different code path. Make sure it also gets the correct data.\n         protection = branch.getProtection();\n         requiredReviews = protection.getRequiredReviews();\n \n-        assertNotNull(protection.getRequiredReviews());\n-        assertFalse(requiredReviews.isDismissStaleReviews());\n-        assertFalse(requiredReviews.isRequireCodeOwnerReviews());\n+        assertThat(protection.getRequiredReviews(), notNullValue());\n+        assertThat(requiredReviews.isDismissStaleReviews(), is(false));\n+        assertThat(requiredReviews.isRequireCodeOwnerReviews(), is(false));\n         assertThat(protection.getRequiredReviews().getRequiredReviewers(), equalTo(1));\n     }\n \n     @Test\n     public void testSignedCommits() throws Exception {\n         GHBranchProtection protection = branch.enableProtection().enable();\n \n-        assertFalse(protection.getRequiredSignatures());\n+        assertThat(protection.getRequiredSignatures(), is(false));\n \n         protection.enabledSignedCommits();\n-        assertTrue(protection.getRequiredSignatures());\n+        assertThat(protection.getRequiredSignatures(), is(true));\n \n         protection.disableSignedCommits();\n-        assertFalse(protection.getRequiredSignatures());\n+        assertThat(protection.getRequiredSignatures(), is(false));\n     }\n \n     @Test\n     public void testGetProtection() throws Exception {\n         GHBranchProtection protection = branch.enableProtection().enable();\n         GHBranchProtection protectionTest = repo.getBranch(BRANCH).getProtection();\n-        assertTrue(protectionTest instanceof GHBranchProtection);\n-        assertTrue(repo.getBranch(BRANCH).isProtected());\n+        Boolean condition = protectionTest instanceof GHBranchProtection;\n+        assertThat(protectionTest, instanceOf(GHBranchProtection.class));\n+        assertThat(repo.getBranch(BRANCH).isProtected(), is(true));\n     }\n }"
    },
    {
      "sha": "67455a94e79ade48a4e9c0516a702b1fa646b1e3",
      "filename": "src/test/java/org/kohsuke/github/GHBranchTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHBranchTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHBranchTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHBranchTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -16,9 +16,9 @@\n     public void testMergeBranch() throws Exception {\n         repository = getTempRepository();\n \n-        String masterHead = repository.getRef(\"heads/master\").getObject().getSha();\n-        createRefAndPostContent(BRANCH_1, masterHead);\n-        createRefAndPostContent(BRANCH_2, masterHead);\n+        String mainHead = repository.getRef(\"heads/main\").getObject().getSha();\n+        createRefAndPostContent(BRANCH_1, mainHead);\n+        createRefAndPostContent(BRANCH_2, mainHead);\n \n         GHBranch otherBranch = repository.getBranch(BRANCH_2);\n         String commitMessage = \"merging \" + BRANCH_2;\n@@ -28,13 +28,13 @@ public void testMergeBranch() throws Exception {\n \n         // Merging commit sha should work\n         commitMessage = \"merging from \" + mergeCommit.getSHA1();\n-        GHBranch master = repository.getBranch(\"master\");\n-        mergeCommit = master.merge(mergeCommit.getSHA1(), commitMessage);\n+        GHBranch main = repository.getBranch(\"main\");\n+        mergeCommit = main.merge(mergeCommit.getSHA1(), commitMessage);\n \n         assertThat(mergeCommit, notNullValue());\n         assertThat(mergeCommit.getCommitShortInfo().getMessage(), equalTo(commitMessage));\n \n-        mergeCommit = master.merge(mergeCommit.getSHA1(), commitMessage);\n+        mergeCommit = main.merge(mergeCommit.getSHA1(), commitMessage);\n         // Should be null since all changes already merged\n         assertThat(mergeCommit, nullValue());\n     }"
    },
    {
      "sha": "b2416e2c4bdd1cf65671b6d8f2f037f9d2ac1a51",
      "filename": "src/test/java/org/kohsuke/github/GHCheckRunBuilderTest.java",
      "status": "modified",
      "additions": 22,
      "deletions": 22,
      "changes": 44,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHCheckRunBuilderTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHCheckRunBuilderTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHCheckRunBuilderTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -25,12 +25,12 @@\n package org.kohsuke.github;\n \n import org.junit.Test;\n+import org.kohsuke.github.GHCheckRun.Status;\n \n import java.io.IOException;\n import java.util.Date;\n \n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.*;\n \n @SuppressWarnings(\"deprecation\") // preview\n public class GHCheckRunBuilderTest extends AbstractGHAppInstallationTest {\n@@ -59,10 +59,10 @@ public void createCheckRun() throws Exception {\n                                         .withCaption(\"Princess Unikitty\")))\n                 .add(new GHCheckRunBuilder.Action(\"Help\", \"what I need help with\", \"doit\"))\n                 .create();\n-        assertEquals(\"completed\", checkRun.getStatus());\n-        assertEquals(1, checkRun.getOutput().getAnnotationsCount());\n-        assertEquals(1424883286, checkRun.getId());\n-        assertEquals(\"Hello Text!\", checkRun.getOutput().getText());\n+        assertThat(checkRun.getStatus(), equalTo(Status.COMPLETED));\n+        assertThat(checkRun.getOutput().getAnnotationsCount(), equalTo(1));\n+        assertThat(checkRun.getId(), equalTo(1424883286L));\n+        assertThat(checkRun.getOutput().getText(), equalTo(\"Hello Text!\"));\n     }\n \n     @Test\n@@ -79,12 +79,12 @@ public void createCheckRunManyAnnotations() throws Exception {\n                 .withConclusion(GHCheckRun.Conclusion.SUCCESS)\n                 .add(output)\n                 .create();\n-        assertEquals(\"completed\", checkRun.getStatus());\n-        assertEquals(\"Big Run\", checkRun.getOutput().getTitle());\n-        assertEquals(\"Lots of stuff here »\", checkRun.getOutput().getSummary());\n-        assertEquals(101, checkRun.getOutput().getAnnotationsCount());\n-        assertEquals(\"Hello Text!\", checkRun.getOutput().getText());\n-        assertEquals(1424883599, checkRun.getId());\n+        assertThat(checkRun.getStatus(), equalTo(Status.COMPLETED));\n+        assertThat(checkRun.getOutput().getTitle(), equalTo(\"Big Run\"));\n+        assertThat(checkRun.getOutput().getSummary(), equalTo(\"Lots of stuff here »\"));\n+        assertThat(checkRun.getOutput().getAnnotationsCount(), equalTo(101));\n+        assertThat(checkRun.getOutput().getText(), equalTo(\"Hello Text!\"));\n+        assertThat(checkRun.getId(), equalTo(1424883599L));\n     }\n \n     @Test\n@@ -94,9 +94,9 @@ public void createCheckRunNoAnnotations() throws Exception {\n                 .withConclusion(GHCheckRun.Conclusion.NEUTRAL)\n                 .add(new GHCheckRunBuilder.Output(\"Quick note\", \"nothing more to see here\"))\n                 .create();\n-        assertEquals(\"completed\", checkRun.getStatus());\n-        assertEquals(0, checkRun.getOutput().getAnnotationsCount());\n-        assertEquals(1424883957, checkRun.getId());\n+        assertThat(checkRun.getStatus(), equalTo(Status.COMPLETED));\n+        assertThat(checkRun.getOutput().getAnnotationsCount(), equalTo(0));\n+        assertThat(checkRun.getId(), equalTo(1424883957L));\n     }\n \n     @Test\n@@ -105,9 +105,9 @@ public void createPendingCheckRun() throws Exception {\n                 .createCheckRun(\"outstanding\", \"89a9ae301e35e667756034fdc933b1fc94f63fc1\")\n                 .withStatus(GHCheckRun.Status.IN_PROGRESS)\n                 .create();\n-        assertEquals(\"in_progress\", checkRun.getStatus());\n-        assertNull(checkRun.getConclusion());\n-        assertEquals(1424883451, checkRun.getId());\n+        assertThat(checkRun.getStatus(), equalTo(Status.IN_PROGRESS));\n+        assertThat(checkRun.getConclusion(), nullValue());\n+        assertThat(checkRun.getId(), equalTo(1424883451L));\n     }\n \n     @Test\n@@ -119,7 +119,7 @@ public void createCheckRunErrMissingConclusion() throws Exception {\n                     .create();\n             fail(\"should have been rejected\");\n         } catch (HttpException x) {\n-            assertEquals(422, x.getResponseCode());\n+            assertThat(x.getResponseCode(), equalTo(422));\n             assertThat(x.getMessage(), containsString(\"\\\\\\\"conclusion\\\\\\\" wasn't supplied\"));\n             assertThat(x.getUrl(), containsString(\"/repos/hub4j-test-org/test-checks/check-runs\"));\n             assertThat(x.getResponseMessage(), equalTo(\"422 Unprocessable Entity\"));\n@@ -143,9 +143,9 @@ public void updateCheckRun() throws Exception {\n                 .withConclusion(GHCheckRun.Conclusion.SUCCESS)\n                 .withCompletedAt(new Date(999_999_999))\n                 .create();\n-        assertEquals(updated.getStartedAt(), new Date(999_999_000));\n-        assertEquals(updated.getName(), \"foo\");\n-        assertEquals(1, checkRun.getOutput().getAnnotationsCount());\n+        assertThat(new Date(999_999_000), equalTo(updated.getStartedAt()));\n+        assertThat(\"foo\", equalTo(updated.getName()));\n+        assertThat(checkRun.getOutput().getAnnotationsCount(), equalTo(1));\n     }\n \n }"
    },
    {
      "sha": "5dbb4c8b6967f68572bde02c1748f7372e23f1b5",
      "filename": "src/test/java/org/kohsuke/github/GHContentIntegrationTest.java",
      "status": "modified",
      "additions": 21,
      "deletions": 22,
      "changes": 43,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHContentIntegrationTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHContentIntegrationTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHContentIntegrationTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -11,8 +11,7 @@\n import java.nio.charset.StandardCharsets;\n import java.util.List;\n \n-import static org.hamcrest.CoreMatchers.*;\n-import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.*;\n \n /**\n  * Integration test for {@link GHContent}.\n@@ -29,7 +28,7 @@\n     @After\n     public void cleanup() throws Exception {\n         if (mockGitHub.isUseProxy()) {\n-            repo = getGitHubBeforeAfter().getRepository(\"hub4j-test-org/GHContentIntegrationTest\");\n+            repo = getNonRecordingGitHub().getRepository(\"hub4j-test-org/GHContentIntegrationTest\");\n             try {\n                 GHContent content = repo.getFileContent(createdFilename);\n                 if (content != null) {\n@@ -58,31 +57,31 @@ public void testGetFileContent() throws Exception {\n         repo = gitHub.getRepository(\"hub4j-test-org/GHContentIntegrationTest\");\n         GHContent content = repo.getFileContent(\"ghcontent-ro/a-file-with-content\");\n \n-        assertTrue(content.isFile());\n-        assertEquals(\"thanks for reading me\\n\", content.getContent());\n+        assertThat(content.isFile(), is(true));\n+        assertThat(content.getContent(), equalTo(\"thanks for reading me\\n\"));\n     }\n \n     @Test\n     public void testGetEmptyFileContent() throws Exception {\n         GHContent content = repo.getFileContent(\"ghcontent-ro/an-empty-file\");\n \n-        assertTrue(content.isFile());\n-        assertEquals(\"\", content.getContent());\n+        assertThat(content.isFile(), is(true));\n+        assertThat(content.getContent(), is(emptyString()));\n     }\n \n     @Test\n     public void testGetDirectoryContent() throws Exception {\n         List<GHContent> entries = repo.getDirectoryContent(\"ghcontent-ro/a-dir-with-3-entries\");\n \n-        assertTrue(entries.size() == 3);\n+        assertThat(entries.size(), equalTo(3));\n     }\n \n     @Test\n     public void testGetDirectoryContentTrailingSlash() throws Exception {\n-        // Used to truncate the ?ref=master, see gh-224 https://github.com/kohsuke/github-api/pull/224\n-        List<GHContent> entries = repo.getDirectoryContent(\"ghcontent-ro/a-dir-with-3-entries/\", \"master\");\n+        // Used to truncate the ?ref=main, see gh-224 https://github.com/kohsuke/github-api/pull/224\n+        List<GHContent> entries = repo.getDirectoryContent(\"ghcontent-ro/a-dir-with-3-entries/\", \"main\");\n \n-        assertTrue(entries.get(0).getUrl().endsWith(\"?ref=master\"));\n+        assertThat(entries.get(0).getUrl(), endsWith(\"?ref=main\"));\n     }\n \n     @Test\n@@ -92,11 +91,11 @@ public void testCRUDContent() throws Exception {\n                 createdFilename);\n         GHContent createdContent = created.getContent();\n \n-        assertNotNull(created.getCommit());\n-        assertNotNull(created.getContent());\n-        assertNotNull(createdContent.getContent());\n+        assertThat(created.getCommit(), notNullValue());\n+        assertThat(created.getContent(), notNullValue());\n+        assertThat(createdContent.getContent(), notNullValue());\n         assertThat(createdContent.getPath(), equalTo(createdFilename));\n-        assertEquals(\"this is an awesome file I created\\n\", createdContent.getContent());\n+        assertThat(createdContent.getContent(), equalTo(\"this is an awesome file I created\\n\"));\n \n         GHContent content = repo.getFileContent(createdFilename);\n         assertThat(content, is(notNullValue()));\n@@ -116,17 +115,17 @@ public void testCRUDContent() throws Exception {\n                 \"Updated file for integration tests.\");\n         GHContent updatedContent = updatedContentResponse.getContent();\n \n-        assertNotNull(updatedContentResponse.getCommit());\n-        assertNotNull(updatedContentResponse.getContent());\n+        assertThat(updatedContentResponse.getCommit(), notNullValue());\n+        assertThat(updatedContentResponse.getContent(), notNullValue());\n         // due to what appears to be a cache propagation delay, this test is too flaky\n-        assertEquals(\"this is some new content\",\n-                new BufferedReader(new InputStreamReader(updatedContent.read())).readLine());\n-        assertEquals(\"this is some new content\\n\", updatedContent.getContent());\n+        assertThat(new BufferedReader(new InputStreamReader(updatedContent.read())).readLine(),\n+                equalTo(\"this is some new content\"));\n+        assertThat(updatedContent.getContent(), equalTo(\"this is some new content\\n\"));\n \n         GHContentUpdateResponse deleteResponse = updatedContent.delete(\"Enough of this foolishness!\");\n \n-        assertNotNull(deleteResponse.getCommit());\n-        assertNull(deleteResponse.getContent());\n+        assertThat(deleteResponse.getCommit(), notNullValue());\n+        assertThat(deleteResponse.getContent(), nullValue());\n \n         try {\n             repo.getFileContent(createdFilename);"
    },
    {
      "sha": "aa41bea2d3720fbfdc8e6a6ce5414792851c964b",
      "filename": "src/test/java/org/kohsuke/github/GHDeploymentTest.java",
      "status": "modified",
      "additions": 27,
      "deletions": 25,
      "changes": 52,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHDeploymentTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHDeploymentTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHDeploymentTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -6,6 +6,8 @@\n import java.util.Arrays;\n import java.util.Map;\n \n+import static org.hamcrest.Matchers.*;\n+\n /**\n  * @author Martin van Zijl\n  */\n@@ -15,38 +17,38 @@\n     public void testGetDeploymentByIdStringPayload() throws IOException {\n         final GHRepository repo = getRepository();\n         final GHDeployment deployment = repo.getDeployment(178653229);\n-        assertNotNull(deployment);\n-        assertEquals(178653229, deployment.getId());\n-        assertEquals(\"production\", deployment.getEnvironment());\n-        assertEquals(\"custom\", deployment.getPayload());\n-        assertEquals(\"custom\", deployment.getPayloadObject());\n-        assertEquals(\"master\", deployment.getRef());\n-        assertEquals(\"3a09d2de4a9a1322a0ba2c3e2f54a919ca8fe353\", deployment.getSha());\n-        assertEquals(\"deploy\", deployment.getTask());\n-        assertEquals(\"production\", deployment.getOriginalEnvironment());\n-        assertEquals(false, deployment.isProductionEnvironment());\n-        assertEquals(true, deployment.isTransientEnvironment());\n+        assertThat(deployment, notNullValue());\n+        assertThat(deployment.getId(), equalTo(178653229L));\n+        assertThat(deployment.getEnvironment(), equalTo(\"production\"));\n+        assertThat(deployment.getPayload(), equalTo(\"custom\"));\n+        assertThat(deployment.getPayloadObject(), equalTo(\"custom\"));\n+        assertThat(deployment.getRef(), equalTo(\"main\"));\n+        assertThat(deployment.getSha(), equalTo(\"3a09d2de4a9a1322a0ba2c3e2f54a919ca8fe353\"));\n+        assertThat(deployment.getTask(), equalTo(\"deploy\"));\n+        assertThat(deployment.getOriginalEnvironment(), equalTo(\"production\"));\n+        assertThat(deployment.isProductionEnvironment(), equalTo(false));\n+        assertThat(deployment.isTransientEnvironment(), equalTo(true));\n     }\n \n     @Test\n     public void testGetDeploymentByIdObjectPayload() throws IOException {\n         final GHRepository repo = getRepository();\n         final GHDeployment deployment = repo.getDeployment(178653229);\n-        assertNotNull(deployment);\n-        assertEquals(178653229, deployment.getId());\n-        assertEquals(\"production\", deployment.getEnvironment());\n-        assertEquals(\"master\", deployment.getRef());\n-        assertEquals(\"3a09d2de4a9a1322a0ba2c3e2f54a919ca8fe353\", deployment.getSha());\n-        assertEquals(\"deploy\", deployment.getTask());\n+        assertThat(deployment, notNullValue());\n+        assertThat(deployment.getId(), equalTo(178653229L));\n+        assertThat(deployment.getEnvironment(), equalTo(\"production\"));\n+        assertThat(deployment.getRef(), equalTo(\"main\"));\n+        assertThat(deployment.getSha(), equalTo(\"3a09d2de4a9a1322a0ba2c3e2f54a919ca8fe353\"));\n+        assertThat(deployment.getTask(), equalTo(\"deploy\"));\n         final Map<String, Object> payload = deployment.getPayloadMap();\n-        assertEquals(4, payload.size());\n-        assertEquals(1, payload.get(\"custom1\"));\n-        assertEquals(\"two\", payload.get(\"custom2\"));\n-        assertEquals(Arrays.asList(\"3\", 3, \"three\"), payload.get(\"custom3\"));\n-        assertNull(payload.get(\"custom4\"));\n-        assertEquals(\"production\", deployment.getOriginalEnvironment());\n-        assertEquals(false, deployment.isProductionEnvironment());\n-        assertEquals(true, deployment.isTransientEnvironment());\n+        assertThat(payload.size(), equalTo(4));\n+        assertThat(payload.get(\"custom1\"), equalTo(1));\n+        assertThat(payload.get(\"custom2\"), equalTo(\"two\"));\n+        assertThat(payload.get(\"custom3\"), equalTo(Arrays.asList(\"3\", 3, \"three\")));\n+        assertThat(payload.get(\"custom4\"), nullValue());\n+        assertThat(deployment.getOriginalEnvironment(), equalTo(\"production\"));\n+        assertThat(deployment.isProductionEnvironment(), equalTo(false));\n+        assertThat(deployment.isTransientEnvironment(), equalTo(true));\n     }\n \n     protected GHRepository getRepository() throws IOException {"
    },
    {
      "sha": "af9ff77d61c13c300fbe67adae8af7a28996b075",
      "filename": "src/test/java/org/kohsuke/github/GHDiscussionTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHDiscussionTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHDiscussionTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHDiscussionTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -26,7 +26,7 @@ public void setUp() throws Exception {\n     public void cleanupDiscussions() throws Exception {\n         // only need to clean up if we're pointing to the live site\n         if (mockGitHub.isUseProxy()) {\n-            for (GHDiscussion discussion : getGitHubBeforeAfter().getOrganization(GITHUB_API_TEST_ORG)\n+            for (GHDiscussion discussion : getNonRecordingGitHub().getOrganization(GITHUB_API_TEST_ORG)\n                     .getTeamBySlug(TEAM_SLUG)\n                     .listDiscussions()) {\n                 discussion.delete();"
    },
    {
      "sha": "f3322560d3f2fbc8d2cb9bc6043dfb945636e34f",
      "filename": "src/test/java/org/kohsuke/github/GHEventPayloadTest.java",
      "status": "modified",
      "additions": 220,
      "deletions": 19,
      "changes": 239,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHEventPayloadTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHEventPayloadTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHEventPayloadTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -2,14 +2,25 @@\n \n import org.junit.Rule;\n import org.junit.Test;\n+import org.kohsuke.github.GHCheckRun.Conclusion;\n+import org.kohsuke.github.GHCheckRun.Status;\n \n import java.io.IOException;\n import java.text.SimpleDateFormat;\n import java.util.Collections;\n+import java.util.List;\n import java.util.TimeZone;\n \n-import static java.lang.Boolean.TRUE;\n-import static org.hamcrest.Matchers.*;\n+import static org.hamcrest.Matchers.aMapWithSize;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasToString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.hamcrest.Matchers.startsWith;\n \n public class GHEventPayloadTest extends AbstractGitHubWireMockTest {\n \n@@ -38,7 +49,7 @@ public void create() throws Exception {\n                 .parseEventPayload(payload.asReader(), GHEventPayload.Create.class);\n         assertThat(event.getRef(), is(\"0.0.1\"));\n         assertThat(event.getRefType(), is(\"tag\"));\n-        assertThat(event.getMasterBranch(), is(\"master\"));\n+        assertThat(event.getMasterBranch(), is(\"main\"));\n         assertThat(event.getDescription(), is(\"\"));\n         assertThat(event.getRepository().getName(), is(\"public-repo\"));\n         assertThat(event.getRepository().getOwner().getLogin(), is(\"baxterthehacker\"));\n@@ -141,6 +152,45 @@ public void issues() throws Exception {\n         assertThat(event.getSender().getLogin(), is(\"baxterthehacker\"));\n     }\n \n+    @Test\n+    public void issue_labeled() throws Exception {\n+        GHEventPayload.Issue event = GitHub.offline().parseEventPayload(payload.asReader(), GHEventPayload.Issue.class);\n+        assertThat(event.getAction(), is(\"labeled\"));\n+        assertThat(event.getIssue().getNumber(), is(42));\n+        assertThat(event.getIssue().getTitle(), is(\"Test GHEventPayload.Issue label/unlabel\"));\n+        assertThat(event.getIssue().getLabels().size(), is(1));\n+        assertThat(event.getIssue().getLabels().iterator().next().getName(), is(\"enhancement\"));\n+        assertThat(event.getLabel().getName(), is(\"enhancement\"));\n+    }\n+\n+    @Test\n+    public void issue_unlabeled() throws Exception {\n+        GHEventPayload.Issue event = GitHub.offline().parseEventPayload(payload.asReader(), GHEventPayload.Issue.class);\n+        assertThat(event.getAction(), is(\"unlabeled\"));\n+        assertThat(event.getIssue().getNumber(), is(42));\n+        assertThat(event.getIssue().getTitle(), is(\"Test GHEventPayload.Issue label/unlabel\"));\n+        assertThat(event.getIssue().getLabels().size(), is(0));\n+        assertThat(event.getLabel().getName(), is(\"enhancement\"));\n+    }\n+\n+    @Test\n+    public void issue_title_edited() throws Exception {\n+        GHEventPayload.Issue event = GitHub.offline().parseEventPayload(payload.asReader(), GHEventPayload.Issue.class);\n+        assertThat(event.getAction(), is(\"edited\"));\n+        assertThat(event.getIssue().getNumber(), is(43));\n+        assertThat(event.getIssue().getTitle(), is(\"Test GHEventPayload.Issue changes [updated]\"));\n+        assertThat(event.getChanges().getTitle().getFrom(), is(\"Test GHEventPayload.Issue changes\"));\n+    }\n+\n+    @Test\n+    public void issue_body_edited() throws Exception {\n+        GHEventPayload.Issue event = GitHub.offline().parseEventPayload(payload.asReader(), GHEventPayload.Issue.class);\n+        assertThat(event.getAction(), is(\"edited\"));\n+        assertThat(event.getIssue().getNumber(), is(43));\n+        assertThat(event.getIssue().getBody(), is(\"Description [updated].\"));\n+        assertThat(event.getChanges().getBody().getFrom(), is(\"Description.\"));\n+    }\n+\n     // TODO implement support classes and write test\n     // @Test\n     // public void label() throws Exception {}\n@@ -190,15 +240,15 @@ public void pull_request() throws Exception {\n         assertThat(event.getPullRequest().getNumber(), is(1));\n         assertThat(event.getPullRequest().getTitle(), is(\"Update the README with new information\"));\n         assertThat(event.getPullRequest().getBody(),\n-                is(\"This is a pretty simple change that we need to pull into \" + \"master.\"));\n+                is(\"This is a pretty simple change that we need to pull into \" + \"main.\"));\n         assertThat(event.getPullRequest().getUser().getLogin(), is(\"baxterthehacker\"));\n         assertThat(event.getPullRequest().getHead().getUser().getLogin(), is(\"baxterthehacker\"));\n         assertThat(event.getPullRequest().getHead().getRef(), is(\"changes\"));\n         assertThat(event.getPullRequest().getHead().getLabel(), is(\"baxterthehacker:changes\"));\n         assertThat(event.getPullRequest().getHead().getSha(), is(\"0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c\"));\n         assertThat(event.getPullRequest().getBase().getUser().getLogin(), is(\"baxterthehacker\"));\n-        assertThat(event.getPullRequest().getBase().getRef(), is(\"master\"));\n-        assertThat(event.getPullRequest().getBase().getLabel(), is(\"baxterthehacker:master\"));\n+        assertThat(event.getPullRequest().getBase().getRef(), is(\"main\"));\n+        assertThat(event.getPullRequest().getBase().getLabel(), is(\"baxterthehacker:main\"));\n         assertThat(event.getPullRequest().getBase().getSha(), is(\"9049f1265b7d61be4a8904a9a27120d2064dab3b\"));\n         assertThat(event.getPullRequest().isMerged(), is(false));\n         assertThat(event.getPullRequest().getMergeable(), nullValue());\n@@ -263,7 +313,7 @@ public void pull_request_labeled() throws Exception {\n         assertThat(event.getPullRequest().getBase().getLabel(), is(\"trilogy-group:3.10\"));\n         assertThat(event.getPullRequest().getBase().getSha(), is(\"7a735f17d686c6a1fc7df5b9d395e5863868f364\"));\n         assertThat(event.getPullRequest().isMerged(), is(false));\n-        assertThat(event.getPullRequest().getMergeable(), is(TRUE));\n+        assertThat(event.getPullRequest().getMergeable(), is(true));\n         assertThat(event.getPullRequest().getMergeableState(), is(\"draft\"));\n         assertThat(event.getPullRequest().getMergedBy(), nullValue());\n         assertThat(event.getPullRequest().getCommentsCount(), is(1));\n@@ -304,8 +354,8 @@ public void pull_request_review() throws Exception {\n         assertThat(event.getPullRequest().getHead().getLabel(), is(\"skalnik:patch-2\"));\n         assertThat(event.getPullRequest().getHead().getSha(), is(\"b7a1f9c27caa4e03c14a88feb56e2d4f7500aa63\"));\n         assertThat(event.getPullRequest().getBase().getUser().getLogin(), is(\"baxterthehacker\"));\n-        assertThat(event.getPullRequest().getBase().getRef(), is(\"master\"));\n-        assertThat(event.getPullRequest().getBase().getLabel(), is(\"baxterthehacker:master\"));\n+        assertThat(event.getPullRequest().getBase().getRef(), is(\"main\"));\n+        assertThat(event.getPullRequest().getBase().getLabel(), is(\"baxterthehacker:main\"));\n         assertThat(event.getPullRequest().getBase().getSha(), is(\"9049f1265b7d61be4a8904a9a27120d2064dab3b\"));\n \n         assertThat(event.getRepository().getName(), is(\"public-repo\"));\n@@ -325,15 +375,15 @@ public void pull_request_review_comment() throws Exception {\n         assertThat(event.getPullRequest().getNumber(), is(1));\n         assertThat(event.getPullRequest().getTitle(), is(\"Update the README with new information\"));\n         assertThat(event.getPullRequest().getBody(),\n-                is(\"This is a pretty simple change that we need to pull into master.\"));\n+                is(\"This is a pretty simple change that we need to pull into main.\"));\n         assertThat(event.getPullRequest().getUser().getLogin(), is(\"baxterthehacker\"));\n         assertThat(event.getPullRequest().getHead().getUser().getLogin(), is(\"baxterthehacker\"));\n         assertThat(event.getPullRequest().getHead().getRef(), is(\"changes\"));\n         assertThat(event.getPullRequest().getHead().getLabel(), is(\"baxterthehacker:changes\"));\n         assertThat(event.getPullRequest().getHead().getSha(), is(\"0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c\"));\n         assertThat(event.getPullRequest().getBase().getUser().getLogin(), is(\"baxterthehacker\"));\n-        assertThat(event.getPullRequest().getBase().getRef(), is(\"master\"));\n-        assertThat(event.getPullRequest().getBase().getLabel(), is(\"baxterthehacker:master\"));\n+        assertThat(event.getPullRequest().getBase().getRef(), is(\"main\"));\n+        assertThat(event.getPullRequest().getBase().getLabel(), is(\"baxterthehacker:main\"));\n         assertThat(event.getPullRequest().getBase().getSha(), is(\"9049f1265b7d61be4a8904a9a27120d2064dab3b\"));\n \n         assertThat(event.getRepository().getName(), is(\"public-repo\"));\n@@ -426,8 +476,8 @@ public void pushToFork() throws Exception {\n         assertThat(event.getRepository().getHttpTransportUrl(), is(\"https://github.com/hub4j-test-org/github-api.git\"));\n \n         // ensure that root has been bound after populate\n-        event.getRepository().getSource().getRef(\"heads/master\");\n-        event.getRepository().getParent().getRef(\"heads/master\");\n+        event.getRepository().getSource().getRef(\"heads/main\");\n+        event.getRepository().getParent().getRef(\"heads/main\");\n \n         // Source\n         event = gitHub.parseEventPayload(payload.asReader(mockGitHub::mapToMockGitHub), GHEventPayload.Push.class);\n@@ -474,7 +524,7 @@ public void status() throws Exception {\n         assertThat(event.getState(), is(GHCommitState.SUCCESS));\n         assertThat(event.getCommit().getSHA1(), is(\"9049f1265b7d61be4a8904a9a27120d2064dab3b\"));\n         assertThat(event.getRepository().getOwner().getLogin(), is(\"baxterthehacker\"));\n-        assertNull(event.getTargetUrl());\n+        assertThat(event.getTargetUrl(), nullValue());\n     }\n \n     @Test\n@@ -508,7 +558,7 @@ public void checkRunEvent() throws Exception {\n         int expectedRequestCount = mockGitHub.isUseProxy() ? 3 : 2;\n         assertThat(\"pull body should be populated\",\n                 checkRun.getPullRequests().get(0).getBody(),\n-                equalTo(\"This is a pretty simple change that we need to pull into master.\"));\n+                equalTo(\"This is a pretty simple change that we need to pull into main.\"));\n         assertThat(\"multiple getPullRequests() calls are made, the pull is populated only once\",\n                 mockGitHub.getRequestCount(),\n                 equalTo(expectedRequestCount));\n@@ -524,7 +574,7 @@ private GHCheckRun verifyBasicCheckRunEvent(GHEventPayload.CheckRun event) throw\n         GHCheckRun checkRun = event.getCheckRun();\n         assertThat(checkRun.getName(), is(\"Octocoders-linter\"));\n         assertThat(checkRun.getHeadSha(), is(\"ec26c3e57ca3a959ca5aad62de7213c562f8c821\"));\n-        assertThat(checkRun.getStatus(), is(\"completed\"));\n+        assertThat(checkRun.getStatus(), is(Status.COMPLETED));\n         assertThat(checkRun.getNodeId(), is(\"MDg6Q2hlY2tSdW4xMjg2MjAyMjg=\"));\n         assertThat(checkRun.getExternalId(), is(\"\"));\n \n@@ -533,7 +583,7 @@ private GHCheckRun verifyBasicCheckRunEvent(GHEventPayload.CheckRun event) throw\n         assertThat(formatter.format(checkRun.getStartedAt()), is(\"2019-05-15T15:21:12Z\"));\n         assertThat(formatter.format(checkRun.getCompletedAt()), is(\"2019-05-15T20:22:22Z\"));\n \n-        assertThat(checkRun.getConclusion(), is(\"success\"));\n+        assertThat(checkRun.getConclusion(), is(Conclusion.SUCCESS));\n         assertThat(checkRun.getUrl().toString(), endsWith(\"/repos/Codertocat/Hello-World/check-runs/128620228\"));\n         assertThat(checkRun.getHtmlUrl().toString(),\n                 endsWith(\"https://github.com/Codertocat/Hello-World/runs/128620228\"));\n@@ -573,7 +623,7 @@ public void checkSuiteEvent() throws Exception {\n         int expectedRequestCount = mockGitHub.isUseProxy() ? 3 : 2;\n         assertThat(\"pull body should be populated\",\n                 checkSuite.getPullRequests().get(0).getBody(),\n-                equalTo(\"This is a pretty simple change that we need to pull into master.\"));\n+                equalTo(\"This is a pretty simple change that we need to pull into main.\"));\n         assertThat(\"multiple getPullRequests() calls are made, the pull is populated only once\",\n                 mockGitHub.getRequestCount(),\n                 lessThanOrEqualTo(expectedRequestCount));\n@@ -654,4 +704,155 @@ public void InstallationEvent() throws Exception {\n \n         assertThat(event.getSender().getLogin(), is(\"octocat\"));\n     }\n+\n+    @Test\n+    public void workflow_dispatch() throws Exception {\n+        GHEventPayload.WorkflowDispatch workflowDispatchPayload = GitHub.offline()\n+                .parseEventPayload(payload.asReader(), GHEventPayload.WorkflowDispatch.class);\n+\n+        assertThat(workflowDispatchPayload.getRef(), is(\"refs/heads/main\"));\n+        assertThat(workflowDispatchPayload.getAction(), is(nullValue()));\n+        assertThat(workflowDispatchPayload.getWorkflow(), is(\".github/workflows/main.yml\"));\n+        assertThat(workflowDispatchPayload.getInputs(), aMapWithSize(1));\n+        assertThat(workflowDispatchPayload.getInputs().keySet(), contains(\"logLevel\"));\n+        assertThat(workflowDispatchPayload.getInputs().values(), contains(\"warning\"));\n+        assertThat(workflowDispatchPayload.getRepository().getName(), is(\"quarkus-bot-java-playground\"));\n+        assertThat(workflowDispatchPayload.getSender().getLogin(), is(\"gsmet\"));\n+    }\n+\n+    @Test\n+    public void workflow_run() throws Exception {\n+        GHEventPayload.WorkflowRun workflowRunPayload = GitHub.offline()\n+                .parseEventPayload(payload.asReader(), GHEventPayload.WorkflowRun.class);\n+\n+        assertThat(workflowRunPayload.getAction(), is(\"completed\"));\n+        assertThat(workflowRunPayload.getRepository().getFullName(), is(\"gsmet/quarkus-bot-java-playground\"));\n+        assertThat(workflowRunPayload.getSender().getLogin(), is(\"gsmet\"));\n+\n+        GHWorkflow workflow = workflowRunPayload.getWorkflow();\n+        assertThat(workflow.getId(), is(7087581L));\n+        assertThat(workflow.getName(), is(\"CI\"));\n+        assertThat(workflow.getPath(), is(\".github/workflows/main.yml\"));\n+        assertThat(workflow.getState(), is(\"active\"));\n+        assertThat(workflow.getUrl().toString(),\n+                is(\"https://api.github.com/repos/gsmet/quarkus-bot-java-playground/actions/workflows/7087581\"));\n+        assertThat(workflow.getHtmlUrl().toString(),\n+                is(\"https://github.com/gsmet/quarkus-bot-java-playground/blob/main/.github/workflows/main.yml\"));\n+        assertThat(workflow.getBadgeUrl().toString(),\n+                is(\"https://github.com/gsmet/quarkus-bot-java-playground/workflows/CI/badge.svg\"));\n+\n+        GHWorkflowRun workflowRun = workflowRunPayload.getWorkflowRun();\n+        assertThat(workflowRun.getId(), is(680604745L));\n+        assertThat(workflowRun.getName(), is(\"CI\"));\n+        assertThat(workflowRun.getHeadBranch(), is(\"main\"));\n+        assertThat(workflowRun.getHeadSha(), is(\"dbea8d8b6ed2cf764dfd84a215f3f9040b3d4423\"));\n+        assertThat(workflowRun.getRunNumber(), is(6L));\n+        assertThat(workflowRun.getEvent(), is(GHEvent.WORKFLOW_DISPATCH));\n+        assertThat(workflowRun.getStatus(), is(GHWorkflowRun.Status.COMPLETED));\n+        assertThat(workflowRun.getConclusion(), is(GHWorkflowRun.Conclusion.SUCCESS));\n+        assertThat(workflowRun.getWorkflowId(), is(7087581L));\n+        assertThat(workflowRun.getUrl().toString(),\n+                is(\"https://api.github.com/repos/gsmet/quarkus-bot-java-playground/actions/runs/680604745\"));\n+        assertThat(workflowRun.getHtmlUrl().toString(),\n+                is(\"https://github.com/gsmet/quarkus-bot-java-playground/actions/runs/680604745\"));\n+        assertThat(workflowRun.getJobsUrl().toString(),\n+                is(\"https://api.github.com/repos/gsmet/quarkus-bot-java-playground/actions/runs/680604745/jobs\"));\n+        assertThat(workflowRun.getLogsUrl().toString(),\n+                is(\"https://api.github.com/repos/gsmet/quarkus-bot-java-playground/actions/runs/680604745/logs\"));\n+        assertThat(workflowRun.getCheckSuiteUrl().toString(),\n+                is(\"https://api.github.com/repos/gsmet/quarkus-bot-java-playground/check-suites/2327154397\"));\n+        assertThat(workflowRun.getArtifactsUrl().toString(),\n+                is(\"https://api.github.com/repos/gsmet/quarkus-bot-java-playground/actions/runs/680604745/artifacts\"));\n+        assertThat(workflowRun.getCancelUrl().toString(),\n+                is(\"https://api.github.com/repos/gsmet/quarkus-bot-java-playground/actions/runs/680604745/cancel\"));\n+        assertThat(workflowRun.getRerunUrl().toString(),\n+                is(\"https://api.github.com/repos/gsmet/quarkus-bot-java-playground/actions/runs/680604745/rerun\"));\n+        assertThat(workflowRun.getWorkflowUrl().toString(),\n+                is(\"https://api.github.com/repos/gsmet/quarkus-bot-java-playground/actions/workflows/7087581\"));\n+        assertThat(workflowRun.getCreatedAt().getTime(), is(1616524526000L));\n+        assertThat(workflowRun.getUpdatedAt().getTime(), is(1616524543000L));\n+        assertThat(workflowRun.getHeadCommit().getId(), is(\"dbea8d8b6ed2cf764dfd84a215f3f9040b3d4423\"));\n+        assertThat(workflowRun.getHeadCommit().getTreeId(), is(\"b17089e6a2574ec1002566fe980923e62dce3026\"));\n+        assertThat(workflowRun.getHeadCommit().getMessage(), is(\"Update main.yml\"));\n+        assertThat(workflowRun.getHeadCommit().getTimestamp().getTime(), is(1616523390000L));\n+        assertThat(workflowRun.getHeadCommit().getAuthor().getName(), is(\"Guillaume Smet\"));\n+        assertThat(workflowRun.getHeadCommit().getAuthor().getEmail(), is(\"guillaume.smet@gmail.com\"));\n+        assertThat(workflowRun.getHeadCommit().getCommitter().getName(), is(\"GitHub\"));\n+        assertThat(workflowRun.getHeadCommit().getCommitter().getEmail(), is(\"noreply@github.com\"));\n+        assertThat(workflowRun.getHeadRepository().getFullName(), is(\"gsmet/quarkus-bot-java-playground\"));\n+    }\n+\n+    @Test\n+    public void workflow_run_pull_request() throws Exception {\n+        GHEventPayload.WorkflowRun workflowRunPayload = GitHub.offline()\n+                .parseEventPayload(payload.asReader(), GHEventPayload.WorkflowRun.class);\n+\n+        List<GHPullRequest> pullRequests = workflowRunPayload.getWorkflowRun().getPullRequests();\n+        assertThat(pullRequests.size(), is(1));\n+\n+        GHPullRequest pullRequest = pullRequests.get(0);\n+        assertThat(pullRequest.getId(), is(599098265L));\n+    }\n+\n+    @Test\n+    public void workflow_run_other_repository() throws Exception {\n+        GHEventPayload.WorkflowRun workflowRunPayload = GitHub.offline()\n+                .parseEventPayload(payload.asReader(), GHEventPayload.WorkflowRun.class);\n+        GHWorkflowRun workflowRun = workflowRunPayload.getWorkflowRun();\n+\n+        assertThat(workflowRunPayload.getRepository().getFullName(), is(\"gsmet/quarkus-bot-java-playground\"));\n+        assertThat(workflowRun.getHeadRepository().getFullName(),\n+                is(\"gsmet-bot-playground/quarkus-bot-java-playground\"));\n+    }\n+\n+    @Test\n+    public void label_created() throws Exception {\n+        GHEventPayload.Label labelPayload = GitHub.offline()\n+                .parseEventPayload(payload.asReader(), GHEventPayload.Label.class);\n+        GHLabel label = labelPayload.getLabel();\n+\n+        assertThat(labelPayload.getAction(), is(\"created\"));\n+        assertThat(labelPayload.getRepository().getFullName(), is(\"gsmet/quarkus-bot-java-playground\"));\n+        assertThat(label.getId(), is(2901546662L));\n+        assertThat(label.getNodeId(), is(\"MDU6TGFiZWwyOTAxNTQ2NjYy\"));\n+        assertThat(label.getName(), is(\"new-label\"));\n+        assertThat(label.getColor(), is(\"f9d0c4\"));\n+        assertThat(label.isDefault(), is(false));\n+        assertThat(label.getDescription(), is(\"description\"));\n+    }\n+\n+    @Test\n+    public void label_edited() throws Exception {\n+        GHEventPayload.Label labelPayload = GitHub.offline()\n+                .parseEventPayload(payload.asReader(), GHEventPayload.Label.class);\n+        GHLabel label = labelPayload.getLabel();\n+\n+        assertThat(labelPayload.getAction(), is(\"edited\"));\n+        assertThat(labelPayload.getRepository().getFullName(), is(\"gsmet/quarkus-bot-java-playground\"));\n+        assertThat(label.getId(), is(2901546662L));\n+        assertThat(label.getNodeId(), is(\"MDU6TGFiZWwyOTAxNTQ2NjYy\"));\n+        assertThat(label.getName(), is(\"new-label-updated\"));\n+        assertThat(label.getColor(), is(\"4AE686\"));\n+        assertThat(label.isDefault(), is(false));\n+        assertThat(label.getDescription(), is(\"description\"));\n+\n+        assertThat(labelPayload.getChanges().getName().getFrom(), is(\"new-label\"));\n+        assertThat(labelPayload.getChanges().getColor().getFrom(), is(\"f9d0c4\"));\n+    }\n+\n+    @Test\n+    public void label_deleted() throws Exception {\n+        GHEventPayload.Label labelPayload = GitHub.offline()\n+                .parseEventPayload(payload.asReader(), GHEventPayload.Label.class);\n+        GHLabel label = labelPayload.getLabel();\n+\n+        assertThat(labelPayload.getAction(), is(\"deleted\"));\n+        assertThat(labelPayload.getRepository().getFullName(), is(\"gsmet/quarkus-bot-java-playground\"));\n+        assertThat(label.getId(), is(2901546662L));\n+        assertThat(label.getNodeId(), is(\"MDU6TGFiZWwyOTAxNTQ2NjYy\"));\n+        assertThat(label.getName(), is(\"new-label-updated\"));\n+        assertThat(label.getColor(), is(\"4AE686\"));\n+        assertThat(label.isDefault(), is(false));\n+        assertThat(label.getDescription(), is(\"description\"));\n+    }\n }"
    },
    {
      "sha": "aea0fa14b14f8663dbbe34db69776239874f698c",
      "filename": "src/test/java/org/kohsuke/github/GHEventTest.java",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHEventTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHEventTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHEventTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,33 @@\n+package org.kohsuke.github;\n+\n+import org.junit.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class GHEventTest {\n+\n+    /**\n+     * Function from GHEventInfo to transform string event to GHEvent which has been replaced by static mapping due to\n+     * complex parsing logic below\n+     */\n+    private static GHEvent oldTransformationFunction(String t) {\n+        if (t.endsWith(\"Event\")) {\n+            t = t.substring(0, t.length() - 5);\n+        }\n+        for (GHEvent e : GHEvent.values()) {\n+            if (e.name().replace(\"_\", \"\").equalsIgnoreCase(t)) {\n+                return e;\n+            }\n+        }\n+        return GHEvent.UNKNOWN;\n+    }\n+\n+    @Test\n+    public void regressionTest() {\n+        assertThat(GHEventInfo.transformTypeToGHEvent(\"NewlyAddedOrBogusEvent\"), is(GHEvent.UNKNOWN));\n+        for (String eventInfoType : GHEventInfo.mapTypeStringToEvent.keySet()) {\n+            assertThat(GHEventInfo.transformTypeToGHEvent(eventInfoType), is(oldTransformationFunction(eventInfoType)));\n+        }\n+    }\n+}"
    },
    {
      "sha": "be1de5ed4651ee34645e823fcd0100e13ca1e065",
      "filename": "src/test/java/org/kohsuke/github/GHGistTest.java",
      "status": "modified",
      "additions": 14,
      "deletions": 16,
      "changes": 30,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHGistTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHGistTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHGistTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -5,7 +5,6 @@\n import java.io.FileNotFoundException;\n \n import static org.hamcrest.Matchers.*;\n-import static org.hamcrest.core.Is.is;\n \n /**\n  * @author Kohsuke Kawaguchi\n@@ -26,12 +25,12 @@ public void lifecycleTest() throws Exception {\n         assertThat(gist.getDescription(), equalTo(\"Test Gist\"));\n         assertThat(gist.getFiles().size(), equalTo(3));\n \n-        assertNotNull(gist.getUpdatedAt());\n-        assertNotNull(gist.getCommentsUrl());\n-        assertNotNull(gist.getCommitsUrl());\n-        assertNotNull(gist.getGitPullUrl());\n-        assertNotNull(gist.getGitPushUrl());\n-        assertNotNull(gist.getHtmlUrl());\n+        assertThat(gist.getUpdatedAt(), notNullValue());\n+        assertThat(gist.getCommentsUrl(), notNullValue());\n+        assertThat(gist.getCommitsUrl(), notNullValue());\n+        assertThat(gist.getGitPullUrl(), notNullValue());\n+        assertThat(gist.getGitPushUrl(), notNullValue());\n+        assertThat(gist.getHtmlUrl(), notNullValue());\n \n         String id = gist.getGistId();\n \n@@ -98,13 +97,13 @@ public void lifecycleTest() throws Exception {\n     @Test\n     public void starTest() throws Exception {\n         GHGist gist = gitHub.getGist(\"9903708\");\n-        assertEquals(\"rtyler\", gist.getOwner().getLogin());\n+        assertThat(gist.getOwner().getLogin(), equalTo(\"rtyler\"));\n \n         gist.star();\n-        assertTrue(gist.isStarred());\n+        assertThat(gist.isStarred(), is(true));\n \n         gist.unstar();\n-        assertFalse(gist.isStarred());\n+        assertThat(gist.isStarred(), is(false));\n \n         GHGist newGist = gist.fork();\n \n@@ -126,16 +125,15 @@ public void starTest() throws Exception {\n     public void gistFile() throws Exception {\n         GHGist gist = gitHub.getGist(\"9903708\");\n \n-        assertTrue(gist.isPublic());\n+        assertThat(gist.isPublic(), is(true));\n         assertThat(gist.getId(), equalTo(9903708L));\n         assertThat(gist.getGistId(), equalTo(\"9903708\"));\n \n-        assertEquals(1, gist.getFiles().size());\n+        assertThat(gist.getFiles().size(), equalTo(1));\n         GHGistFile f = gist.getFile(\"keybase.md\");\n \n-        assertEquals(\"text/markdown\", f.getType());\n-        assertEquals(\"Markdown\", f.getLanguage());\n-        assertTrue(f.getContent().contains(\"### Keybase proof\"));\n-        assertNotNull(f.getContent());\n+        assertThat(f.getType(), equalTo(\"text/markdown\"));\n+        assertThat(f.getLanguage(), equalTo(\"Markdown\"));\n+        assertThat(f.getContent(), containsString(\"### Keybase proof\"));\n     }\n }"
    },
    {
      "sha": "c217cd034e16f2ea6a9e1c60f858053956ab0eb6",
      "filename": "src/test/java/org/kohsuke/github/GHGistUpdaterTest.java",
      "status": "modified",
      "additions": 11,
      "deletions": 9,
      "changes": 20,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHGistUpdaterTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHGistUpdaterTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHGistUpdaterTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -7,6 +7,8 @@\n import java.io.IOException;\n import java.util.Map;\n \n+import static org.hamcrest.Matchers.*;\n+\n /**\n  * @author Martin van Zijl\n  */\n@@ -46,24 +48,24 @@ public void testGitUpdater() throws Exception {\n                 .updateFile(\"update-me.txt\", \"Content updated by API\")\n                 .update();\n \n-        assertEquals(\"Description updated by API\", updatedGist.getDescription());\n+        assertThat(updatedGist.getDescription(), equalTo(\"Description updated by API\"));\n \n         Map<String, GHGistFile> files = updatedGist.getFiles();\n \n         // Check that the unmodified file stays intact.\n-        assertTrue(files.containsKey(\"unmodified.txt\"));\n-        assertEquals(\"Should be unmodified\", files.get(\"unmodified.txt\").getContent());\n+        assertThat(files.get(\"unmodified.txt\"), is(notNullValue()));\n+        assertThat(files.get(\"unmodified.txt\").getContent(), equalTo(\"Should be unmodified\"));\n \n         // Check that the files are updated as expected.\n         // assertFalse(\"File was not deleted.\", files.containsKey(\"delete-me.txt\"));\n \n-        assertTrue(files.containsKey(\"new-file.txt\"));\n-        assertEquals(\"Added by updater\", files.get(\"new-file.txt\").getContent());\n+        assertThat(files.get(\"new-file.txt\"), is(notNullValue()));\n+        assertThat(files.get(\"new-file.txt\").getContent(), equalTo(\"Added by updater\"));\n \n-        assertFalse(files.containsKey(\"rename-me.py\"));\n-        assertTrue(files.containsKey(\"renamed.py\"));\n-        assertEquals(\"print 'hello'\", files.get(\"renamed.py\").getContent());\n+        assertThat(files.containsKey(\"rename-me.py\"), is(false));\n+        assertThat(files.get(\"renamed.py\"), is(notNullValue()));\n+        assertThat(files.get(\"renamed.py\").getContent(), equalTo(\"print 'hello'\"));\n \n-        assertEquals(\"Content updated by API\", files.get(\"update-me.txt\").getContent());\n+        assertThat(files.get(\"update-me.txt\").getContent(), equalTo(\"Content updated by API\"));\n     }\n }"
    },
    {
      "sha": "5a9e1bbca3fb1db132e3f54ee9c0baa1fd996f35",
      "filename": "src/test/java/org/kohsuke/github/GHIssueEventAttributeTest.java",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHIssueEventAttributeTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHIssueEventAttributeTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHIssueEventAttributeTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -13,13 +13,14 @@\n import static java.util.Arrays.asList;\n import static java.util.stream.Collectors.toList;\n import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.notNullValue;\n \n public class GHIssueEventAttributeTest extends AbstractGitHubWireMockTest {\n \n     private enum Type implements Predicate<GHIssueEvent>, Consumer<GHIssueEvent> {\n-        milestone(e -> assertNotNull(e.getMilestone()), \"milestoned\", \"demilestoned\"),\n-        label(e -> assertNotNull(e.getLabel()), \"labeled\", \"unlabeled\"),\n-        assignment(e -> assertNotNull(e.getAssignee()), \"assigned\", \"unassigned\");\n+        milestone(e -> assertThat(e.getMilestone(), notNullValue()), \"milestoned\", \"demilestoned\"),\n+        label(e -> assertThat(e.getLabel(), notNullValue()), \"labeled\", \"unlabeled\"),\n+        assignment(e -> assertThat(e.getAssignee(), notNullValue()), \"assigned\", \"unassigned\");\n \n         private final Consumer<GHIssueEvent> assertion;\n         private final Set<String> subtypes;"
    },
    {
      "sha": "bcc91e141f931b290293a0a5e7c9902fac25bd25",
      "filename": "src/test/java/org/kohsuke/github/GHIssueEventTest.java",
      "status": "modified",
      "additions": 44,
      "deletions": 8,
      "changes": 52,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHIssueEventTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHIssueEventTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHIssueEventTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -5,6 +5,8 @@\n import java.io.IOException;\n import java.util.List;\n \n+import static org.hamcrest.Matchers.*;\n+\n /**\n  * @author Martin van Zijl\n  */\n@@ -18,20 +20,54 @@ public void testEventsForSingleIssue() throws Exception {\n         GHIssue issue = builder.create();\n \n         // Generate some events.\n-        issue.addLabels(\"test-label\");\n+        issue.setLabels(\"test-label\");\n \n         // Test that the events are present.\n         List<GHIssueEvent> list = issue.listEvents().toList();\n-        assertEquals(1, list.size());\n+        assertThat(list.size(), equalTo(1));\n+\n+        GHIssueEvent event = list.get(0);\n+        assertThat(event.getIssue().getNumber(), equalTo(issue.getNumber()));\n+        assertThat(event.getEvent(), equalTo(\"labeled\"));\n+\n+        // Test that we can get a single event directly.\n+        GHIssueEvent eventFromRepo = repo.getIssueEvent(event.getId());\n+        assertThat(eventFromRepo.getId(), equalTo(event.getId()));\n+        assertThat(eventFromRepo.getCreatedAt(), equalTo(event.getCreatedAt()));\n+\n+        // Close the issue.\n+        issue.close();\n+    }\n+\n+    @Test\n+    public void testEventsForIssueRename() throws Exception {\n+        // Create the issue.\n+        GHRepository repo = getRepository();\n+        GHIssueBuilder builder = repo.createIssue(\"Some invalid issue name\");\n+        GHIssue issue = builder.create();\n+\n+        // Generate rename event.\n+        issue.setTitle(\"Fixed issue name\");\n+\n+        // Test that the event is present.\n+        List<GHIssueEvent> list = issue.listEvents().toList();\n+        assertThat(list.size(), equalTo(1));\n \n         GHIssueEvent event = list.get(0);\n-        assertEquals(issue.getNumber(), event.getIssue().getNumber());\n-        assertEquals(\"labeled\", event.getEvent());\n+        assertThat(event.getIssue().getNumber(), equalTo(issue.getNumber()));\n+        assertThat(event.getEvent(), equalTo(\"renamed\"));\n+        assertThat(event.getRename(), notNullValue());\n+        assertThat(event.getRename().getFrom(), equalTo(\"Some invalid issue name\"));\n+        assertThat(event.getRename().getTo(), equalTo(\"Fixed issue name\"));\n \n         // Test that we can get a single event directly.\n         GHIssueEvent eventFromRepo = repo.getIssueEvent(event.getId());\n-        assertEquals(event.getId(), eventFromRepo.getId());\n-        assertEquals(event.getCreatedAt(), eventFromRepo.getCreatedAt());\n+        assertThat(eventFromRepo.getId(), equalTo(event.getId()));\n+        assertThat(eventFromRepo.getCreatedAt(), equalTo(event.getCreatedAt()));\n+        assertThat(eventFromRepo.getEvent(), equalTo(\"renamed\"));\n+        assertThat(eventFromRepo.getRename(), notNullValue());\n+        assertThat(eventFromRepo.getRename().getFrom(), equalTo(\"Some invalid issue name\"));\n+        assertThat(eventFromRepo.getRename().getTo(), equalTo(\"Fixed issue name\"));\n \n         // Close the issue.\n         issue.close();\n@@ -41,11 +77,11 @@ public void testEventsForSingleIssue() throws Exception {\n     public void testRepositoryEvents() throws Exception {\n         GHRepository repo = getRepository();\n         List<GHIssueEvent> list = repo.listIssueEvents().toList();\n-        assertTrue(list.size() > 0);\n+        assertThat(list, is(not(empty())));\n \n         int i = 0;\n         for (GHIssueEvent event : list) {\n-            assertNotNull(event.getIssue());\n+            assertThat(event.getIssue(), notNullValue());\n             if (i++ > 10)\n                 break;\n         }"
    },
    {
      "sha": "4f689886b7ebb11953fdfc84aa6719d7ac1db672",
      "filename": "src/test/java/org/kohsuke/github/GHLicenseTest.java",
      "status": "modified",
      "additions": 38,
      "deletions": 33,
      "changes": 71,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHLicenseTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHLicenseTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHLicenseTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -46,7 +46,7 @@\n     @Test\n     public void listLicenses() throws IOException {\n         Iterable<GHLicense> licenses = gitHub.listLicenses();\n-        assertTrue(licenses.iterator().hasNext());\n+        assertThat(licenses, is(not(emptyIterable())));\n     }\n \n     /**\n@@ -60,7 +60,7 @@ public void listLicensesCheckIndividualLicense() throws IOException {\n         PagedIterable<GHLicense> licenses = gitHub.listLicenses();\n         for (GHLicense lic : licenses) {\n             if (lic.getKey().equals(\"mit\")) {\n-                assertTrue(lic.getUrl().equals(new URL(mockGitHub.apiServer().baseUrl() + \"/licenses/mit\")));\n+                assertThat(lic.getUrl(), equalTo(new URL(mockGitHub.apiServer().baseUrl() + \"/licenses/mit\")));\n                 return;\n             }\n         }\n@@ -78,14 +78,14 @@ public void listLicensesCheckIndividualLicense() throws IOException {\n     public void getLicense() throws IOException {\n         String key = \"mit\";\n         GHLicense license = gitHub.getLicense(key);\n-        assertNotNull(license);\n+        assertThat(license, notNullValue());\n         assertThat(\"The name is correct\", license.getName(), equalTo(\"MIT License\"));\n         assertThat(\"The HTML URL is correct\",\n                 license.getHtmlUrl(),\n                 equalTo(new URL(\"http://choosealicense.com/licenses/mit/\")));\n         assertThat(license.getBody(), startsWith(\"MIT License\\n\" + \"\\n\" + \"Copyright (c) [year] [fullname]\\n\\n\"));\n-        assertThat(license.getForbidden().size(), equalTo(0));\n-        assertThat(license.getPermitted().size(), equalTo(0));\n+        assertThat(license.getForbidden(), is(empty()));\n+        assertThat(license.getPermitted(), is(empty()));\n         assertThat(license.getImplementation(),\n                 equalTo(\"Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.\"));\n         assertThat(license.getCategory(), nullValue());\n@@ -105,11 +105,12 @@ public void getLicense() throws IOException {\n     public void checkRepositoryLicense() throws IOException {\n         GHRepository repo = gitHub.getRepository(\"hub4j/github-api\");\n         GHLicense license = repo.getLicense();\n-        assertNotNull(\"The license is populated\", license);\n-        assertTrue(\"The key is correct\", license.getKey().equals(\"mit\"));\n-        assertTrue(\"The name is correct\", license.getName().equals(\"MIT License\"));\n-        assertTrue(\"The URL is correct\",\n-                license.getUrl().equals(new URL(mockGitHub.apiServer().baseUrl() + \"/licenses/mit\")));\n+        assertThat(\"The license is populated\", license, notNullValue());\n+        assertThat(\"The key is correct\", license.getKey(), equalTo(\"mit\"));\n+        assertThat(\"The name is correct\", license.getName(), equalTo(\"MIT License\"));\n+        assertThat(\"The URL is correct\",\n+                license.getUrl(),\n+                equalTo(new URL(mockGitHub.apiServer().baseUrl() + \"/licenses/mit\")));\n     }\n \n     /**\n@@ -122,11 +123,12 @@ public void checkRepositoryLicense() throws IOException {\n     public void checkRepositoryLicenseAtom() throws IOException {\n         GHRepository repo = gitHub.getRepository(\"atom/atom\");\n         GHLicense license = repo.getLicense();\n-        assertNotNull(\"The license is populated\", license);\n-        assertTrue(\"The key is correct\", license.getKey().equals(\"mit\"));\n-        assertTrue(\"The name is correct\", license.getName().equals(\"MIT License\"));\n-        assertTrue(\"The URL is correct\",\n-                license.getUrl().equals(new URL(mockGitHub.apiServer().baseUrl() + \"/licenses/mit\")));\n+        assertThat(\"The license is populated\", license, notNullValue());\n+        assertThat(\"The key is correct\", license.getKey(), equalTo(\"mit\"));\n+        assertThat(\"The name is correct\", license.getName(), equalTo(\"MIT License\"));\n+        assertThat(\"The URL is correct\",\n+                license.getUrl(),\n+                equalTo(new URL(mockGitHub.apiServer().baseUrl() + \"/licenses/mit\")));\n     }\n \n     /**\n@@ -139,11 +141,12 @@ public void checkRepositoryLicenseAtom() throws IOException {\n     public void checkRepositoryLicensePomes() throws IOException {\n         GHRepository repo = gitHub.getRepository(\"pomes/pomes\");\n         GHLicense license = repo.getLicense();\n-        assertNotNull(\"The license is populated\", license);\n-        assertTrue(\"The key is correct\", license.getKey().equals(\"apache-2.0\"));\n-        assertTrue(\"The name is correct\", license.getName().equals(\"Apache License 2.0\"));\n-        assertTrue(\"The URL is correct\",\n-                license.getUrl().equals(new URL(mockGitHub.apiServer().baseUrl() + \"/licenses/apache-2.0\")));\n+        assertThat(\"The license is populated\", license, notNullValue());\n+        assertThat(\"The key is correct\", license.getKey(), equalTo(\"apache-2.0\"));\n+        assertThat(\"The name is correct\", license.getName(), equalTo(\"Apache License 2.0\"));\n+        assertThat(\"The URL is correct\",\n+                license.getUrl(),\n+                equalTo(new URL(mockGitHub.apiServer().baseUrl() + \"/licenses/apache-2.0\")));\n     }\n \n     /**\n@@ -157,7 +160,7 @@ public void checkRepositoryLicensePomes() throws IOException {\n     public void checkRepositoryWithoutLicense() throws IOException {\n         GHRepository repo = gitHub.getRepository(GITHUB_API_TEST_ORG + \"/empty\");\n         GHLicense license = repo.getLicense();\n-        assertNull(\"There is no license\", license);\n+        assertThat(\"There is no license\", license, nullValue());\n     }\n \n     /**\n@@ -171,13 +174,15 @@ public void checkRepositoryWithoutLicense() throws IOException {\n     public void checkRepositoryFullLicense() throws IOException {\n         GHRepository repo = gitHub.getRepository(\"hub4j/github-api\");\n         GHLicense license = repo.getLicense();\n-        assertNotNull(\"The license is populated\", license);\n-        assertTrue(\"The key is correct\", license.getKey().equals(\"mit\"));\n-        assertTrue(\"The name is correct\", license.getName().equals(\"MIT License\"));\n-        assertTrue(\"The URL is correct\",\n-                license.getUrl().equals(new URL(mockGitHub.apiServer().baseUrl() + \"/licenses/mit\")));\n-        assertTrue(\"The HTML URL is correct\",\n-                license.getHtmlUrl().equals(new URL(\"http://choosealicense.com/licenses/mit/\")));\n+        assertThat(\"The license is populated\", license, notNullValue());\n+        assertThat(\"The key is correct\", license.getKey(), equalTo(\"mit\"));\n+        assertThat(\"The name is correct\", license.getName(), equalTo(\"MIT License\"));\n+        assertThat(\"The URL is correct\",\n+                license.getUrl(),\n+                equalTo(new URL(mockGitHub.apiServer().baseUrl() + \"/licenses/mit\")));\n+        assertThat(\"The HTML URL is correct\",\n+                license.getHtmlUrl(),\n+                equalTo(new URL(\"http://choosealicense.com/licenses/mit/\")));\n     }\n \n     /**\n@@ -191,13 +196,13 @@ public void checkRepositoryFullLicense() throws IOException {\n     public void checkRepositoryLicenseContent() throws IOException {\n         GHRepository repo = gitHub.getRepository(\"pomes/pomes\");\n         GHContent content = repo.getLicenseContent();\n-        assertNotNull(\"The license content is populated\", content);\n-        assertTrue(\"The type is 'file'\", content.getType().equals(\"file\"));\n-        assertTrue(\"The license file is 'LICENSE'\", content.getName().equals(\"LICENSE\"));\n+        assertThat(\"The license content is populated\", content, notNullValue());\n+        assertThat(\"The type is 'file'\", content.getType(), equalTo(\"file\"));\n+        assertThat(\"The license file is 'LICENSE'\", content.getName(), equalTo(\"LICENSE\"));\n \n         if (content.getEncoding().equals(\"base64\")) {\n             String licenseText = new String(IOUtils.toByteArray(content.read()));\n-            assertTrue(\"The license appears to be an Apache License\", licenseText.contains(\"Apache License\"));\n+            assertThat(\"The license appears to be an Apache License\", licenseText.contains(\"Apache License\"));\n         } else {\n             fail(\"Expected the license to be Base64 encoded but instead it was \" + content.getEncoding());\n         }\n@@ -214,7 +219,7 @@ public void checkRepositoryLicenseContent() throws IOException {\n     public void checkRepositoryLicenseForIndeterminate() throws IOException {\n         GHRepository repo = gitHub.getRepository(\"bndtools/bnd\");\n         GHLicense license = repo.getLicense();\n-        assertNotNull(\"The license is populated\", license);\n+        assertThat(\"The license is populated\", license, notNullValue());\n         assertThat(license.getKey(), equalTo(\"other\"));\n         assertThat(license.getDescription(), is(nullValue()));\n         assertThat(license.getUrl(), is(nullValue()));"
    },
    {
      "sha": "3856f6dddf548954ca31790291c1f80211c5c9cc",
      "filename": "src/test/java/org/kohsuke/github/GHMarketplacePlanTest.java",
      "status": "modified",
      "additions": 36,
      "deletions": 40,
      "changes": 76,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHMarketplacePlanTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHMarketplacePlanTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHMarketplacePlanTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -5,11 +5,7 @@\n import java.io.IOException;\n import java.util.List;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.hamcrest.Matchers.*;\n import static org.kohsuke.github.GHDirection.DESC;\n import static org.kohsuke.github.GHMarketplaceAccountType.ORGANIZATION;\n import static org.kohsuke.github.GHMarketplaceListAccountBuilder.Sort.UPDATED;\n@@ -31,30 +27,30 @@ protected GitHubBuilder getGitHubBuilder() {\n     @Test\n     public void listMarketplacePlans() throws IOException {\n         List<GHMarketplacePlan> plans = gitHub.listMarketplacePlans().toList();\n-        assertEquals(3, plans.size());\n+        assertThat(plans.size(), equalTo(3));\n         plans.forEach(this::testMarketplacePlan);\n     }\n \n     @Test\n     public void listAccounts() throws IOException {\n         List<GHMarketplacePlan> plans = gitHub.listMarketplacePlans().toList();\n-        assertEquals(3, plans.size());\n+        assertThat(plans.size(), equalTo(3));\n         List<GHMarketplaceAccountPlan> marketplaceUsers = plans.get(0).listAccounts().createRequest().toList();\n-        assertEquals(2, marketplaceUsers.size());\n+        assertThat(marketplaceUsers.size(), equalTo(2));\n         marketplaceUsers.forEach(this::testMarketplaceAccount);\n     }\n \n     @Test\n     public void listAccountsWithDirection() throws IOException {\n         List<GHMarketplacePlan> plans = gitHub.listMarketplacePlans().toList();\n-        assertEquals(3, plans.size());\n+        assertThat(plans.size(), equalTo(3));\n \n         for (GHMarketplacePlan plan : plans) {\n             List<GHMarketplaceAccountPlan> marketplaceUsers = plan.listAccounts()\n                     .direction(DESC)\n                     .createRequest()\n                     .toList();\n-            assertEquals(2, marketplaceUsers.size());\n+            assertThat(marketplaceUsers.size(), equalTo(2));\n             marketplaceUsers.forEach(this::testMarketplaceAccount);\n         }\n \n@@ -63,55 +59,55 @@ public void listAccountsWithDirection() throws IOException {\n     @Test\n     public void listAccountsWithSortAndDirection() throws IOException {\n         List<GHMarketplacePlan> plans = gitHub.listMarketplacePlans().toList();\n-        assertEquals(3, plans.size());\n+        assertThat(plans.size(), equalTo(3));\n \n         for (GHMarketplacePlan plan : plans) {\n             List<GHMarketplaceAccountPlan> marketplaceUsers = plan.listAccounts()\n                     .sort(UPDATED)\n                     .direction(DESC)\n                     .createRequest()\n                     .toList();\n-            assertEquals(2, marketplaceUsers.size());\n+            assertThat(marketplaceUsers.size(), equalTo(2));\n             marketplaceUsers.forEach(this::testMarketplaceAccount);\n         }\n \n     }\n \n     private void testMarketplacePlan(GHMarketplacePlan plan) {\n         // Non-nullable fields\n-        assertNotNull(plan.getUrl());\n-        assertNotNull(plan.getAccountsUrl());\n-        assertNotNull(plan.getName());\n-        assertNotNull(plan.getDescription());\n-        assertNotNull(plan.getPriceModel());\n-        assertNotNull(plan.getState());\n+        assertThat(plan.getUrl(), notNullValue());\n+        assertThat(plan.getAccountsUrl(), notNullValue());\n+        assertThat(plan.getName(), notNullValue());\n+        assertThat(plan.getDescription(), notNullValue());\n+        assertThat(plan.getPriceModel(), notNullValue());\n+        assertThat(plan.getState(), notNullValue());\n \n         // primitive fields\n-        assertNotEquals(0L, plan.getId());\n-        assertNotEquals(0L, plan.getNumber());\n-        assertTrue(plan.getMonthlyPriceInCents() >= 0);\n+        assertThat(plan.getId(), not(0L));\n+        assertThat(plan.getNumber(), not(0L));\n+        assertThat(plan.getMonthlyPriceInCents(), greaterThanOrEqualTo(0L));\n \n         // list\n-        assertEquals(2, plan.getBullets().size());\n+        assertThat(plan.getBullets().size(), equalTo(2));\n     }\n \n     private void testMarketplaceAccount(GHMarketplaceAccountPlan account) {\n         // Non-nullable fields\n-        assertNotNull(account.getLogin());\n-        assertNotNull(account.getUrl());\n-        assertNotNull(account.getType());\n-        assertNotNull(account.getMarketplacePurchase());\n+        assertThat(account.getLogin(), notNullValue());\n+        assertThat(account.getUrl(), notNullValue());\n+        assertThat(account.getType(), notNullValue());\n+        assertThat(account.getMarketplacePurchase(), notNullValue());\n         testMarketplacePurchase(account.getMarketplacePurchase());\n \n         // primitive fields\n-        assertNotEquals(0L, account.getId());\n+        assertThat(account.getId(), not(0L));\n \n         /* logical combination tests */\n         // Rationale: organization_billing_email is only set when account type is ORGANIZATION.\n         if (account.getType() == ORGANIZATION)\n-            assertNotNull(account.getOrganizationBillingEmail());\n+            assertThat(account.getOrganizationBillingEmail(), notNullValue());\n         else\n-            assertNull(account.getOrganizationBillingEmail());\n+            assertThat(account.getOrganizationBillingEmail(), nullValue());\n \n         // Rationale: marketplace_pending_change isn't always set... This is what GitHub says about it:\n         // \"When someone submits a plan change that won't be processed until the end of their billing cycle,\n@@ -122,41 +118,41 @@ private void testMarketplaceAccount(GHMarketplaceAccountPlan account) {\n \n     private void testMarketplacePurchase(GHMarketplacePurchase marketplacePurchase) {\n         // Non-nullable fields\n-        assertNotNull(marketplacePurchase.getBillingCycle());\n-        assertNotNull(marketplacePurchase.getNextBillingDate());\n-        assertNotNull(marketplacePurchase.getUpdatedAt());\n+        assertThat(marketplacePurchase.getBillingCycle(), notNullValue());\n+        assertThat(marketplacePurchase.getNextBillingDate(), notNullValue());\n+        assertThat(marketplacePurchase.getUpdatedAt(), notNullValue());\n         testMarketplacePlan(marketplacePurchase.getPlan());\n \n         /* logical combination tests */\n         // Rationale: if onFreeTrial is true, then we should see free_trial_ends_on property set to something\n         // different than null\n         if (marketplacePurchase.isOnFreeTrial())\n-            assertNotNull(marketplacePurchase.getFreeTrialEndsOn());\n+            assertThat(marketplacePurchase.getFreeTrialEndsOn(), notNullValue());\n         else\n-            assertNull(marketplacePurchase.getFreeTrialEndsOn());\n+            assertThat(marketplacePurchase.getFreeTrialEndsOn(), nullValue());\n \n         // Rationale: if price model is PER_UNIT then unit_count can't be null\n         if (marketplacePurchase.getPlan().getPriceModel() == GHMarketplacePriceModel.PER_UNIT)\n-            assertNotNull(marketplacePurchase.getUnitCount());\n+            assertThat(marketplacePurchase.getUnitCount(), notNullValue());\n         else\n-            assertNull(marketplacePurchase.getUnitCount());\n+            assertThat(marketplacePurchase.getUnitCount(), nullValue());\n \n     }\n \n     private void testMarketplacePendingChange(GHMarketplacePendingChange marketplacePendingChange) {\n         // Non-nullable fields\n-        assertNotNull(marketplacePendingChange.getEffectiveDate());\n+        assertThat(marketplacePendingChange.getEffectiveDate(), notNullValue());\n         testMarketplacePlan(marketplacePendingChange.getPlan());\n \n         // primitive fields\n-        assertNotEquals(0L, marketplacePendingChange.getId());\n+        assertThat(marketplacePendingChange.getId(), not(0L));\n \n         /* logical combination tests */\n         // Rationale: if price model is PER_UNIT then unit_count can't be null\n         if (marketplacePendingChange.getPlan().getPriceModel() == GHMarketplacePriceModel.PER_UNIT)\n-            assertNotNull(marketplacePendingChange.getUnitCount());\n+            assertThat(marketplacePendingChange.getUnitCount(), notNullValue());\n         else\n-            assertNull(marketplacePendingChange.getUnitCount());\n+            assertThat(marketplacePendingChange.getUnitCount(), nullValue());\n \n     }\n "
    },
    {
      "sha": "6bbea2a5f6966aac1204989ff60c9ecc140ee6ce",
      "filename": "src/test/java/org/kohsuke/github/GHMilestoneTest.java",
      "status": "modified",
      "additions": 13,
      "deletions": 12,
      "changes": 25,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHMilestoneTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHMilestoneTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHMilestoneTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -7,6 +7,9 @@\n import java.io.IOException;\n import java.util.Date;\n \n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+\n /**\n  * @author Martin van Zijl\n  */\n@@ -20,7 +23,7 @@ public void cleanUp() throws Exception {\n             return;\n         }\n \n-        for (GHMilestone milestone : getRepository(getGitHubBeforeAfter()).listMilestones(GHIssueState.ALL)) {\n+        for (GHMilestone milestone : getRepository(getNonRecordingGitHub()).listMilestones(GHIssueState.ALL)) {\n             if (\"Original Title\".equals(milestone.getTitle()) || \"Updated Title\".equals(milestone.getTitle())\n                     || \"Unset Test Milestone\".equals(milestone.getTitle())) {\n                 milestone.delete();\n@@ -45,12 +48,12 @@ public void testUpdateMilestone() throws Exception {\n         // Force reload.\n         milestone = repo.getMilestone(milestone.getNumber());\n \n-        assertEquals(NEW_TITLE, milestone.getTitle());\n-        assertEquals(NEW_DESCRIPTION, milestone.getDescription());\n+        assertThat(milestone.getTitle(), equalTo(NEW_TITLE));\n+        assertThat(milestone.getDescription(), equalTo(NEW_DESCRIPTION));\n \n         // The time is truncated when sent to the server, but still part of the returned value\n         // 07:00 midnight PDT\n-        assertEquals(OUTPUT_DUE_DATE, milestone.getDueOn());\n+        assertThat(milestone.getDueOn(), equalTo(OUTPUT_DUE_DATE));\n     }\n \n     @Test\n@@ -62,32 +65,30 @@ public void testUnsetMilestone() throws IOException {\n         // set the milestone\n         issue.setMilestone(milestone);\n         issue = repo.getIssue(issue.getNumber()); // force reload\n-        assertEquals(milestone.getNumber(), issue.getMilestone().getNumber());\n+        assertThat(issue.getMilestone().getNumber(), equalTo(milestone.getNumber()));\n \n         // remove the milestone\n         issue.setMilestone(null);\n         issue = repo.getIssue(issue.getNumber()); // force reload\n-        assertEquals(null, issue.getMilestone());\n+        assertThat(issue.getMilestone(), nullValue());\n     }\n \n     @Test\n     public void testUnsetMilestoneFromPullRequest() throws IOException {\n         GHRepository repo = getRepository();\n         GHMilestone milestone = repo.createMilestone(\"Unset Test Milestone\", \"For testUnsetMilestone\");\n-        GHPullRequest p = repo.createPullRequest(\"testUnsetMilestoneFromPullRequest\",\n-                \"test/stable\",\n-                \"master\",\n-                \"## test pull request\");\n+        GHPullRequest p = repo\n+                .createPullRequest(\"testUnsetMilestoneFromPullRequest\", \"test/stable\", \"main\", \"## test pull request\");\n \n         // set the milestone\n         p.setMilestone(milestone);\n         p = repo.getPullRequest(p.getNumber()); // force reload\n-        assertEquals(milestone.getNumber(), p.getMilestone().getNumber());\n+        assertThat(p.getMilestone().getNumber(), equalTo(milestone.getNumber()));\n \n         // remove the milestone\n         p.setMilestone(null);\n         p = repo.getPullRequest(p.getNumber()); // force reload\n-        assertNull(p.getMilestone());\n+        assertThat(p.getMilestone(), nullValue());\n     }\n \n     protected GHRepository getRepository() throws IOException {"
    },
    {
      "sha": "e7c48d714f75c7b333573c962034020d3bb89681",
      "filename": "src/test/java/org/kohsuke/github/GHOrganizationTest.java",
      "status": "modified",
      "additions": 74,
      "deletions": 44,
      "changes": 118,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHOrganizationTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHOrganizationTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHOrganizationTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1,13 +1,13 @@\n package org.kohsuke.github;\n \n import org.junit.After;\n-import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n import org.kohsuke.github.GHOrganization.Permission;\n \n import java.io.IOException;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n import static org.hamcrest.Matchers.*;\n \n@@ -25,10 +25,12 @@ public void cleanUpTeam() throws IOException {\n             return;\n         }\n \n-        GHTeam team = getGitHubBeforeAfter().getOrganization(GITHUB_API_TEST_ORG).getTeamByName(TEAM_NAME_CREATE);\n+        GHTeam team = getNonRecordingGitHub().getOrganization(GITHUB_API_TEST_ORG).getTeamByName(TEAM_NAME_CREATE);\n         if (team != null) {\n             team.delete();\n         }\n+\n+        getNonRecordingGitHub().getOrganization(GITHUB_API_TEST_ORG).enableOrganizationProjects(true);\n     }\n \n     @Test\n@@ -42,7 +44,7 @@ public void testCreateRepository() throws IOException {\n                 .team(org.getTeamByName(\"Core Developers\"))\n                 .private_(false)\n                 .create();\n-        Assert.assertNotNull(repository);\n+        assertThat(repository, notNullValue());\n     }\n \n     @Test\n@@ -56,8 +58,8 @@ public void testCreateRepositoryWithAutoInitialization() throws IOException {\n                 .team(org.getTeamByName(\"Core Developers\"))\n                 .autoInit(true)\n                 .create();\n-        Assert.assertNotNull(repository);\n-        Assert.assertNotNull(repository.getReadme());\n+        assertThat(repository, notNullValue());\n+        assertThat(repository.getReadme(), notNullValue());\n     }\n \n     @Test\n@@ -75,10 +77,10 @@ public void testCreateRepositoryWithParameterIsTemplate() throws IOException {\n                 .autoInit(true)\n                 .isTemplate(true)\n                 .create();\n-        Assert.assertNotNull(repository);\n+        assertThat(repository, notNullValue());\n         assertThat(mockGitHub.getRequestCount(), equalTo(requestCount + 1));\n \n-        Assert.assertNotNull(repository.getReadme());\n+        assertThat(repository.getReadme(), notNullValue());\n         assertThat(mockGitHub.getRequestCount(), equalTo(requestCount + 2));\n \n         // isTemplate() does not call populate() from create\n@@ -107,8 +109,8 @@ public void testCreateRepositoryWithTemplate() throws IOException {\n                 .owner(GITHUB_API_TEST_ORG)\n                 .create();\n \n-        Assert.assertNotNull(repository);\n-        Assert.assertNotNull(repository.getReadme());\n+        assertThat(repository, notNullValue());\n+        assertThat(repository.getReadme(), notNullValue());\n \n     }\n \n@@ -139,20 +141,22 @@ public void testListMembersWithFilter() throws IOException {\n \n         List<GHUser> admins = org.listMembersWithFilter(\"all\").toList();\n \n-        assertNotNull(admins);\n-        assertTrue(admins.size() >= 12); // In case more are added in the future\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"alexanderrtaylor\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"asthinasthi\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"bitwiseman\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"farmdawgnation\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"halkeye\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"jberglund-BSFT\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"kohsuke\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"kohsuke2\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"martinvanzijl\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"PauloMigAlmeida\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"Sage-Pierce\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"timja\")));\n+        assertThat(admins, notNullValue());\n+        // In case more are added in the future\n+        assertThat(admins.size(), greaterThanOrEqualTo(12));\n+        assertThat(admins.stream().map(GHUser::getLogin).collect(Collectors.toList()),\n+                hasItems(\"alexanderrtaylor\",\n+                        \"asthinasthi\",\n+                        \"bitwiseman\",\n+                        \"farmdawgnation\",\n+                        \"halkeye\",\n+                        \"jberglund-BSFT\",\n+                        \"kohsuke\",\n+                        \"kohsuke2\",\n+                        \"martinvanzijl\",\n+                        \"PauloMigAlmeida\",\n+                        \"Sage-Pierce\",\n+                        \"timja\"));\n     }\n \n     @Test\n@@ -161,20 +165,22 @@ public void testListMembersWithRole() throws IOException {\n \n         List<GHUser> admins = org.listMembersWithRole(\"admin\").toList();\n \n-        assertNotNull(admins);\n-        assertTrue(admins.size() >= 12); // In case more are added in the future\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"alexanderrtaylor\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"asthinasthi\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"bitwiseman\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"farmdawgnation\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"halkeye\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"jberglund-BSFT\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"kohsuke\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"kohsuke2\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"martinvanzijl\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"PauloMigAlmeida\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"Sage-Pierce\")));\n-        assertTrue(admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"timja\")));\n+        assertThat(admins, notNullValue());\n+        // In case more are added in the future\n+        assertThat(admins.size(), greaterThanOrEqualTo(12));\n+        assertThat(admins.stream().map(GHUser::getLogin).collect(Collectors.toList()),\n+                hasItems(\"alexanderrtaylor\",\n+                        \"asthinasthi\",\n+                        \"bitwiseman\",\n+                        \"farmdawgnation\",\n+                        \"halkeye\",\n+                        \"jberglund-BSFT\",\n+                        \"kohsuke\",\n+                        \"kohsuke2\",\n+                        \"martinvanzijl\",\n+                        \"PauloMigAlmeida\",\n+                        \"Sage-Pierce\",\n+                        \"timja\"));\n     }\n \n     @Test\n@@ -186,8 +192,8 @@ public void testCreateTeamWithRepoAccess() throws IOException {\n \n         // Create team with access to repository. Check access was granted.\n         GHTeam team = org.createTeam(TEAM_NAME_CREATE, GHOrganization.Permission.PUSH, repo);\n-        Assert.assertTrue(team.getRepositories().containsKey(REPO_NAME));\n-        assertEquals(Permission.PUSH.toString().toLowerCase(), team.getPermission());\n+        assertThat(team.getRepositories().containsKey(REPO_NAME), is(true));\n+        assertThat(team.getPermission(), equalTo(Permission.PUSH.toString().toLowerCase()));\n     }\n \n     @Test\n@@ -200,16 +206,16 @@ public void testCreateTeam() throws IOException {\n \n         // Create team with no permission field. Verify that default permission is pull\n         GHTeam team = org.createTeam(TEAM_NAME_CREATE, repo);\n-        Assert.assertTrue(team.getRepositories().containsKey(REPO_NAME));\n-        assertEquals(DEFAULT_PERMISSION, team.getPermission());\n+        assertThat(team.getRepositories().containsKey(REPO_NAME), is(true));\n+        assertThat(team.getPermission(), equalTo(DEFAULT_PERMISSION));\n     }\n \n     @Test\n     public void testCreateVisibleTeam() throws IOException {\n         GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n \n         GHTeam team = org.createTeam(TEAM_NAME_CREATE).privacy(GHTeam.Privacy.CLOSED).create();\n-        assertEquals(GHTeam.Privacy.CLOSED, team.getPrivacy());\n+        assertThat(team.getPrivacy(), equalTo(GHTeam.Privacy.CLOSED));\n     }\n \n     @Test\n@@ -224,7 +230,31 @@ public void testCreateAllArgsTeam() throws IOException {\n                 .privacy(GHTeam.Privacy.CLOSED)\n                 .parentTeamId(3617900)\n                 .create();\n-        assertEquals(\"Team description\", team.getDescription());\n-        assertEquals(GHTeam.Privacy.CLOSED, team.getPrivacy());\n+        assertThat(team.getDescription(), equalTo(\"Team description\"));\n+        assertThat(team.getPrivacy(), equalTo(GHTeam.Privacy.CLOSED));\n+    }\n+\n+    @Test\n+    public void testAreOrganizationProjectsEnabled() throws IOException {\n+        // Arrange\n+        GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n+\n+        // Act\n+        boolean result = org.areOrganizationProjectsEnabled();\n+\n+        // Assert\n+        assertThat(result, is(true));\n+    }\n+\n+    @Test\n+    public void testEnableOrganizationProjects() throws IOException {\n+        // Arrange\n+        GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n+\n+        // Act\n+        org.enableOrganizationProjects(false);\n+\n+        // Assert\n+        assertThat(org.areOrganizationProjectsEnabled(), is(false));\n     }\n }"
    },
    {
      "sha": "2546515a1c54e9ec9fdf29e3e5fd63be2248cc95",
      "filename": "src/test/java/org/kohsuke/github/GHPersonTest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHPersonTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHPersonTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHPersonTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -4,6 +4,9 @@\n \n import java.io.IOException;\n \n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n /**\n  * @author Martin van Zijl\n  */\n@@ -12,15 +15,15 @@\n     public void testFieldsForOrganization() throws Exception {\n         GHRepository repo = getRepository();\n         GHUser owner = repo.getOwner();\n-        assertEquals(\"Organization\", owner.getType());\n-        assertNotNull(owner.isSiteAdmin());\n+        assertThat(owner.getType(), equalTo(\"Organization\"));\n+        assertThat(owner.isSiteAdmin(), notNullValue());\n     }\n \n     @Test\n     public void testFieldsForUser() throws Exception {\n         GHUser user = gitHub.getUser(\"kohsuke2\");\n-        assertEquals(\"User\", user.getType());\n-        assertNotNull(user.isSiteAdmin());\n+        assertThat(user.getType(), equalTo(\"User\"));\n+        assertThat(user.isSiteAdmin(), notNullValue());\n     }\n \n     protected GHRepository getRepository() throws IOException {"
    },
    {
      "sha": "aad7bb3c1da91b8b3f16aa01da057f00f917aa05",
      "filename": "src/test/java/org/kohsuke/github/GHProjectCardTest.java",
      "status": "modified",
      "additions": 13,
      "deletions": 12,
      "changes": 25,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHProjectCardTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHProjectCardTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHProjectCardTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1,13 +1,14 @@\n package org.kohsuke.github;\n \n import org.junit.After;\n-import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n import java.io.FileNotFoundException;\n import java.io.IOException;\n \n+import static org.hamcrest.Matchers.*;\n+\n /**\n  * @author Gunnar Skjold\n  */\n@@ -27,24 +28,24 @@ public void setUp() throws Exception {\n \n     @Test\n     public void testCreatedCard() {\n-        Assert.assertEquals(\"This is a card\", card.getNote());\n-        Assert.assertFalse(card.isArchived());\n+        assertThat(card.getNote(), equalTo(\"This is a card\"));\n+        assertThat(card.isArchived(), is(false));\n     }\n \n     @Test\n     public void testEditCardNote() throws IOException {\n         card.setNote(\"New note\");\n         card = gitHub.getProjectCard(card.getId());\n-        Assert.assertEquals(\"New note\", card.getNote());\n-        Assert.assertFalse(card.isArchived());\n+        assertThat(card.getNote(), equalTo(\"New note\"));\n+        assertThat(card.isArchived(), is(false));\n     }\n \n     @Test\n     public void testArchiveCard() throws IOException {\n         card.setArchived(true);\n         card = gitHub.getProjectCard(card.getId());\n-        Assert.assertEquals(\"This is a card\", card.getNote());\n-        Assert.assertTrue(card.isArchived());\n+        assertThat(card.getNote(), equalTo(\"This is a card\"));\n+        assertThat(card.isArchived(), is(true));\n     }\n \n     @Test\n@@ -53,7 +54,7 @@ public void testCreateCardFromIssue() throws IOException {\n         try {\n             GHIssue issue = repo.createIssue(\"new-issue\").body(\"With body\").create();\n             GHProjectCard card = column.createCard(issue);\n-            Assert.assertEquals(issue.getUrl(), card.getContentUrl());\n+            assertThat(card.getContentUrl(), equalTo(issue.getUrl()));\n         } finally {\n             repo.delete();\n         }\n@@ -64,7 +65,7 @@ public void testDeleteCard() throws IOException {\n         card.delete();\n         try {\n             card = gitHub.getProjectCard(card.getId());\n-            Assert.assertNull(card);\n+            assertThat(card, nullValue());\n         } catch (FileNotFoundException e) {\n             card = null;\n         }\n@@ -74,7 +75,7 @@ public void testDeleteCard() throws IOException {\n     public void after() throws IOException {\n         if (mockGitHub.isUseProxy()) {\n             if (card != null) {\n-                card = getGitHubBeforeAfter().getProjectCard(card.getId());\n+                card = getNonRecordingGitHub().getProjectCard(card.getId());\n                 try {\n                     card.delete();\n                     card = null;\n@@ -83,7 +84,7 @@ public void after() throws IOException {\n                 }\n             }\n             if (column != null) {\n-                column = getGitHubBeforeAfter().getProjectColumn(column.getId());\n+                column = getNonRecordingGitHub().getProjectColumn(column.getId());\n                 try {\n                     column.delete();\n                     column = null;\n@@ -92,7 +93,7 @@ public void after() throws IOException {\n                 }\n             }\n             if (project != null) {\n-                project = getGitHubBeforeAfter().getProject(project.getId());\n+                project = getNonRecordingGitHub().getProject(project.getId());\n                 try {\n                     project.delete();\n                     project = null;"
    },
    {
      "sha": "3a377d8e47a2f7414be0a0b53a89a13077cad5ba",
      "filename": "src/test/java/org/kohsuke/github/GHProjectColumnTest.java",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHProjectColumnTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHProjectColumnTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHProjectColumnTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1,13 +1,15 @@\n package org.kohsuke.github;\n \n import org.junit.After;\n-import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n import java.io.FileNotFoundException;\n import java.io.IOException;\n \n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+\n /**\n  * @author Gunnar Skjold\n  */\n@@ -23,22 +25,22 @@ public void setUp() throws Exception {\n \n     @Test\n     public void testCreatedColumn() {\n-        Assert.assertEquals(\"column-one\", column.getName());\n+        assertThat(column.getName(), equalTo(\"column-one\"));\n     }\n \n     @Test\n     public void testEditColumnName() throws IOException {\n         column.setName(\"new-name\");\n         column = gitHub.getProjectColumn(column.getId());\n-        Assert.assertEquals(\"new-name\", column.getName());\n+        assertThat(column.getName(), equalTo(\"new-name\"));\n     }\n \n     @Test\n     public void testDeleteColumn() throws IOException {\n         column.delete();\n         try {\n             column = gitHub.getProjectColumn(column.getId());\n-            Assert.assertNull(column);\n+            assertThat(column, nullValue());\n         } catch (FileNotFoundException e) {\n             column = null;\n         }\n@@ -48,7 +50,7 @@ public void testDeleteColumn() throws IOException {\n     public void after() throws IOException {\n         if (mockGitHub.isUseProxy()) {\n             if (column != null) {\n-                column = getGitHubBeforeAfter().getProjectColumn(column.getId());\n+                column = getNonRecordingGitHub().getProjectColumn(column.getId());\n                 try {\n                     column.delete();\n                     column = null;\n@@ -57,7 +59,7 @@ public void after() throws IOException {\n                 }\n             }\n             if (project != null) {\n-                project = getGitHubBeforeAfter().getProject(project.getId());\n+                project = getNonRecordingGitHub().getProject(project.getId());\n                 try {\n                     project.delete();\n                     project = null;"
    },
    {
      "sha": "0fa2705b69559b09db576514716faa8a9ccffde2",
      "filename": "src/test/java/org/kohsuke/github/GHProjectTest.java",
      "status": "modified",
      "additions": 17,
      "deletions": 16,
      "changes": 33,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHProjectTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHProjectTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHProjectTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1,13 +1,14 @@\n package org.kohsuke.github;\n \n import org.junit.After;\n-import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n import java.io.FileNotFoundException;\n import java.io.IOException;\n \n+import static org.hamcrest.Matchers.*;\n+\n /**\n  * @author Gunnar Skjold\n  */\n@@ -21,45 +22,45 @@ public void setUp() throws Exception {\n \n     @Test\n     public void testCreatedProject() {\n-        Assert.assertNotNull(project);\n-        Assert.assertEquals(\"test-project\", project.getName());\n-        Assert.assertEquals(\"This is a test project\", project.getBody());\n-        Assert.assertEquals(GHProject.ProjectState.OPEN, project.getState());\n+        assertThat(project, notNullValue());\n+        assertThat(project.getName(), equalTo(\"test-project\"));\n+        assertThat(project.getBody(), equalTo(\"This is a test project\"));\n+        assertThat(project.getState(), equalTo(GHProject.ProjectState.OPEN));\n     }\n \n     @Test\n     public void testEditProjectName() throws IOException {\n         project.setName(\"new-name\");\n         project = gitHub.getProject(project.getId());\n-        Assert.assertEquals(\"new-name\", project.getName());\n-        Assert.assertEquals(\"This is a test project\", project.getBody());\n-        Assert.assertEquals(GHProject.ProjectState.OPEN, project.getState());\n+        assertThat(project.getName(), equalTo(\"new-name\"));\n+        assertThat(project.getBody(), equalTo(\"This is a test project\"));\n+        assertThat(project.getState(), equalTo(GHProject.ProjectState.OPEN));\n     }\n \n     @Test\n     public void testEditProjectBody() throws IOException {\n         project.setBody(\"New body\");\n         project = gitHub.getProject(project.getId());\n-        Assert.assertEquals(\"test-project\", project.getName());\n-        Assert.assertEquals(\"New body\", project.getBody());\n-        Assert.assertEquals(GHProject.ProjectState.OPEN, project.getState());\n+        assertThat(project.getName(), equalTo(\"test-project\"));\n+        assertThat(project.getBody(), equalTo(\"New body\"));\n+        assertThat(project.getState(), equalTo(GHProject.ProjectState.OPEN));\n     }\n \n     @Test\n     public void testEditProjectState() throws IOException {\n         project.setState(GHProject.ProjectState.CLOSED);\n         project = gitHub.getProject(project.getId());\n-        Assert.assertEquals(\"test-project\", project.getName());\n-        Assert.assertEquals(\"This is a test project\", project.getBody());\n-        Assert.assertEquals(GHProject.ProjectState.CLOSED, project.getState());\n+        assertThat(project.getName(), equalTo(\"test-project\"));\n+        assertThat(project.getBody(), equalTo(\"This is a test project\"));\n+        assertThat(project.getState(), equalTo(GHProject.ProjectState.CLOSED));\n     }\n \n     @Test\n     public void testDeleteProject() throws IOException {\n         project.delete();\n         try {\n             project = gitHub.getProject(project.getId());\n-            Assert.assertNull(project);\n+            assertThat(project, nullValue());\n         } catch (FileNotFoundException e) {\n             project = null;\n         }\n@@ -69,7 +70,7 @@ public void testDeleteProject() throws IOException {\n     public void after() throws IOException {\n         if (mockGitHub.isUseProxy()) {\n             if (project != null) {\n-                project = getGitHubBeforeAfter().getProject(project.getId());\n+                project = getNonRecordingGitHub().getProject(project.getId());\n                 try {\n                     project.delete();\n                     project = null;"
    },
    {
      "sha": "cbb84c4d41f2ed6b949c4b717776ef95890aa079",
      "filename": "src/test/java/org/kohsuke/github/GHPullRequestMockTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHPullRequestMockTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHPullRequestMockTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHPullRequestMockTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -4,7 +4,7 @@\n \n import java.io.IOException;\n \n-import static org.junit.Assert.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n@@ -15,7 +15,7 @@ public void shouldMockGHPullRequest() throws IOException {\n         GHPullRequest pullRequest = mock(GHPullRequest.class);\n         when(pullRequest.isDraft()).thenReturn(true);\n \n-        assertTrue(\"Mock should return true\", pullRequest.isDraft());\n+        assertThat(\"Mock should return true\", pullRequest.isDraft());\n     }\n \n }"
    },
    {
      "sha": "9f545f907a96aec2e033d08826bcd73360274557",
      "filename": "src/test/java/org/kohsuke/github/GHPullRequestTest.java",
      "status": "modified",
      "additions": 168,
      "deletions": 80,
      "changes": 248,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHPullRequestTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHPullRequestTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHPullRequestTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -9,7 +9,7 @@\n import java.util.Collections;\n import java.util.List;\n \n-import static org.hamcrest.CoreMatchers.*;\n+import static org.hamcrest.Matchers.*;\n \n /**\n  * @author Kohsuke Kawaguchi\n@@ -24,7 +24,7 @@ public void cleanUp() throws Exception {\n             return;\n         }\n \n-        for (GHPullRequest pr : getRepository(this.getGitHubBeforeAfter()).getPullRequests(GHIssueState.OPEN)) {\n+        for (GHPullRequest pr : getRepository(this.getNonRecordingGitHub()).getPullRequests(GHIssueState.OPEN)) {\n             pr.close();\n         }\n     }\n@@ -33,8 +33,8 @@ public void cleanUp() throws Exception {\n     public void createPullRequest() throws Exception {\n         String name = \"createPullRequest\";\n         GHRepository repo = getRepository();\n-        GHPullRequest p = repo.createPullRequest(name, \"test/stable\", \"master\", \"## test\");\n-        assertEquals(name, p.getTitle());\n+        GHPullRequest p = repo.createPullRequest(name, \"test/stable\", \"main\", \"## test\");\n+        assertThat(p.getTitle(), equalTo(name));\n         assertThat(p.canMaintainerModify(), is(false));\n         assertThat(p.isDraft(), is(false));\n     }\n@@ -43,8 +43,8 @@ public void createPullRequest() throws Exception {\n     public void createDraftPullRequest() throws Exception {\n         String name = \"createDraftPullRequest\";\n         GHRepository repo = getRepository();\n-        GHPullRequest p = repo.createPullRequest(name, \"test/stable\", \"master\", \"## test\", false, true);\n-        assertEquals(name, p.getTitle());\n+        GHPullRequest p = repo.createPullRequest(name, \"test/stable\", \"main\", \"## test\", false, true);\n+        assertThat(p.getTitle(), equalTo(name));\n         assertThat(p.canMaintainerModify(), is(false));\n         assertThat(p.isDraft(), is(true));\n \n@@ -66,25 +66,25 @@ public void createDraftPullRequest() throws Exception {\n     @Test\n     public void createPullRequestComment() throws Exception {\n         String name = \"createPullRequestComment\";\n-        GHPullRequest p = getRepository().createPullRequest(name, \"test/stable\", \"master\", \"## test\");\n+        GHPullRequest p = getRepository().createPullRequest(name, \"test/stable\", \"main\", \"## test\");\n         p.comment(\"Some comment\");\n     }\n \n     @Test\n     public void closePullRequest() throws Exception {\n         String name = \"closePullRequest\";\n-        GHPullRequest p = getRepository().createPullRequest(name, \"test/stable\", \"master\", \"## test\");\n+        GHPullRequest p = getRepository().createPullRequest(name, \"test/stable\", \"main\", \"## test\");\n         // System.out.println(p.getUrl());\n-        assertEquals(name, p.getTitle());\n-        assertEquals(GHIssueState.OPEN, getRepository().getPullRequest(p.getNumber()).getState());\n+        assertThat(p.getTitle(), equalTo(name));\n+        assertThat(getRepository().getPullRequest(p.getNumber()).getState(), equalTo(GHIssueState.OPEN));\n         p.close();\n-        assertEquals(GHIssueState.CLOSED, getRepository().getPullRequest(p.getNumber()).getState());\n+        assertThat(getRepository().getPullRequest(p.getNumber()).getState(), equalTo(GHIssueState.CLOSED));\n     }\n \n     @Test\n     public void pullRequestReviews() throws Exception {\n         String name = \"testPullRequestReviews\";\n-        GHPullRequest p = getRepository().createPullRequest(name, \"test/stable\", \"master\", \"## test\");\n+        GHPullRequest p = getRepository().createPullRequest(name, \"test/stable\", \"main\", \"## test\");\n         GHPullRequestReview draftReview = p.createReview()\n                 .body(\"Some draft review\")\n                 .comment(\"Some niggle\", \"README.md\", 1)\n@@ -100,25 +100,25 @@ public void pullRequestReviews() throws Exception {\n         assertThat(review.getCommitId(), notNullValue());\n         draftReview.submit(\"Some review comment\", GHPullRequestReviewEvent.COMMENT);\n         List<GHPullRequestReviewComment> comments = review.listReviewComments().toList();\n-        assertEquals(1, comments.size());\n+        assertThat(comments.size(), equalTo(1));\n         GHPullRequestReviewComment comment = comments.get(0);\n-        assertEquals(\"Some niggle\", comment.getBody());\n+        assertThat(comment.getBody(), equalTo(\"Some niggle\"));\n         draftReview = p.createReview().body(\"Some new review\").comment(\"Some niggle\", \"README.md\", 1).create();\n         draftReview.delete();\n     }\n \n     @Test\n     public void pullRequestReviewComments() throws Exception {\n         String name = \"pullRequestReviewComments\";\n-        GHPullRequest p = getRepository().createPullRequest(name, \"test/stable\", \"master\", \"## test\");\n+        GHPullRequest p = getRepository().createPullRequest(name, \"test/stable\", \"main\", \"## test\");\n         try {\n             // System.out.println(p.getUrl());\n-            assertTrue(p.listReviewComments().toList().isEmpty());\n+            assertThat(p.listReviewComments().toList(), is(empty()));\n             p.createReviewComment(\"Sample review comment\", p.getHead().getSha(), \"README.md\", 1);\n             List<GHPullRequestReviewComment> comments = p.listReviewComments().toList();\n-            assertEquals(1, comments.size());\n+            assertThat(comments.size(), equalTo(1));\n             GHPullRequestReviewComment comment = comments.get(0);\n-            assertEquals(\"Sample review comment\", comment.getBody());\n+            assertThat(comment.getBody(), equalTo(\"Sample review comment\"));\n             assertThat(comment.getInReplyToId(), equalTo(-1L));\n             assertThat(comment.getPath(), equalTo(\"README.md\"));\n             assertThat(comment.getPosition(), equalTo(1));\n@@ -129,7 +129,7 @@ public void pullRequestReviewComments() throws Exception {\n                     containsString(\"hub4j-test-org/github-api/pull/\" + p.getNumber()));\n \n             List<GHReaction> reactions = comment.listReactions().toList();\n-            assertThat(reactions.size(), equalTo(0));\n+            assertThat(reactions, is(empty()));\n \n             GHReaction reaction = comment.createReaction(ReactionContent.CONFUSED);\n             assertThat(reaction.getContent(), equalTo(ReactionContent.CONFUSED));\n@@ -141,12 +141,12 @@ public void pullRequestReviewComments() throws Exception {\n             assertThat(reply.getInReplyToId(), equalTo(comment.getId()));\n             comments = p.listReviewComments().toList();\n \n-            assertEquals(2, comments.size());\n+            assertThat(comments.size(), equalTo(2));\n \n             comment.update(\"Updated review comment\");\n             comments = p.listReviewComments().toList();\n             comment = comments.get(0);\n-            assertEquals(\"Updated review comment\", comment.getBody());\n+            assertThat(comment.getBody(), equalTo(\"Updated review comment\"));\n \n             comment.delete();\n             comments = p.listReviewComments().toList();\n@@ -162,22 +162,22 @@ public void pullRequestReviewComments() throws Exception {\n     @Test\n     public void testPullRequestReviewRequests() throws Exception {\n         String name = \"testPullRequestReviewRequests\";\n-        GHPullRequest p = getRepository().createPullRequest(name, \"test/stable\", \"master\", \"## test\");\n+        GHPullRequest p = getRepository().createPullRequest(name, \"test/stable\", \"main\", \"## test\");\n         // System.out.println(p.getUrl());\n-        assertTrue(p.getRequestedReviewers().isEmpty());\n+        assertThat(p.getRequestedReviewers(), is(empty()));\n \n         GHUser kohsuke2 = gitHub.getUser(\"kohsuke2\");\n         p.requestReviewers(Collections.singletonList(kohsuke2));\n         p.refresh();\n-        assertFalse(p.getRequestedReviewers().isEmpty());\n+        assertThat(p.getRequestedReviewers(), is(not(empty())));\n     }\n \n     @Test\n     public void testPullRequestTeamReviewRequests() throws Exception {\n         String name = \"testPullRequestTeamReviewRequests\";\n-        GHPullRequest p = getRepository().createPullRequest(name, \"test/stable\", \"master\", \"## test\");\n+        GHPullRequest p = getRepository().createPullRequest(name, \"test/stable\", \"main\", \"## test\");\n         // System.out.println(p.getUrl());\n-        assertTrue(p.getRequestedReviewers().isEmpty());\n+        assertThat(p.getRequestedReviewers(), is(empty()));\n \n         GHOrganization testOrg = gitHub.getOrganization(\"hub4j-test-org\");\n         GHTeam testTeam = testOrg.getTeamBySlug(\"dummy-team\");\n@@ -205,7 +205,7 @@ public void testPullRequestTeamReviewRequests() throws Exception {\n     public void mergeCommitSHA() throws Exception {\n         String name = \"mergeCommitSHA\";\n         GHRepository repo = getRepository();\n-        GHPullRequest p = repo.createPullRequest(name, \"test/mergeable_branch\", \"master\", \"## test\");\n+        GHPullRequest p = repo.createPullRequest(name, \"test/mergeable_branch\", \"main\", \"## test\");\n         int baseRequestCount = mockGitHub.getRequestCount();\n         assertThat(p.getMergeableNoRefresh(), nullValue());\n         assertThat(\"Used existing value\", mockGitHub.getRequestCount() - baseRequestCount, equalTo(0));\n@@ -220,7 +220,7 @@ public void mergeCommitSHA() throws Exception {\n \n                 // make sure commit exists\n                 GHCommit commit = repo.getCommit(p.getMergeCommitSha());\n-                assertNotNull(commit);\n+                assertThat(commit, notNullValue());\n \n                 assertThat(\"Asked for PR information\", mockGitHub.getRequestCount() - baseRequestCount, equalTo(i + 1));\n \n@@ -237,33 +237,33 @@ public void mergeCommitSHA() throws Exception {\n     @Test\n     public void setBaseBranch() throws Exception {\n         String prName = \"testSetBaseBranch\";\n-        String originalBaseBranch = \"master\";\n+        String originalBaseBranch = \"main\";\n         String newBaseBranch = \"gh-pages\";\n \n-        GHPullRequest pullRequest = getRepository().createPullRequest(prName, \"test/stable\", \"master\", \"## test\");\n+        GHPullRequest pullRequest = getRepository().createPullRequest(prName, \"test/stable\", \"main\", \"## test\");\n \n-        assertEquals(\"Pull request base branch is supposed to be \" + originalBaseBranch,\n-                originalBaseBranch,\n-                pullRequest.getBase().getRef());\n+        assertThat(\"Pull request base branch is supposed to be \" + originalBaseBranch,\n+                pullRequest.getBase().getRef(),\n+                equalTo(originalBaseBranch));\n \n         GHPullRequest responsePullRequest = pullRequest.setBaseBranch(newBaseBranch);\n \n-        assertEquals(\"Pull request base branch is supposed to be \" + newBaseBranch,\n-                newBaseBranch,\n-                responsePullRequest.getBase().getRef());\n+        assertThat(\"Pull request base branch is supposed to be \" + newBaseBranch,\n+                responsePullRequest.getBase().getRef(),\n+                equalTo(newBaseBranch));\n     }\n \n     @Test\n     public void setBaseBranchNonExisting() throws Exception {\n         String prName = \"testSetBaseBranchNonExisting\";\n-        String originalBaseBranch = \"master\";\n+        String originalBaseBranch = \"main\";\n         String newBaseBranch = \"non-existing\";\n \n-        GHPullRequest pullRequest = getRepository().createPullRequest(prName, \"test/stable\", \"master\", \"## test\");\n+        GHPullRequest pullRequest = getRepository().createPullRequest(prName, \"test/stable\", \"main\", \"## test\");\n \n-        assertEquals(\"Pull request base branch is supposed to be \" + originalBaseBranch,\n-                originalBaseBranch,\n-                pullRequest.getBase().getRef());\n+        assertThat(\"Pull request base branch is supposed to be \" + originalBaseBranch,\n+                pullRequest.getBase().getRef(),\n+                equalTo(originalBaseBranch));\n \n         try {\n             pullRequest.setBaseBranch(newBaseBranch);\n@@ -284,16 +284,16 @@ public void updateOutdatedBranchesUnexpectedHead() throws Exception {\n         GHRef outdatedRef = repository.getRef(outdatedRefName);\n         outdatedRef.updateTo(\"6440189369f9f33b2366556a94dbc26f2cfdd969\", true);\n \n-        GHPullRequest outdatedPullRequest = repository.createPullRequest(prName, \"outdated\", \"master\", \"## test\");\n+        GHPullRequest outdatedPullRequest = repository.createPullRequest(prName, \"outdated\", \"main\", \"## test\");\n \n         do {\n             Thread.sleep(5000);\n             outdatedPullRequest.refresh();\n         } while (outdatedPullRequest.getMergeableState().equalsIgnoreCase(\"unknown\"));\n \n-        assertEquals(\"Pull request is supposed to be not up to date\",\n-                \"behind\",\n-                outdatedPullRequest.getMergeableState());\n+        assertThat(\"Pull request is supposed to be not up to date\",\n+                outdatedPullRequest.getMergeableState(),\n+                equalTo(\"behind\"));\n \n         outdatedRef.updateTo(\"f567328eb81270487864963b7d7446953353f2b5\", true);\n \n@@ -315,21 +315,21 @@ public void updateOutdatedBranches() throws Exception {\n \n         repository.getRef(outdatedRefName).updateTo(\"6440189369f9f33b2366556a94dbc26f2cfdd969\", true);\n \n-        GHPullRequest outdatedPullRequest = repository.createPullRequest(prName, \"outdated\", \"master\", \"## test\");\n+        GHPullRequest outdatedPullRequest = repository.createPullRequest(prName, \"outdated\", \"main\", \"## test\");\n \n         do {\n             Thread.sleep(5000);\n             outdatedPullRequest.refresh();\n         } while (outdatedPullRequest.getMergeableState().equalsIgnoreCase(\"unknown\"));\n \n-        assertEquals(\"Pull request is supposed to be not up to date\",\n-                \"behind\",\n-                outdatedPullRequest.getMergeableState());\n+        assertThat(\"Pull request is supposed to be not up to date\",\n+                outdatedPullRequest.getMergeableState(),\n+                equalTo(\"behind\"));\n \n         outdatedPullRequest.updateBranch();\n         outdatedPullRequest.refresh();\n \n-        assertNotEquals(\"Pull request is supposed to be up to date\", \"behind\", outdatedPullRequest.getMergeableState());\n+        assertThat(\"Pull request is supposed to be up to date\", outdatedPullRequest.getMergeableState(), not(\"behind\"));\n \n         outdatedPullRequest.close();\n     }\n@@ -338,12 +338,12 @@ public void updateOutdatedBranches() throws Exception {\n     public void squashMerge() throws Exception {\n         String name = \"squashMerge\";\n         String branchName = \"test/\" + name;\n-        GHRef masterRef = getRepository().getRef(\"heads/master\");\n-        GHRef branchRef = getRepository().createRef(\"refs/heads/\" + branchName, masterRef.getObject().getSha());\n+        GHRef mainRef = getRepository().getRef(\"heads/main\");\n+        GHRef branchRef = getRepository().createRef(\"refs/heads/\" + branchName, mainRef.getObject().getSha());\n \n         getRepository().createContent(name, name, name, branchName);\n         Thread.sleep(1000);\n-        GHPullRequest p = getRepository().createPullRequest(name, branchName, \"master\", \"## test squash\");\n+        GHPullRequest p = getRepository().createPullRequest(name, branchName, \"main\", \"## test squash\");\n         Thread.sleep(1000);\n         p.merge(\"squash merge\", null, GHPullRequest.MergeMethod.SQUASH);\n     }\n@@ -353,8 +353,8 @@ public void updateContentSquashMerge() throws Exception {\n         String name = \"updateContentSquashMerge\";\n         String branchName = \"test/\" + name;\n \n-        GHRef masterRef = getRepository().getRef(\"heads/master\");\n-        GHRef branchRef = getRepository().createRef(\"refs/heads/\" + branchName, masterRef.getObject().getSha());\n+        GHRef mainRef = getRepository().getRef(\"heads/main\");\n+        GHRef branchRef = getRepository().createRef(\"refs/heads/\" + branchName, mainRef.getObject().getSha());\n \n         GHContentUpdateResponse response = getRepository().createContent(name, name, name, branchName);\n         Thread.sleep(1000);\n@@ -366,84 +366,172 @@ public void updateContentSquashMerge() throws Exception {\n                 .message(name)\n                 .sha(response.getContent().getSha())\n                 .commit();\n-        GHPullRequest p = getRepository().createPullRequest(name, branchName, \"master\", \"## test squash\");\n+        GHPullRequest p = getRepository().createPullRequest(name, branchName, \"main\", \"## test squash\");\n         Thread.sleep(1000);\n         p.merge(\"squash merge\", null, GHPullRequest.MergeMethod.SQUASH);\n     }\n \n     @Test\n     public void queryPullRequestsQualifiedHead() throws Exception {\n         GHRepository repo = getRepository();\n-        // Create PRs from two different branches to master\n-        repo.createPullRequest(\"queryPullRequestsQualifiedHead_stable\", \"test/stable\", \"master\", null);\n-        repo.createPullRequest(\"queryPullRequestsQualifiedHead_rc\", \"test/rc\", \"master\", null);\n+        // Create PRs from two different branches to main\n+        repo.createPullRequest(\"queryPullRequestsQualifiedHead_stable\", \"test/stable\", \"main\", null);\n+        repo.createPullRequest(\"queryPullRequestsQualifiedHead_rc\", \"test/rc\", \"main\", null);\n \n         // Query by one of the heads and make sure we only get that branch's PR back.\n         List<GHPullRequest> prs = repo.queryPullRequests()\n                 .state(GHIssueState.OPEN)\n                 .head(\"hub4j-test-org:test/stable\")\n-                .base(\"master\")\n+                .base(\"main\")\n                 .list()\n                 .toList();\n-        assertNotNull(prs);\n-        assertEquals(1, prs.size());\n-        assertEquals(\"test/stable\", prs.get(0).getHead().getRef());\n+        assertThat(prs, notNullValue());\n+        assertThat(prs.size(), equalTo(1));\n+        assertThat(prs.get(0).getHead().getRef(), equalTo(\"test/stable\"));\n     }\n \n     @Test\n     public void queryPullRequestsUnqualifiedHead() throws Exception {\n         GHRepository repo = getRepository();\n-        // Create PRs from two different branches to master\n-        repo.createPullRequest(\"queryPullRequestsUnqualifiedHead_stable\", \"test/stable\", \"master\", null);\n-        repo.createPullRequest(\"queryPullRequestsUnqualifiedHead_rc\", \"test/rc\", \"master\", null);\n+        // Create PRs from two different branches to main\n+        repo.createPullRequest(\"queryPullRequestsUnqualifiedHead_stable\", \"test/stable\", \"main\", null);\n+        repo.createPullRequest(\"queryPullRequestsUnqualifiedHead_rc\", \"test/rc\", \"main\", null);\n \n         // Query by one of the heads and make sure we only get that branch's PR back.\n         List<GHPullRequest> prs = repo.queryPullRequests()\n                 .state(GHIssueState.OPEN)\n                 .head(\"test/stable\")\n-                .base(\"master\")\n+                .base(\"main\")\n                 .list()\n                 .toList();\n-        assertNotNull(prs);\n-        assertEquals(1, prs.size());\n-        assertEquals(\"test/stable\", prs.get(0).getHead().getRef());\n+        assertThat(prs, notNullValue());\n+        assertThat(prs.size(), equalTo(1));\n+        assertThat(prs.get(0).getHead().getRef(), equalTo(\"test/stable\"));\n     }\n \n     @Test\n     // Requires push access to the test repo to pass\n     public void setLabels() throws Exception {\n-        GHPullRequest p = getRepository().createPullRequest(\"setLabels\", \"test/stable\", \"master\", \"## test\");\n+        GHPullRequest p = getRepository().createPullRequest(\"setLabels\", \"test/stable\", \"main\", \"## test\");\n         String label = \"setLabels_label_name\";\n         p.setLabels(label);\n \n         Collection<GHLabel> labels = getRepository().getPullRequest(p.getNumber()).getLabels();\n-        assertEquals(1, labels.size());\n-        assertEquals(label, labels.iterator().next().getName());\n+        assertThat(labels.size(), equalTo(1));\n+        GHLabel savedLabel = labels.iterator().next();\n+        assertThat(savedLabel.getName(), equalTo(label));\n+        assertThat(savedLabel.getId(), notNullValue());\n+        assertThat(savedLabel.getNodeId(), notNullValue());\n+        assertThat(savedLabel.isDefault(), is(false));\n+    }\n+\n+    @Test\n+    // Requires push access to the test repo to pass\n+    public void addLabels() throws Exception {\n+        GHPullRequest p = getRepository().createPullRequest(\"addLabels\", \"test/stable\", \"main\", \"## test\");\n+        String addedLabel1 = \"addLabels_label_name_1\";\n+        String addedLabel2 = \"addLabels_label_name_2\";\n+        String addedLabel3 = \"addLabels_label_name_3\";\n+\n+        List<GHLabel> resultingLabels = p.addLabels(addedLabel1);\n+        assertThat(resultingLabels.size(), equalTo(1));\n+        GHLabel ghLabel = resultingLabels.get(0);\n+        assertThat(ghLabel.getName(), equalTo(addedLabel1));\n+\n+        int requestCount = mockGitHub.getRequestCount();\n+        resultingLabels = p.addLabels(addedLabel2, addedLabel3);\n+        // multiple labels can be added with one api call\n+        assertThat(mockGitHub.getRequestCount(), equalTo(requestCount + 1));\n+\n+        assertThat(resultingLabels.size(), equalTo(3));\n+        assertThat(resultingLabels,\n+                containsInAnyOrder(hasProperty(\"name\", equalTo(addedLabel1)),\n+                        hasProperty(\"name\", equalTo(addedLabel2)),\n+                        hasProperty(\"name\", equalTo(addedLabel3))));\n+\n+        // Adding a label which is already present does not throw an error\n+        resultingLabels = p.addLabels(ghLabel);\n+        assertThat(resultingLabels.size(), equalTo(3));\n+    }\n+\n+    @Test\n+    // Requires push access to the test repo to pass\n+    public void addLabelsConcurrencyIssue() throws Exception {\n+        String addedLabel1 = \"addLabelsConcurrencyIssue_label_name_1\";\n+        String addedLabel2 = \"addLabelsConcurrencyIssue_label_name_2\";\n+\n+        GHPullRequest p1 = getRepository()\n+                .createPullRequest(\"addLabelsConcurrencyIssue\", \"test/stable\", \"main\", \"## test\");\n+        p1.getLabels();\n+\n+        GHPullRequest p2 = getRepository().getPullRequest(p1.getNumber());\n+        p2.addLabels(addedLabel2);\n+\n+        Collection<GHLabel> labels = p1.addLabels(addedLabel1);\n+\n+        assertThat(labels.size(), equalTo(2));\n+        assertThat(labels,\n+                containsInAnyOrder(hasProperty(\"name\", equalTo(addedLabel1)),\n+                        hasProperty(\"name\", equalTo(addedLabel2))));\n+    }\n+\n+    @Test\n+    // Requires push access to the test repo to pass\n+    public void removeLabels() throws Exception {\n+        GHPullRequest p = getRepository().createPullRequest(\"removeLabels\", \"test/stable\", \"main\", \"## test\");\n+        String label1 = \"removeLabels_label_name_1\";\n+        String label2 = \"removeLabels_label_name_2\";\n+        String label3 = \"removeLabels_label_name_3\";\n+        p.setLabels(label1, label2, label3);\n+\n+        Collection<GHLabel> labels = getRepository().getPullRequest(p.getNumber()).getLabels();\n+        assertThat(labels.size(), equalTo(3));\n+        GHLabel ghLabel3 = labels.stream().filter(label -> label3.equals(label.getName())).findFirst().get();\n+\n+        int requestCount = mockGitHub.getRequestCount();\n+        List<GHLabel> resultingLabels = p.removeLabels(label2, label3);\n+        // each label deleted is a separate api call\n+        assertThat(mockGitHub.getRequestCount(), equalTo(requestCount + 2));\n+\n+        assertThat(resultingLabels.size(), equalTo(1));\n+        assertThat(resultingLabels.get(0).getName(), equalTo(label1));\n+\n+        // Removing some labels that are not present does not throw\n+        // This is consistent with earlier behavior and with addLabels()\n+        p.removeLabels(ghLabel3);\n+\n+        // Calling removeLabel() on label that is not present will throw\n+        try {\n+            p.removeLabel(label3);\n+            fail(\"Expected GHFileNotFoundException\");\n+        } catch (GHFileNotFoundException e) {\n+            assertThat(e.getMessage(), containsString(\"Label does not exist\"));\n+        }\n     }\n \n     @Test\n     // Requires push access to the test repo to pass\n     public void setAssignee() throws Exception {\n-        GHPullRequest p = getRepository().createPullRequest(\"setAssignee\", \"test/stable\", \"master\", \"## test\");\n+        GHPullRequest p = getRepository().createPullRequest(\"setAssignee\", \"test/stable\", \"main\", \"## test\");\n         GHMyself user = gitHub.getMyself();\n         p.assignTo(user);\n \n-        assertEquals(user, getRepository().getPullRequest(p.getNumber()).getAssignee());\n+        assertThat(getRepository().getPullRequest(p.getNumber()).getAssignee(), equalTo(user));\n     }\n \n     @Test\n     public void getUserTest() throws IOException {\n-        GHPullRequest p = getRepository().createPullRequest(\"getUserTest\", \"test/stable\", \"master\", \"## test\");\n+        GHPullRequest p = getRepository().createPullRequest(\"getUserTest\", \"test/stable\", \"main\", \"## test\");\n         GHPullRequest prSingle = getRepository().getPullRequest(p.getNumber());\n-        assertNotNull(prSingle.getUser().getRoot());\n+        assertThat(prSingle.getUser().getRoot(), notNullValue());\n         prSingle.getMergeable();\n-        assertNotNull(prSingle.getUser().getRoot());\n+        assertThat(prSingle.getUser().getRoot(), notNullValue());\n \n         PagedIterable<GHPullRequest> ghPullRequests = getRepository().listPullRequests(GHIssueState.OPEN);\n         for (GHPullRequest pr : ghPullRequests) {\n-            assertNotNull(pr.getUser().getRoot());\n+            assertThat(pr.getUser().getRoot(), notNullValue());\n             pr.getMergeable();\n-            assertNotNull(pr.getUser().getRoot());\n+            assertThat(pr.getUser().getRoot(), notNullValue());\n         }\n     }\n "
    },
    {
      "sha": "3b84c9f304feaae899ab3d0595dcb390e871fd8f",
      "filename": "src/test/java/org/kohsuke/github/GHRateLimitTest.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHRateLimitTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHRateLimitTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHRateLimitTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -493,7 +493,7 @@ private void executeExpirationTest() throws Exception {\n         // This time, rateLimit() should find an expired record and get a new one.\n         Thread.sleep(2500);\n \n-        assertThat(\"Header instance has expired\", gitHub.lastRateLimit().isExpired(), is(true));\n+        assertThat(\"Header instance has expired\", gitHub.lastRateLimit().isExpired());\n \n         assertThat(\"rateLimit() will ask server when cached instance has expired\",\n                 gitHub.rateLimit(),"
    },
    {
      "sha": "535d2acc08fffb1e97669603bbaf47e9dc78d717",
      "filename": "src/test/java/org/kohsuke/github/GHReleaseTest.java",
      "status": "added",
      "additions": 125,
      "deletions": 0,
      "changes": 125,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHReleaseTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHReleaseTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHReleaseTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,125 @@\n+package org.kohsuke.github;\n+\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertThrows;\n+\n+public class GHReleaseTest extends AbstractGitHubWireMockTest {\n+\n+    @Test\n+    public void testCreateSimpleRelease() throws Exception {\n+        GHRepository repo = gitHub.getRepository(\"hub4j-test-org/testCreateRelease\");\n+\n+        String tagName = mockGitHub.getMethodName();\n+        GHRelease release = repo.createRelease(tagName).categoryName(\"announcements\").prerelease(false).create();\n+        try {\n+            GHRelease releaseCheck = repo.getRelease(release.getId());\n+\n+            assertThat(releaseCheck, notNullValue());\n+            assertThat(releaseCheck.getTagName(), is(tagName));\n+            assertThat(releaseCheck.isPrerelease(), is(false));\n+            assertThat(releaseCheck.getDiscussionUrl(), notNullValue());\n+        } finally {\n+            release.delete();\n+            assertThat(repo.getRelease(release.getId()), nullValue());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateSimpleReleaseWithoutDiscussion() throws Exception {\n+        GHRepository repo = gitHub.getRepository(\"hub4j-test-org/testCreateRelease\");\n+\n+        String tagName = mockGitHub.getMethodName();\n+        GHRelease release = repo.createRelease(tagName).create();\n+\n+        try {\n+            GHRelease releaseCheck = repo.getRelease(release.getId());\n+\n+            assertThat(releaseCheck, notNullValue());\n+            assertThat(releaseCheck.getTagName(), is(tagName));\n+            assertThat(releaseCheck.getDiscussionUrl(), nullValue());\n+        } finally {\n+            release.delete();\n+            assertThat(repo.getRelease(release.getId()), nullValue());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateDoubleReleaseFails() throws Exception {\n+        GHRepository repo = gitHub.getRepository(\"hub4j-test-org/testCreateRelease\");\n+\n+        String tagName = mockGitHub.getMethodName();\n+\n+        GHRelease release = repo.createRelease(tagName).create();\n+\n+        try {\n+            GHRelease releaseCheck = repo.getRelease(release.getId());\n+            assertThat(releaseCheck, notNullValue());\n+\n+            HttpException httpException = assertThrows(HttpException.class, () -> {\n+                repo.createRelease(tagName).create();\n+            });\n+\n+            assertThat(httpException.getResponseCode(), is(422));\n+        } finally {\n+            release.delete();\n+            assertThat(repo.getRelease(release.getId()), nullValue());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateReleaseWithUnknownCategoryFails() throws Exception {\n+        GHRepository repo = gitHub.getRepository(\"hub4j-test-org/testCreateRelease\");\n+\n+        String tagName = mockGitHub.getMethodName();\n+        String releaseName = \"release-\" + tagName;\n+\n+        assertThrows(GHFileNotFoundException.class, () -> {\n+            repo.createRelease(tagName)\n+                    .name(releaseName)\n+                    .categoryName(\"an invalid cateogry\")\n+                    .prerelease(false)\n+                    .create();\n+        });\n+    }\n+\n+    @Test\n+    public void testUpdateRelease() throws Exception {\n+        GHRepository repo = gitHub.getRepository(\"hub4j-test-org/testCreateRelease\");\n+\n+        String tagName = mockGitHub.getMethodName();\n+        GHRelease release = repo.createRelease(tagName).prerelease(true).create();\n+        try {\n+            GHRelease releaseCheck = repo.getRelease(release.getId());\n+            GHRelease updateCheck = releaseCheck.update().categoryName(\"announcements\").prerelease(false).update();\n+\n+            assertThat(releaseCheck, notNullValue());\n+            assertThat(releaseCheck.getTagName(), is(tagName));\n+            assertThat(releaseCheck.isPrerelease(), is(true));\n+            assertThat(releaseCheck.getDiscussionUrl(), nullValue());\n+\n+            assertThat(updateCheck, notNullValue());\n+            assertThat(updateCheck.getTagName(), is(tagName));\n+            assertThat(updateCheck.isPrerelease(), is(false));\n+            assertThat(updateCheck.getDiscussionUrl(), notNullValue());\n+\n+        } finally {\n+            release.delete();\n+            assertThat(repo.getRelease(release.getId()), nullValue());\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteRelease() throws Exception {\n+        GHRepository repo = gitHub.getRepository(\"hub4j-test-org/testCreateRelease\");\n+\n+        String tagName = mockGitHub.getMethodName();\n+        GHRelease release = repo.createRelease(tagName).categoryName(\"announcements\").prerelease(true).create();\n+\n+        assertThat(repo.getRelease(release.getId()), notNullValue());\n+        release.delete();\n+        assertThat(repo.getRelease(release.getId()), nullValue());\n+\n+    }\n+}"
    },
    {
      "sha": "cb76ebec608f790c5295d411ddc2deb80ea8c1ee",
      "filename": "src/test/java/org/kohsuke/github/GHRepositoryStatisticsTest.java",
      "status": "modified",
      "additions": 31,
      "deletions": 29,
      "changes": 60,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHRepositoryStatisticsTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHRepositoryStatisticsTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHRepositoryStatisticsTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -6,6 +6,8 @@\n import java.util.List;\n import java.util.NoSuchElementException;\n \n+import static org.hamcrest.Matchers.equalTo;\n+\n public class GHRepositoryStatisticsTest extends AbstractGitHubWireMockTest {\n \n     public static int MAX_ITERATIONS = 3;\n@@ -25,30 +27,30 @@ public void testContributorStats() throws IOException, InterruptedException {\n \n         // check the statistics are accurate\n         List<GHRepositoryStatistics.ContributorStats> list = stats.toList();\n-        assertEquals(99, list.size());\n+        assertThat(list.size(), equalTo(99));\n \n         // find a particular developer\n         // TODO: Add an accessor method for this instead of having use a loop.\n         boolean developerFound = false;\n         final String authorLogin = \"kohsuke\";\n         for (GHRepositoryStatistics.ContributorStats statsForAuthor : list) {\n             if (authorLogin.equals(statsForAuthor.getAuthor().getLogin())) {\n-                assertEquals(715, statsForAuthor.getTotal());\n-                assertEquals(\"kohsuke made 715 contributions over 494 weeks\", statsForAuthor.toString());\n+                assertThat(statsForAuthor.getTotal(), equalTo(715));\n+                assertThat(statsForAuthor.toString(), equalTo(\"kohsuke made 715 contributions over 494 weeks\"));\n \n                 List<GHRepositoryStatistics.ContributorStats.Week> weeks = statsForAuthor.getWeeks();\n-                assertEquals(494, weeks.size());\n+                assertThat(weeks.size(), equalTo(494));\n \n                 try {\n                     // check a particular week\n                     // TODO: Maybe add a convenience method to get the week\n                     // containing a certain date (Java.Util.Date).\n                     GHRepositoryStatistics.ContributorStats.Week week = statsForAuthor.getWeek(1541289600);\n-                    assertEquals(63, week.getNumberOfAdditions());\n-                    assertEquals(56, week.getNumberOfDeletions());\n-                    assertEquals(5, week.getNumberOfCommits());\n-                    assertEquals(\"Week starting 1541289600 - Additions: 63, Deletions: 56, Commits: 5\",\n-                            week.toString());\n+                    assertThat(week.getNumberOfAdditions(), equalTo(63));\n+                    assertThat(week.getNumberOfDeletions(), equalTo(56));\n+                    assertThat(week.getNumberOfCommits(), equalTo(5));\n+                    assertThat(week.toString(),\n+                            equalTo(\"Week starting 1541289600 - Additions: 63, Deletions: 56, Commits: 5\"));\n                 } catch (NoSuchElementException e) {\n                     fail(\"Did not find week 1546128000\");\n                 }\n@@ -57,7 +59,7 @@ public void testContributorStats() throws IOException, InterruptedException {\n             }\n         }\n \n-        assertTrue(\"Did not find author \" + authorLogin, developerFound);\n+        assertThat(\"Did not find author \" + authorLogin, developerFound);\n     }\n \n     @Test\n@@ -89,20 +91,20 @@ public void testCommitActivity() throws IOException, InterruptedException {\n         Boolean foundWeek = false;\n         for (GHRepositoryStatistics.CommitActivity item : list) {\n             if (item.getWeek() == 1566691200) {\n-                assertEquals(6, item.getTotal());\n+                assertThat(item.getTotal(), equalTo(6));\n                 List<Integer> days = item.getDays();\n-                assertEquals(0, (long) days.get(0));\n-                assertEquals(0, (long) days.get(1));\n-                assertEquals(1, (long) days.get(2));\n-                assertEquals(0, (long) days.get(3));\n-                assertEquals(0, (long) days.get(4));\n-                assertEquals(1, (long) days.get(5));\n-                assertEquals(4, (long) days.get(6));\n+                assertThat((long) days.get(0), equalTo(0L));\n+                assertThat((long) days.get(1), equalTo(0L));\n+                assertThat((long) days.get(2), equalTo(1L));\n+                assertThat((long) days.get(3), equalTo(0L));\n+                assertThat((long) days.get(4), equalTo(0L));\n+                assertThat((long) days.get(5), equalTo(1L));\n+                assertThat((long) days.get(6), equalTo(4L));\n                 foundWeek = true;\n                 break;\n             }\n         }\n-        assertTrue(\"Could not find week starting 1546128000\", foundWeek);\n+        assertThat(\"Could not find week starting 1546128000\", foundWeek);\n     }\n \n     @Test\n@@ -132,14 +134,14 @@ public void testCodeFrequency() throws IOException, InterruptedException {\n         Boolean foundWeek = false;\n         for (GHRepositoryStatistics.CodeFrequency item : stats) {\n             if (item.getWeekTimestamp() == 1535241600) {\n-                assertEquals(185, item.getAdditions());\n-                assertEquals(-243, item.getDeletions());\n-                assertEquals(\"Week starting 1535241600 has 185 additions and 243 deletions\", item.toString());\n+                assertThat(item.getAdditions(), equalTo(185L));\n+                assertThat(item.getDeletions(), equalTo(-243L));\n+                assertThat(item.toString(), equalTo(\"Week starting 1535241600 has 185 additions and 243 deletions\"));\n                 foundWeek = true;\n                 break;\n             }\n         }\n-        assertTrue(\"Could not find week starting 1535241600\", foundWeek);\n+        assertThat(\"Could not find week starting 1535241600\", foundWeek);\n     }\n \n     @Test\n@@ -164,11 +166,11 @@ public void testParticipation() throws IOException, InterruptedException {\n \n         // check the statistics are accurate\n         List<Integer> allCommits = stats.getAllCommits();\n-        assertEquals(52, allCommits.size());\n-        assertEquals(2, (int) allCommits.get(2));\n+        assertThat(allCommits.size(), equalTo(52));\n+        assertThat((int) allCommits.get(2), equalTo(2));\n \n         List<Integer> ownerCommits = stats.getOwnerCommits();\n-        assertEquals(52, ownerCommits.size());\n+        assertThat(ownerCommits.size(), equalTo(52));\n         // The values depend on who is running the test.\n     }\n \n@@ -199,13 +201,13 @@ public void testPunchCard() throws IOException, InterruptedException {\n             if (item.getDayOfWeek() == 2 && item.getHourOfDay() == 10) {\n                 // TODO: Make an easier access method. Perhaps wrap in an\n                 // object and have a method such as GetCommits(1, 16).\n-                assertEquals(16, item.getNumberOfCommits());\n-                assertEquals(\"Day 2 Hour 10: 16 commits\", item.toString());\n+                assertThat(item.getNumberOfCommits(), equalTo(16L));\n+                assertThat(item.toString(), equalTo(\"Day 2 Hour 10: 16 commits\"));\n                 hourFound = true;\n                 break;\n             }\n         }\n-        assertTrue(\"Hour 10 for Day 2 not found.\", hourFound);\n+        assertThat(\"Hour 10 for Day 2 not found.\", hourFound);\n     }\n \n     protected GHRepository getRepository() throws IOException {"
    },
    {
      "sha": "c85c5f357a3283ef83058a612fbcfef58464e7cd",
      "filename": "src/test/java/org/kohsuke/github/GHRepositoryTest.java",
      "status": "modified",
      "additions": 110,
      "deletions": 73,
      "changes": 183,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHRepositoryTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHRepositoryTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHRepositoryTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -3,6 +3,8 @@\n import com.fasterxml.jackson.databind.JsonMappingException;\n import org.apache.commons.io.IOUtils;\n import org.junit.Test;\n+import org.kohsuke.github.GHCheckRun.Conclusion;\n+import org.kohsuke.github.GHRepository.Visibility;\n \n import java.io.ByteArrayInputStream;\n import java.io.FileNotFoundException;\n@@ -12,7 +14,9 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n import static org.hamcrest.Matchers.*;\n import static org.hamcrest.core.IsInstanceOf.instanceOf;\n@@ -107,7 +111,7 @@ public void createSignedCommitVerifyError() throws IOException {\n                 .getCommitShortInfo()\n                 .getVerification();\n \n-        assertEquals(GPGVERIFY_ERROR, verification.getReason());\n+        assertThat(verification.getReason(), equalTo(GPGVERIFY_ERROR));\n     }\n \n     @Test\n@@ -124,13 +128,13 @@ public void createSignedCommitUnknownSignatureType() throws IOException {\n                 .getCommitShortInfo()\n                 .getVerification();\n \n-        assertEquals(UNKNOWN_SIGNATURE_TYPE, verification.getReason());\n+        assertThat(verification.getReason(), equalTo(UNKNOWN_SIGNATURE_TYPE));\n     }\n \n     @Test\n     public void listStargazers() throws IOException {\n         GHRepository repository = getRepository();\n-        assertThat(repository.listStargazers2().toList(), empty());\n+        assertThat(repository.listStargazers2().toList(), is(empty()));\n \n         repository = gitHub.getOrganization(\"hub4j\").getRepository(\"github-api\");\n         Iterable<GHStargazer> stargazers = repository.listStargazers2();\n@@ -164,11 +168,11 @@ public void getBranchNonExistentBut200Status() throws Exception {\n     @Test\n     public void subscription() throws Exception {\n         GHRepository r = getRepository();\n-        assertNull(r.getSubscription());\n+        assertThat(r.getSubscription(), nullValue());\n         GHSubscription s = r.subscribe(true, false);\n         try {\n \n-            assertEquals(s.getRepository(), r);\n+            assertThat(r, equalTo(s.getRepository()));\n             assertThat(s.isIgnored(), equalTo(false));\n             assertThat(s.isSubscribed(), equalTo(true));\n             assertThat(s.getRepositoryUrl().toString(), containsString(\"/repos/hub4j-test-org/github-api\"));\n@@ -180,7 +184,7 @@ public void subscription() throws Exception {\n             s.delete();\n         }\n \n-        assertNull(r.getSubscription());\n+        assertThat(r.getSubscription(), nullValue());\n     }\n \n     @Test\n@@ -190,11 +194,11 @@ public void testSetPublic() throws Exception {\n         String repoName = \"test-repo-public\";\n         GHRepository repo = gitHub.createRepository(repoName).private_(false).create();\n         try {\n-            assertFalse(repo.isPrivate());\n+            assertThat(repo.isPrivate(), is(false));\n             repo.setPrivate(true);\n-            assertTrue(myself.getRepository(repoName).isPrivate());\n+            assertThat(myself.getRepository(repoName).isPrivate(), is(true));\n             repo.setPrivate(false);\n-            assertFalse(myself.getRepository(repoName).isPrivate());\n+            assertThat(myself.getRepository(repoName).isPrivate(), is(false));\n         } finally {\n             repo.delete();\n         }\n@@ -222,32 +226,56 @@ public void testUpdateRepository() throws Exception {\n                 .wiki(false)\n                 .done();\n \n-        assertTrue(updated.isAllowMergeCommit());\n-        assertFalse(updated.isAllowRebaseMerge());\n-        assertFalse(updated.isAllowSquashMerge());\n-        assertTrue(updated.isDeleteBranchOnMerge());\n-        assertTrue(updated.isPrivate());\n-        assertFalse(updated.hasDownloads());\n-        assertFalse(updated.hasIssues());\n-        assertFalse(updated.hasProjects());\n-        assertFalse(updated.hasWiki());\n+        assertThat(updated.isAllowMergeCommit(), is(true));\n+        assertThat(updated.isAllowRebaseMerge(), is(false));\n+        assertThat(updated.isAllowSquashMerge(), is(false));\n+        assertThat(updated.isDeleteBranchOnMerge(), is(true));\n+        assertThat(updated.isPrivate(), is(true));\n+        assertThat(updated.hasDownloads(), is(false));\n+        assertThat(updated.hasIssues(), is(false));\n+        assertThat(updated.hasProjects(), is(false));\n+        assertThat(updated.hasWiki(), is(false));\n \n-        assertEquals(homepage, updated.getHomepage());\n-        assertEquals(description, updated.getDescription());\n+        assertThat(updated.getHomepage(), equalTo(homepage));\n+        assertThat(updated.getDescription(), equalTo(description));\n \n         // test the other merge option and making the repo public again\n         GHRepository redux = updated.update().allowMergeCommit(false).allowRebaseMerge(true).private_(false).done();\n \n-        assertFalse(redux.isAllowMergeCommit());\n-        assertTrue(redux.isAllowRebaseMerge());\n-        assertFalse(redux.isPrivate());\n+        assertThat(redux.isAllowMergeCommit(), is(false));\n+        assertThat(redux.isAllowRebaseMerge(), is(true));\n+        assertThat(redux.isPrivate(), is(false));\n \n         String updatedDescription = \"updated using set()\";\n         redux = redux.set().description(updatedDescription);\n \n         assertThat(redux.getDescription(), equalTo(updatedDescription));\n     }\n \n+    @Test\n+    public void testGetRepositoryWithVisibility() throws IOException {\n+        snapshotNotAllowed();\n+        final String repoName = \"test-repo-visibility\";\n+        final GHRepository repo = getTempRepository(repoName);\n+        assertThat(repo.getVisibility(), equalTo(Visibility.PUBLIC));\n+\n+        repo.setVisibility(Visibility.INTERNAL);\n+        assertThat(gitHub.getRepository(repo.getOwnerName() + \"/\" + repo.getName()).getVisibility(),\n+                equalTo(Visibility.INTERNAL));\n+\n+        repo.setVisibility(Visibility.PRIVATE);\n+        assertThat(gitHub.getRepository(repo.getOwnerName() + \"/\" + repo.getName()).getVisibility(),\n+                equalTo(Visibility.PRIVATE));\n+\n+        repo.setVisibility(Visibility.PUBLIC);\n+        assertThat(gitHub.getRepository(repo.getOwnerName() + \"/\" + repo.getName()).getVisibility(),\n+                equalTo(Visibility.PUBLIC));\n+\n+        // deliberately bogus response in snapshot\n+        assertThat(gitHub.getRepository(repo.getOwnerName() + \"/\" + repo.getName()).getVisibility(),\n+                equalTo(Visibility.UNKNOWN));\n+    }\n+\n     @Test\n     public void listContributors() throws IOException {\n         GHRepository r = gitHub.getOrganization(\"hub4j\").getRepository(\"github-api\");\n@@ -256,30 +284,30 @@ public void listContributors() throws IOException {\n \n         for (GHRepository.Contributor c : r.listContributors()) {\n             if (c.getLogin().equals(\"kohsuke\")) {\n-                assertTrue(c.getContributions() > 0);\n+                assertThat(c.getContributions(), greaterThan(0));\n                 kohsuke = true;\n             }\n             if (i++ > 5) {\n                 break;\n             }\n         }\n \n-        assertTrue(kohsuke);\n+        assertThat(kohsuke, is(true));\n     }\n \n     @Test\n     public void getPermission() throws Exception {\n         kohsuke();\n         GHRepository r = gitHub.getRepository(\"hub4j-test-org/test-permission\");\n-        assertEquals(GHPermissionType.ADMIN, r.getPermission(\"kohsuke\"));\n-        assertEquals(GHPermissionType.READ, r.getPermission(\"dude\"));\n+        assertThat(r.getPermission(\"kohsuke\"), equalTo(GHPermissionType.ADMIN));\n+        assertThat(r.getPermission(\"dude\"), equalTo(GHPermissionType.READ));\n         r = gitHub.getOrganization(\"apache\").getRepository(\"groovy\");\n         try {\n             r.getPermission(\"jglick\");\n             fail();\n         } catch (HttpException x) {\n             // x.printStackTrace(); // good\n-            assertEquals(403, x.getResponseCode());\n+            assertThat(x.getResponseCode(), equalTo(403));\n         }\n \n         if (false) {\n@@ -299,7 +327,7 @@ public void LatestRepositoryExist() {\n         try {\n             // add the repository that have latest release\n             GHRelease release = gitHub.getRepository(\"kamontat/CheckIDNumber\").getLatestRelease();\n-            assertEquals(\"v3.0\", release.getTagName());\n+            assertThat(release.getTagName(), equalTo(\"v3.0\"));\n         } catch (IOException e) {\n             e.printStackTrace();\n             fail();\n@@ -320,15 +348,15 @@ public void addCollaborators() throws Exception {\n \n         GHUser colabUser = collabs.byLogin(\"jimmysombrero\");\n \n-        assertEquals(colabUser.getName(), user.getName());\n+        assertThat(user.getName(), equalTo(colabUser.getName()));\n     }\n \n     @Test\n     public void LatestRepositoryNotExist() {\n         try {\n             // add the repository that `NOT` have latest release\n             GHRelease release = gitHub.getRepository(\"kamontat/Java8Example\").getLatestRelease();\n-            assertNull(release);\n+            assertThat(release, nullValue());\n         } catch (IOException e) {\n             e.printStackTrace();\n             fail();\n@@ -338,39 +366,42 @@ public void LatestRepositoryNotExist() {\n     @Test\n     public void listReleases() throws IOException {\n         PagedIterable<GHRelease> releases = gitHub.getOrganization(\"github\").getRepository(\"hub\").listReleases();\n-        assertTrue(releases.iterator().hasNext());\n+        assertThat(releases, is(not(emptyIterable())));\n     }\n \n     @Test\n     public void getReleaseExists() throws IOException {\n         GHRelease release = gitHub.getOrganization(\"github\").getRepository(\"hub\").getRelease(6839710);\n-        assertEquals(\"v2.3.0-pre10\", release.getTagName());\n+        assertThat(release.getTagName(), equalTo(\"v2.3.0-pre10\"));\n     }\n \n     @Test\n     public void getReleaseDoesNotExist() throws IOException {\n         GHRelease release = gitHub.getOrganization(\"github\").getRepository(\"hub\").getRelease(Long.MAX_VALUE);\n-        assertNull(release);\n+        assertThat(release, nullValue());\n     }\n \n     @Test\n     public void getReleaseByTagNameExists() throws IOException {\n         GHRelease release = gitHub.getOrganization(\"github\").getRepository(\"hub\").getReleaseByTagName(\"v2.3.0-pre10\");\n-        assertNotNull(release);\n-        assertEquals(\"v2.3.0-pre10\", release.getTagName());\n+        assertThat(release, notNullValue());\n+        assertThat(release.getTagName(), equalTo(\"v2.3.0-pre10\"));\n     }\n \n     @Test\n     public void getReleaseByTagNameDoesNotExist() throws IOException {\n         GHRelease release = getRepository().getReleaseByTagName(\"foo-bar-baz\");\n-        assertNull(release);\n+        assertThat(release, nullValue());\n     }\n \n     @Test\n     public void listLanguages() throws IOException {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         String mainLanguage = r.getLanguage();\n-        assertTrue(r.listLanguages().containsKey(mainLanguage));\n+        assertThat(mainLanguage, equalTo(\"Java\"));\n+        Map<String, Long> languages = r.listLanguages();\n+        assertThat(languages.containsKey(mainLanguage), is(true));\n+        assertThat(languages.get(\"Java\"), greaterThan(100000L));\n     }\n \n     @Test\n@@ -388,17 +419,17 @@ public void listCommitCommentsSomeComments() throws IOException {\n                 .listCommitComments(\"499d91f9f846b0087b2a20cf3648b49dc9c2eeef\")\n                 .toList();\n \n-        assertThat(\"Two comments present\", commitComments.size() == 2);\n-        assertThat(\"Comment text found\", commitComments.stream().anyMatch(it -> it.body.equals(\"comment 1\")));\n-        assertThat(\"Comment text found\", commitComments.stream().anyMatch(it -> it.body.equals(\"comment 2\")));\n+        assertThat(\"Two comments present\", commitComments.size(), equalTo(2));\n+        assertThat(\"Comment text found\",\n+                commitComments.stream().map(GHCommitComment::getBody).collect(Collectors.toList()),\n+                containsInAnyOrder(\"comment 1\", \"comment 2\"));\n     }\n \n     @Test // Issue #261\n     public void listEmptyContributors() throws IOException {\n-        for (GHRepository.Contributor c : gitHub.getRepository(GITHUB_API_TEST_ORG + \"/empty\").listContributors()) {\n-            // System.out.println(c);\n-            fail(\"This list should be empty, but should return a valid empty iterable.\");\n-        }\n+        assertThat(\"This list should be empty, but should return a valid empty iterable.\",\n+                gitHub.getRepository(GITHUB_API_TEST_ORG + \"/empty\").listContributors(),\n+                is(emptyIterable()));\n     }\n \n     @Test\n@@ -410,9 +441,9 @@ public void searchRepositories() throws Exception {\n                 .list();\n         GHRepository u = r.iterator().next();\n         // System.out.println(u.getName());\n-        assertNotNull(u.getId());\n-        assertEquals(\"Assembly\", u.getLanguage());\n-        assertTrue(r.getTotalCount() > 0);\n+        assertThat(u.getId(), notNullValue());\n+        assertThat(u.getLanguage(), equalTo(\"Assembly\"));\n+        assertThat(r.getTotalCount(), greaterThan(0));\n     }\n \n     @Test // issue #162\n@@ -424,23 +455,24 @@ public void testIssue162() throws Exception {\n                 String content1 = content.getContent();\n                 String content2 = r.getFileContent(content.getPath(), \"gh-pages\").getContent();\n                 // System.out.println(content.getPath());\n-                assertEquals(content1, content2);\n+                assertThat(content2, equalTo(content1));\n             }\n         }\n     }\n \n     @Test\n     public void markDown() throws Exception {\n-        assertEquals(\"<p><strong>Test日本語</strong></p>\", IOUtils.toString(gitHub.renderMarkdown(\"**Test日本語**\")).trim());\n+        assertThat(IOUtils.toString(gitHub.renderMarkdown(\"**Test日本語**\")).trim(),\n+                equalTo(\"<p><strong>Test日本語</strong></p>\"));\n \n         String actual = IOUtils.toString(\n                 gitHub.getRepository(\"hub4j/github-api\").renderMarkdown(\"@kohsuke to fix issue #1\", MarkdownMode.GFM));\n         // System.out.println(actual);\n-        assertTrue(actual.contains(\"href=\\\"https://github.com/kohsuke\\\"\"));\n-        assertTrue(actual.contains(\"href=\\\"https://github.com/hub4j/github-api/pull/1\\\"\"));\n-        assertTrue(actual.contains(\"class=\\\"user-mention\\\"\"));\n-        assertTrue(actual.contains(\"class=\\\"issue-link \"));\n-        assertTrue(actual.contains(\"to fix issue\"));\n+        assertThat(actual, containsString(\"href=\\\"https://github.com/kohsuke\\\"\"));\n+        assertThat(actual, containsString(\"href=\\\"https://github.com/hub4j/github-api/pull/1\\\"\"));\n+        assertThat(actual, containsString(\"class=\\\"user-mention\\\"\"));\n+        assertThat(actual, containsString(\"class=\\\"issue-link \"));\n+        assertThat(actual, containsString(\"to fix issue\"));\n     }\n \n     @Test\n@@ -456,25 +488,25 @@ public void setMergeOptions() throws IOException {\n         r.allowRebaseMerge(false);\n \n         r = gitHub.getRepository(r.getFullName());\n-        assertFalse(r.isAllowMergeCommit());\n-        assertFalse(r.isAllowRebaseMerge());\n-        assertTrue(r.isAllowSquashMerge());\n+        assertThat(r.isAllowMergeCommit(), is(false));\n+        assertThat(r.isAllowRebaseMerge(), is(false));\n+        assertThat(r.isAllowSquashMerge(), is(true));\n \n         // flip the last value\n         r.allowMergeCommit(true);\n         r.allowRebaseMerge(true);\n         r.allowSquashMerge(false);\n \n         r = gitHub.getRepository(r.getFullName());\n-        assertTrue(r.isAllowMergeCommit());\n-        assertTrue(r.isAllowRebaseMerge());\n-        assertFalse(r.isAllowSquashMerge());\n+        assertThat(r.isAllowMergeCommit(), is(true));\n+        assertThat(r.isAllowRebaseMerge(), is(true));\n+        assertThat(r.isAllowSquashMerge(), is(false));\n     }\n \n     @Test\n     public void getDeleteBranchOnMerge() throws IOException {\n         GHRepository r = getRepository();\n-        assertNotNull(r.isDeleteBranchOnMerge());\n+        assertThat(r.isDeleteBranchOnMerge(), notNullValue());\n     }\n \n     @Test\n@@ -485,13 +517,13 @@ public void setDeleteBranchOnMerge() throws IOException {\n         r.deleteBranchOnMerge(true);\n \n         r = gitHub.getRepository(r.getFullName());\n-        assertTrue(r.isDeleteBranchOnMerge());\n+        assertThat(r.isDeleteBranchOnMerge(), is(true));\n \n         // flip the last value\n         r.deleteBranchOnMerge(false);\n \n         r = gitHub.getRepository(r.getFullName());\n-        assertFalse(r.isDeleteBranchOnMerge());\n+        assertThat(r.isDeleteBranchOnMerge(), is(false));\n     }\n \n     @Test\n@@ -526,7 +558,7 @@ public void testSetTopics() throws Exception {\n \n         topics = new ArrayList<>();\n         repo.setTopics(topics);\n-        assertTrue(\"Topics can be set to empty\", repo.listTopics().isEmpty());\n+        assertThat(\"Topics can be set to empty\", repo.listTopics(), is(empty()));\n     }\n \n     @Test\n@@ -540,7 +572,7 @@ public void getCollaborators() throws Exception {\n     public void getPostCommitHooks() throws Exception {\n         GHRepository repo = getRepository(gitHub);\n         Set<URL> postcommitHooks = repo.getPostCommitHooks();\n-        assertThat(postcommitHooks.size(), equalTo(0));\n+        assertThat(postcommitHooks, is(empty()));\n     }\n \n     @Test\n@@ -549,7 +581,7 @@ public void getRefs() throws Exception {\n         GHRef[] refs = repo.getRefs();\n         assertThat(refs, notNullValue());\n         assertThat(refs.length, equalTo(1));\n-        assertThat(refs[0].getRef(), equalTo(\"refs/heads/master\"));\n+        assertThat(refs[0].getRef(), equalTo(\"refs/heads/main\"));\n     }\n \n     @Test\n@@ -558,7 +590,7 @@ public void getRefsHeads() throws Exception {\n         GHRef[] refs = repo.getRefs(\"heads\");\n         assertThat(refs, notNullValue());\n         assertThat(refs.length, equalTo(1));\n-        assertThat(refs[0].getRef(), equalTo(\"refs/heads/master\"));\n+        assertThat(refs[0].getRef(), equalTo(\"refs/heads/main\"));\n     }\n \n     @Test\n@@ -667,7 +699,7 @@ public void listRefsHeads() throws Exception {\n         List<GHRef> refs = repo.listRefs(\"heads\").toList();\n         assertThat(refs, notNullValue());\n         assertThat(refs.size(), equalTo(1));\n-        assertThat(refs.get(0).getRef(), equalTo(\"refs/heads/master\"));\n+        assertThat(refs.get(0).getRef(), equalTo(\"refs/heads/main\"));\n     }\n \n     @Test\n@@ -687,7 +719,7 @@ public void listTagsEmpty() throws Exception {\n         GHRepository repo = getTempRepository();\n         List<GHTag> refs = repo.listTags().toList();\n         assertThat(refs, notNullValue());\n-        assertThat(refs.size(), equalTo(0));\n+        assertThat(refs, is(empty()));\n     }\n \n     @Test\n@@ -703,15 +735,15 @@ public void checkWatchersCount() throws Exception {\n         snapshotNotAllowed();\n         GHRepository repo = getTempRepository();\n         int watchersCount = repo.getWatchersCount();\n-        assertEquals(10, watchersCount);\n+        assertThat(watchersCount, equalTo(10));\n     }\n \n     @Test\n     public void checkStargazersCount() throws Exception {\n         snapshotNotAllowed();\n         GHRepository repo = getTempRepository();\n         int stargazersCount = repo.getStargazersCount();\n-        assertEquals(10, stargazersCount);\n+        assertThat(stargazersCount, equalTo(10));\n     }\n \n     @Test\n@@ -743,10 +775,15 @@ public void getCheckRuns() throws Exception {\n         // Check if the checkruns are all succeeded and if we got all of them\n         int checkRunsCount = 0;\n         for (GHCheckRun checkRun : checkRuns) {\n-            assertThat(checkRun.getConclusion(), equalTo(\"success\"));\n+            assertThat(checkRun.getConclusion(), equalTo(Conclusion.SUCCESS));\n             checkRunsCount++;\n         }\n         assertThat(checkRunsCount, equalTo(expectedCount));\n+\n+        // Check that we can call update on the results\n+        for (GHCheckRun checkRun : checkRuns) {\n+            checkRun.update();\n+        }\n     }\n \n     @Test"
    },
    {
      "sha": "e54e0e57a6b6dcc39557a454a0c581a750ea3a3c",
      "filename": "src/test/java/org/kohsuke/github/GHTagTest.java",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHTagTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHTagTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHTagTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -7,8 +7,6 @@\n import java.io.IOException;\n \n import static org.hamcrest.Matchers.*;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n \n /**\n  *\n@@ -25,7 +23,7 @@ public void cleanUpTags() throws Exception {\n         }\n \n         try {\n-            GHRef ref = getRepository(this.getGitHubBeforeAfter()).getRef(\"tags/create_tag_test\");\n+            GHRef ref = getRepository(this.getNonRecordingGitHub()).getRef(\"tags/create_tag_test\");\n             if (ref != null) {\n                 ref.delete();\n             }\n@@ -45,19 +43,19 @@ public void testCreateTag() throws Exception {\n         String tagType = \"commit\";\n \n         GHTagObject tag = repo.createTag(tagName, tagMessage, commitSha, tagType);\n-        assertEquals(tagName, tag.getTag());\n-        assertEquals(tagMessage, tag.getMessage());\n-        assertEquals(commitSha, tag.getObject().getSha());\n-        assertFalse(tag.getVerification().isVerified());\n-        assertEquals(tag.getVerification().getReason(), GHVerification.Reason.UNSIGNED);\n+        assertThat(tag.getTag(), equalTo(tagName));\n+        assertThat(tag.getMessage(), equalTo(tagMessage));\n+        assertThat(tag.getObject().getSha(), equalTo(commitSha));\n+        assertThat(tag.getVerification().isVerified(), is(false));\n+        assertThat(GHVerification.Reason.UNSIGNED, equalTo(tag.getVerification().getReason()));\n         assertThat(tag.getUrl(),\n                 containsString(\"/repos/hub4j-test-org/github-api/git/tags/e7aa6d4afbaa48669f0bbe11ca3c4d787b2b153c\"));\n         assertThat(tag.getOwner().getId(), equalTo(repo.getId()));\n         assertThat(tag.getTagger().getEmail(), equalTo(\"martin.vanzijl@gmail.com\"));\n \n         // Make a reference to the newly created tag.\n         GHRef ref = repo.createRef(\"refs/tags/\" + tagName, tag.getSha());\n-        assertNotNull(ref);\n+        assertThat(ref, notNullValue());\n     }\n \n     protected GHRepository getRepository() throws IOException {"
    },
    {
      "sha": "2b87138d69b4052a7272c8a58978ce88f50e7f44",
      "filename": "src/test/java/org/kohsuke/github/GHTeamBuilderTest.java",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHTeamBuilderTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHTeamBuilderTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHTeamBuilderTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -4,6 +4,8 @@\n \n import java.io.IOException;\n \n+import static org.hamcrest.Matchers.equalTo;\n+\n public class GHTeamBuilderTest extends AbstractGitHubWireMockTest {\n \n     @Test\n@@ -23,10 +25,10 @@ public void testCreateChildTeam() throws IOException {\n                 .parentTeamId(parentTeam.getId())\n                 .create();\n \n-        assertEquals(description, childTeam.getDescription());\n-        assertEquals(childTeamSlug, childTeam.getName());\n-        assertEquals(childTeamSlug, childTeam.getSlug());\n-        assertEquals(GHTeam.Privacy.CLOSED, childTeam.getPrivacy());\n+        assertThat(childTeam.getDescription(), equalTo(description));\n+        assertThat(childTeam.getName(), equalTo(childTeamSlug));\n+        assertThat(childTeam.getSlug(), equalTo(childTeamSlug));\n+        assertThat(childTeam.getPrivacy(), equalTo(GHTeam.Privacy.CLOSED));\n \n     }\n }"
    },
    {
      "sha": "d31d4477296b4335e4591ee88a0ffeac3e2731cf",
      "filename": "src/test/java/org/kohsuke/github/GHTeamTest.java",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHTeamTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHTeamTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHTeamTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -7,7 +7,7 @@\n import java.util.List;\n import java.util.Set;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.hamcrest.Matchers.*;\n \n public class GHTeamTest extends AbstractGitHubWireMockTest {\n \n@@ -23,7 +23,7 @@ public void testSetDescription() throws IOException {\n \n         // Check that it was set correctly.\n         team = gitHub.getOrganization(GITHUB_API_TEST_ORG).getTeamBySlug(teamSlug);\n-        assertEquals(description, team.getDescription());\n+        assertThat(team.getDescription(), equalTo(description));\n \n         description += \"Modified\";\n \n@@ -32,7 +32,7 @@ public void testSetDescription() throws IOException {\n \n         // Check that it was set correctly.\n         team = gitHub.getOrganization(GITHUB_API_TEST_ORG).getTeamBySlug(teamSlug);\n-        assertEquals(description, team.getDescription());\n+        assertThat(team.getDescription(), equalTo(description));\n     }\n \n     @Test\n@@ -43,8 +43,8 @@ public void testlistMembersAdmin() throws IOException {\n \n         List<GHUser> admins = team.listMembers(\"admin\").toList();\n \n-        assertNotNull(admins);\n-        assertThat(\"One admin in dummy team\", admins.size() == 1);\n+        assertThat(admins, notNullValue());\n+        assertThat(\"One admin in dummy team\", admins.size(), equalTo(1));\n         assertThat(\"Specific user in admin team\",\n                 admins.stream().anyMatch(ghUser -> ghUser.getLogin().equals(\"bitwiseman\")));\n     }\n@@ -71,7 +71,7 @@ public void testSetPrivacy() throws IOException {\n \n         // Check that it was set correctly.\n         team = gitHub.getOrganization(GITHUB_API_TEST_ORG).getTeamBySlug(teamSlug);\n-        assertEquals(privacy, team.getPrivacy());\n+        assertThat(team.getPrivacy(), equalTo(privacy));\n \n         privacy = Privacy.SECRET;\n \n@@ -80,7 +80,7 @@ public void testSetPrivacy() throws IOException {\n \n         // Check that it was set correctly.\n         team = gitHub.getOrganization(GITHUB_API_TEST_ORG).getTeamBySlug(teamSlug);\n-        assertEquals(privacy, team.getPrivacy());\n+        assertThat(team.getPrivacy(), equalTo(privacy));\n     }\n \n     @Test\n@@ -91,8 +91,8 @@ public void testFetchChildTeams() throws IOException {\n         GHTeam team = org.getTeamBySlug(teamSlug);\n         Set<GHTeam> result = team.listChildTeams().toSet();\n \n-        assertEquals(1, result.size());\n-        assertEquals(\"child-team-for-dummy\", result.toArray(new GHTeam[]{})[0].getName());\n+        assertThat(result.size(), equalTo(1));\n+        assertThat(result.toArray(new GHTeam[]{})[0].getName(), equalTo(\"child-team-for-dummy\"));\n     }\n \n     @Test\n@@ -103,7 +103,7 @@ public void testFetchEmptyChildTeams() throws IOException {\n         GHTeam team = org.getTeamBySlug(teamSlug);\n         Set<GHTeam> result = team.listChildTeams().toSet();\n \n-        assertEquals(0, result.size());\n+        assertThat(result, is(empty()));\n     }\n \n }"
    },
    {
      "sha": "a1ce88e9aa60692b8eb80f97691c689f77e13c11",
      "filename": "src/test/java/org/kohsuke/github/GHTreeBuilderTest.java",
      "status": "modified",
      "additions": 15,
      "deletions": 16,
      "changes": 31,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHTreeBuilderTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHTreeBuilderTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHTreeBuilderTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -10,7 +10,6 @@\n import java.util.Date;\n \n import static org.hamcrest.Matchers.*;\n-import static org.junit.Assert.assertEquals;\n \n public class GHTreeBuilderTest extends AbstractGitHubWireMockTest {\n     private static String REPO_NAME = \"hub4j-test-org/GHTreeBuilderTest\";\n@@ -28,14 +27,14 @@\n     private static byte[] CONTENT_DATA2 = { 0x04, 0x05, 0x06, 0x07 };\n \n     private GHRepository repo;\n-    private GHRef masterRef;\n+    private GHRef mainRef;\n     private GHTreeBuilder treeBuilder;\n \n     @Before\n     @After\n     public void cleanup() throws Exception {\n         if (mockGitHub.isUseProxy()) {\n-            repo = getGitHubBeforeAfter().getRepository(REPO_NAME);\n+            repo = getNonRecordingGitHub().getRepository(REPO_NAME);\n             Arrays.asList(PATH_SCRIPT, PATH_README, PATH_DATA1, PATH_DATA2).forEach(path -> {\n                 try {\n                     GHContent content = repo.getFileContent(path);\n@@ -51,9 +50,9 @@ public void cleanup() throws Exception {\n     @Before\n     public void setUp() throws Exception {\n         repo = gitHub.getRepository(REPO_NAME);\n-        masterRef = repo.getRef(\"heads/master\");\n-        String masterTreeSha = repo.getTreeRecursive(\"master\", 1).getSha();\n-        treeBuilder = repo.createTree().baseTree(masterTreeSha);\n+        mainRef = repo.getRef(\"heads/main\");\n+        String mainTreeSha = repo.getTreeRecursive(\"main\", 1).getSha();\n+        treeBuilder = repo.createTree().baseTree(mainTreeSha);\n     }\n \n     @Test\n@@ -64,8 +63,8 @@ public void testTextEntry() throws Exception {\n \n         updateTree();\n \n-        assertEquals(CONTENT_SCRIPT.length(), getFileSize(PATH_SCRIPT));\n-        assertEquals(CONTENT_README.length(), getFileSize(PATH_README));\n+        assertThat(getFileSize(PATH_SCRIPT), equalTo(CONTENT_SCRIPT.length()));\n+        assertThat(getFileSize(PATH_README), equalTo(CONTENT_README.length()));\n     }\n \n     @Test\n@@ -78,8 +77,8 @@ public void testShaEntry() throws Exception {\n \n         updateTree();\n \n-        assertEquals(CONTENT_DATA1.length, getFileSize(PATH_DATA1));\n-        assertEquals(CONTENT_DATA2.length, getFileSize(PATH_DATA2));\n+        assertThat(getFileSize(PATH_DATA1), equalTo((long) CONTENT_DATA1.length));\n+        assertThat(getFileSize(PATH_DATA2), equalTo((long) CONTENT_DATA2.length));\n     }\n \n     @Test\n@@ -91,10 +90,10 @@ public void testAdd() throws Exception {\n \n         GHCommit commit = updateTree();\n \n-        assertEquals(CONTENT_SCRIPT.length(), getFileSize(PATH_SCRIPT));\n-        assertEquals(CONTENT_README.length(), getFileSize(PATH_README));\n-        assertEquals(CONTENT_DATA1.length, getFileSize(PATH_DATA1));\n-        assertEquals(CONTENT_DATA2.length, getFileSize(PATH_DATA2));\n+        assertThat(getFileSize(PATH_SCRIPT), equalTo((long) CONTENT_SCRIPT.length()));\n+        assertThat(getFileSize(PATH_README), equalTo((long) CONTENT_README.length()));\n+        assertThat(getFileSize(PATH_DATA1), equalTo((long) CONTENT_DATA1.length));\n+        assertThat(getFileSize(PATH_DATA2), equalTo((long) CONTENT_DATA2.length));\n \n         assertThat(commit.getCommitShortInfo().getAuthor().getEmail(), equalTo(\"author@author.com\"));\n         assertThat(commit.getCommitShortInfo().getCommitter().getEmail(), equalTo(\"committer@committer.com\"));\n@@ -107,11 +106,11 @@ private GHCommit updateTree() throws IOException {\n                 .tree(treeSha)\n                 .author(\"author\", \"author@author.com\", new Date(1611433225969L))\n                 .committer(\"committer\", \"committer@committer.com\", new Date(1611433225968L))\n-                .parent(masterRef.getObject().getSha())\n+                .parent(mainRef.getObject().getSha())\n                 .create();\n \n         String commitSha = commit.getSHA1();\n-        masterRef.updateTo(commitSha);\n+        mainRef.updateTo(commitSha);\n         return commit;\n     }\n "
    },
    {
      "sha": "c60baa2ef99a71684062e22ddb514e8717b88be2",
      "filename": "src/test/java/org/kohsuke/github/GHUserTest.java",
      "status": "modified",
      "additions": 36,
      "deletions": 25,
      "changes": 61,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHUserTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHUserTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHUserTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1,19 +1,22 @@\n package org.kohsuke.github;\n \n-import org.junit.Assert;\n import org.junit.Test;\n \n import java.io.IOException;\n import java.util.*;\n \n import static org.hamcrest.CoreMatchers.*;\n+import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.notNullValue;\n \n public class GHUserTest extends AbstractGitHubWireMockTest {\n     @Test\n     public void listFollowsAndFollowers() throws IOException {\n         GHUser u = gitHub.getUser(\"rtyler\");\n-        assertNotEquals(count30(u.listFollowers()), count30(u.listFollows()));\n+        assertThat(count30(u.listFollows()), not(count30(u.listFollowers())));\n     }\n \n     private Set<GHUser> count30(PagedIterable<GHUser> l) {\n@@ -22,7 +25,7 @@ public void listFollowsAndFollowers() throws IOException {\n         for (int i = 0; i < 30 && itr.hasNext(); i++) {\n             users.add(itr.next());\n         }\n-        assertEquals(30, users.size());\n+        assertThat(users.size(), equalTo(30));\n         return users;\n     }\n \n@@ -31,38 +34,35 @@ public void getKeys() throws IOException {\n         GHUser u = gitHub.getUser(\"rtyler\");\n         List<GHKey> ghKeys = new ArrayList<>(u.getKeys());\n \n-        assertEquals(3, ghKeys.size());\n+        assertThat(ghKeys.size(), equalTo(3));\n         Collections.sort(ghKeys, new Comparator<GHKey>() {\n             @Override\n             public int compare(GHKey ghKey, GHKey t1) {\n                 return ghKey.getId() - t1.getId();\n             }\n         });\n-        assertEquals(1066173, ghKeys.get(0).getId());\n+        assertThat(ghKeys.get(0).getId(), equalTo(1066173));\n         assertThat(ghKeys.get(0).getTitle(), nullValue());\n         assertThat(ghKeys.get(0).getUrl(), nullValue());\n         assertThat(ghKeys.get(0).isVerified(), equalTo(false));\n         assertThat(ghKeys.get(0).toString(),\n                 containsString(\n                         \"title=<null>,id=1066173,key=ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAueiy12T5bvFhsc9YjfLc3aVIxgySd3gDxQWy/bletIoZL8omKmzocBYJ7F58U1asoyfWsy2ToTOY8jJp1eToXmbD6L5+xvHba0A7djYh9aQRrFam7doKQ0zp0ZSUF6+R1v0OM4nnWqK4n2ECIYd+Bdzrp+xA5+XlW3ZSNzlnW2BeWznzmgRMcp6wI+zQ9GMHWviR1cxpml5Z6wrxTZ0aX91btvnNPqoOGva976B6e6403FOEkkIFTk6CC1TFKwc/VjbqxYBg4kU0JhiTP+iEZibcQrYjWdYUgAotYbFVe5/DneHMLNsMPdeihba4PUwt62rXyNegenuCRmCntLcaFQ==\"));\n \n-        assertEquals(\n-                \"ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAueiy12T5bvFhsc9YjfLc3aVIxgySd3gDxQWy/bletIoZL8omKmzocBYJ7F58U1asoyfWsy2ToTOY8jJp1eToXmbD6L5+xvHba0A7djYh9aQRrFam7doKQ0zp0ZSUF6+R1v0OM4nnWqK4n2ECIYd+Bdzrp+xA5+XlW3ZSNzlnW2BeWznzmgRMcp6wI+zQ9GMHWviR1cxpml5Z6wrxTZ0aX91btvnNPqoOGva976B6e6403FOEkkIFTk6CC1TFKwc/VjbqxYBg4kU0JhiTP+iEZibcQrYjWdYUgAotYbFVe5/DneHMLNsMPdeihba4PUwt62rXyNegenuCRmCntLcaFQ==\",\n-                ghKeys.get(0).getKey());\n-        assertEquals(28136459, ghKeys.get(1).getId());\n+        assertThat(ghKeys.get(0).getKey(),\n+                equalTo(\"ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAueiy12T5bvFhsc9YjfLc3aVIxgySd3gDxQWy/bletIoZL8omKmzocBYJ7F58U1asoyfWsy2ToTOY8jJp1eToXmbD6L5+xvHba0A7djYh9aQRrFam7doKQ0zp0ZSUF6+R1v0OM4nnWqK4n2ECIYd+Bdzrp+xA5+XlW3ZSNzlnW2BeWznzmgRMcp6wI+zQ9GMHWviR1cxpml5Z6wrxTZ0aX91btvnNPqoOGva976B6e6403FOEkkIFTk6CC1TFKwc/VjbqxYBg4kU0JhiTP+iEZibcQrYjWdYUgAotYbFVe5/DneHMLNsMPdeihba4PUwt62rXyNegenuCRmCntLcaFQ==\"));\n+        assertThat(ghKeys.get(1).getId(), equalTo(28136459));\n         assertThat(ghKeys.get(1).getTitle(), nullValue());\n         assertThat(ghKeys.get(1).getUrl(), nullValue());\n         assertThat(ghKeys.get(1).isVerified(), equalTo(false));\n-        assertEquals(\n-                \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDTU0s5OKCC6VpKZGL9NJD4mNLY0AtujkVB1JkkuQ4OkMi2YGUHJtGhTbTwEVhNxpm0x2dM5KSzse6MLDYuGBW0qkE/VVuD9+9I73hbq461KqP0+WlupNh+Qc86kbiLBDv64+vWc+50mp1dbINpoM5xvaPYxgjnemydPv7vu5bhCHBugW7aN8VcLgfFgcp8vZCEanMtd3hIRjRU8v8Skk233ZGu1bXkG8iIOBQPabvEtZ0VDMg9pT3Q1R6lnnKqfCwHXd6zP6uAtejFSxvKRGKpu3OLGQMHwk7NlImVuhkVdaEFBq7pQtpOaGuP2eLKcN1wy5jsTYE+ZB6pvHCi2ecb\",\n-                ghKeys.get(1).getKey());\n-        assertEquals(31452581, ghKeys.get(2).getId());\n+        assertThat(ghKeys.get(1).getKey(),\n+                equalTo(\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDTU0s5OKCC6VpKZGL9NJD4mNLY0AtujkVB1JkkuQ4OkMi2YGUHJtGhTbTwEVhNxpm0x2dM5KSzse6MLDYuGBW0qkE/VVuD9+9I73hbq461KqP0+WlupNh+Qc86kbiLBDv64+vWc+50mp1dbINpoM5xvaPYxgjnemydPv7vu5bhCHBugW7aN8VcLgfFgcp8vZCEanMtd3hIRjRU8v8Skk233ZGu1bXkG8iIOBQPabvEtZ0VDMg9pT3Q1R6lnnKqfCwHXd6zP6uAtejFSxvKRGKpu3OLGQMHwk7NlImVuhkVdaEFBq7pQtpOaGuP2eLKcN1wy5jsTYE+ZB6pvHCi2ecb\"));\n+        assertThat(ghKeys.get(2).getId(), equalTo(31452581));\n         assertThat(ghKeys.get(2).getTitle(), nullValue());\n         assertThat(ghKeys.get(2).getUrl(), nullValue());\n         assertThat(ghKeys.get(2).isVerified(), equalTo(false));\n-        assertEquals(\n-                \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC3JhH2FZBDmHLjXTcBoV6tdcYKmsQ7sgu8k1RsUhwxGsXm65+Cuas6GcMVoA1DncKfJGQkulHDFiTxIROIBmedh9/otHWBlZ4HqYZ4MQ1A8W5quULkXwX/kF+UdRBUxFvjigibEbuHB+LARVxRRzFlPnTSE9rAfAv8OOEsb3lNUGT/IGhN8w1vwe8GclB90tgqN1RBDgrVqwLFwn5AfrW9kUIa2f2oT4RjYu1OrhKhVIIzfHADo85aD+s8wEhqwI96BCJG3qTWrypoHwBUoj1O6Ak5CGc1iKz9o8XyTMjudRt2ddCjfOtxsuwSlTbVtQXJGIpgKviX1sgh4pPvGh7BVAFP+mdAK4F+mEugDnuj47GO/K5KGGDRCL56kh9+h28l4q/+fZvp7DhtmSN2EzrVAdQFskF8yY/6Xit/aAvjeKm03DcjbylSXbG26EJefaLHlwYFq2mUFRMak25wuuCZS71GF3RC3Sl/bMoxBKRYkyfYtGafeaYTFNGn8Dbd+hfVUCz31ebI8cvmlQR5b5AbCre3T7HTVgw8FKbAxWRf1Fio56PnqHsj+sT1KVj255Zo1F8iD9GrgERSVAlkh5bY/CKszQ8ZSd01c9Qp2a47/gR7XAAbxhzGHP+cSOlrqDlJ24fbPtcpVsM0llqKUcxpmoOBFNboRmE1QqnSmAf9ww==\",\n-                ghKeys.get(2).getKey());\n+        assertThat(ghKeys.get(2).getKey(),\n+                equalTo(\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC3JhH2FZBDmHLjXTcBoV6tdcYKmsQ7sgu8k1RsUhwxGsXm65+Cuas6GcMVoA1DncKfJGQkulHDFiTxIROIBmedh9/otHWBlZ4HqYZ4MQ1A8W5quULkXwX/kF+UdRBUxFvjigibEbuHB+LARVxRRzFlPnTSE9rAfAv8OOEsb3lNUGT/IGhN8w1vwe8GclB90tgqN1RBDgrVqwLFwn5AfrW9kUIa2f2oT4RjYu1OrhKhVIIzfHADo85aD+s8wEhqwI96BCJG3qTWrypoHwBUoj1O6Ak5CGc1iKz9o8XyTMjudRt2ddCjfOtxsuwSlTbVtQXJGIpgKviX1sgh4pPvGh7BVAFP+mdAK4F+mEugDnuj47GO/K5KGGDRCL56kh9+h28l4q/+fZvp7DhtmSN2EzrVAdQFskF8yY/6Xit/aAvjeKm03DcjbylSXbG26EJefaLHlwYFq2mUFRMak25wuuCZS71GF3RC3Sl/bMoxBKRYkyfYtGafeaYTFNGn8Dbd+hfVUCz31ebI8cvmlQR5b5AbCre3T7HTVgw8FKbAxWRf1Fio56PnqHsj+sT1KVj255Zo1F8iD9GrgERSVAlkh5bY/CKszQ8ZSd01c9Qp2a47/gR7XAAbxhzGHP+cSOlrqDlJ24fbPtcpVsM0llqKUcxpmoOBFNboRmE1QqnSmAf9ww==\"));\n     }\n \n     @Test\n@@ -71,27 +71,38 @@ public void listPublicRepositories() throws IOException {\n         Iterator<GHRepository> itr = user.listRepositories().iterator();\n         int i = 0;\n         for (; i < 115; i++) {\n-            assertTrue(itr.hasNext());\n+            assertThat(itr.hasNext(), is(true));\n             GHRepository r = itr.next();\n             // System.out.println(r.getFullName());\n-            assertNotNull(r.getUrl());\n-            assertNotEquals(0L, r.getId());\n+            assertThat(r.getUrl(), notNullValue());\n+            assertThat(r.getId(), not(0L));\n         }\n \n         assertThat(i, equalTo(115));\n     }\n \n+    @Test\n+    public void listProjects() throws IOException {\n+        GHUser user = gitHub.getUser(\"t0m4uk1991\");\n+        List<GHProject> projects = user.listProjects().toList();\n+        assertThat(projects, notNullValue());\n+        assertThat(projects.size(), is(3));\n+        assertThat(projects.get(0).getName(), is(\"Project 1\"));\n+        assertThat(projects.get(1).getName(), is(\"Project 2\"));\n+        assertThat(projects.get(2).getName(), is(\"Project 3\"));\n+    }\n+\n     @Test\n     public void listPublicRepositoriesPageSize62() throws IOException {\n         GHUser user = gitHub.getUser(\"kohsuke\");\n         Iterator<GHRepository> itr = user.listRepositories().withPageSize(62).iterator();\n         int i = 0;\n         for (; i < 115; i++) {\n-            assertTrue(itr.hasNext());\n+            assertThat(itr.hasNext(), is(true));\n             GHRepository r = itr.next();\n             // System.out.println(r.getFullName());\n-            assertNotNull(r.getUrl());\n-            assertNotEquals(0L, r.getId());\n+            assertThat(r.getUrl(), notNullValue());\n+            assertThat(r.getId(), not(0L));\n         }\n \n         assertThat(i, equalTo(115));\n@@ -108,7 +119,7 @@ public void createAndCountPrivateRepos() throws IOException {\n                 .create();\n \n         try {\n-            Assert.assertNotNull(repository);\n+            assertThat(repository, notNullValue());\n             GHUser ghUser = gitHub.getUser(login);\n             assertThat(ghUser.getTotalPrivateRepoCount().orElse(-1), greaterThan(0));\n         } finally {\n@@ -120,8 +131,8 @@ public void createAndCountPrivateRepos() throws IOException {\n     public void verifyBioAndHireable() throws IOException {\n         GHUser u = gitHub.getUser(\"Chew\");\n         assertThat(u.getBio(), equalTo(\"I like to program things and I hope to program something cool one day :D\"));\n-        assertTrue(u.isHireable());\n-        assertNotNull(u.getTwitterUsername());\n+        assertThat(u.isHireable(), is(true));\n+        assertThat(u.getTwitterUsername(), notNullValue());\n         assertThat(u.getBlog(), equalTo(\"https://chew.pw\"));\n         assertThat(u.getCompany(), equalTo(\"@Memerator\"));\n         assertThat(u.getFollowersCount(), equalTo(29));"
    },
    {
      "sha": "53a5cb63c14998bf3a47123cf7cc847cf67033d4",
      "filename": "src/test/java/org/kohsuke/github/GHVerificationReasonTest.java",
      "status": "modified",
      "additions": 51,
      "deletions": 44,
      "changes": 95,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHVerificationReasonTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHVerificationReasonTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHVerificationReasonTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -2,6 +2,8 @@\n \n import org.junit.Test;\n \n+import static org.hamcrest.Matchers.*;\n+\n /**\n  * @author Sourabh Sarvotham Parkala\n  */\n@@ -11,121 +13,126 @@\n     public void testExpiredKey() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         GHCommit commit = r.getCommit(\"86a2e245aa6d71d54923655066049d9e21a15f01\");\n-        assertEquals(commit.getCommitShortInfo().getAuthor().getName(), \"Sourabh Parkala\");\n-        assertFalse(commit.getCommitShortInfo().getVerification().isVerified());\n-        assertEquals(commit.getCommitShortInfo().getVerification().getReason(), GHVerification.Reason.EXPIRED_KEY);\n+        assertThat(commit.getCommitShortInfo().getAuthor().getName(), equalTo(\"Sourabh Parkala\"));\n+        assertThat(commit.getCommitShortInfo().getVerification().isVerified(), is(false));\n+        assertThat(commit.getCommitShortInfo().getVerification().getReason(),\n+                equalTo(GHVerification.Reason.EXPIRED_KEY));\n     }\n \n     @Test\n     public void testNotSigningKey() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         GHCommit commit = r.getCommit(\"86a2e245aa6d71d54923655066049d9e21a15f02\");\n-        assertEquals(commit.getCommitShortInfo().getAuthor().getName(), \"Sourabh Parkala\");\n-        assertFalse(commit.getCommitShortInfo().getVerification().isVerified());\n-        assertEquals(commit.getCommitShortInfo().getVerification().getReason(), GHVerification.Reason.NOT_SIGNING_KEY);\n+        assertThat(commit.getCommitShortInfo().getAuthor().getName(), equalTo(\"Sourabh Parkala\"));\n+        assertThat(commit.getCommitShortInfo().getVerification().isVerified(), is(false));\n+        assertThat(commit.getCommitShortInfo().getVerification().getReason(),\n+                equalTo(GHVerification.Reason.NOT_SIGNING_KEY));\n     }\n \n     @Test\n     public void testGpgverifyError() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         GHCommit commit = r.getCommit(\"86a2e245aa6d71d54923655066049d9e21a15f03\");\n-        assertEquals(commit.getCommitShortInfo().getAuthor().getName(), \"Sourabh Parkala\");\n-        assertFalse(commit.getCommitShortInfo().getVerification().isVerified());\n-        assertEquals(commit.getCommitShortInfo().getVerification().getReason(), GHVerification.Reason.GPGVERIFY_ERROR);\n+        assertThat(commit.getCommitShortInfo().getAuthor().getName(), equalTo(\"Sourabh Parkala\"));\n+        assertThat(commit.getCommitShortInfo().getVerification().isVerified(), is(false));\n+        assertThat(commit.getCommitShortInfo().getVerification().getReason(),\n+                equalTo(GHVerification.Reason.GPGVERIFY_ERROR));\n     }\n \n     @Test\n     public void testGpgverifyUnavailable() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         GHCommit commit = r.getCommit(\"86a2e245aa6d71d54923655066049d9e21a15f04\");\n-        assertEquals(commit.getCommitShortInfo().getAuthor().getName(), \"Sourabh Parkala\");\n-        assertFalse(commit.getCommitShortInfo().getVerification().isVerified());\n-        assertEquals(commit.getCommitShortInfo().getVerification().getReason(),\n-                GHVerification.Reason.GPGVERIFY_UNAVAILABLE);\n+        assertThat(commit.getCommitShortInfo().getAuthor().getName(), equalTo(\"Sourabh Parkala\"));\n+        assertThat(commit.getCommitShortInfo().getVerification().isVerified(), is(false));\n+        assertThat(commit.getCommitShortInfo().getVerification().getReason(),\n+                equalTo(GHVerification.Reason.GPGVERIFY_UNAVAILABLE));\n     }\n \n     @Test\n     public void testUnsigned() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         GHCommit commit = r.getCommit(\"86a2e245aa6d71d54923655066049d9e21a15f05\");\n-        assertEquals(commit.getCommitShortInfo().getAuthor().getName(), \"Sourabh Parkala\");\n-        assertFalse(commit.getCommitShortInfo().getVerification().isVerified());\n-        assertEquals(commit.getCommitShortInfo().getVerification().getReason(), GHVerification.Reason.UNSIGNED);\n+        assertThat(commit.getCommitShortInfo().getAuthor().getName(), equalTo(\"Sourabh Parkala\"));\n+        assertThat(commit.getCommitShortInfo().getVerification().isVerified(), is(false));\n+        assertThat(commit.getCommitShortInfo().getVerification().getReason(), equalTo(GHVerification.Reason.UNSIGNED));\n     }\n \n     @Test\n     public void testUnknownSignatureType() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         GHCommit commit = r.getCommit(\"86a2e245aa6d71d54923655066049d9e21a15f06\");\n-        assertEquals(commit.getCommitShortInfo().getAuthor().getName(), \"Sourabh Parkala\");\n-        assertFalse(commit.getCommitShortInfo().getVerification().isVerified());\n-        assertEquals(commit.getCommitShortInfo().getVerification().getReason(),\n-                GHVerification.Reason.UNKNOWN_SIGNATURE_TYPE);\n+        assertThat(commit.getCommitShortInfo().getAuthor().getName(), equalTo(\"Sourabh Parkala\"));\n+        assertThat(commit.getCommitShortInfo().getVerification().isVerified(), is(false));\n+        assertThat(commit.getCommitShortInfo().getVerification().getReason(),\n+                equalTo(GHVerification.Reason.UNKNOWN_SIGNATURE_TYPE));\n     }\n \n     @Test\n     public void testNoUser() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         GHCommit commit = r.getCommit(\"86a2e245aa6d71d54923655066049d9e21a15f07\");\n-        assertEquals(commit.getCommitShortInfo().getAuthor().getName(), \"Sourabh Parkala\");\n-        assertFalse(commit.getCommitShortInfo().getVerification().isVerified());\n-        assertEquals(commit.getCommitShortInfo().getVerification().getReason(), GHVerification.Reason.NO_USER);\n+        assertThat(commit.getCommitShortInfo().getAuthor().getName(), equalTo(\"Sourabh Parkala\"));\n+        assertThat(commit.getCommitShortInfo().getVerification().isVerified(), is(false));\n+        assertThat(commit.getCommitShortInfo().getVerification().getReason(), equalTo(GHVerification.Reason.NO_USER));\n     }\n \n     @Test\n     public void testUnverifiedEmail() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         GHCommit commit = r.getCommit(\"86a2e245aa6d71d54923655066049d9e21a15f08\");\n-        assertEquals(commit.getCommitShortInfo().getAuthor().getName(), \"Sourabh Parkala\");\n-        assertFalse(commit.getCommitShortInfo().getVerification().isVerified());\n-        assertEquals(commit.getCommitShortInfo().getVerification().getReason(), GHVerification.Reason.UNVERIFIED_EMAIL);\n+        assertThat(commit.getCommitShortInfo().getAuthor().getName(), equalTo(\"Sourabh Parkala\"));\n+        assertThat(commit.getCommitShortInfo().getVerification().isVerified(), is(false));\n+        assertThat(commit.getCommitShortInfo().getVerification().getReason(),\n+                equalTo(GHVerification.Reason.UNVERIFIED_EMAIL));\n     }\n \n     @Test\n     public void testBadEmail() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         GHCommit commit = r.getCommit(\"86a2e245aa6d71d54923655066049d9e21a15f09\");\n-        assertEquals(commit.getCommitShortInfo().getAuthor().getName(), \"Sourabh Parkala\");\n-        assertFalse(commit.getCommitShortInfo().getVerification().isVerified());\n-        assertEquals(commit.getCommitShortInfo().getVerification().getReason(), GHVerification.Reason.BAD_EMAIL);\n+        assertThat(commit.getCommitShortInfo().getAuthor().getName(), equalTo(\"Sourabh Parkala\"));\n+        assertThat(commit.getCommitShortInfo().getVerification().isVerified(), is(false));\n+        assertThat(commit.getCommitShortInfo().getVerification().getReason(), equalTo(GHVerification.Reason.BAD_EMAIL));\n     }\n \n     @Test\n     public void testUnknownKey() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         GHCommit commit = r.getCommit(\"86a2e245aa6d71d54923655066049d9e21a15f10\");\n-        assertEquals(commit.getCommitShortInfo().getAuthor().getName(), \"Sourabh Parkala\");\n-        assertFalse(commit.getCommitShortInfo().getVerification().isVerified());\n-        assertEquals(commit.getCommitShortInfo().getVerification().getReason(), GHVerification.Reason.UNKNOWN_KEY);\n+        assertThat(commit.getCommitShortInfo().getAuthor().getName(), equalTo(\"Sourabh Parkala\"));\n+        assertThat(commit.getCommitShortInfo().getVerification().isVerified(), is(false));\n+        assertThat(commit.getCommitShortInfo().getVerification().getReason(),\n+                equalTo(GHVerification.Reason.UNKNOWN_KEY));\n     }\n \n     @Test\n     public void testMalformedSignature() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         GHCommit commit = r.getCommit(\"86a2e245aa6d71d54923655066049d9e21a15f11\");\n-        assertEquals(commit.getCommitShortInfo().getAuthor().getName(), \"Sourabh Parkala\");\n-        assertFalse(commit.getCommitShortInfo().getVerification().isVerified());\n-        assertEquals(commit.getCommitShortInfo().getVerification().getReason(),\n-                GHVerification.Reason.MALFORMED_SIGNATURE);\n+        assertThat(commit.getCommitShortInfo().getAuthor().getName(), equalTo(\"Sourabh Parkala\"));\n+        assertThat(commit.getCommitShortInfo().getVerification().isVerified(), is(false));\n+        assertThat(commit.getCommitShortInfo().getVerification().getReason(),\n+                equalTo(GHVerification.Reason.MALFORMED_SIGNATURE));\n     }\n \n     @Test\n     public void testInvalid() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         GHCommit commit = r.getCommit(\"86a2e245aa6d71d54923655066049d9e21a15f12\");\n-        assertEquals(commit.getCommitShortInfo().getAuthor().getName(), \"Sourabh Parkala\");\n-        assertFalse(commit.getCommitShortInfo().getVerification().isVerified());\n-        assertEquals(commit.getCommitShortInfo().getVerification().getReason(), GHVerification.Reason.INVALID);\n+        assertThat(commit.getCommitShortInfo().getAuthor().getName(), equalTo(\"Sourabh Parkala\"));\n+        assertThat(commit.getCommitShortInfo().getVerification().isVerified(), is(false));\n+        assertThat(commit.getCommitShortInfo().getVerification().getReason(), equalTo(GHVerification.Reason.INVALID));\n     }\n \n     @Test\n     public void testValid() throws Exception {\n         GHRepository r = gitHub.getRepository(\"hub4j/github-api\");\n         GHCommit commit = r.getCommit(\"86a2e245aa6d71d54923655066049d9e21a15f13\");\n-        assertEquals(commit.getCommitShortInfo().getAuthor().getName(), \"Sourabh Parkala\");\n-        assertTrue(commit.getCommitShortInfo().getVerification().isVerified());\n-        assertEquals(commit.getCommitShortInfo().getVerification().getReason(), GHVerification.Reason.VALID);\n-        assertNotNull(commit.getCommitShortInfo().getVerification().getPayload());\n-        assertNotNull(commit.getCommitShortInfo().getVerification().getSignature());\n+        assertThat(commit.getCommitShortInfo().getAuthor().getName(), equalTo(\"Sourabh Parkala\"));\n+        assertThat(commit.getCommitShortInfo().getVerification().isVerified(), is(true));\n+        assertThat(commit.getCommitShortInfo().getVerification().getReason(), equalTo(GHVerification.Reason.VALID));\n+        assertThat(commit.getCommitShortInfo().getVerification().getPayload(), notNullValue());\n+        assertThat(commit.getCommitShortInfo().getVerification().getSignature(), notNullValue());\n     }\n }"
    },
    {
      "sha": "d7b5442716b61e531af6d87696cfa7c5eed1ceda",
      "filename": "src/test/java/org/kohsuke/github/GHWorkflowRunTest.java",
      "status": "added",
      "additions": 501,
      "deletions": 0,
      "changes": 501,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHWorkflowRunTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHWorkflowRunTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHWorkflowRunTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,501 @@\n+package org.kohsuke.github;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kohsuke.github.GHWorkflowJob.Step;\n+import org.kohsuke.github.GHWorkflowRun.Conclusion;\n+import org.kohsuke.github.GHWorkflowRun.Status;\n+import org.kohsuke.github.function.InputStreamFunction;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Scanner;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+import static org.hamcrest.Matchers.*;\n+\n+public class GHWorkflowRunTest extends AbstractGitHubWireMockTest {\n+\n+    private static final String REPO_NAME = \"hub4j-test-org/GHWorkflowRunTest\";\n+    private static final String MAIN_BRANCH = \"main\";\n+    private static final String SECOND_BRANCH = \"second-branch\";\n+\n+    private static final String FAST_WORKFLOW_PATH = \"fast-workflow.yml\";\n+    private static final String FAST_WORKFLOW_NAME = \"Fast workflow\";\n+\n+    private static final String SLOW_WORKFLOW_PATH = \"slow-workflow.yml\";\n+    private static final String SLOW_WORKFLOW_NAME = \"Slow workflow\";\n+\n+    private static final String ARTIFACTS_WORKFLOW_PATH = \"artifacts-workflow.yml\";\n+    private static final String ARTIFACTS_WORKFLOW_NAME = \"Artifacts workflow\";\n+\n+    private static final String MULTI_JOBS_WORKFLOW_PATH = \"multi-jobs-workflow.yml\";\n+    private static final String MULTI_JOBS_WORKFLOW_NAME = \"Multi jobs workflow\";\n+    private static final String RUN_A_ONE_LINE_SCRIPT_STEP_NAME = \"Run a one-line script\";\n+\n+    private GHRepository repo;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        repo = gitHub.getRepository(REPO_NAME);\n+    }\n+\n+    @Test\n+    public void testManualRunAndBasicInformation() throws IOException {\n+        GHWorkflow workflow = repo.getWorkflow(FAST_WORKFLOW_PATH);\n+\n+        long latestPreexistingWorkflowRunId = getLatestPreexistingWorkflowRunId();\n+\n+        workflow.dispatch(MAIN_BRANCH);\n+\n+        await((nonRecordingRepo) -> getWorkflowRun(nonRecordingRepo,\n+                FAST_WORKFLOW_NAME,\n+                MAIN_BRANCH,\n+                Status.COMPLETED,\n+                latestPreexistingWorkflowRunId).isPresent());\n+\n+        GHWorkflowRun workflowRun = getWorkflowRun(FAST_WORKFLOW_NAME,\n+                MAIN_BRANCH,\n+                Status.COMPLETED,\n+                latestPreexistingWorkflowRunId).orElseThrow(\n+                        () -> new IllegalStateException(\"We must have a valid workflow run starting from here\"));\n+\n+        assertThat(workflowRun.getWorkflowId(), equalTo(workflow.getId()));\n+        assertThat(workflowRun.getId(), notNullValue());\n+        assertThat(workflowRun.getNodeId(), notNullValue());\n+        assertThat(workflowRun.getRepository().getFullName(), equalTo(REPO_NAME));\n+        assertThat(workflowRun.getUrl().getPath(), containsString(\"/actions/runs/\"));\n+        assertThat(workflowRun.getHtmlUrl().getPath(), containsString(\"/actions/runs/\"));\n+        assertThat(workflowRun.getJobsUrl().getPath(), endsWith(\"/jobs\"));\n+        assertThat(workflowRun.getLogsUrl().getPath(), endsWith(\"/logs\"));\n+        assertThat(workflowRun.getCheckSuiteUrl().getPath(), containsString(\"/check-suites/\"));\n+        assertThat(workflowRun.getArtifactsUrl().getPath(), endsWith(\"/artifacts\"));\n+        assertThat(workflowRun.getCancelUrl().getPath(), endsWith(\"/cancel\"));\n+        assertThat(workflowRun.getRerunUrl().getPath(), endsWith(\"/rerun\"));\n+        assertThat(workflowRun.getWorkflowUrl().getPath(), containsString(\"/actions/workflows/\"));\n+        assertThat(workflowRun.getHeadBranch(), equalTo(MAIN_BRANCH));\n+        assertThat(workflowRun.getHeadCommit().getId(), notNullValue());\n+        assertThat(workflowRun.getHeadCommit().getTreeId(), notNullValue());\n+        assertThat(workflowRun.getHeadCommit().getMessage(), notNullValue());\n+        assertThat(workflowRun.getHeadCommit().getTimestamp(), notNullValue());\n+        assertThat(workflowRun.getHeadCommit().getAuthor().getEmail(), notNullValue());\n+        assertThat(workflowRun.getHeadCommit().getCommitter().getEmail(), notNullValue());\n+        assertThat(workflowRun.getEvent(), equalTo(GHEvent.WORKFLOW_DISPATCH));\n+        assertThat(workflowRun.getStatus(), equalTo(Status.COMPLETED));\n+        assertThat(workflowRun.getConclusion(), equalTo(Conclusion.SUCCESS));\n+        assertThat(workflowRun.getHeadSha(), notNullValue());\n+    }\n+\n+    @Test\n+    public void testCancelAndRerun() throws IOException {\n+        GHWorkflow workflow = repo.getWorkflow(SLOW_WORKFLOW_PATH);\n+\n+        long latestPreexistingWorkflowRunId = getLatestPreexistingWorkflowRunId();\n+\n+        workflow.dispatch(MAIN_BRANCH);\n+\n+        // now that we have triggered the workflow run, we will wait until it's in progress and then cancel it\n+        await((nonRecordingRepo) -> getWorkflowRun(nonRecordingRepo,\n+                SLOW_WORKFLOW_NAME,\n+                MAIN_BRANCH,\n+                Status.IN_PROGRESS,\n+                latestPreexistingWorkflowRunId).isPresent());\n+\n+        GHWorkflowRun workflowRun = getWorkflowRun(SLOW_WORKFLOW_NAME,\n+                MAIN_BRANCH,\n+                Status.IN_PROGRESS,\n+                latestPreexistingWorkflowRunId).orElseThrow(\n+                        () -> new IllegalStateException(\"We must have a valid workflow run starting from here\"));\n+\n+        assertThat(workflowRun.getId(), notNullValue());\n+\n+        workflowRun.cancel();\n+        long cancelledWorkflowRunId = workflowRun.getId();\n+\n+        // let's wait until it's completed\n+        await((nonRecordingRepo) -> getWorkflowRunStatus(nonRecordingRepo, cancelledWorkflowRunId) == Status.COMPLETED);\n+\n+        // let's check that it has been properly cancelled\n+        workflowRun = repo.getWorkflowRun(cancelledWorkflowRunId);\n+        assertThat(workflowRun.getConclusion(), equalTo(Conclusion.CANCELLED));\n+\n+        // now let's rerun it\n+        workflowRun.rerun();\n+\n+        // let's check that it has been rerun\n+        await((nonRecordingRepo) -> getWorkflowRunStatus(nonRecordingRepo,\n+                cancelledWorkflowRunId) == Status.IN_PROGRESS);\n+\n+        // cancel it again\n+        workflowRun.cancel();\n+    }\n+\n+    @Test\n+    public void testDelete() throws IOException {\n+        GHWorkflow workflow = repo.getWorkflow(FAST_WORKFLOW_PATH);\n+\n+        long latestPreexistingWorkflowRunId = getLatestPreexistingWorkflowRunId();\n+\n+        workflow.dispatch(MAIN_BRANCH);\n+\n+        await((nonRecordingRepo) -> getWorkflowRun(nonRecordingRepo,\n+                FAST_WORKFLOW_NAME,\n+                MAIN_BRANCH,\n+                Status.COMPLETED,\n+                latestPreexistingWorkflowRunId).isPresent());\n+\n+        GHWorkflowRun workflowRunToDelete = getWorkflowRun(FAST_WORKFLOW_NAME,\n+                MAIN_BRANCH,\n+                Status.COMPLETED,\n+                latestPreexistingWorkflowRunId).orElseThrow(\n+                        () -> new IllegalStateException(\"We must have a valid workflow run starting from here\"));\n+\n+        assertThat(workflowRunToDelete.getId(), notNullValue());\n+\n+        workflowRunToDelete.delete();\n+\n+        try {\n+            repo.getWorkflowRun(workflowRunToDelete.getId());\n+            fail(\"The workflow \" + workflowRunToDelete.getId() + \" should have been deleted.\");\n+        } catch (GHFileNotFoundException e) {\n+            // success\n+        }\n+    }\n+\n+    @Test\n+    public void testSearchOnBranch() throws IOException {\n+        GHWorkflow workflow = repo.getWorkflow(FAST_WORKFLOW_PATH);\n+\n+        long latestPreexistingWorkflowRunId = getLatestPreexistingWorkflowRunId();\n+\n+        workflow.dispatch(SECOND_BRANCH);\n+\n+        await((nonRecordingRepo) -> getWorkflowRun(nonRecordingRepo,\n+                FAST_WORKFLOW_NAME,\n+                SECOND_BRANCH,\n+                Status.COMPLETED,\n+                latestPreexistingWorkflowRunId).isPresent());\n+\n+        GHWorkflowRun workflowRun = getWorkflowRun(FAST_WORKFLOW_NAME,\n+                SECOND_BRANCH,\n+                Status.COMPLETED,\n+                latestPreexistingWorkflowRunId).orElseThrow(\n+                        () -> new IllegalStateException(\"We must have a valid workflow run starting from here\"));\n+\n+        assertThat(workflowRun.getWorkflowId(), equalTo(workflow.getId()));\n+        assertThat(workflowRun.getHeadBranch(), equalTo(SECOND_BRANCH));\n+        assertThat(workflowRun.getEvent(), equalTo(GHEvent.WORKFLOW_DISPATCH));\n+        assertThat(workflowRun.getStatus(), equalTo(Status.COMPLETED));\n+        assertThat(workflowRun.getConclusion(), equalTo(Conclusion.SUCCESS));\n+    }\n+\n+    @Test\n+    public void testLogs() throws IOException {\n+        GHWorkflow workflow = repo.getWorkflow(FAST_WORKFLOW_PATH);\n+\n+        long latestPreexistingWorkflowRunId = getLatestPreexistingWorkflowRunId();\n+\n+        workflow.dispatch(MAIN_BRANCH);\n+\n+        await((nonRecordingRepo) -> getWorkflowRun(nonRecordingRepo,\n+                FAST_WORKFLOW_NAME,\n+                MAIN_BRANCH,\n+                Status.COMPLETED,\n+                latestPreexistingWorkflowRunId).isPresent());\n+\n+        GHWorkflowRun workflowRun = getWorkflowRun(FAST_WORKFLOW_NAME,\n+                MAIN_BRANCH,\n+                Status.COMPLETED,\n+                latestPreexistingWorkflowRunId).orElseThrow(\n+                        () -> new IllegalStateException(\"We must have a valid workflow run starting from here\"));\n+\n+        List<String> logsArchiveEntries = new ArrayList<>();\n+        String fullLogContent = workflowRun\n+                .downloadLogs(getLogArchiveInputStreamFunction(\"1_build.txt\", logsArchiveEntries));\n+\n+        assertThat(logsArchiveEntries, hasItems(\"1_build.txt\", \"build/9_Complete job.txt\"));\n+        assertThat(fullLogContent, containsString(\"Hello, world!\"));\n+\n+        workflowRun.deleteLogs();\n+\n+        try {\n+            workflowRun.downloadLogs((is) -> \"\");\n+            fail(\"Downloading logs should not be possible as they were deleted\");\n+        } catch (GHFileNotFoundException e) {\n+            assertThat(e.getMessage(), containsString(\"Not Found\"));\n+        }\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    @Test\n+    public void testArtifacts() throws IOException {\n+        GHWorkflow workflow = repo.getWorkflow(ARTIFACTS_WORKFLOW_PATH);\n+\n+        long latestPreexistingWorkflowRunId = getLatestPreexistingWorkflowRunId();\n+\n+        workflow.dispatch(MAIN_BRANCH);\n+\n+        await((nonRecordingRepo) -> getWorkflowRun(nonRecordingRepo,\n+                ARTIFACTS_WORKFLOW_NAME,\n+                MAIN_BRANCH,\n+                Status.COMPLETED,\n+                latestPreexistingWorkflowRunId).isPresent());\n+\n+        GHWorkflowRun workflowRun = getWorkflowRun(ARTIFACTS_WORKFLOW_NAME,\n+                MAIN_BRANCH,\n+                Status.COMPLETED,\n+                latestPreexistingWorkflowRunId).orElseThrow(\n+                        () -> new IllegalStateException(\"We must have a valid workflow run starting from here\"));\n+\n+        List<GHArtifact> artifacts = new ArrayList<>(workflowRun.listArtifacts().toList());\n+        artifacts.sort((a1, a2) -> a1.getName().compareTo(a2.getName()));\n+\n+        assertThat(artifacts.size(), is(2));\n+\n+        // Test properties\n+        checkArtifactProperties(artifacts.get(0), \"artifact1\");\n+        checkArtifactProperties(artifacts.get(1), \"artifact2\");\n+\n+        // Test download\n+        String artifactContent = artifacts.get(0).download((is) -> {\n+            try (ZipInputStream zis = new ZipInputStream(is)) {\n+                StringBuilder sb = new StringBuilder();\n+\n+                ZipEntry ze = zis.getNextEntry();\n+                assertThat(ze.getName(), is(\"artifact1.txt\"));\n+\n+                // the scanner has to be kept open to avoid closing zis\n+                Scanner scanner = new Scanner(zis);\n+                while (scanner.hasNextLine()) {\n+                    sb.append(scanner.nextLine());\n+                }\n+\n+                return sb.toString();\n+            }\n+        });\n+\n+        assertThat(artifactContent, is(\"artifact1\"));\n+\n+        // Test GHRepository#getArtifact(long) as we are sure we have artifacts around\n+        GHArtifact artifactById = repo.getArtifact(artifacts.get(0).getId());\n+        checkArtifactProperties(artifactById, \"artifact1\");\n+\n+        artifactById = repo.getArtifact(artifacts.get(1).getId());\n+        checkArtifactProperties(artifactById, \"artifact2\");\n+\n+        // Test GHRepository#listArtifacts() as we are sure we have artifacts around\n+        List<GHArtifact> artifactsFromRepo = new ArrayList<>(\n+                repo.listArtifacts().withPageSize(2).iterator().nextPage());\n+        artifactsFromRepo.sort((a1, a2) -> a1.getName().compareTo(a2.getName()));\n+\n+        // We have at least the two artifacts we just added\n+        assertThat(artifactsFromRepo.size(), is(2));\n+\n+        // Test properties\n+        checkArtifactProperties(artifactsFromRepo.get(0), \"artifact1\");\n+        checkArtifactProperties(artifactsFromRepo.get(1), \"artifact2\");\n+\n+        // Now let's test the delete() method\n+        GHArtifact artifact1 = artifacts.get(0);\n+        artifact1.delete();\n+\n+        try {\n+            repo.getArtifact(artifact1.getId());\n+            fail(\"Getting the artifact should fail as it was deleted\");\n+        } catch (GHFileNotFoundException e) {\n+            assertThat(e.getMessage(), containsString(\"Not Found\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testJobs() throws IOException {\n+        GHWorkflow workflow = repo.getWorkflow(MULTI_JOBS_WORKFLOW_PATH);\n+\n+        long latestPreexistingWorkflowRunId = getLatestPreexistingWorkflowRunId();\n+\n+        workflow.dispatch(MAIN_BRANCH);\n+\n+        await((nonRecordingRepo) -> getWorkflowRun(nonRecordingRepo,\n+                MULTI_JOBS_WORKFLOW_NAME,\n+                MAIN_BRANCH,\n+                Status.COMPLETED,\n+                latestPreexistingWorkflowRunId).isPresent());\n+\n+        GHWorkflowRun workflowRun = getWorkflowRun(MULTI_JOBS_WORKFLOW_NAME,\n+                MAIN_BRANCH,\n+                Status.COMPLETED,\n+                latestPreexistingWorkflowRunId).orElseThrow(\n+                        () -> new IllegalStateException(\"We must have a valid workflow run starting from here\"));\n+\n+        List<GHWorkflowJob> jobs = workflowRun.listJobs()\n+                .toList()\n+                .stream()\n+                .sorted((j1, j2) -> j1.getName().compareTo(j2.getName()))\n+                .collect(Collectors.toList());\n+\n+        assertThat(jobs.size(), is(2));\n+\n+        GHWorkflowJob job1 = jobs.get(0);\n+        checkJobProperties(workflowRun.getId(), job1, \"job1\");\n+        String fullLogContent = job1.downloadLogs(getLogTextInputStreamFunction());\n+        assertThat(fullLogContent, containsString(\"Hello from job1!\"));\n+\n+        GHWorkflowJob job2 = jobs.get(1);\n+        checkJobProperties(workflowRun.getId(), job2, \"job2\");\n+        fullLogContent = job2.downloadLogs(getLogTextInputStreamFunction());\n+        assertThat(fullLogContent, containsString(\"Hello from job2!\"));\n+\n+        // while we have a job around, test GHRepository#getWorkflowJob(id)\n+        GHWorkflowJob job1ById = repo.getWorkflowJob(job1.getId());\n+        checkJobProperties(workflowRun.getId(), job1ById, \"job1\");\n+\n+        // Also test listAllJobs() works correctly\n+        List<GHWorkflowJob> allJobs = workflowRun.listAllJobs().withPageSize(10).iterator().nextPage();\n+        assertThat(allJobs.size(), greaterThanOrEqualTo(2));\n+    }\n+\n+    private void await(Function<GHRepository, Boolean> condition) throws IOException {\n+        if (!mockGitHub.isUseProxy()) {\n+            return;\n+        }\n+\n+        GHRepository nonRecordingRepo = getNonRecordingGitHub().getRepository(REPO_NAME);\n+\n+        Awaitility.await().pollInterval(Duration.ofSeconds(5)).atMost(Duration.ofSeconds(60)).until(() -> {\n+            return condition.apply(nonRecordingRepo);\n+        });\n+    }\n+\n+    private long getLatestPreexistingWorkflowRunId() {\n+        return repo.queryWorkflowRuns().list().withPageSize(1).iterator().next().getId();\n+    }\n+\n+    private static Optional<GHWorkflowRun> getWorkflowRun(GHRepository repository,\n+            String workflowName,\n+            String branch,\n+            Status status,\n+            long latestPreexistingWorkflowRunId) {\n+        List<GHWorkflowRun> workflowRuns = repository.queryWorkflowRuns()\n+                .branch(branch)\n+                .status(status)\n+                .event(GHEvent.WORKFLOW_DISPATCH)\n+                .list()\n+                .withPageSize(20)\n+                .iterator()\n+                .nextPage();\n+\n+        for (GHWorkflowRun workflowRun : workflowRuns) {\n+            if (workflowRun.getName().equals(workflowName) && workflowRun.getId() > latestPreexistingWorkflowRunId) {\n+                return Optional.of(workflowRun);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private Optional<GHWorkflowRun> getWorkflowRun(String workflowName,\n+            String branch,\n+            Status status,\n+            long latestPreexistingWorkflowRunId) {\n+        return getWorkflowRun(this.repo, workflowName, branch, status, latestPreexistingWorkflowRunId);\n+    }\n+\n+    private static Status getWorkflowRunStatus(GHRepository repository, long workflowRunId) {\n+        try {\n+            return repository.getWorkflowRun(workflowRunId).getStatus();\n+        } catch (IOException e) {\n+            throw new IllegalStateException(\"Unable to get workflow run status\", e);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    private static InputStreamFunction<String> getLogArchiveInputStreamFunction(String mainLogFileName,\n+            List<String> logsArchiveEntries) {\n+        return (is) -> {\n+            try (ZipInputStream zis = new ZipInputStream(is)) {\n+                StringBuilder sb = new StringBuilder();\n+\n+                ZipEntry ze;\n+                while ((ze = zis.getNextEntry()) != null) {\n+                    logsArchiveEntries.add(ze.getName());\n+                    if (mainLogFileName.equals(ze.getName())) {\n+                        // the scanner has to be kept open to avoid closing zis\n+                        Scanner scanner = new Scanner(zis);\n+                        while (scanner.hasNextLine()) {\n+                            sb.append(scanner.nextLine()).append(\"\\n\");\n+                        }\n+                    }\n+                }\n+\n+                return sb.toString();\n+            }\n+        };\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    private static InputStreamFunction<String> getLogTextInputStreamFunction() {\n+        return (is) -> {\n+            StringBuilder sb = new StringBuilder();\n+            Scanner scanner = new Scanner(is);\n+            while (scanner.hasNextLine()) {\n+                sb.append(scanner.nextLine()).append(\"\\n\");\n+            }\n+            return sb.toString();\n+        };\n+    }\n+\n+    private static void checkArtifactProperties(GHArtifact artifact, String artifactName) throws IOException {\n+        assertThat(artifact.getId(), notNullValue());\n+        assertThat(artifact.getNodeId(), notNullValue());\n+        assertThat(artifact.getRepository().getFullName(), equalTo(REPO_NAME));\n+        assertThat(artifact.getName(), is(artifactName));\n+        assertThat(artifact.getArchiveDownloadUrl().getPath(), containsString(\"actions/artifacts\"));\n+        assertThat(artifact.getCreatedAt(), notNullValue());\n+        assertThat(artifact.getUpdatedAt(), notNullValue());\n+        assertThat(artifact.getExpiresAt(), notNullValue());\n+        assertThat(artifact.getSizeInBytes(), greaterThan(0L));\n+        assertThat(artifact.isExpired(), is(false));\n+    }\n+\n+    private static void checkJobProperties(long workflowRunId, GHWorkflowJob job, String jobName) throws IOException {\n+        assertThat(job.getId(), notNullValue());\n+        assertThat(job.getNodeId(), notNullValue());\n+        assertThat(job.getRepository().getFullName(), equalTo(REPO_NAME));\n+        assertThat(job.getName(), is(jobName));\n+        assertThat(job.getStartedAt(), notNullValue());\n+        assertThat(job.getCompletedAt(), notNullValue());\n+        assertThat(job.getHeadSha(), notNullValue());\n+        assertThat(job.getStatus(), is(Status.COMPLETED));\n+        assertThat(job.getConclusion(), is(Conclusion.SUCCESS));\n+        assertThat(job.getRunId(), is(workflowRunId));\n+        assertThat(job.getUrl().getPath(), containsString(\"/actions/jobs/\"));\n+        assertThat(job.getHtmlUrl().getPath(), containsString(\"/runs/\" + job.getId()));\n+        assertThat(job.getCheckRunUrl().getPath(), containsString(\"/check-runs/\"));\n+\n+        // we only test the step we have control over, the others are added by GitHub\n+        Optional<Step> step = job.getSteps()\n+                .stream()\n+                .filter(s -> RUN_A_ONE_LINE_SCRIPT_STEP_NAME.equals(s.getName()))\n+                .findFirst();\n+        if (!step.isPresent()) {\n+            fail(\"Unable to find \" + RUN_A_ONE_LINE_SCRIPT_STEP_NAME + \" step\");\n+        }\n+\n+        checkStepProperties(step.get(), RUN_A_ONE_LINE_SCRIPT_STEP_NAME, 2);\n+    }\n+\n+    private static void checkStepProperties(Step step, String name, int number) {\n+        assertThat(step.getName(), is(name));\n+        assertThat(step.getNumber(), is(number));\n+        assertThat(step.getStatus(), is(Status.COMPLETED));\n+        assertThat(step.getConclusion(), is(Conclusion.SUCCESS));\n+        assertThat(step.getStartedAt(), notNullValue());\n+        assertThat(step.getCompletedAt(), notNullValue());\n+    }\n+}"
    },
    {
      "sha": "a08d9bb3420a5ba22f116bda4bae57939b893d81",
      "filename": "src/test/java/org/kohsuke/github/GHWorkflowTest.java",
      "status": "added",
      "additions": 111,
      "deletions": 0,
      "changes": 111,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHWorkflowTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GHWorkflowTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GHWorkflowTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,111 @@\n+package org.kohsuke.github;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.containing;\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class GHWorkflowTest extends AbstractGitHubWireMockTest {\n+\n+    private static String REPO_NAME = \"hub4j-test-org/GHWorkflowTest\";\n+\n+    private GHRepository repo;\n+\n+    @Before\n+    @After\n+    public void cleanup() throws Exception {\n+        if (mockGitHub.isUseProxy()) {\n+            repo = getNonRecordingGitHub().getRepository(REPO_NAME);\n+\n+            // we need to make sure the workflow is enabled before the tests\n+            GHWorkflow workflow = repo.getWorkflow(\"test-workflow.yml\");\n+            if (!workflow.getState().equals(\"active\")) {\n+                workflow.enable();\n+            }\n+        }\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        repo = gitHub.getRepository(REPO_NAME);\n+    }\n+\n+    @Test\n+    public void testBasicInformation() throws IOException {\n+        GHWorkflow workflow = repo.getWorkflow(\"test-workflow.yml\");\n+\n+        assertThat(workflow.getName(), equalTo(\"test-workflow\"));\n+        assertThat(workflow.getRepository().getFullName(), equalTo(REPO_NAME));\n+        assertThat(workflow.getPath(), equalTo(\".github/workflows/test-workflow.yml\"));\n+        assertThat(workflow.getState(), equalTo(\"active\"));\n+        assertThat(workflow.getUrl().getPath(),\n+                equalTo(\"/repos/hub4j-test-org/GHWorkflowTest/actions/workflows/6817859\"));\n+        assertThat(workflow.getHtmlUrl().getPath(),\n+                equalTo(\"/hub4j-test-org/GHWorkflowTest/blob/main/.github/workflows/test-workflow.yml\"));\n+        assertThat(workflow.getBadgeUrl().getPath(),\n+                equalTo(\"/hub4j-test-org/GHWorkflowTest/workflows/test-workflow/badge.svg\"));\n+\n+        GHWorkflow workflowById = repo.getWorkflow(workflow.getId());\n+        assertThat(workflowById.getNodeId(), equalTo(workflow.getNodeId()));\n+    }\n+\n+    @Test\n+    public void testDisableEnable() throws IOException {\n+        GHWorkflow workflow = repo.getWorkflow(\"test-workflow.yml\");\n+\n+        assertThat(workflow.getState(), equalTo(\"active\"));\n+\n+        workflow.disable();\n+\n+        workflow = repo.getWorkflow(\"test-workflow.yml\");\n+        assertThat(workflow.getState(), equalTo(\"disabled_manually\"));\n+\n+        workflow.enable();\n+\n+        workflow = repo.getWorkflow(\"test-workflow.yml\");\n+        assertThat(workflow.getState(), equalTo(\"active\"));\n+    }\n+\n+    @Test\n+    public void testDispatch() throws IOException {\n+        GHWorkflow workflow = repo.getWorkflow(\"test-workflow.yml\");\n+\n+        workflow.dispatch(\"main\");\n+        verify(postRequestedFor(\n+                urlPathEqualTo(\"/repos/hub4j-test-org/GHWorkflowTest/actions/workflows/6817859/dispatches\")));\n+\n+        workflow.dispatch(\"main\", Collections.singletonMap(\"parameter\", \"value\"));\n+        verify(postRequestedFor(\n+                urlPathEqualTo(\"/repos/hub4j-test-org/GHWorkflowTest/actions/workflows/6817859/dispatches\"))\n+                        .withRequestBody(containing(\"inputs\"))\n+                        .withRequestBody(containing(\"parameter\"))\n+                        .withRequestBody(containing(\"value\")));\n+    }\n+\n+    @Test\n+    public void testListWorkflows() throws IOException {\n+        List<GHWorkflow> workflows = repo.listWorkflows().toList();\n+\n+        GHWorkflow workflow = workflows.get(0);\n+        assertThat(workflow.getId(), equalTo(6817859L));\n+        assertThat(workflow.getNodeId(), equalTo(\"MDg6V29ya2Zsb3c2ODE3ODU5\"));\n+        assertThat(workflow.getName(), equalTo(\"test-workflow\"));\n+        assertThat(workflow.getPath(), equalTo(\".github/workflows/test-workflow.yml\"));\n+        assertThat(workflow.getState(), equalTo(\"active\"));\n+        assertThat(workflow.getUrl().getPath(),\n+                equalTo(\"/repos/hub4j-test-org/GHWorkflowTest/actions/workflows/6817859\"));\n+        assertThat(workflow.getHtmlUrl().getPath(),\n+                equalTo(\"/hub4j-test-org/GHWorkflowTest/blob/main/.github/workflows/test-workflow.yml\"));\n+        assertThat(workflow.getBadgeUrl().getPath(),\n+                equalTo(\"/hub4j-test-org/GHWorkflowTest/workflows/test-workflow/badge.svg\"));\n+    }\n+}"
    },
    {
      "sha": "5e96cc2802cdd1f35a71903373006cdefa3425b1",
      "filename": "src/test/java/org/kohsuke/github/GitHubConnectionTest.java",
      "status": "modified",
      "additions": 184,
      "deletions": 17,
      "changes": 201,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GitHubConnectionTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GitHubConnectionTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GitHubConnectionTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1,13 +1,21 @@\n package org.kohsuke.github;\n \n+import org.apache.commons.lang3.SystemUtils;\n+import org.junit.Assume;\n import org.junit.Test;\n+import org.kohsuke.github.authorization.AuthorizationProvider;\n import org.kohsuke.github.authorization.UserAuthorizationProvider;\n \n+import java.io.File;\n+import java.io.FileOutputStream;\n import java.io.IOException;\n import java.lang.reflect.Field;\n-import java.util.*;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n \n-import static org.hamcrest.CoreMatchers.*;\n+import static org.hamcrest.Matchers.*;\n \n /**\n  * Unit test for {@link GitHub}.\n@@ -21,41 +29,42 @@ public GitHubConnectionTest() {\n     @Test\n     public void testOffline() throws Exception {\n         GitHub hub = GitHub.offline();\n-        assertEquals(\"https://api.github.invalid/test\",\n-\n-                GitHubRequest.getApiURL(hub.getClient().getApiUrl(), \"/test\").toString());\n-        assertTrue(hub.isAnonymous());\n+        assertThat(GitHubRequest.getApiURL(hub.getClient().getApiUrl(), \"/test\").toString(),\n+                equalTo(\"https://api.github.invalid/test\"));\n+        assertThat(hub.isAnonymous(), is(true));\n         try {\n             hub.getRateLimit();\n             fail(\"Offline instance should always fail\");\n         } catch (IOException e) {\n-            assertEquals(\"Offline\", e.getMessage());\n+            assertThat(e.getMessage(), equalTo(\"Offline\"));\n         }\n     }\n \n     @Test\n     public void testGitHubServerWithHttp() throws Exception {\n         GitHub hub = GitHub.connectToEnterprise(\"http://enterprise.kohsuke.org/api/v3\", \"bogus\", \"bogus\");\n-        assertEquals(\"http://enterprise.kohsuke.org/api/v3/test\",\n-                GitHubRequest.getApiURL(hub.getClient().getApiUrl(), \"/test\").toString());\n+        assertThat(GitHubRequest.getApiURL(hub.getClient().getApiUrl(), \"/test\").toString(),\n+                equalTo(\"http://enterprise.kohsuke.org/api/v3/test\"));\n     }\n \n     @Test\n     public void testGitHubServerWithHttps() throws Exception {\n         GitHub hub = GitHub.connectToEnterprise(\"https://enterprise.kohsuke.org/api/v3\", \"bogus\", \"bogus\");\n-        assertEquals(\"https://enterprise.kohsuke.org/api/v3/test\",\n-                GitHubRequest.getApiURL(hub.getClient().getApiUrl(), \"/test\").toString());\n+        assertThat(GitHubRequest.getApiURL(hub.getClient().getApiUrl(), \"/test\").toString(),\n+                equalTo(\"https://enterprise.kohsuke.org/api/v3/test\"));\n     }\n \n     @Test\n     public void testGitHubServerWithoutServer() throws Exception {\n         GitHub hub = GitHub.connectUsingPassword(\"kohsuke\", \"bogus\");\n-        assertEquals(\"https://api.github.com/test\",\n-                GitHubRequest.getApiURL(hub.getClient().getApiUrl(), \"/test\").toString());\n+        assertThat(GitHubRequest.getApiURL(hub.getClient().getApiUrl(), \"/test\").toString(),\n+                equalTo(\"https://api.github.com/test\"));\n     }\n \n     @Test\n     public void testGitHubBuilderFromEnvironment() throws IOException {\n+        // we disable this test for JDK 16+ as the current hacks in setupEnvironment() don't work with JDK 16+\n+        Assume.assumeThat(Double.valueOf(System.getProperty(\"java.specification.version\")), lessThan(16.0));\n \n         Map<String, String> props = new HashMap<String, String>();\n \n@@ -98,6 +107,9 @@ public void testGitHubBuilderFromEnvironment() throws IOException {\n \n     @Test\n     public void testGitHubBuilderFromCustomEnvironment() throws IOException {\n+        // we disable this test for JDK 16+ as the current hacks in setupEnvironment() don't work with JDK 16+\n+        Assume.assumeThat(Double.valueOf(System.getProperty(\"java.specification.version\")), lessThan(16.0));\n+\n         Map<String, String> props = new HashMap<String, String>();\n \n         props.put(\"customEndpoint\", \"bogus endpoint url\");\n@@ -130,19 +142,160 @@ public void testGitHubBuilderFromCustomEnvironment() throws IOException {\n         assertThat(((UserAuthorizationProvider) builder.authorizationProvider).getLogin(), equalTo(\"bogus login\"));\n     }\n \n+    @Test\n+    public void testGitHubBuilderFromCredentialsWithEnvironment() throws IOException {\n+        // we disable this test for JDK 16+ as the current hacks in setupEnvironment() don't work with JDK 16+\n+        Assume.assumeThat(Double.valueOf(System.getProperty(\"java.specification.version\")), lessThan(16.0));\n+        Assume.assumeFalse(SystemUtils.IS_OS_WINDOWS);\n+\n+        Map<String, String> props = new HashMap<String, String>();\n+\n+        props.put(\"endpoint\", \"bogus endpoint url\");\n+        props.put(\"oauth\", \"bogus oauth token string\");\n+        setupEnvironment(props);\n+        GitHubBuilder builder = GitHubBuilder.fromCredentials();\n+\n+        assertThat(builder.endpoint, equalTo(\"bogus endpoint url\"));\n+\n+        assertThat(builder.authorizationProvider, instanceOf(UserAuthorizationProvider.class));\n+        assertThat(builder.authorizationProvider.getEncodedAuthorization(), equalTo(\"token bogus oauth token string\"));\n+        assertThat(((UserAuthorizationProvider) builder.authorizationProvider).getLogin(), nullValue());\n+\n+        props.put(\"login\", \"bogus login\");\n+        setupEnvironment(props);\n+        builder = GitHubBuilder.fromCredentials();\n+\n+        assertThat(builder.authorizationProvider, instanceOf(UserAuthorizationProvider.class));\n+        assertThat(builder.authorizationProvider.getEncodedAuthorization(), equalTo(\"token bogus oauth token string\"));\n+        assertThat(((UserAuthorizationProvider) builder.authorizationProvider).getLogin(), equalTo(\"bogus login\"));\n+\n+        props.put(\"jwt\", \"bogus jwt token string\");\n+        setupEnvironment(props);\n+        builder = GitHubBuilder.fromCredentials();\n+\n+        assertThat(builder.authorizationProvider, not(instanceOf(UserAuthorizationProvider.class)));\n+        assertThat(builder.authorizationProvider.getEncodedAuthorization(), equalTo(\"Bearer bogus jwt token string\"));\n+\n+        props.put(\"password\", \"bogus weak password\");\n+        setupEnvironment(props);\n+        builder = GitHubBuilder.fromCredentials();\n+\n+        assertThat(builder.authorizationProvider, instanceOf(UserAuthorizationProvider.class));\n+        assertThat(builder.authorizationProvider.getEncodedAuthorization(),\n+                equalTo(\"Basic Ym9ndXMgbG9naW46Ym9ndXMgd2VhayBwYXNzd29yZA==\"));\n+        assertThat(((UserAuthorizationProvider) builder.authorizationProvider).getLogin(), equalTo(\"bogus login\"));\n+    }\n+\n+    @Test\n+    public void testGitHubBuilderFromCredentialsWithPropertyFile() throws IOException {\n+        // we disable this test for JDK 16+ as the current hacks in setupEnvironment() don't work with JDK 16+\n+        Assume.assumeThat(Double.valueOf(System.getProperty(\"java.specification.version\")), lessThan(16.0));\n+        Assume.assumeFalse(SystemUtils.IS_OS_WINDOWS);\n+\n+        Map<String, String> props = new HashMap<String, String>();\n+\n+        // Clear the environment\n+        setupEnvironment(props);\n+        try {\n+            GitHubBuilder.HOME_DIRECTORY = new File(getTestDirectory());\n+            try {\n+                GitHubBuilder builder = GitHubBuilder.fromCredentials();\n+                fail();\n+            } catch (Exception e) {\n+                assertThat(e, instanceOf(IOException.class));\n+                assertThat(e.getMessage(), equalTo(\"Failed to resolve credentials from ~/.github or the environment.\"));\n+            }\n+\n+            props = new HashMap<String, String>();\n+\n+            props.put(\"endpoint\", \"bogus endpoint url\");\n+            props.put(\"oauth\", \"bogus oauth token string\");\n+\n+            setupPropertyFile(props);\n+\n+            GitHubBuilder builder = GitHubBuilder.fromCredentials();\n+\n+            assertThat(builder.endpoint, equalTo(\"bogus endpoint url\"));\n+\n+            assertThat(builder.authorizationProvider, instanceOf(UserAuthorizationProvider.class));\n+            assertThat(builder.authorizationProvider.getEncodedAuthorization(),\n+                    equalTo(\"token bogus oauth token string\"));\n+            assertThat(((UserAuthorizationProvider) builder.authorizationProvider).getLogin(), nullValue());\n+\n+            props.put(\"login\", \"bogus login\");\n+            setupPropertyFile(props);\n+            builder = GitHubBuilder.fromCredentials();\n+\n+            assertThat(builder.authorizationProvider, instanceOf(UserAuthorizationProvider.class));\n+            assertThat(builder.authorizationProvider.getEncodedAuthorization(),\n+                    equalTo(\"token bogus oauth token string\"));\n+            assertThat(((UserAuthorizationProvider) builder.authorizationProvider).getLogin(), equalTo(\"bogus login\"));\n+\n+            props.put(\"jwt\", \"bogus jwt token string\");\n+            setupPropertyFile(props);\n+            builder = GitHubBuilder.fromCredentials();\n+\n+            assertThat(builder.authorizationProvider, not(instanceOf(UserAuthorizationProvider.class)));\n+            assertThat(builder.authorizationProvider.getEncodedAuthorization(),\n+                    equalTo(\"Bearer bogus jwt token string\"));\n+\n+            props.put(\"password\", \"bogus weak password\");\n+            setupPropertyFile(props);\n+            builder = GitHubBuilder.fromCredentials();\n+\n+            assertThat(builder.authorizationProvider, instanceOf(UserAuthorizationProvider.class));\n+            assertThat(builder.authorizationProvider.getEncodedAuthorization(),\n+                    equalTo(\"Basic Ym9ndXMgbG9naW46Ym9ndXMgd2VhayBwYXNzd29yZA==\"));\n+            assertThat(((UserAuthorizationProvider) builder.authorizationProvider).getLogin(), equalTo(\"bogus login\"));\n+        } finally {\n+            GitHubBuilder.HOME_DIRECTORY = null;\n+            File propertyFile = new File(getTestDirectory(), \".github\");\n+            propertyFile.delete();\n+        }\n+    }\n+\n+    private void setupPropertyFile(Map<String, String> props) throws IOException {\n+        File propertyFile = new File(getTestDirectory(), \".github\");\n+        Properties properties = new Properties();\n+        properties.putAll(props);\n+        properties.store(new FileOutputStream(propertyFile), \"\");\n+    }\n+\n+    private String getTestDirectory() {\n+        return new File(\"target\").getAbsolutePath();\n+    }\n+\n+    @Test\n+    public void testAnonymous() throws IOException {\n+        // we disable this test for JDK 16+ as the current hacks in setupEnvironment() don't work with JDK 16+\n+        Assume.assumeThat(Double.valueOf(System.getProperty(\"java.specification.version\")), lessThan(16.0));\n+\n+        Map<String, String> props = new HashMap<String, String>();\n+\n+        props.put(\"endpoint\", mockGitHub.apiServer().baseUrl());\n+        setupEnvironment(props);\n+\n+        // No values present except endpoint\n+        GitHubBuilder builder = GitHubBuilder\n+                .fromEnvironment(\"customLogin\", \"customPassword\", \"customOauth\", \"endpoint\");\n+\n+        assertThat(builder.endpoint, equalTo(mockGitHub.apiServer().baseUrl()));\n+        assertThat(builder.authorizationProvider, sameInstance(AuthorizationProvider.ANONYMOUS));\n+    }\n+\n     @Test\n     public void testGithubBuilderWithAppInstallationToken() throws Exception {\n \n         GitHubBuilder builder = new GitHubBuilder().withAppInstallationToken(\"bogus app token\");\n         assertThat(builder.authorizationProvider, instanceOf(UserAuthorizationProvider.class));\n         assertThat(builder.authorizationProvider.getEncodedAuthorization(), equalTo(\"token bogus app token\"));\n-        assertThat(((UserAuthorizationProvider) builder.authorizationProvider).getLogin(), equalTo(\"\"));\n+        assertThat(((UserAuthorizationProvider) builder.authorizationProvider).getLogin(), is(emptyString()));\n \n         // test authorization header is set as in the RFC6749\n         GitHub github = builder.build();\n         // change this to get a request\n-        assertEquals(\"token bogus app token\", github.getClient().getEncodedAuthorization());\n-        assertEquals(\"\", github.getClient().login);\n+        assertThat(github.getClient().getEncodedAuthorization(), equalTo(\"token bogus app token\"));\n+        assertThat(github.getClient().login, is(emptyString()));\n     }\n \n     @Test\n@@ -152,10 +305,24 @@ public void testGitHubIsApiUrlValid() throws IOException {\n         // GitHub hub = GitHub.connectAnonymously();\n \n         GitHub hub = GitHub.connectToEnterpriseAnonymously(mockGitHub.apiServer().baseUrl());\n+        hub.checkApiUrlValidity();\n+        try {\n+            hub.checkApiUrlValidity();\n+            fail();\n+        } catch (IOException ioe) {\n+            assertThat(ioe.getMessage(), containsString(\"doesn't look like GitHub API URL\"));\n+        }\n         try {\n             hub.checkApiUrlValidity();\n+            fail();\n         } catch (IOException ioe) {\n-            assertTrue(ioe.getMessage().contains(\"private mode enabled\"));\n+            assertThat(ioe.getMessage(), containsString(\"private mode enabled\"));\n+        }\n+        try {\n+            hub.getClient().requireCredential();\n+            fail();\n+        } catch (Exception e) {\n+            assertThat(e.getMessage(), containsString(\"This operation requires a credential\"));\n         }\n     }\n "
    },
    {
      "sha": "d597daf6469f4c56caa8bb49173295464cea69f6",
      "filename": "src/test/java/org/kohsuke/github/GitHubStaticTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GitHubStaticTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GitHubStaticTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GitHubStaticTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -139,8 +139,8 @@ public void testFromRecord() throws Exception {\n \n         assertThat(rateLimit_none, equalTo(rateLimit_core));\n         assertThat(rateLimit_none, not(sameInstance(rateLimit_core)));\n-        assertTrue(rateLimit_none.hashCode() == rateLimit_core.hashCode());\n-        assertTrue(rateLimit_none.equals(rateLimit_core));\n+        assertThat(rateLimit_none.hashCode(), equalTo(rateLimit_core.hashCode()));\n+        assertThat(rateLimit_none, equalTo(rateLimit_core));\n \n         assertThat(rateLimit_none, not(equalTo(rateLimit_search)));\n "
    },
    {
      "sha": "f47249f63c18e917b5598bab2d6e484b85db8c43",
      "filename": "src/test/java/org/kohsuke/github/GitHubTest.java",
      "status": "modified",
      "additions": 99,
      "deletions": 53,
      "changes": 152,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GitHubTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/GitHubTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/GitHubTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -7,9 +7,7 @@\n import java.io.IOException;\n import java.util.*;\n \n-import static org.hamcrest.CoreMatchers.*;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.*;\n import static org.kohsuke.github.GHMarketplaceAccountType.ORGANIZATION;\n \n /**\n@@ -69,19 +67,19 @@ public void searchUsers() throws Exception {\n         PagedSearchIterable<GHUser> r = gitHub.searchUsers().q(\"tom\").repos(\">42\").followers(\">1000\").list();\n         GHUser u = r.iterator().next();\n         // System.out.println(u.getName());\n-        assertNotNull(u.getId());\n-        assertTrue(r.getTotalCount() > 0);\n+        assertThat(u.getId(), notNullValue());\n+        assertThat(r.getTotalCount(), greaterThan(0));\n     }\n \n     @Test\n     public void testListAllRepositories() throws Exception {\n         Iterator<GHRepository> itr = gitHub.listAllPublicRepositories().iterator();\n         for (int i = 0; i < 115; i++) {\n-            assertTrue(itr.hasNext());\n+            assertThat(itr.hasNext(), is(true));\n             GHRepository r = itr.next();\n             // System.out.println(r.getFullName());\n-            assertNotNull(r.getUrl());\n-            assertNotEquals(0L, r.getId());\n+            assertThat(r.getUrl(), notNullValue());\n+            assertThat(r.getId(), not(0L));\n         }\n \n         // ensure the iterator throws as expected\n@@ -100,34 +98,84 @@ public void searchContent() throws Exception {\n                 .in(\"file\")\n                 .language(\"js\")\n                 .repo(\"jquery/jquery\")\n+                // ignored unless sort is also set\n+                .order(GHDirection.DESC)\n                 .list();\n         GHContent c = r.iterator().next();\n+\n         // System.out.println(c.getName());\n-        assertNotNull(c.getDownloadUrl());\n-        assertNotNull(c.getOwner());\n-        assertEquals(\"jquery/jquery\", c.getOwner().getFullName());\n-        assertTrue(r.getTotalCount() > 0);\n+        assertThat(c.getDownloadUrl(), notNullValue());\n+        assertThat(c.getOwner(), notNullValue());\n+        assertThat(c.getOwner().getFullName(), equalTo(\"jquery/jquery\"));\n+        assertThat(r.getTotalCount(), greaterThan(5));\n+\n+        PagedSearchIterable<GHContent> r2 = gitHub.searchContent()\n+                .q(\"addClass\")\n+                .in(\"file\")\n+                .language(\"js\")\n+                .repo(\"jquery/jquery\")\n+                // resets query sort back to default\n+                .sort(GHContentSearchBuilder.Sort.INDEXED)\n+                .sort(GHContentSearchBuilder.Sort.BEST_MATCH)\n+                // ignored unless sort is also set to non-default\n+                .order(GHDirection.ASC)\n+                .list();\n+\n+        GHContent c2 = r2.iterator().next();\n+        assertThat(c2.getPath(), equalTo(c.getPath()));\n+        assertThat(r2.getTotalCount(), equalTo(r.getTotalCount()));\n+\n+        PagedSearchIterable<GHContent> r3 = gitHub.searchContent()\n+                .q(\"addClass\")\n+                .in(\"file\")\n+                .language(\"js\")\n+                .repo(\"jquery/jquery\")\n+                .sort(GHContentSearchBuilder.Sort.INDEXED)\n+                .order(GHDirection.ASC)\n+                .list();\n+\n+        GHContent c3 = r3.iterator().next();\n+        assertThat(c3.getPath(), not(equalTo(c2.getPath())));\n+        assertThat(r3.getTotalCount(), equalTo(r2.getTotalCount()));\n+\n+        PagedSearchIterable<GHContent> r4 = gitHub.searchContent()\n+                .q(\"addClass\")\n+                .in(\"file\")\n+                .language(\"js\")\n+                .repo(\"jquery/jquery\")\n+                .sort(GHContentSearchBuilder.Sort.INDEXED)\n+                .order(GHDirection.DESC)\n+                .list();\n+\n+        GHContent c4 = r4.iterator().next();\n+        assertThat(c4.getPath(), not(equalTo(c2.getPath())));\n+        assertThat(c4.getPath(), not(equalTo(c3.getPath())));\n+        assertThat(r4.getTotalCount(), equalTo(r2.getTotalCount()));\n+\n     }\n \n     @Test\n     public void testListMyAuthorizations() throws IOException {\n         PagedIterable<GHAuthorization> list = gitHub.listMyAuthorizations();\n \n         for (GHAuthorization auth : list) {\n-            assertNotNull(auth.getAppName());\n+            assertThat(auth.getAppName(), notNullValue());\n         }\n     }\n \n     @Test\n     public void getMeta() throws IOException {\n         GHMeta meta = gitHub.getMeta();\n-        assertTrue(meta.isVerifiablePasswordAuthentication());\n-        assertEquals(19, meta.getApi().size());\n-        assertEquals(19, meta.getGit().size());\n-        assertEquals(3, meta.getHooks().size());\n-        assertEquals(6, meta.getImporter().size());\n-        assertEquals(6, meta.getPages().size());\n-        assertEquals(19, meta.getWeb().size());\n+        assertThat(meta.isVerifiablePasswordAuthentication(), is(true));\n+        assertThat(meta.getApi().size(), equalTo(19));\n+        assertThat(meta.getGit().size(), equalTo(36));\n+        assertThat(meta.getHooks().size(), equalTo(4));\n+        assertThat(meta.getImporter().size(), equalTo(3));\n+        assertThat(meta.getPages().size(), equalTo(6));\n+        assertThat(meta.getWeb().size(), equalTo(20));\n+        assertThat(meta.getPackages().size(), equalTo(25));\n+        assertThat(meta.getActions().size(), equalTo(1739));\n+        assertThat(meta.getDependabot().size(), equalTo(3));\n \n         // Also test examples here\n         Class[] examples = new Class[]{ ReadOnlyObjects.GHMetaPublic.class, ReadOnlyObjects.GHMetaPackage.class,\n@@ -138,58 +186,58 @@ public void getMeta() throws IOException {\n             ReadOnlyObjects.GHMetaExample metaExample = gitHub.createRequest()\n                     .withUrlPath(\"/meta\")\n                     .fetch((Class<ReadOnlyObjects.GHMetaExample>) metaClass);\n-            assertTrue(metaExample.isVerifiablePasswordAuthentication());\n-            assertEquals(19, metaExample.getApi().size());\n-            assertEquals(19, metaExample.getGit().size());\n-            assertEquals(3, metaExample.getHooks().size());\n-            assertEquals(6, metaExample.getImporter().size());\n-            assertEquals(6, metaExample.getPages().size());\n-            assertEquals(19, metaExample.getWeb().size());\n+            assertThat(metaExample.isVerifiablePasswordAuthentication(), is(true));\n+            assertThat(metaExample.getApi().size(), equalTo(19));\n+            assertThat(metaExample.getGit().size(), equalTo(36));\n+            assertThat(metaExample.getHooks().size(), equalTo(4));\n+            assertThat(metaExample.getImporter().size(), equalTo(3));\n+            assertThat(metaExample.getPages().size(), equalTo(6));\n+            assertThat(metaExample.getWeb().size(), equalTo(20));\n         }\n     }\n \n     @Test\n     public void getMyMarketplacePurchases() throws IOException {\n         List<GHMarketplaceUserPurchase> userPurchases = gitHub.getMyMarketplacePurchases().toList();\n-        assertEquals(2, userPurchases.size());\n+        assertThat(userPurchases.size(), equalTo(2));\n \n         for (GHMarketplaceUserPurchase userPurchase : userPurchases) {\n-            assertFalse(userPurchase.isOnFreeTrial());\n-            assertNull(userPurchase.getFreeTrialEndsOn());\n-            assertEquals(\"monthly\", userPurchase.getBillingCycle());\n+            assertThat(userPurchase.isOnFreeTrial(), is(false));\n+            assertThat(userPurchase.getFreeTrialEndsOn(), nullValue());\n+            assertThat(userPurchase.getBillingCycle(), equalTo(\"monthly\"));\n \n             GHMarketplacePlan plan = userPurchase.getPlan();\n             // GHMarketplacePlan - Non-nullable fields\n-            assertNotNull(plan.getUrl());\n-            assertNotNull(plan.getAccountsUrl());\n-            assertNotNull(plan.getName());\n-            assertNotNull(plan.getDescription());\n-            assertNotNull(plan.getPriceModel());\n-            assertNotNull(plan.getState());\n+            assertThat(plan.getUrl(), notNullValue());\n+            assertThat(plan.getAccountsUrl(), notNullValue());\n+            assertThat(plan.getName(), notNullValue());\n+            assertThat(plan.getDescription(), notNullValue());\n+            assertThat(plan.getPriceModel(), notNullValue());\n+            assertThat(plan.getState(), notNullValue());\n \n             // GHMarketplacePlan - primitive fields\n-            assertNotEquals(0L, plan.getId());\n-            assertNotEquals(0L, plan.getNumber());\n-            assertTrue(plan.getMonthlyPriceInCents() >= 0);\n+            assertThat(plan.getId(), not(0L));\n+            assertThat(plan.getNumber(), not(0L));\n+            assertThat(plan.getMonthlyPriceInCents(), greaterThanOrEqualTo(0L));\n \n             // GHMarketplacePlan - list\n-            assertEquals(2, plan.getBullets().size());\n+            assertThat(plan.getBullets().size(), equalTo(2));\n \n             GHMarketplaceAccount account = userPurchase.getAccount();\n             // GHMarketplaceAccount - Non-nullable fields\n-            assertNotNull(account.getLogin());\n-            assertNotNull(account.getUrl());\n-            assertNotNull(account.getType());\n+            assertThat(account.getLogin(), notNullValue());\n+            assertThat(account.getUrl(), notNullValue());\n+            assertThat(account.getType(), notNullValue());\n \n             // GHMarketplaceAccount - primitive fields\n-            assertNotEquals(0L, account.getId());\n+            assertThat(account.getId(), not(0L));\n \n             /* logical combination tests */\n             // Rationale: organization_billing_email is only set when account type is ORGANIZATION.\n             if (account.getType() == ORGANIZATION)\n-                assertNotNull(account.getOrganizationBillingEmail());\n+                assertThat(account.getOrganizationBillingEmail(), notNullValue());\n             else\n-                assertNull(account.getOrganizationBillingEmail());\n+                assertThat(account.getOrganizationBillingEmail(), nullValue());\n         }\n     }\n \n@@ -214,13 +262,11 @@ public void testHeaderFieldName() throws Exception {\n         // getResponseHeaderFields is deprecated but we'll use it for testing.\n         assertThat(org.getResponseHeaderFields(), notNullValue());\n \n-        // Header field names must be case-insensitive\n-        assertThat(org.getResponseHeaderFields().containsKey(\"CacHe-ContrOl\"), is(true));\n-\n-        // The KeySet from header fields should also be case-insensitive\n-        assertThat(org.getResponseHeaderFields().keySet().contains(\"CacHe-ControL\"), is(true));\n-        assertThat(org.getResponseHeaderFields().keySet().contains(\"CacHe-ControL\"), is(true));\n+        assertThat(\"Header field names must be case-insensitive\",\n+                org.getResponseHeaderFields().containsKey(\"CacHe-ContrOl\"));\n \n+        assertThat(\"KeySet from header fields should also be case-insensitive\",\n+                org.getResponseHeaderFields().keySet().contains(\"CacHe-ControL\"));\n         assertThat(org.getResponseHeaderFields().get(\"cachE-cOntrol\").get(0), is(\"private, max-age=60, s-maxage=60\"));\n \n         // GitHub has started changing their headers to all lowercase."
    },
    {
      "sha": "c5be13932198845a3a74c751aa021ee785dc3c65",
      "filename": "src/test/java/org/kohsuke/github/Github2faTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/Github2faTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/Github2faTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/Github2faTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -7,8 +7,6 @@\n import java.util.List;\n \n import static org.hamcrest.Matchers.*;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n \n /**\n  * @author Kevin Harrington mad.hephaestus@gmail.com\n@@ -17,7 +15,7 @@\n \n     @Test\n     public void test2faToken() throws IOException {\n-        assertFalse(\"Test only valid when not proxying\", mockGitHub.isUseProxy());\n+        assertThat(\"Test only valid when not proxying\", mockGitHub.isUseProxy(), is(false));\n \n         List<String> asList = Arrays\n                 .asList(\"repo\", \"gist\", \"write:packages\", \"read:packages\", \"delete:packages\", \"user\", \"delete_repo\");\n@@ -33,10 +31,7 @@ public void test2faToken() throws IOException {\n                 });\n \n         assertThat(token, notNullValue());\n-\n-        for (int i = 0; i < asList.size(); i++) {\n-            assertTrue(token.getScopes().get(i).contentEquals(asList.get(i)));\n-        }\n+        assertThat(token.getScopes(), contains(asList.toArray()));\n \n         assertThat(token.getToken(), equalTo(\"63042a99d88bf138e6d6cf5788e0dc4e7a5d7309\"));\n         assertThat(token.getTokenLastEight(), equalTo(\"7a5d7309\"));"
    },
    {
      "sha": "e2ca6904fd3fc5f1b0fdec68f5d0e539ffdc6105",
      "filename": "src/test/java/org/kohsuke/github/LifecycleTest.java",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/LifecycleTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/LifecycleTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/LifecycleTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -10,8 +10,7 @@\n import java.io.PrintWriter;\n import java.util.List;\n \n-import static org.hamcrest.CoreMatchers.*;\n-import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.Matchers.*;\n \n public class LifecycleTest extends AbstractGitHubWireMockTest {\n     @Test\n@@ -22,7 +21,7 @@ public void testCreateRepository() throws IOException {\n         // GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n \n         GHRepository repository = getTempRepository();\n-        assertTrue(repository.getReleases().isEmpty());\n+        assertThat(repository.getReleases(), is(empty()));\n \n         GHMilestone milestone = repository.createMilestone(\"Initial Release\", \"first one\");\n         GHIssue issue = repository.createIssue(\"Test Issue\")\n@@ -45,22 +44,22 @@ public void testCreateRepository() throws IOException {\n \n     private void updateAsset(GHRelease release, GHAsset asset) throws IOException {\n         asset.setLabel(\"test label\");\n-        assertEquals(\"test label\", release.getAssets().get(0).getLabel());\n+        assertThat(release.getAssets().get(0).getLabel(), equalTo(\"test label\"));\n     }\n \n     private void deleteAsset(GHRelease release, GHAsset asset) throws IOException {\n         asset.delete();\n-        assertEquals(0, release.getAssets().size());\n+        assertThat(release.getAssets(), is(empty()));\n     }\n \n     private GHAsset uploadAsset(GHRelease release) throws IOException {\n         GHAsset asset = release.uploadAsset(new File(\"LICENSE.txt\"), \"application/text\");\n-        assertNotNull(asset);\n+        assertThat(asset, notNullValue());\n         List<GHAsset> cachedAssets = release.assets();\n-        assertEquals(0, cachedAssets.size());\n+        assertThat(cachedAssets, is(empty()));\n         List<GHAsset> assets = release.getAssets();\n-        assertEquals(1, assets.size());\n-        assertEquals(\"LICENSE.txt\", assets.get(0).getName());\n+        assertThat(assets.size(), equalTo(1));\n+        assertThat(assets.get(0).getName(), equalTo(\"LICENSE.txt\"));\n         assertThat(assets.get(0).getSize(), equalTo(1104L));\n         assertThat(assets.get(0).getContentType(), equalTo(\"application/text\"));\n         assertThat(assets.get(0).getState(), equalTo(\"uploaded\"));\n@@ -78,16 +77,16 @@ private GHRelease createRelease(GHRepository repository) throws IOException {\n                 .body(\"How exciting!  To be able to programmatically create releases is a dream come true!\")\n                 .create();\n         List<GHRelease> releases = repository.getReleases();\n-        assertEquals(1, releases.size());\n+        assertThat(releases.size(), equalTo(1));\n         GHRelease release = releases.get(0);\n-        assertEquals(\"Test Release\", release.getName());\n+        assertThat(release.getName(), equalTo(\"Test Release\"));\n         assertThat(release.getBody(), startsWith(\"How exciting!\"));\n         assertThat(release.getOwner(), sameInstance(repository));\n         assertThat(release.getZipballUrl(),\n                 endsWith(\"/repos/hub4j-test-org/temp-testCreateRepository/zipball/release_tag\"));\n         assertThat(release.getTarballUrl(),\n                 endsWith(\"/repos/hub4j-test-org/temp-testCreateRepository/tarball/release_tag\"));\n-        assertThat(release.getTargetCommitish(), equalTo(\"master\"));\n+        assertThat(release.getTargetCommitish(), equalTo(\"main\"));\n         assertThat(release.getHtmlUrl().toString(),\n                 endsWith(\"/hub4j-test-org/temp-testCreateRepository/releases/tag/release_tag\"));\n "
    },
    {
      "sha": "6ebf39d82cbc44ff7ef2eb858e4e038284d04275",
      "filename": "src/test/java/org/kohsuke/github/RepositoryTrafficTest.java",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/RepositoryTrafficTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/RepositoryTrafficTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/RepositoryTrafficTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1,6 +1,6 @@\n package org.kohsuke.github;\n \n-import org.junit.Assert;\n+import org.hamcrest.Matchers;\n import org.junit.Test;\n import org.kohsuke.github.GHRepositoryTraffic.DailyInfo;\n \n@@ -14,24 +14,24 @@\n \n     @SuppressWarnings(\"unchecked\")\n     private <T extends GHRepositoryTraffic> void checkResponse(T expected, T actual) {\n-        Assert.assertEquals(expected.getCount(), actual.getCount());\n-        Assert.assertEquals(expected.getUniques(), actual.getUniques());\n+        assertThat(actual.getCount(), Matchers.equalTo(expected.getCount()));\n+        assertThat(actual.getUniques(), Matchers.equalTo(expected.getUniques()));\n \n         List<? extends DailyInfo> expectedList = expected.getDailyInfo();\n         List<? extends DailyInfo> actualList = actual.getDailyInfo();\n         Iterator<? extends DailyInfo> expectedIt;\n         Iterator<? extends DailyInfo> actualIt;\n \n-        Assert.assertEquals(expectedList.size(), actualList.size());\n+        assertThat(actualList.size(), Matchers.equalTo(expectedList.size()));\n         expectedIt = expectedList.iterator();\n         actualIt = actualList.iterator();\n \n         while (expectedIt.hasNext() && actualIt.hasNext()) {\n             DailyInfo expectedDailyInfo = expectedIt.next();\n             DailyInfo actualDailyInfo = actualIt.next();\n-            Assert.assertEquals(expectedDailyInfo.getCount(), actualDailyInfo.getCount());\n-            Assert.assertEquals(expectedDailyInfo.getUniques(), actualDailyInfo.getUniques());\n-            Assert.assertEquals(expectedDailyInfo.getTimestamp(), actualDailyInfo.getTimestamp());\n+            assertThat(actualDailyInfo.getCount(), Matchers.equalTo(expectedDailyInfo.getCount()));\n+            assertThat(actualDailyInfo.getUniques(), Matchers.equalTo(expectedDailyInfo.getUniques()));\n+            assertThat(actualDailyInfo.getTimestamp(), Matchers.equalTo(expectedDailyInfo.getTimestamp()));\n         }\n     }\n \n@@ -100,12 +100,12 @@ public void testGetTrafficStatsAccessFailureDueToInsufficientPermissions() throw\n         GHRepository repo = gitHub.getOrganization(GITHUB_API_TEST_ORG).getRepository(repositoryName);\n         try {\n             repo.getViewTraffic();\n-            Assert.fail(errorMsg);\n+            fail(errorMsg);\n         } catch (HttpException ex) {\n         }\n         try {\n             repo.getCloneTraffic();\n-            Assert.fail(errorMsg);\n+            fail(errorMsg);\n         } catch (HttpException ex) {\n         }\n     }"
    },
    {
      "sha": "29060ae0c6527d6bfcf0fcf83fcfcbd6ff0430d6",
      "filename": "src/test/java/org/kohsuke/github/RequesterRetryTest.java",
      "status": "modified",
      "additions": 25,
      "deletions": 25,
      "changes": 50,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/RequesterRetryTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/RequesterRetryTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/RequesterRetryTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -97,7 +97,7 @@ public void testGitHubIsApiUrlValid() throws Exception {\n             try {\n                 gitHub.checkApiUrlValidity();\n             } catch (IOException ioe) {\n-                assertTrue(ioe.getMessage().contains(\"private mode enabled\"));\n+                assertThat(ioe.getMessage(), containsString(\"private mode enabled\"));\n             }\n             Thread.sleep(100);\n         }\n@@ -127,8 +127,8 @@ public void testSocketConnectionAndRetry() throws Exception {\n         }\n \n         String capturedLog = getTestCapturedLog();\n-        assertTrue(capturedLog.contains(\"will try 2 more time\"));\n-        assertTrue(capturedLog.contains(\"will try 1 more time\"));\n+        assertThat(capturedLog.contains(\"will try 2 more time\"), is(true));\n+        assertThat(capturedLog.contains(\"will try 1 more time\"), is(true));\n \n         assertThat(this.mockGitHub.getRequestCount(), equalTo(baseRequestCount + 6));\n     }\n@@ -156,8 +156,8 @@ public void testSocketConnectionAndRetry_StatusCode() throws Exception {\n         }\n \n         String capturedLog = getTestCapturedLog();\n-        assertTrue(capturedLog.contains(\"will try 2 more time\"));\n-        assertTrue(capturedLog.contains(\"will try 1 more time\"));\n+        assertThat(capturedLog.contains(\"will try 2 more time\"), is(true));\n+        assertThat(capturedLog.contains(\"will try 1 more time\"), is(true));\n \n         assertThat(this.mockGitHub.getRequestCount(), equalTo(baseRequestCount + 6));\n     }\n@@ -206,8 +206,8 @@ public void testSocketConnectionAndRetry_Success() throws Exception {\n         GHBranch branch = repo.getBranch(\"test/timeout\");\n         assertThat(branch, notNullValue());\n         String capturedLog = getTestCapturedLog();\n-        assertTrue(capturedLog.contains(\"will try 2 more time\"));\n-        assertTrue(capturedLog.contains(\"will try 1 more time\"));\n+        assertThat(capturedLog.contains(\"will try 2 more time\"), is(true));\n+        assertThat(capturedLog.contains(\"will try 1 more time\"), is(true));\n \n         assertThat(this.mockGitHub.getRequestCount(), equalTo(baseRequestCount + 6));\n     }\n@@ -232,8 +232,8 @@ public void testResponseCodeFailureExceptions() throws Exception {\n             assertThat(e.getCause(), instanceOf(IOException.class));\n             assertThat(e.getCause().getMessage(), is(\"Custom\"));\n             String capturedLog = getTestCapturedLog();\n-            assertFalse(capturedLog.contains(\"will try 2 more time\"));\n-            assertFalse(capturedLog.contains(\"will try 1 more time\"));\n+            assertThat(capturedLog.contains(\"will try 2 more time\"), is(false));\n+            assertThat(capturedLog.contains(\"will try 1 more time\"), is(false));\n             assertThat(this.mockGitHub.getRequestCount(), equalTo(baseRequestCount));\n         }\n \n@@ -253,8 +253,8 @@ public void testResponseCodeFailureExceptions() throws Exception {\n             assertThat(e, instanceOf(FileNotFoundException.class));\n             assertThat(e.getMessage(), is(\"Custom\"));\n             String capturedLog = getTestCapturedLog();\n-            assertFalse(capturedLog.contains(\"will try 2 more time\"));\n-            assertFalse(capturedLog.contains(\"will try 1 more time\"));\n+            assertThat(capturedLog.contains(\"will try 2 more time\"), is(false));\n+            assertThat(capturedLog.contains(\"will try 1 more time\"), is(false));\n             assertThat(this.mockGitHub.getRequestCount(), equalTo(baseRequestCount));\n         }\n     }\n@@ -279,8 +279,8 @@ public void testInputStreamFailureExceptions() throws Exception {\n             assertThat(e.getCause(), instanceOf(IOException.class));\n             assertThat(e.getCause().getMessage(), is(\"Custom\"));\n             String capturedLog = getTestCapturedLog();\n-            assertFalse(capturedLog.contains(\"will try 2 more time\"));\n-            assertFalse(capturedLog.contains(\"will try 1 more time\"));\n+            assertThat(capturedLog.contains(\"will try 2 more time\"), is(false));\n+            assertThat(capturedLog.contains(\"will try 1 more time\"), is(false));\n             assertThat(this.mockGitHub.getRequestCount(), equalTo(baseRequestCount + 1));\n         }\n \n@@ -297,8 +297,8 @@ public void testInputStreamFailureExceptions() throws Exception {\n             assertThat(e.getCause(), instanceOf(FileNotFoundException.class));\n             assertThat(e.getCause().getMessage(), containsString(\"hub4j-test-org-missing\"));\n             String capturedLog = getTestCapturedLog();\n-            assertFalse(capturedLog.contains(\"will try 2 more time\"));\n-            assertFalse(capturedLog.contains(\"will try 1 more time\"));\n+            assertThat(capturedLog.contains(\"will try 2 more time\"), is(false));\n+            assertThat(capturedLog.contains(\"will try 1 more time\"), is(false));\n             assertThat(this.mockGitHub.getRequestCount(), equalTo(baseRequestCount + 1));\n         }\n \n@@ -313,8 +313,8 @@ public void testInputStreamFailureExceptions() throws Exception {\n                         .fetchHttpStatusCode(),\n                 equalTo(404));\n         String capturedLog = getTestCapturedLog();\n-        assertFalse(capturedLog.contains(\"will try 2 more time\"));\n-        assertFalse(capturedLog.contains(\"will try 1 more time\"));\n+        assertThat(capturedLog.contains(\"will try 2 more time\"), is(false));\n+        assertThat(capturedLog.contains(\"will try 1 more time\"), is(false));\n         assertThat(this.mockGitHub.getRequestCount(), equalTo(baseRequestCount + 1));\n     }\n \n@@ -373,16 +373,16 @@ private void runConnectionExceptionTest(HttpConnector connector, int expectedReq\n         baseRequestCount = this.mockGitHub.getRequestCount();\n         assertThat(this.gitHub.getOrganization(GITHUB_API_TEST_ORG), is(notNullValue()));\n         String capturedLog = getTestCapturedLog();\n-        assertTrue(capturedLog.contains(\"will try 2 more time\"));\n-        assertTrue(capturedLog.contains(\"will try 1 more time\"));\n+        assertThat(capturedLog, containsString(\"will try 2 more time\"));\n+        assertThat(capturedLog, containsString(\"will try 1 more time\"));\n         assertThat(this.mockGitHub.getRequestCount(), equalTo(baseRequestCount + expectedRequestCount));\n \n         resetTestCapturedLog();\n         baseRequestCount = this.mockGitHub.getRequestCount();\n         this.gitHub.createRequest().withUrlPath(\"/orgs/\" + GITHUB_API_TEST_ORG).send();\n         capturedLog = getTestCapturedLog();\n-        assertTrue(capturedLog.contains(\"will try 2 more time\"));\n-        assertTrue(capturedLog.contains(\"will try 1 more time\"));\n+        assertThat(capturedLog, containsString(\"will try 2 more time\"));\n+        assertThat(capturedLog, containsString(\"will try 1 more time\"));\n         assertThat(this.mockGitHub.getRequestCount(), equalTo(baseRequestCount + expectedRequestCount));\n     }\n \n@@ -399,13 +399,13 @@ private void runConnectionExceptionStatusCodeTest(HttpConnector connector, int e\n                 equalTo(200));\n         String capturedLog = getTestCapturedLog();\n         if (expectedRequestCount > 0) {\n-            assertTrue(capturedLog.contains(\"will try 2 more time\"));\n-            assertTrue(capturedLog.contains(\"will try 1 more time\"));\n+            assertThat(capturedLog, containsString(\"will try 2 more time\"));\n+            assertThat(capturedLog, containsString(\"will try 1 more time\"));\n             assertThat(this.mockGitHub.getRequestCount(), equalTo(baseRequestCount + expectedRequestCount));\n         } else {\n             // Success without retries\n-            assertFalse(capturedLog.contains(\"will try 2 more time\"));\n-            assertFalse(capturedLog.contains(\"will try 1 more time\"));\n+            assertThat(capturedLog, not(containsString(\"will try 2 more time\")));\n+            assertThat(capturedLog, not(containsString(\"will try 1 more time\")));\n             assertThat(this.mockGitHub.getRequestCount(), equalTo(baseRequestCount + 1));\n         }\n     }"
    },
    {
      "sha": "1759539746722ce4a02f8399a1ae19023dd22c03",
      "filename": "src/test/java/org/kohsuke/github/WireMockStatusReporterTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/WireMockStatusReporterTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/WireMockStatusReporterTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/WireMockStatusReporterTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -4,10 +4,7 @@\n import org.junit.Ignore;\n import org.junit.Test;\n \n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.not;\n-import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.*;\n import static org.junit.Assume.assumeFalse;\n import static org.junit.Assume.assumeTrue;\n \n@@ -133,7 +130,7 @@ public void whenSnapshot_EnsureProxy() throws Exception {\n         assumeTrue(\"Test only valid when Snapshotting (-Dtest.github.takeSnapshot to enable)\",\n                 mockGitHub.isTakeSnapshot());\n \n-        assertTrue(\"When taking a snapshot, proxy should automatically be enabled\", mockGitHub.isUseProxy());\n+        assertThat(\"When taking a snapshot, proxy should automatically be enabled\", mockGitHub.isUseProxy());\n     }\n \n     @Ignore(\"Not implemented yet\")"
    },
    {
      "sha": "e2ea624da1b706439392fb6ed7eac22ad5c55da9",
      "filename": "src/test/java/org/kohsuke/github/extras/GitHubCachingTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/extras/GitHubCachingTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/extras/GitHubCachingTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/extras/GitHubCachingTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -43,11 +43,11 @@ protected WireMockConfiguration getWireMockOptions() {\n     @Before\n     public void setupRepo() throws Exception {\n         if (mockGitHub.isUseProxy()) {\n-            for (GHPullRequest pr : getRepository(this.getGitHubBeforeAfter()).getPullRequests(GHIssueState.OPEN)) {\n+            for (GHPullRequest pr : getRepository(this.getNonRecordingGitHub()).getPullRequests(GHIssueState.OPEN)) {\n                 pr.close();\n             }\n             try {\n-                GHRef ref = getRepository(this.getGitHubBeforeAfter()).getRef(testRefName);\n+                GHRef ref = getRepository(this.getNonRecordingGitHub()).getRef(testRefName);\n                 ref.delete();\n             } catch (IOException e) {\n             }"
    },
    {
      "sha": "2f275372dbc34fe73c7ce77694d071be8d5a44ef",
      "filename": "src/test/java/org/kohsuke/github/extras/OkHttpConnectorTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/extras/OkHttpConnectorTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/extras/OkHttpConnectorTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/extras/OkHttpConnectorTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -73,7 +73,7 @@ protected WireMockConfiguration getWireMockOptions() {\n     @Before\n     public void setupRepo() throws Exception {\n         if (mockGitHub.isUseProxy()) {\n-            GHRepository repo = getRepository(getGitHubBeforeAfter());\n+            GHRepository repo = getRepository(getNonRecordingGitHub());\n             repo.setDescription(\"Resetting\");\n \n             // Let things settle a bit between tests when working against the live site\n@@ -252,7 +252,7 @@ private void doTestActions() throws Exception {\n \n         // Get Tricky - make a change via a different client\n         if (mockGitHub.isUseProxy()) {\n-            GHRepository altRepo = getRepository(getGitHubBeforeAfter());\n+            GHRepository altRepo = getRepository(getNonRecordingGitHub());\n             altRepo.setDescription(\"Tricky\");\n         }\n "
    },
    {
      "sha": "b8011ecbbbe0aaba3ddb07b0010b79f677157ce6",
      "filename": "src/test/java/org/kohsuke/github/extras/okhttp3/GitHubCachingTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/extras/okhttp3/GitHubCachingTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/extras/okhttp3/GitHubCachingTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/extras/okhttp3/GitHubCachingTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -45,11 +45,11 @@ protected WireMockConfiguration getWireMockOptions() {\n     @Before\n     public void setupRepo() throws Exception {\n         if (mockGitHub.isUseProxy()) {\n-            for (GHPullRequest pr : getRepository(this.getGitHubBeforeAfter()).getPullRequests(GHIssueState.OPEN)) {\n+            for (GHPullRequest pr : getRepository(this.getNonRecordingGitHub()).getPullRequests(GHIssueState.OPEN)) {\n                 pr.close();\n             }\n             try {\n-                GHRef ref = getRepository(this.getGitHubBeforeAfter()).getRef(testRefName);\n+                GHRef ref = getRepository(this.getNonRecordingGitHub()).getRef(testRefName);\n                 ref.delete();\n             } catch (IOException e) {\n             }"
    },
    {
      "sha": "1f6b3cafa0ad3b20282c53722f51942c817c9efe",
      "filename": "src/test/java/org/kohsuke/github/extras/okhttp3/OkHttpConnectorTest.java",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/extras/okhttp3/OkHttpConnectorTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/extras/okhttp3/OkHttpConnectorTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/extras/okhttp3/OkHttpConnectorTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -79,7 +79,7 @@ protected WireMockConfiguration getWireMockOptions() {\n     @Before\n     public void setupRepo() throws Exception {\n         if (mockGitHub.isUseProxy()) {\n-            GHRepository repo = getRepository(getGitHubBeforeAfter());\n+            GHRepository repo = getRepository(getNonRecordingGitHub());\n             repo.setDescription(\"Resetting\");\n \n             // Let things settle a bit between tests when working against the live site\n@@ -261,7 +261,7 @@ private void doTestActions() throws Exception {\n \n         // Get Tricky - make a change via a different client\n         if (mockGitHub.isUseProxy()) {\n-            GHRepository altRepo = getRepository(getGitHubBeforeAfter());\n+            GHRepository altRepo = getRepository(getNonRecordingGitHub());\n             altRepo.setDescription(\"Tricky\");\n         }\n "
    },
    {
      "sha": "0eb47385e03b738c574f062d3d9030aa793bc1e2",
      "filename": "src/test/java/org/kohsuke/github/internal/EnumUtilsTest.java",
      "status": "added",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/internal/EnumUtilsTest.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/internal/EnumUtilsTest.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/internal/EnumUtilsTest.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -0,0 +1,30 @@\n+package org.kohsuke.github.internal;\n+\n+import org.junit.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+\n+public class EnumUtilsTest {\n+\n+    @Test\n+    public void testGetEnum() {\n+        assertThat(EnumUtils.getEnumOrDefault(TestEnum.class, null, TestEnum.UNKNOWN), equalTo(TestEnum.UNKNOWN));\n+\n+        assertThat(EnumUtils.getNullableEnumOrDefault(TestEnum.class, null, TestEnum.UNKNOWN), nullValue());\n+        assertThat(EnumUtils.getNullableEnumOrDefault(TestEnum.class, \"foobar\", TestEnum.UNKNOWN),\n+                equalTo(TestEnum.UNKNOWN));\n+        assertThat(EnumUtils.getNullableEnumOrDefault(TestEnum.class, \"VALUE_1\", TestEnum.UNKNOWN),\n+                equalTo(TestEnum.VALUE_1));\n+        assertThat(EnumUtils.getNullableEnumOrDefault(TestEnum.class, \"value_1\", TestEnum.UNKNOWN),\n+                equalTo(TestEnum.VALUE_1));\n+        assertThat(EnumUtils.getNullableEnumOrDefault(TestEnum.class, \"VALUE_2\", TestEnum.UNKNOWN),\n+                equalTo(TestEnum.VALUE_2));\n+        assertThat(EnumUtils.getNullableEnumOrDefault(TestEnum.class, \"vAlUe_2\", TestEnum.UNKNOWN),\n+                equalTo(TestEnum.VALUE_2));\n+    }\n+\n+    private enum TestEnum {\n+        VALUE_1, VALUE_2, UNKNOWN;\n+    }\n+}"
    },
    {
      "sha": "00627cb7c24788e061128b501870886736dd7601",
      "filename": "src/test/java/org/kohsuke/github/junit/GitHubWireMockRule.java",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/junit/GitHubWireMockRule.java",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/java/org/kohsuke/github/junit/GitHubWireMockRule.java",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/java/org/kohsuke/github/junit/GitHubWireMockRule.java?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -69,6 +69,10 @@ public WireMockServer codeloadServer() {\n         return servers.get(\"codeload\");\n     }\n \n+    public WireMockServer actionsUserContentServer() {\n+        return servers.get(\"actions-user-content\");\n+    }\n+\n     public boolean isUseProxy() {\n         return GitHubWireMockRule.useProxy;\n     }\n@@ -97,6 +101,11 @@ protected void initializeServers() {\n         if (new File(apiServer().getOptions().filesRoot().getPath() + \"_codeload\").exists() || isUseProxy()) {\n             initializeServer(\"codeload\");\n         }\n+\n+        if (new File(apiServer().getOptions().filesRoot().getPath() + \"_actions-user-content\").exists()\n+                || isUseProxy()) {\n+            initializeServer(\"actions-user-content\");\n+        }\n     }\n \n     @Override\n@@ -120,6 +129,11 @@ protected void before() {\n             this.codeloadServer().stubFor(proxyAllTo(\"https://codeload.github.com\").atPriority(100));\n         }\n \n+        if (this.actionsUserContentServer() != null) {\n+            this.actionsUserContentServer()\n+                    .stubFor(proxyAllTo(\"https://pipelines.actions.githubusercontent.com\").atPriority(100));\n+        }\n+\n     }\n \n     @Override\n@@ -137,6 +151,8 @@ protected void after() {\n         recordSnapshot(this.uploadsServer(), \"https://uploads.github.com\", false);\n \n         recordSnapshot(this.codeloadServer(), \"https://codeload.github.com\", true);\n+\n+        recordSnapshot(this.actionsUserContentServer(), \"https://pipelines.actions.githubusercontent.com\", true);\n     }\n \n     private void recordSnapshot(WireMockServer server, String target, boolean isRawServer) {\n@@ -233,6 +249,11 @@ public JsonElement serialize(Double src, Type typeOfSrc, JsonSerializationContex\n                             fileText = fileText.replace(this.codeloadServer().baseUrl(), \"https://codeload.github.com\");\n                         }\n \n+                        if (this.actionsUserContentServer() != null) {\n+                            fileText = fileText.replace(this.actionsUserContentServer().baseUrl(),\n+                                    \"https://pipelines.actions.githubusercontent.com\");\n+                        }\n+\n                         // point bodyFile in the mapping to the renamed body file\n                         if (entry != null && filePath.toString().contains(\"mappings\")) {\n                             fileText = fileText.replace(\"-\" + entry.getKey(), \"-\" + entry.getValue());\n@@ -288,6 +309,11 @@ public String mapToMockGitHub(String body) {\n         body = replaceTargetServerUrl(body, this.uploadsServer(), \"https://uploads.github.com\", \"/uploads\");\n \n         body = replaceTargetServerUrl(body, this.codeloadServer(), \"https://codeload.github.com\", \"/codeload\");\n+\n+        body = replaceTargetServerUrl(body,\n+                this.actionsUserContentServer(),\n+                \"https://pipelines.actions.githubusercontent.com\",\n+                \"/actions-user-content\");\n         return body;\n     }\n "
    },
    {
      "sha": "93efc6f72a9a09e935be6ea64a09fcfd4e4d9f4a",
      "filename": "src/test/resources/org/kohsuke/github/AbuseLimitHandlerTest/wiremock/testHandler_Fail/__files/repos_hub4j-test-org_temp-testratelimithandler_fail-3.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AbuseLimitHandlerTest/wiremock/testHandler_Fail/__files/repos_hub4j-test-org_temp-testratelimithandler_fail-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AbuseLimitHandlerTest/wiremock/testHandler_Fail/__files/repos_hub4j-test-org_temp-testratelimithandler_fail-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AbuseLimitHandlerTest/wiremock/testHandler_Fail/__files/repos_hub4j-test-org_temp-testratelimithandler_fail-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -90,7 +90,7 @@\n   \"forks\": 0,\n   \"open_issues\": 0,\n   \"watchers\": 0,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "93efc6f72a9a09e935be6ea64a09fcfd4e4d9f4a",
      "filename": "src/test/resources/org/kohsuke/github/AbuseLimitHandlerTest/wiremock/testHandler_HttpStatus_Fail/__files/repos_hub4j-test-org_temp-testratelimithandler_fail-3.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AbuseLimitHandlerTest/wiremock/testHandler_HttpStatus_Fail/__files/repos_hub4j-test-org_temp-testratelimithandler_fail-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AbuseLimitHandlerTest/wiremock/testHandler_HttpStatus_Fail/__files/repos_hub4j-test-org_temp-testratelimithandler_fail-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AbuseLimitHandlerTest/wiremock/testHandler_HttpStatus_Fail/__files/repos_hub4j-test-org_temp-testratelimithandler_fail-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -90,7 +90,7 @@\n   \"forks\": 0,\n   \"open_issues\": 0,\n   \"watchers\": 0,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "59d27cff72f14993166d61f9ad7173be191a77f1",
      "filename": "src/test/resources/org/kohsuke/github/AbuseLimitHandlerTest/wiremock/testHandler_Wait/__files/repos_hub4j-test-org_temp-testratelimithandler_fail-3.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AbuseLimitHandlerTest/wiremock/testHandler_Wait/__files/repos_hub4j-test-org_temp-testratelimithandler_fail-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AbuseLimitHandlerTest/wiremock/testHandler_Wait/__files/repos_hub4j-test-org_temp-testratelimithandler_fail-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AbuseLimitHandlerTest/wiremock/testHandler_Wait/__files/repos_hub4j-test-org_temp-testratelimithandler_fail-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -90,7 +90,7 @@\n   \"forks\": 0,\n   \"open_issues\": 0,\n   \"watchers\": 0,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "43ee27087491b91d5c85d21d34e151fe1b843453",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/blob/__files/repos_hub4j_github-api-2.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/blob/__files/repos_hub4j_github-api-2.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/blob/__files/repos_hub4j_github-api-2.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/blob/__files/repos_hub4j_github-api-2.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 433,\n   \"open_issues\": 64,\n   \"watchers\": 565,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "9a9bd17d1f34c715714618d2f7716ae8d6245be7",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/__files/repos_jenkinsci_jenkins-2.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/__files/repos_jenkinsci_jenkins-2.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/__files/repos_jenkinsci_jenkins-2.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/__files/repos_jenkinsci_jenkins-2.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 5807,\n   \"open_issues\": 74,\n   \"watchers\": 14167,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": false,\n     \"push\": false,"
    },
    {
      "sha": "0c816e835779a49aef314f83a00542a35f578b82",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/__files/repos_jenkinsci_jenkins_contents_core-3.json",
      "status": "modified",
      "additions": 19,
      "deletions": 19,
      "changes": 38,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/__files/repos_jenkinsci_jenkins_contents_core-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/__files/repos_jenkinsci_jenkins_contents_core-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/__files/repos_jenkinsci_jenkins_contents_core-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -4,63 +4,63 @@\n     \"path\": \"core/move-l10n.groovy\",\n     \"sha\": \"8d002348827a6c76ec3b4832278384c74a91d692\",\n     \"size\": 1560,\n-    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/move-l10n.groovy?ref=master\",\n-    \"html_url\": \"https://github.com/jenkinsci/jenkins/blob/master/core/move-l10n.groovy\",\n+    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/move-l10n.groovy?ref=main\",\n+    \"html_url\": \"https://github.com/jenkinsci/jenkins/blob/main/core/move-l10n.groovy\",\n     \"git_url\": \"https://api.github.com/repos/jenkinsci/jenkins/git/blobs/8d002348827a6c76ec3b4832278384c74a91d692\",\n-    \"download_url\": \"https://raw.githubusercontent.com/jenkinsci/jenkins/master/core/move-l10n.groovy\",\n+    \"download_url\": \"https://raw.githubusercontent.com/jenkinsci/jenkins/main/core/move-l10n.groovy\",\n     \"type\": \"file\",\n     \"_links\": {\n-      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/move-l10n.groovy?ref=master\",\n+      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/move-l10n.groovy?ref=main\",\n       \"git\": \"https://api.github.com/repos/jenkinsci/jenkins/git/blobs/8d002348827a6c76ec3b4832278384c74a91d692\",\n-      \"html\": \"https://github.com/jenkinsci/jenkins/blob/master/core/move-l10n.groovy\"\n+      \"html\": \"https://github.com/jenkinsci/jenkins/blob/main/core/move-l10n.groovy\"\n     }\n   },\n   {\n     \"name\": \"pom.xml\",\n     \"path\": \"core/pom.xml\",\n     \"sha\": \"0402553742ec270b65e5ea4c0851088659987183\",\n     \"size\": 28950,\n-    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/pom.xml?ref=master\",\n-    \"html_url\": \"https://github.com/jenkinsci/jenkins/blob/master/core/pom.xml\",\n+    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/pom.xml?ref=main\",\n+    \"html_url\": \"https://github.com/jenkinsci/jenkins/blob/main/core/pom.xml\",\n     \"git_url\": \"https://api.github.com/repos/jenkinsci/jenkins/git/blobs/0402553742ec270b65e5ea4c0851088659987183\",\n-    \"download_url\": \"https://raw.githubusercontent.com/jenkinsci/jenkins/master/core/pom.xml\",\n+    \"download_url\": \"https://raw.githubusercontent.com/jenkinsci/jenkins/main/core/pom.xml\",\n     \"type\": \"file\",\n     \"_links\": {\n-      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/pom.xml?ref=master\",\n+      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/pom.xml?ref=main\",\n       \"git\": \"https://api.github.com/repos/jenkinsci/jenkins/git/blobs/0402553742ec270b65e5ea4c0851088659987183\",\n-      \"html\": \"https://github.com/jenkinsci/jenkins/blob/master/core/pom.xml\"\n+      \"html\": \"https://github.com/jenkinsci/jenkins/blob/main/core/pom.xml\"\n     }\n   },\n   {\n     \"name\": \"report-l10n.rb\",\n     \"path\": \"core/report-l10n.rb\",\n     \"sha\": \"d48bf4d2f9ed5de92f6d4a9864ecc168d15e3420\",\n     \"size\": 17290,\n-    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/report-l10n.rb?ref=master\",\n-    \"html_url\": \"https://github.com/jenkinsci/jenkins/blob/master/core/report-l10n.rb\",\n+    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/report-l10n.rb?ref=main\",\n+    \"html_url\": \"https://github.com/jenkinsci/jenkins/blob/main/core/report-l10n.rb\",\n     \"git_url\": \"https://api.github.com/repos/jenkinsci/jenkins/git/blobs/d48bf4d2f9ed5de92f6d4a9864ecc168d15e3420\",\n-    \"download_url\": \"https://raw.githubusercontent.com/jenkinsci/jenkins/master/core/report-l10n.rb\",\n+    \"download_url\": \"https://raw.githubusercontent.com/jenkinsci/jenkins/main/core/report-l10n.rb\",\n     \"type\": \"file\",\n     \"_links\": {\n-      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/report-l10n.rb?ref=master\",\n+      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/report-l10n.rb?ref=main\",\n       \"git\": \"https://api.github.com/repos/jenkinsci/jenkins/git/blobs/d48bf4d2f9ed5de92f6d4a9864ecc168d15e3420\",\n-      \"html\": \"https://github.com/jenkinsci/jenkins/blob/master/core/report-l10n.rb\"\n+      \"html\": \"https://github.com/jenkinsci/jenkins/blob/main/core/report-l10n.rb\"\n     }\n   },\n   {\n     \"name\": \"src\",\n     \"path\": \"core/src\",\n     \"sha\": \"11d50acb5fba7764e8ef1c230aac16aa9aa0ef31\",\n     \"size\": 0,\n-    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src?ref=master\",\n-    \"html_url\": \"https://github.com/jenkinsci/jenkins/tree/master/core/src\",\n+    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src?ref=main\",\n+    \"html_url\": \"https://github.com/jenkinsci/jenkins/tree/main/core/src\",\n     \"git_url\": \"https://api.github.com/repos/jenkinsci/jenkins/git/trees/11d50acb5fba7764e8ef1c230aac16aa9aa0ef31\",\n     \"download_url\": null,\n     \"type\": \"dir\",\n     \"_links\": {\n-      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src?ref=master\",\n+      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src?ref=main\",\n       \"git\": \"https://api.github.com/repos/jenkinsci/jenkins/git/trees/11d50acb5fba7764e8ef1c230aac16aa9aa0ef31\",\n-      \"html\": \"https://github.com/jenkinsci/jenkins/tree/master/core/src\"\n+      \"html\": \"https://github.com/jenkinsci/jenkins/tree/main/core/src\"\n     }\n   }\n ]\n\\ No newline at end of file"
    },
    {
      "sha": "0d7fdef2d2ae1a94236b13ac19c347f197e26c04",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/__files/repos_jenkinsci_jenkins_contents_core_src-4.json",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/__files/repos_jenkinsci_jenkins_contents_core_src-4.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/__files/repos_jenkinsci_jenkins_contents_core_src-4.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/__files/repos_jenkinsci_jenkins_contents_core_src-4.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -4,63 +4,63 @@\n     \"path\": \"core/src/filter\",\n     \"sha\": \"5f087f4c3dd2690948371b4f867087d36fdbb19d\",\n     \"size\": 0,\n-    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/filter?ref=master\",\n-    \"html_url\": \"https://github.com/jenkinsci/jenkins/tree/master/core/src/filter\",\n+    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/filter?ref=main\",\n+    \"html_url\": \"https://github.com/jenkinsci/jenkins/tree/main/core/src/filter\",\n     \"git_url\": \"https://api.github.com/repos/jenkinsci/jenkins/git/trees/5f087f4c3dd2690948371b4f867087d36fdbb19d\",\n     \"download_url\": null,\n     \"type\": \"dir\",\n     \"_links\": {\n-      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/filter?ref=master\",\n+      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/filter?ref=main\",\n       \"git\": \"https://api.github.com/repos/jenkinsci/jenkins/git/trees/5f087f4c3dd2690948371b4f867087d36fdbb19d\",\n-      \"html\": \"https://github.com/jenkinsci/jenkins/tree/master/core/src/filter\"\n+      \"html\": \"https://github.com/jenkinsci/jenkins/tree/main/core/src/filter\"\n     }\n   },\n   {\n     \"name\": \"main\",\n     \"path\": \"core/src/main\",\n     \"sha\": \"7334485bc5155447be2692f1d4acf9c717335d7b\",\n     \"size\": 0,\n-    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/main?ref=master\",\n-    \"html_url\": \"https://github.com/jenkinsci/jenkins/tree/master/core/src/main\",\n+    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/main?ref=main\",\n+    \"html_url\": \"https://github.com/jenkinsci/jenkins/tree/main/core/src/main\",\n     \"git_url\": \"https://api.github.com/repos/jenkinsci/jenkins/git/trees/7334485bc5155447be2692f1d4acf9c717335d7b\",\n     \"download_url\": null,\n     \"type\": \"dir\",\n     \"_links\": {\n-      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/main?ref=master\",\n+      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/main?ref=main\",\n       \"git\": \"https://api.github.com/repos/jenkinsci/jenkins/git/trees/7334485bc5155447be2692f1d4acf9c717335d7b\",\n-      \"html\": \"https://github.com/jenkinsci/jenkins/tree/master/core/src/main\"\n+      \"html\": \"https://github.com/jenkinsci/jenkins/tree/main/core/src/main\"\n     }\n   },\n   {\n     \"name\": \"site\",\n     \"path\": \"core/src/site\",\n     \"sha\": \"59d5107eeacdac5a50a2e2eb3592d79c9a8f8743\",\n     \"size\": 0,\n-    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/site?ref=master\",\n-    \"html_url\": \"https://github.com/jenkinsci/jenkins/tree/master/core/src/site\",\n+    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/site?ref=main\",\n+    \"html_url\": \"https://github.com/jenkinsci/jenkins/tree/main/core/src/site\",\n     \"git_url\": \"https://api.github.com/repos/jenkinsci/jenkins/git/trees/59d5107eeacdac5a50a2e2eb3592d79c9a8f8743\",\n     \"download_url\": null,\n     \"type\": \"dir\",\n     \"_links\": {\n-      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/site?ref=master\",\n+      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/site?ref=main\",\n       \"git\": \"https://api.github.com/repos/jenkinsci/jenkins/git/trees/59d5107eeacdac5a50a2e2eb3592d79c9a8f8743\",\n-      \"html\": \"https://github.com/jenkinsci/jenkins/tree/master/core/src/site\"\n+      \"html\": \"https://github.com/jenkinsci/jenkins/tree/main/core/src/site\"\n     }\n   },\n   {\n     \"name\": \"test\",\n     \"path\": \"core/src/test\",\n     \"sha\": \"d600ddfd8eebaf8b605d9f99d3a9f117fac2eb2b\",\n     \"size\": 0,\n-    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/test?ref=master\",\n-    \"html_url\": \"https://github.com/jenkinsci/jenkins/tree/master/core/src/test\",\n+    \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/test?ref=main\",\n+    \"html_url\": \"https://github.com/jenkinsci/jenkins/tree/main/core/src/test\",\n     \"git_url\": \"https://api.github.com/repos/jenkinsci/jenkins/git/trees/d600ddfd8eebaf8b605d9f99d3a9f117fac2eb2b\",\n     \"download_url\": null,\n     \"type\": \"dir\",\n     \"_links\": {\n-      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/test?ref=master\",\n+      \"self\": \"https://api.github.com/repos/jenkinsci/jenkins/contents/core/src/test?ref=main\",\n       \"git\": \"https://api.github.com/repos/jenkinsci/jenkins/git/trees/d600ddfd8eebaf8b605d9f99d3a9f117fac2eb2b\",\n-      \"html\": \"https://github.com/jenkinsci/jenkins/tree/master/core/src/test\"\n+      \"html\": \"https://github.com/jenkinsci/jenkins/tree/main/core/src/test\"\n     }\n   }\n ]\n\\ No newline at end of file"
    },
    {
      "sha": "707c2698b042fcb120a06dacb3691957f4e557f3",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/mappings/repos_jenkinsci_jenkins_contents_core_src-4.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/mappings/repos_jenkinsci_jenkins_contents_core_src-4.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/mappings/repos_jenkinsci_jenkins_contents_core_src-4.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/directoryListing/mappings/repos_jenkinsci_jenkins_contents_core_src-4.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -2,7 +2,7 @@\n   \"id\": \"0566ab8b-d260-47cb-a6e6-fafa6fc2836c\",\n   \"name\": \"repos_jenkinsci_jenkins_contents_core_src\",\n   \"request\": {\n-    \"url\": \"/repos/jenkinsci/jenkins/contents/core/src?ref=master\",\n+    \"url\": \"/repos/jenkinsci/jenkins/contents/core/src?ref=main\",\n     \"method\": \"GET\",\n     \"headers\": {\n       \"Accept\": {"
    },
    {
      "sha": "21376f70fa2389bcb7582b24f12338b3637c8fd5",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/notifications/__files/notifications-16.json",
      "status": "modified",
      "additions": 43,
      "deletions": 43,
      "changes": 86,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/notifications/__files/notifications-16.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/notifications/__files/notifications-16.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/notifications/__files/notifications-16.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -827,15 +827,15 @@\n     \"last_read_at\": \"2019-09-11T00:03:20Z\",\n     \"subject\": {\n       \"title\": \"[CPLT2-5785] Define jenkins.hook.url when appropriate\",\n-      \"url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/pulls/15\",\n-      \"latest_comment_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/pulls/15\",\n+      \"url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/pulls/15\",\n+      \"latest_comment_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/pulls/15\",\n       \"type\": \"PullRequest\"\n     },\n     \"repository\": {\n       \"id\": 202214807,\n       \"node_id\": \"MDEwOlJlcG9zaXRvcnkyMDIyMTQ4MDc=\",\n-      \"name\": \"managed-master-hibernation-plugin\",\n-      \"full_name\": \"cloudbees/managed-master-hibernation-plugin\",\n+      \"name\": \"managed-main-hibernation-plugin\",\n+      \"full_name\": \"cloudbees/managed-main-hibernation-plugin\",\n       \"private\": true,\n       \"owner\": {\n         \"login\": \"cloudbees\",\n@@ -857,46 +857,46 @@\n         \"type\": \"Organization\",\n         \"site_admin\": false\n       },\n-      \"html_url\": \"https://github.com/cloudbees/managed-master-hibernation-plugin\",\n-      \"description\": \"CPLT2-5737: Allows a managed master to indicate that it is ready to be hibernated.\",\n+      \"html_url\": \"https://github.com/cloudbees/managed-main-hibernation-plugin\",\n+      \"description\": \"CPLT2-5737: Allows a managed main to indicate that it is ready to be hibernated.\",\n       \"fork\": false,\n-      \"url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin\",\n-      \"forks_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/forks\",\n-      \"keys_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/keys{/key_id}\",\n-      \"collaborators_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/collaborators{/collaborator}\",\n-      \"teams_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/teams\",\n-      \"hooks_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/hooks\",\n-      \"issue_events_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/issues/events{/number}\",\n-      \"events_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/events\",\n-      \"assignees_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/assignees{/user}\",\n-      \"branches_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/branches{/branch}\",\n-      \"tags_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/tags\",\n-      \"blobs_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/git/blobs{/sha}\",\n-      \"git_tags_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/git/tags{/sha}\",\n-      \"git_refs_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/git/refs{/sha}\",\n-      \"trees_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/git/trees{/sha}\",\n-      \"statuses_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/statuses/{sha}\",\n-      \"languages_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/languages\",\n-      \"stargazers_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/stargazers\",\n-      \"contributors_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/contributors\",\n-      \"subscribers_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/subscribers\",\n-      \"subscription_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/subscription\",\n-      \"commits_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/commits{/sha}\",\n-      \"git_commits_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/git/commits{/sha}\",\n-      \"comments_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/comments{/number}\",\n-      \"issue_comment_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/issues/comments{/number}\",\n-      \"contents_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/contents/{+path}\",\n-      \"compare_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/compare/{base}...{head}\",\n-      \"merges_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/merges\",\n-      \"archive_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/{archive_format}{/ref}\",\n-      \"downloads_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/downloads\",\n-      \"issues_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/issues{/number}\",\n-      \"pulls_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/pulls{/number}\",\n-      \"milestones_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/milestones{/number}\",\n-      \"notifications_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/notifications{?since,all,participating}\",\n-      \"labels_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/labels{/name}\",\n-      \"releases_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/releases{/id}\",\n-      \"deployments_url\": \"https://api.github.com/repos/cloudbees/managed-master-hibernation-plugin/deployments\"\n+      \"url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin\",\n+      \"forks_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/forks\",\n+      \"keys_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/keys{/key_id}\",\n+      \"collaborators_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/collaborators{/collaborator}\",\n+      \"teams_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/teams\",\n+      \"hooks_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/hooks\",\n+      \"issue_events_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/issues/events{/number}\",\n+      \"events_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/events\",\n+      \"assignees_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/assignees{/user}\",\n+      \"branches_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/branches{/branch}\",\n+      \"tags_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/tags\",\n+      \"blobs_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/git/blobs{/sha}\",\n+      \"git_tags_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/git/tags{/sha}\",\n+      \"git_refs_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/git/refs{/sha}\",\n+      \"trees_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/git/trees{/sha}\",\n+      \"statuses_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/statuses/{sha}\",\n+      \"languages_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/languages\",\n+      \"stargazers_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/stargazers\",\n+      \"contributors_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/contributors\",\n+      \"subscribers_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/subscribers\",\n+      \"subscription_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/subscription\",\n+      \"commits_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/commits{/sha}\",\n+      \"git_commits_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/git/commits{/sha}\",\n+      \"comments_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/comments{/number}\",\n+      \"issue_comment_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/issues/comments{/number}\",\n+      \"contents_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/contents/{+path}\",\n+      \"compare_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/compare/{base}...{head}\",\n+      \"merges_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/merges\",\n+      \"archive_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/{archive_format}{/ref}\",\n+      \"downloads_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/downloads\",\n+      \"issues_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/issues{/number}\",\n+      \"pulls_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/pulls{/number}\",\n+      \"milestones_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/milestones{/number}\",\n+      \"notifications_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/notifications{?since,all,participating}\",\n+      \"labels_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/labels{/name}\",\n+      \"releases_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/releases{/id}\",\n+      \"deployments_url\": \"https://api.github.com/repos/cloudbees/managed-main-hibernation-plugin/deployments\"\n     },\n     \"url\": \"https://api.github.com/notifications/threads/581645707\",\n     \"subscription_url\": \"https://api.github.com/notifications/threads/581645707/subscription\""
    },
    {
      "sha": "9fe804078fe566bec8c6ca1757a39a3b7362805e",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/notifications/__files/notifications-6.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/notifications/__files/notifications-6.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/notifications/__files/notifications-6.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/notifications/__files/notifications-6.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -4024,7 +4024,7 @@\n     \"updated_at\": \"2019-10-14T21:06:40Z\",\n     \"last_read_at\": \"2019-10-18T20:02:08Z\",\n     \"subject\": {\n-      \"title\": \"CSDOCS-206 - Adjust Jenkinsfile to only deploy master commits\",\n+      \"title\": \"CSDOCS-206 - Adjust Jenkinsfile to only deploy main commits\",\n       \"url\": \"https://api.github.com/repos/cloudbees/docsite-engine/pulls/121\",\n       \"latest_comment_url\": \"https://api.github.com/repos/cloudbees/docsite-engine/issues/comments/541921810\",\n       \"type\": \"PullRequest\""
    },
    {
      "sha": "df6bca44dd5bde45090a44f48753875edd2a998f",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/reactions/__files/repos_hub4j_github-api-2.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/reactions/__files/repos_hub4j_github-api-2.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/reactions/__files/repos_hub4j_github-api-2.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/reactions/__files/repos_hub4j_github-api-2.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 57,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "9a9bd17d1f34c715714618d2f7716ae8d6245be7",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommit/__files/repos_jenkinsci_jenkins-3.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommit/__files/repos_jenkinsci_jenkins-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommit/__files/repos_jenkinsci_jenkins-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommit/__files/repos_jenkinsci_jenkins-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 5807,\n   \"open_issues\": 74,\n   \"watchers\": 14167,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": false,\n     \"push\": false,"
    },
    {
      "sha": "9a9bd17d1f34c715714618d2f7716ae8d6245be7",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitComment/__files/repos_jenkinsci_jenkins-3.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitComment/__files/repos_jenkinsci_jenkins-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitComment/__files/repos_jenkinsci_jenkins-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitComment/__files/repos_jenkinsci_jenkins-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 5807,\n   \"open_issues\": 74,\n   \"watchers\": 14167,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": false,\n     \"push\": false,"
    },
    {
      "sha": "6f3d413902796f355dc478ecc4896b0bc558d9c1",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitComment/__files/repos_jenkinsci_jenkins_comments-4.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitComment/__files/repos_jenkinsci_jenkins_comments-4.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitComment/__files/repos_jenkinsci_jenkins_comments-4.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitComment/__files/repos_jenkinsci_jenkins_comments-4.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -779,7 +779,7 @@\n     \"created_at\": \"2011-02-10T14:10:23Z\",\n     \"updated_at\": \"2011-02-10T14:10:23Z\",\n     \"author_association\": \"MEMBER\",\n-    \"body\": \"We are not forgetting to merge this, JENKINS-8592, branch into master?\\n\"\n+    \"body\": \"We are not forgetting to merge this, JENKINS-8592, branch into main?\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/jenkinsci/jenkins/comments/267069\","
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-10.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-10.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-10.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-10.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-11.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-11.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-11.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-11.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-12.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-12.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-12.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-12.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-13.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-13.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-13.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-13.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-14.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-14.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-14.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-14.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-15.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-15.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-15.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-15.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-16.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-16.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-16.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-16.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-17.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-17.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-17.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-17.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-18.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-18.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-18.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-18.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-19.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-19.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-19.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-19.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-20.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-20.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-20.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-20.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-21.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-21.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-21.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-21.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-22.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-22.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-22.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-22.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-23.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-23.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-23.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-23.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-24.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-24.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-24.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-24.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-25.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-25.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-25.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-25.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-26.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-26.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-26.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-26.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-27.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-27.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-27.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-27.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-28.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-28.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-28.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-28.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-29.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-29.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-29.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-29.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-3.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-30.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-30.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-30.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-30.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-31.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-31.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-31.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-31.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-32.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-32.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-32.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-32.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-34.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-34.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-34.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-34.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-35.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-35.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-35.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-35.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-36.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-36.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-36.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-36.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-37.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-37.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-37.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-37.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-38.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-38.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-38.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-38.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-39.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-39.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-39.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-39.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-4.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-4.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-4.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-4.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-40.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-40.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-40.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-40.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-41.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-41.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-41.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-41.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-42.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-42.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-42.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-42.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-43.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-43.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-43.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-43.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-44.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-44.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-44.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-44.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-45.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-45.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-45.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-45.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-46.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-46.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-46.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-46.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-47.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-47.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-47.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-47.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-48.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-48.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-48.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-48.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-49.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-49.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-49.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-49.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-5.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-5.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-5.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-5.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-50.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-50.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-50.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-50.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-51.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-51.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-51.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-51.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-52.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-52.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-52.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-52.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-53.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-53.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-53.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-53.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-54.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-54.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-54.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-54.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-55.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-55.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-55.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-55.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-56.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-56.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-56.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-56.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-57.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-57.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-57.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-57.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-58.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-58.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-58.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-58.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-59.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-59.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-59.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-59.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-6.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-6.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-6.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-6.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-60.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-60.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-60.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-60.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-61.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-61.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-61.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-61.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-62.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-62.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-62.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-62.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-63.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-63.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-63.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-63.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-7.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-7.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-7.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-7.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-8.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-8.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-8.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-8.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "b5ae9d93f0f7428a37f2b4d1fa720d633c13e379",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-9.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-9.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-9.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/repos_hub4j_github-api-9.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 456,\n   \"open_issues\": 58,\n   \"watchers\": 613,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "f81ca46d8a4c94ba5d016963127e5a6ab118bf82",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/search_commits-2.json",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/search_commits-2.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/search_commits-2.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/search_commits-2.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -443,7 +443,7 @@\n           \"name\": \"Kohsuke Kawaguchi\",\n           \"email\": \"kk@kohsuke.org\"\n         },\n-        \"message\": \"Merge branch 'master' of github.com:kohsuke/github-api\",\n+        \"message\": \"Merge branch 'main' of github.com:kohsuke/github-api\",\n         \"tree\": {\n           \"url\": \"https://api.github.com/repos/hub4j/github-api/git/trees/76d86aa0103be48e4dde3b1263c3ead31709c04e\",\n           \"sha\": \"76d86aa0103be48e4dde3b1263c3ead31709c04e\"\n@@ -2301,7 +2301,7 @@\n           \"name\": \"GitHub\",\n           \"email\": \"noreply@github.com\"\n         },\n-        \"message\": \"Merge pull request #411 from tadfisher/master\\n\\nAdd GHRepository.getRelease and GHRepository.getReleaseByTagName\",\n+        \"message\": \"Merge pull request #411 from tadfisher/main\\n\\nAdd GHRepository.getRelease and GHRepository.getReleaseByTagName\",\n         \"tree\": {\n           \"url\": \"https://api.github.com/repos/hub4j/github-api/git/trees/1c7cdc463be852d52019e264162a8fbcdb280678\",\n           \"sha\": \"1c7cdc463be852d52019e264162a8fbcdb280678\"\n@@ -3031,7 +3031,7 @@\n           \"name\": \"GitHub\",\n           \"email\": \"noreply@github.com\"\n         },\n-        \"message\": \"Merge pull request #439 from l3ender/master\\n\\nAdd support for repository searching by \\\"topic\\\"\",\n+        \"message\": \"Merge pull request #439 from l3ender/main\\n\\nAdd support for repository searching by \\\"topic\\\"\",\n         \"tree\": {\n           \"url\": \"https://api.github.com/repos/hub4j/github-api/git/trees/bff00c66f979c96203d466601499a76d13d0b711\",\n           \"sha\": \"bff00c66f979c96203d466601499a76d13d0b711\"\n@@ -3177,7 +3177,7 @@\n           \"name\": \"Kohsuke Kawaguchi\",\n           \"email\": \"kk@kohsuke.org\"\n         },\n-        \"message\": \"Merge remote-tracking branch 'origin/master'\",\n+        \"message\": \"Merge remote-tracking branch 'origin/main'\",\n         \"tree\": {\n           \"url\": \"https://api.github.com/repos/hub4j/github-api/git/trees/936eeedfad781d857e393b3c2f6d5fa7a6804438\",\n           \"sha\": \"936eeedfad781d857e393b3c2f6d5fa7a6804438\""
    },
    {
      "sha": "f81ca46d8a4c94ba5d016963127e5a6ab118bf82",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/search_commits-33.json",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/search_commits-33.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/search_commits-33.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitSearch/__files/search_commits-33.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -443,7 +443,7 @@\n           \"name\": \"Kohsuke Kawaguchi\",\n           \"email\": \"kk@kohsuke.org\"\n         },\n-        \"message\": \"Merge branch 'master' of github.com:kohsuke/github-api\",\n+        \"message\": \"Merge branch 'main' of github.com:kohsuke/github-api\",\n         \"tree\": {\n           \"url\": \"https://api.github.com/repos/hub4j/github-api/git/trees/76d86aa0103be48e4dde3b1263c3ead31709c04e\",\n           \"sha\": \"76d86aa0103be48e4dde3b1263c3ead31709c04e\"\n@@ -2301,7 +2301,7 @@\n           \"name\": \"GitHub\",\n           \"email\": \"noreply@github.com\"\n         },\n-        \"message\": \"Merge pull request #411 from tadfisher/master\\n\\nAdd GHRepository.getRelease and GHRepository.getReleaseByTagName\",\n+        \"message\": \"Merge pull request #411 from tadfisher/main\\n\\nAdd GHRepository.getRelease and GHRepository.getReleaseByTagName\",\n         \"tree\": {\n           \"url\": \"https://api.github.com/repos/hub4j/github-api/git/trees/1c7cdc463be852d52019e264162a8fbcdb280678\",\n           \"sha\": \"1c7cdc463be852d52019e264162a8fbcdb280678\"\n@@ -3031,7 +3031,7 @@\n           \"name\": \"GitHub\",\n           \"email\": \"noreply@github.com\"\n         },\n-        \"message\": \"Merge pull request #439 from l3ender/master\\n\\nAdd support for repository searching by \\\"topic\\\"\",\n+        \"message\": \"Merge pull request #439 from l3ender/main\\n\\nAdd support for repository searching by \\\"topic\\\"\",\n         \"tree\": {\n           \"url\": \"https://api.github.com/repos/hub4j/github-api/git/trees/bff00c66f979c96203d466601499a76d13d0b711\",\n           \"sha\": \"bff00c66f979c96203d466601499a76d13d0b711\"\n@@ -3177,7 +3177,7 @@\n           \"name\": \"Kohsuke Kawaguchi\",\n           \"email\": \"kk@kohsuke.org\"\n         },\n-        \"message\": \"Merge remote-tracking branch 'origin/master'\",\n+        \"message\": \"Merge remote-tracking branch 'origin/main'\",\n         \"tree\": {\n           \"url\": \"https://api.github.com/repos/hub4j/github-api/git/trees/936eeedfad781d857e393b3c2f6d5fa7a6804438\",\n           \"sha\": \"936eeedfad781d857e393b3c2f6d5fa7a6804438\""
    },
    {
      "sha": "43ee27087491b91d5c85d21d34e151fe1b843453",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitShortInfo/__files/repos_hub4j_github-api-2.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitShortInfo/__files/repos_hub4j_github-api-2.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitShortInfo/__files/repos_hub4j_github-api-2.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitShortInfo/__files/repos_hub4j_github-api-2.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 433,\n   \"open_issues\": 64,\n   \"watchers\": 565,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "43ee27087491b91d5c85d21d34e151fe1b843453",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitStatus/__files/repos_hub4j_github-api-2.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitStatus/__files/repos_hub4j_github-api-2.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitStatus/__files/repos_hub4j_github-api-2.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCommitStatus/__files/repos_hub4j_github-api-2.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 433,\n   \"open_issues\": 64,\n   \"watchers\": 565,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "60041489a82c96ea4d6dc210ba0ef6bfcfdfd044",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCreateCommitComment/__files/repos_kohsuke_sandbox-ant-3.json",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCreateCommitComment/__files/repos_kohsuke_sandbox-ant-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCreateCommitComment/__files/repos_kohsuke_sandbox-ant-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCreateCommitComment/__files/repos_kohsuke_sandbox-ant-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -90,7 +90,7 @@\n   \"forks\": 2,\n   \"open_issues\": 0,\n   \"watchers\": 2,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": false,\n     \"push\": false,\n@@ -189,7 +189,7 @@\n     \"forks\": 4,\n     \"open_issues\": 0,\n     \"watchers\": 4,\n-    \"default_branch\": \"master\"\n+    \"default_branch\": \"main\"\n   },\n   \"source\": {\n     \"id\": 3231216,\n@@ -283,7 +283,7 @@\n     \"forks\": 4,\n     \"open_issues\": 0,\n     \"watchers\": 4,\n-    \"default_branch\": \"master\"\n+    \"default_branch\": \"main\"\n   },\n   \"network_count\": 4,\n   \"subscribers_count\": 0"
    },
    {
      "sha": "3a48705dabe5f14ba20e4808191b4be28899b688",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testCreateIssue/__files/repos_hub4j-test-org_github-api-test-2.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCreateIssue/__files/repos_hub4j-test-org_github-api-test-2.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCreateIssue/__files/repos_hub4j-test-org_github-api-test-2.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testCreateIssue/__files/repos_hub4j-test-org_github-api-test-2.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -90,7 +90,7 @@\n   \"forks\": 0,\n   \"open_issues\": 0,\n   \"watchers\": 0,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "eb0b964b57f2f1bcda7a320800fb16ae24cb9b11",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-10.json",
      "status": "modified",
      "additions": 54,
      "deletions": 54,
      "changes": 108,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-10.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-10.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-10.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -18,7 +18,7 @@\n     \"payload\": {\n       \"ref\": \"branch-8855a329\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -222,7 +222,7 @@\n     \"payload\": {\n       \"ref\": \"branch-e08f46fa\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -249,7 +249,7 @@\n       \"push_id\": 4176854891,\n       \"size\": 2,\n       \"distinct_size\": 2,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"d3108b1a65697a4d495da409b90c01949487a028\",\n       \"before\": \"b6149875bc527d31618a9e49513966cd52129ada\",\n       \"commits\": [\n@@ -523,12 +523,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"gridu:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"gridu:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"b3b4fd9e4a2e1aa505cb9d3b7f019f8431e495da\",\n           \"user\": {\n             \"login\": \"gridu\",\n@@ -642,7 +642,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -716,7 +716,7 @@\n       \"push_id\": 4176854890,\n       \"size\": 11,\n       \"distinct_size\": 11,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"6c05258cfd1a6156ee587923fb2ac0f55d84e482\",\n       \"before\": \"e63bc6b2efce3bc6525e020fba6085654ddd3f49\",\n       \"commits\": [\n@@ -736,7 +736,7 @@\n             \"email\": \"nobody@nowhere.nul\",\n             \"name\": \"Coursera Learner\"\n           },\n-          \"message\": \"Merge branch 'master' of https://github.com/gszlan/DukeC-programming\\n\\ndone\",\n+          \"message\": \"Merge branch 'main' of https://github.com/gszlan/DukeC-programming\\n\\ndone\",\n           \"distinct\": true,\n           \"url\": \"https://api.github.com/repos/gszlan/DukeC-programming/commits/7807e29af8106aa4a6c01538c9a745c52db52155\"\n         },\n@@ -746,7 +746,7 @@\n             \"email\": \"nobody@nowhere.nul\",\n             \"name\": \"Coursera Learner\"\n           },\n-          \"message\": \"Merge branch 'master' of https://github.com/gszlan/DukeC-programming\\n\\ndone\",\n+          \"message\": \"Merge branch 'main' of https://github.com/gszlan/DukeC-programming\\n\\ndone\",\n           \"distinct\": true,\n           \"url\": \"https://api.github.com/repos/gszlan/DukeC-programming/commits/c19074a391ed36dd451f792c3f003d6bff670a70\"\n         },\n@@ -766,7 +766,7 @@\n             \"email\": \"nobody@nowhere.nul\",\n             \"name\": \"Coursera Learner\"\n           },\n-          \"message\": \"Merge branch 'master' of https://github.com/gszlan/DukeC-programming\\n\\naaa\",\n+          \"message\": \"Merge branch 'main' of https://github.com/gszlan/DukeC-programming\\n\\naaa\",\n           \"distinct\": true,\n           \"url\": \"https://api.github.com/repos/gszlan/DukeC-programming/commits/2812192ddc013f7e75b3f1845649eb5ccb8baaea\"\n         },\n@@ -786,7 +786,7 @@\n             \"email\": \"nobody@nowhere.nul\",\n             \"name\": \"Coursera Learner\"\n           },\n-          \"message\": \"Merge branch 'master' of https://github.com/gszlan/DukeC-programming\",\n+          \"message\": \"Merge branch 'main' of https://github.com/gszlan/DukeC-programming\",\n           \"distinct\": true,\n           \"url\": \"https://api.github.com/repos/gszlan/DukeC-programming/commits/07ea94f84ae40ae341de1158f0a5c1c4804dae8c\"\n         },\n@@ -806,7 +806,7 @@\n             \"email\": \"nobody@nowhere.nul\",\n             \"name\": \"Coursera Learner\"\n           },\n-          \"message\": \"Merge branch 'master' of https://github.com/gszlan/DukeC-programming\",\n+          \"message\": \"Merge branch 'main' of https://github.com/gszlan/DukeC-programming\",\n           \"distinct\": true,\n           \"url\": \"https://api.github.com/repos/gszlan/DukeC-programming/commits/9d9d8e3ff80b91b6fe30732b36dee7b5b88196d5\"\n         },\n@@ -904,7 +904,7 @@\n       \"push_id\": 4176854889,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"30555b249ec8d391669c5e0986633c81ae0074e4\",\n       \"before\": \"be176ad97e275562df0352855aa7d1f0d06786ce\",\n       \"commits\": [\n@@ -950,7 +950,7 @@\n       \"push_id\": 4176854884,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"61a4f6c6a093379eb8a5c8212c4fd59c2b6583f4\",\n       \"before\": \"371b9b4cc0a641cb7dd1b1c5e67b920ff267e6ee\",\n       \"commits\": [\n@@ -1069,7 +1069,7 @@\n         \"updated_at\": \"2019-10-21T21:54:48Z\",\n         \"closed_at\": null,\n         \"author_association\": \"NONE\",\n-        \"body\": \"## Welcome!\\n\\nHello and welcome! In this course you will learn how you can get your best work done in pull requests.  You'll learn when and how to request a review, how to review someone else's code, and how to respond to reviews. To do this, we'll be playing around with the code in this repository that makes a simple Tetris game.\\n\\nIf you'd like, you can use [GitHub Pages](https://pages.github.com/) to host your Tetris game. Just go to the **Settings** tab of this repository. Scroll down to **GitHub Pages**. Select `master` as a **Source**, and click **Save**. \\n\\n### New to GitHub?\\n\\nFor this course, you'll need some background knowledge. If you need a refresher on the GitHub flow, check out [the Introduction to GitHub course](https://lab.github.com/courses/introduction-to-github).\\n\\n## Pull Requests Reviews 101\\n\\nReviewing a pull request is an opportunity to examine another contributor's changes. While reviewing a pull request, you can extrapolate how someone else solved a problem. It's an awesome opportunity to learn more about how the code works and how others solve problems. Reviewing a pull request is a great learning opportunity!\\n\\n## Step 1: Add assignees for issues and pull requests\\n\\nAssignees on issues and pull requests let other team members know who is responsible. The assignee oversees the issue or pull request in an accessible and visible way.\\n\\n### :keyboard: Activity: Assign yourself to this issue\\n\\n1. On the right side of the screen, click the `assign yourself` text under the **Assignees** section\\n\\n<hr>\\n<h3 align=\\\"center\\\">I'll respond below for your next step</h3>\\n\\n> _Sometimes I respond too fast for the page to update! If you perform an expected action and don't see a response, wait a few seconds and refresh the page for your next steps._\\n\"\n+        \"body\": \"## Welcome!\\n\\nHello and welcome! In this course you will learn how you can get your best work done in pull requests.  You'll learn when and how to request a review, how to review someone else's code, and how to respond to reviews. To do this, we'll be playing around with the code in this repository that makes a simple Tetris game.\\n\\nIf you'd like, you can use [GitHub Pages](https://pages.github.com/) to host your Tetris game. Just go to the **Settings** tab of this repository. Scroll down to **GitHub Pages**. Select `main` as a **Source**, and click **Save**. \\n\\n### New to GitHub?\\n\\nFor this course, you'll need some background knowledge. If you need a refresher on the GitHub flow, check out [the Introduction to GitHub course](https://lab.github.com/courses/introduction-to-github).\\n\\n## Pull Requests Reviews 101\\n\\nReviewing a pull request is an opportunity to examine another contributor's changes. While reviewing a pull request, you can extrapolate how someone else solved a problem. It's an awesome opportunity to learn more about how the code works and how others solve problems. Reviewing a pull request is a great learning opportunity!\\n\\n## Step 1: Add assignees for issues and pull requests\\n\\nAssignees on issues and pull requests let other team members know who is responsible. The assignee oversees the issue or pull request in an accessible and visible way.\\n\\n### :keyboard: Activity: Assign yourself to this issue\\n\\n1. On the right side of the screen, click the `assign yourself` text under the **Assignees** section\\n\\n<hr>\\n<h3 align=\\\"center\\\">I'll respond below for your next step</h3>\\n\\n> _Sometimes I respond too fast for the page to update! If you perform an expected action and don't see a response, wait a few seconds and refresh the page for your next steps._\\n\"\n       },\n       \"comment\": {\n         \"url\": \"https://api.github.com/repos/rcordeirotmu/reviewing-a-pull-request/issues/comments/544724566\",\n@@ -1296,12 +1296,12 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"dekkerglen:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"dekkerglen:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"f25ddd94644152d3bb6f2641e552b05108d13475\",\n           \"user\": {\n             \"login\": \"dekkerglen\",\n@@ -1421,7 +1421,7 @@\n             \"forks\": 28,\n             \"open_issues\": 126,\n             \"watchers\": 39,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -1507,7 +1507,7 @@\n       \"push_id\": 4176854881,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"b826329617c6f44caaac3be82a3147d082e404b7\",\n       \"before\": \"4ff7211da7ee2bfa13e742c6332d78b228a4f4dc\",\n       \"commits\": [\n@@ -1553,7 +1553,7 @@\n       \"push_id\": 4176854876,\n       \"size\": 2,\n       \"distinct_size\": 2,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"f4b6567d15dfe6709d3eecd304877e4ca32ac308\",\n       \"before\": \"0d0b5abb37eae9421cf0cbdcc63e37e2cd0f1a06\",\n       \"commits\": [\n@@ -1573,7 +1573,7 @@\n             \"email\": \"adrir@adrir.com\",\n             \"name\": \"Adrir\"\n           },\n-          \"message\": \"Merge branch 'master' of https://github.com/Adrir/comp120-tinkering-graphics\",\n+          \"message\": \"Merge branch 'main' of https://github.com/Adrir/comp120-tinkering-graphics\",\n           \"distinct\": true,\n           \"url\": \"https://api.github.com/repos/Adrir/comp120-tinkering-graphics/commits/f4b6567d15dfe6709d3eecd304877e4ca32ac308\"\n         }\n@@ -1602,7 +1602,7 @@\n       \"push_id\": 4176854871,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"ccc9ca4e384c48c6543b66801cb9dc8df3fd2178\",\n       \"before\": \"6bcfc18c475e5ab4de1f89a5a588ea628367ea38\",\n       \"commits\": [\n@@ -1805,12 +1805,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"dm-group-trakd:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"dm-group-trakd:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"4586bdd4aba94009ee60a2d01710f50493f60fd7\",\n           \"user\": {\n             \"login\": \"dm-group-trakd\",\n@@ -1924,7 +1924,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -2017,7 +2017,7 @@\n       \"push_id\": 4176854878,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"6ce7de98689be2a91f3455f0fe83754252658073\",\n       \"before\": \"2d14bcf9d9906d1ef9aa124b3ed168e926b45334\",\n       \"commits\": [\n@@ -2226,12 +2226,12 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"envoyproxy:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"envoyproxy:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"4bd38639fe0332c55961505d4e091f72895b7f73\",\n           \"user\": {\n             \"login\": \"envoyproxy\",\n@@ -2351,7 +2351,7 @@\n             \"forks\": 26,\n             \"open_issues\": 66,\n             \"watchers\": 61,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -2608,8 +2608,8 @@\n         \"comments_url\": \"https://api.github.com/repos/cyberark/conjur/issues/1209/comments\",\n         \"statuses_url\": \"https://api.github.com/repos/cyberark/conjur/statuses/d16c40c290d4f1ac139b101cd089a1635f20db29\",\n         \"head\": {\n-          \"label\": \"AndrewCopeland:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"AndrewCopeland:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"d16c40c290d4f1ac139b101cd089a1635f20db29\",\n           \"user\": {\n             \"login\": \"AndrewCopeland\",\n@@ -2729,12 +2729,12 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"cyberark:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"cyberark:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"ccf74318168be925bd62753926ae6b46ccce67aa\",\n           \"user\": {\n             \"login\": \"cyberark\",\n@@ -2854,7 +2854,7 @@\n             \"forks\": 63,\n             \"open_issues\": 260,\n             \"watchers\": 320,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -2916,7 +2916,7 @@\n       \"push_id\": 4176854863,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"2282592b49f3c60b07f84135ddfd8d7199d93e2a\",\n       \"before\": \"f393ac03494aa2e71988f93d73243c6887bf1541\",\n       \"commits\": [\n@@ -2954,7 +2954,7 @@\n     \"payload\": {\n       \"ref\": \"steveDesktop\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -2981,7 +2981,7 @@\n       \"push_id\": 4176854859,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"908784246be05f222167f3f463e1423885f54ac5\",\n       \"before\": \"9e030787665d1dbf6f75f4020c52cb842d3cd17b\",\n       \"commits\": [\n@@ -3109,7 +3109,7 @@\n         \"forks\": 0,\n         \"open_issues\": 0,\n         \"watchers\": 0,\n-        \"default_branch\": \"master\",\n+        \"default_branch\": \"main\",\n         \"public\": true\n       }\n     },\n@@ -3165,7 +3165,7 @@\n       \"push_id\": 4176854855,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"c8c067d90454baf99eb4cb1f02306b6de748a2b7\",\n       \"before\": \"35f44d43437cfe431fc2ee4ad42cb2a790c9a789\",\n       \"commits\": [\n@@ -3452,12 +3452,12 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"ampproject:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"ampproject:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"9e8a075958f4a7995ba8190c5becc32ef3108f89\",\n           \"user\": {\n             \"login\": \"ampproject\",\n@@ -3577,7 +3577,7 @@\n             \"forks\": 3217,\n             \"open_issues\": 1641,\n             \"watchers\": 13177,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -3803,12 +3803,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"AvalancheOfFox:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"AvalancheOfFox:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"8809925097f56d47aba7203acbfa5420b5f9ed61\",\n           \"user\": {\n             \"login\": \"AvalancheOfFox\",\n@@ -3922,7 +3922,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -4032,9 +4032,9 @@\n       \"url\": \"https://api.github.com/repos/carlosgon1/Carlos-Gonzalez\"\n     },\n     \"payload\": {\n-      \"ref\": \"master\",\n+      \"ref\": \"main\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },"
    },
    {
      "sha": "efa8fe9d8cd6f3bf9aaa2e5311d779fd26b9c396",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-11.json",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-11.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-11.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-11.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -19,7 +19,7 @@\n       \"push_id\": 4176854844,\n       \"size\": 2,\n       \"distinct_size\": 2,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"d2236eda0eaacce89c1061771ee6b869c1a45f62\",\n       \"before\": \"c056019ab48ac4112f94e3d3a4b8df5c4a829942\",\n       \"commits\": [\n@@ -68,7 +68,7 @@\n       \"push_id\": 4176854836,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"803f0f4a487b2b4da9410829dca1cbdc1f0209e4\",\n       \"before\": \"cb6da22b157a14363ad3a4c4f716ec8390ab7aec\",\n       \"commits\": [\n@@ -153,7 +153,7 @@\n       \"push_id\": 4176854834,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"520b59ae2047f8b6adaa0a17a17d9ca531de3b3e\",\n       \"before\": \"38d8e77f999ba5999c013b44f6e8fe808308de7a\",\n       \"commits\": [\n@@ -191,7 +191,7 @@\n     \"payload\": {\n       \"ref\": null,\n       \"ref_type\": \"repository\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": \"Documentation on Angreifer.org services (coming soon)\",\n       \"pusher_type\": \"user\"\n     },\n@@ -284,7 +284,7 @@\n             \"email\": \"27856297+dependabot-preview[bot]@users.noreply.github.com\",\n             \"name\": \"dependabot-preview[bot]\"\n           },\n-          \"message\": \"build(deps): bump date-fns from 2.2.1 to 2.5.1\\n\\nBumps [date-fns](https://github.com/date-fns/date-fns) from 2.2.1 to 2.5.1.\\n- [Release notes](https://github.com/date-fns/date-fns/releases)\\n- [Changelog](https://github.com/date-fns/date-fns/blob/master/CHANGELOG.md)\\n- [Commits](https://github.com/date-fns/date-fns/compare/v2.2.1...v2.5.1)\\n\\nSigned-off-by: dependabot-preview[bot] <support@dependabot.com>\",\n+          \"message\": \"build(deps): bump date-fns from 2.2.1 to 2.5.1\\n\\nBumps [date-fns](https://github.com/date-fns/date-fns) from 2.2.1 to 2.5.1.\\n- [Release notes](https://github.com/date-fns/date-fns/releases)\\n- [Changelog](https://github.com/date-fns/date-fns/blob/main/CHANGELOG.md)\\n- [Commits](https://github.com/date-fns/date-fns/compare/v2.2.1...v2.5.1)\\n\\nSigned-off-by: dependabot-preview[bot] <support@dependabot.com>\",\n           \"distinct\": true,\n           \"url\": \"https://api.github.com/repos/Profiscience/knockout-contrib/commits/3c2acb28c17c60c9f15afa9763dca02d5923b2c3\"\n         }\n@@ -410,7 +410,7 @@\n       \"push_id\": 4176854811,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"9e030787665d1dbf6f75f4020c52cb842d3cd17b\",\n       \"before\": \"0bb1bbedfa1148e8931dca828cfaa3a6f21dd9a4\",\n       \"commits\": [\n@@ -473,7 +473,7 @@\n       \"push_id\": 4176854806,\n       \"size\": 61,\n       \"distinct_size\": 0,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"5005a784df3fe79330212c6503c67b05b474df87\",\n       \"before\": \"36df29735886a29cda5ba7bccf26ef0faa55f1c0\",\n       \"commits\": ["
    },
    {
      "sha": "e0a52fe4010229d4c0746ddd90f40a8754a08c5c",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-2.json",
      "status": "modified",
      "additions": 34,
      "deletions": 34,
      "changes": 68,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-2.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-2.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-2.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -98,7 +98,7 @@\n           \"type\": \"User\",\n           \"site_admin\": false\n         },\n-        \"body\": \"<!-- DO NOT DELETE THIS TEMPLATE -->\\r\\n\\r\\n## Description\\r\\n\\r\\nCurrently waagent relies on explicit configuration (`Provisioning.UseCloudInit` to be set, and `Provisioning.Enabled` to be falsy). This can pose an interesting problem with the introduction of cloud-init. When waagent and cloud-init live side-by-side, they will contend with each other to be the provisioning agent. Image maintainers need to explicitly set configuration (above) so that waagent allows cloud-init to be the provisioning agent. With maintainers possibly not knowing about this behavior, they could unknowing cause provisioning issues.\\r\\n\\r\\nThis PR changes that behavior by deprecating `Provisioning.UseCloudInit` and `Provisioning.Enabled` configuration options and introduces a new configuration setting: `Provisioning.Agent`. The following values change the behavior of which provisioning agent to use:\\r\\n\\r\\n* `auto` (default) - Allow waagent to autodetect to see if cloud-init is enabled. If so, use cloud-init as the provisioning agent. If not, use waagent as the provisioning agent.\\r\\n* `waagent` - Force waagent as the provisioning agent.\\r\\n* `cloud-init` - Force cloud-init as the provisioning agent.\\r\\n* `disabled` - Disable all provisioning.\\r\\n\\r\\n---\\r\\n\\r\\n### PR information\\r\\n- [x] The title of the PR is clear and informative.\\r\\n- [x] There are a small number of commits, each of which has an informative message. This means that previously merged commits do not appear in the history of the PR. For information on cleaning up the commits in your pull request, [see this page](https://github.com/Azure/azure-powershell/blob/master/documentation/development-docs/cleaning-up-commits.md).\\r\\n- [x] Except for special cases involving multiple contributors, the PR is started from a fork of the main repository, not a branch.\\r\\n- [x] If applicable, the PR references the bug/issue that it fixes in the description.\\r\\n- [x] New Unit tests were added for the changes made and Travis.CI is passing.\\r\\n\\r\\n### Quality of Code and Contribution Guidelines\\r\\n- [x] I have read the [contribution guidelines](https://github.com/Azure/WALinuxAgent/blob/master/.github/CONTRIBUTING.md).\\r\\n\\r\\n<!-- Reviewable:start -->\\r\\n---\\r\\nThis change is [<img src=\\\"https://reviewable.io/review_button.svg\\\" height=\\\"34\\\" align=\\\"absmiddle\\\" alt=\\\"Reviewable\\\"/>](https://reviewable.io/reviews/azure/walinuxagent/1633)\\r\\n<!-- Reviewable:end -->\\r\\n\",\n+        \"body\": \"<!-- DO NOT DELETE THIS TEMPLATE -->\\r\\n\\r\\n## Description\\r\\n\\r\\nCurrently waagent relies on explicit configuration (`Provisioning.UseCloudInit` to be set, and `Provisioning.Enabled` to be falsy). This can pose an interesting problem with the introduction of cloud-init. When waagent and cloud-init live side-by-side, they will contend with each other to be the provisioning agent. Image maintainers need to explicitly set configuration (above) so that waagent allows cloud-init to be the provisioning agent. With maintainers possibly not knowing about this behavior, they could unknowing cause provisioning issues.\\r\\n\\r\\nThis PR changes that behavior by deprecating `Provisioning.UseCloudInit` and `Provisioning.Enabled` configuration options and introduces a new configuration setting: `Provisioning.Agent`. The following values change the behavior of which provisioning agent to use:\\r\\n\\r\\n* `auto` (default) - Allow waagent to autodetect to see if cloud-init is enabled. If so, use cloud-init as the provisioning agent. If not, use waagent as the provisioning agent.\\r\\n* `waagent` - Force waagent as the provisioning agent.\\r\\n* `cloud-init` - Force cloud-init as the provisioning agent.\\r\\n* `disabled` - Disable all provisioning.\\r\\n\\r\\n---\\r\\n\\r\\n### PR information\\r\\n- [x] The title of the PR is clear and informative.\\r\\n- [x] There are a small number of commits, each of which has an informative message. This means that previously merged commits do not appear in the history of the PR. For information on cleaning up the commits in your pull request, [see this page](https://github.com/Azure/azure-powershell/blob/main/documentation/development-docs/cleaning-up-commits.md).\\r\\n- [x] Except for special cases involving multiple contributors, the PR is started from a fork of the main repository, not a branch.\\r\\n- [x] If applicable, the PR references the bug/issue that it fixes in the description.\\r\\n- [x] New Unit tests were added for the changes made and Travis.CI is passing.\\r\\n\\r\\n### Quality of Code and Contribution Guidelines\\r\\n- [x] I have read the [contribution guidelines](https://github.com/Azure/WALinuxAgent/blob/main/.github/CONTRIBUTING.md).\\r\\n\\r\\n<!-- Reviewable:start -->\\r\\n---\\r\\nThis change is [<img src=\\\"https://reviewable.io/review_button.svg\\\" height=\\\"34\\\" align=\\\"absmiddle\\\" alt=\\\"Reviewable\\\"/>](https://reviewable.io/reviews/azure/walinuxagent/1633)\\r\\n<!-- Reviewable:end -->\\r\\n\",\n         \"created_at\": \"2019-09-13T15:12:48Z\",\n         \"updated_at\": \"2019-10-21T21:54:52Z\",\n         \"closed_at\": null,\n@@ -525,7 +525,7 @@\n       \"push_id\": 4176855091,\n       \"size\": 2,\n       \"distinct_size\": 2,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"a5d076457b88b544a7e7ca9351854fe40c2c8596\",\n       \"before\": \"9b6089c7a2e4483181fd96bd0ff77ffe49eac51b\",\n       \"commits\": [\n@@ -545,7 +545,7 @@\n             \"email\": \"bruno7kp@outlook.com\",\n             \"name\": \"Bruno\"\n           },\n-          \"message\": \"Merge remote-tracking branch 'origin/master'\",\n+          \"message\": \"Merge remote-tracking branch 'origin/main'\",\n           \"distinct\": true,\n           \"url\": \"https://api.github.com/repos/Bruno7kp/webPythonProjetoEstudo2019_02/commits/a5d076457b88b544a7e7ca9351854fe40c2c8596\"\n         }\n@@ -638,7 +638,7 @@\n       \"push_id\": 4176855087,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"230d1a6c4e090efb647ab1fb9e8fb8db91d652ab\",\n       \"before\": \"0dc96f40d477ffd4f9838c2ab68ea462364a6581\",\n       \"commits\": [\n@@ -676,7 +676,7 @@\n     \"payload\": {\n       \"ref\": \"test.phpbranch1\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": \"Develop our code skills\",\n       \"pusher_type\": \"user\"\n     },\n@@ -742,7 +742,7 @@\n       \"push_id\": 4176855086,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"f3e302ebb90aece032608a8e29fd36c136636a6f\",\n       \"before\": \"430ea4bf98dcee88235f556a2b89237552ef1be4\",\n       \"commits\": [\n@@ -883,7 +883,7 @@\n         \"forks\": 0,\n         \"open_issues\": 0,\n         \"watchers\": 0,\n-        \"default_branch\": \"master\",\n+        \"default_branch\": \"main\",\n         \"public\": true\n       }\n     },\n@@ -940,7 +940,7 @@\n             \"email\": \"sebastien@eustace.io\",\n             \"name\": \"Sébastien Eustace\"\n           },\n-          \"message\": \"Merge branch 'master' into develop\",\n+          \"message\": \"Merge branch 'main' into develop\",\n           \"distinct\": false,\n           \"url\": \"https://api.github.com/repos/steinnes/poetry/commits/329b334be25fcd6af876372958633325ce9ca4ae\"\n         },\n@@ -970,7 +970,7 @@\n             \"email\": \"sebastien@eustace.io\",\n             \"name\": \"Sébastien Eustace\"\n           },\n-          \"message\": \"Merge branch 'master' into develop\",\n+          \"message\": \"Merge branch 'main' into develop\",\n           \"distinct\": false,\n           \"url\": \"https://api.github.com/repos/steinnes/poetry/commits/832e8fea6d85c35a645cf4b0d37e0f1c3216c280\"\n         },\n@@ -1080,7 +1080,7 @@\n             \"email\": \"sebastien@eustace.io\",\n             \"name\": \"Sébastien Eustace\"\n           },\n-          \"message\": \"Merge branch 'master' into develop\\n\\n# Conflicts:\\n#\\tCHANGELOG.md\\n#\\tpoetry.lock\\n#\\tpoetry/__version__.py\\n#\\tpyproject.toml\\n#\\ttests/packages/test_locker.py\",\n+          \"message\": \"Merge branch 'main' into develop\\n\\n# Conflicts:\\n#\\tCHANGELOG.md\\n#\\tpoetry.lock\\n#\\tpoetry/__version__.py\\n#\\tpyproject.toml\\n#\\ttests/packages/test_locker.py\",\n           \"distinct\": false,\n           \"url\": \"https://api.github.com/repos/steinnes/poetry/commits/dbe13102facbb5886c4e1d431db7eb125fe475c4\"\n         },\n@@ -1149,7 +1149,7 @@\n         \"number\": 20,\n         \"state\": \"closed\",\n         \"locked\": false,\n-        \"title\": \"[pull] master from lerna:master\",\n+        \"title\": \"[pull] main from lerna:main\",\n         \"user\": {\n           \"login\": \"pull[bot]\",\n           \"id\": 39814207,\n@@ -1197,8 +1197,8 @@\n         \"comments_url\": \"https://api.github.com/repos/daddyfatstacksBIG/lerna/issues/20/comments\",\n         \"statuses_url\": \"https://api.github.com/repos/daddyfatstacksBIG/lerna/statuses/4872459be7bf88e5900ff907b07279e9516d333c\",\n         \"head\": {\n-          \"label\": \"lerna:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"lerna:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"4872459be7bf88e5900ff907b07279e9516d333c\",\n           \"user\": {\n             \"login\": \"lerna\",\n@@ -1318,12 +1318,12 @@\n             \"forks\": 1208,\n             \"open_issues\": 230,\n             \"watchers\": 19472,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"daddyfatstacksBIG:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"daddyfatstacksBIG:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"99425f7e3df4d081c51f9850e71ad93e83dc30c4\",\n           \"user\": {\n             \"login\": \"daddyfatstacksBIG\",\n@@ -1443,7 +1443,7 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -1603,7 +1603,7 @@\n     \"payload\": {\n       \"ref\": \"dependabot/npm_and_yarn/vue-shop/mixin-deep-1.3.2\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": \"实战商城\",\n       \"pusher_type\": \"user\"\n     },\n@@ -1630,7 +1630,7 @@\n       \"push_id\": 4176855075,\n       \"size\": 5,\n       \"distinct_size\": 5,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"4872459be7bf88e5900ff907b07279e9516d333c\",\n       \"before\": \"99425f7e3df4d081c51f9850e71ad93e83dc30c4\",\n       \"commits\": [\n@@ -1812,7 +1812,7 @@\n     \"payload\": {\n       \"ref\": null,\n       \"ref_type\": \"repository\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -1836,9 +1836,9 @@\n       \"url\": \"https://api.github.com/repos/NathanPG/TCP_GuessGame\"\n     },\n     \"payload\": {\n-      \"ref\": \"master\",\n+      \"ref\": \"main\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -1904,7 +1904,7 @@\n       \"push_id\": 4176855068,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"3099a4b8091293fd480a6e64da5b01e385fcfa06\",\n       \"before\": \"0f4de10752e6dc72e179caaeddcf3a1d522b2099\",\n       \"commits\": [\n@@ -1989,7 +1989,7 @@\n       \"push_id\": 4176855060,\n       \"size\": 0,\n       \"distinct_size\": 0,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"3b4fe7970049252f77fc6068371e59c48bc1cddf\",\n       \"before\": \"3b4fe7970049252f77fc6068371e59c48bc1cddf\",\n       \"commits\": []\n@@ -2024,7 +2024,7 @@\n       \"push_id\": 4176855066,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"f3cf80bd829569dcc690663965465e8dc0ef6f50\",\n       \"before\": \"d4d97bd2ff211b55c603298f8ca75c6ab43b69d9\",\n       \"commits\": [\n@@ -2063,7 +2063,7 @@\n       \"push_id\": 4176855063,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"969d8090a16f7452a895965009ba7f6a4edc9c82\",\n       \"before\": \"481b4f5fd37451b9e9d2102f44f13bc9d18c599f\",\n       \"commits\": [\n@@ -2268,7 +2268,7 @@\n         \"created_at\": \"2019-10-21T21:54:51Z\",\n         \"updated_at\": \"2019-10-21T21:54:51Z\",\n         \"author_association\": \"CONTRIBUTOR\",\n-        \"body\": \"[APPROVALNOTIFIER] This PR is **APPROVED**\\n\\nThis pull-request has been approved by: *<a href=\\\"https://github.com/kubernetes/test-infra/pull/14895#issuecomment-544724506\\\" title=\\\"Approved\\\">BenTheElder</a>*, *<a href=\\\"https://github.com/kubernetes/test-infra/pull/14895#\\\" title=\\\"Author self-approved\\\">Katharine</a>*\\n\\nThe full list of commands accepted by this bot can be found [here](https://go.k8s.io/bot-commands?repo=kubernetes%2Ftest-infra).\\n\\nThe pull request process is described [here](https://git.k8s.io/community/contributors/guide/owners.md#the-code-review-process)\\n\\n<details >\\nNeeds approval from an approver in each of these files:\\n\\n- ~~[gopherage/OWNERS](https://github.com/kubernetes/test-infra/blob/master/gopherage/OWNERS)~~ [BenTheElder,Katharine]\\n\\nApprovers can indicate their approval by writing `/approve` in a comment\\nApprovers can cancel approval by writing `/approve cancel` in a comment\\n</details>\\n<!-- META={\\\"approvers\\\":[]} -->\"\n+        \"body\": \"[APPROVALNOTIFIER] This PR is **APPROVED**\\n\\nThis pull-request has been approved by: *<a href=\\\"https://github.com/kubernetes/test-infra/pull/14895#issuecomment-544724506\\\" title=\\\"Approved\\\">BenTheElder</a>*, *<a href=\\\"https://github.com/kubernetes/test-infra/pull/14895#\\\" title=\\\"Author self-approved\\\">Katharine</a>*\\n\\nThe full list of commands accepted by this bot can be found [here](https://go.k8s.io/bot-commands?repo=kubernetes%2Ftest-infra).\\n\\nThe pull request process is described [here](https://git.k8s.io/community/contributors/guide/owners.md#the-code-review-process)\\n\\n<details >\\nNeeds approval from an approver in each of these files:\\n\\n- ~~[gopherage/OWNERS](https://github.com/kubernetes/test-infra/blob/main/gopherage/OWNERS)~~ [BenTheElder,Katharine]\\n\\nApprovers can indicate their approval by writing `/approve` in a comment\\nApprovers can cancel approval by writing `/approve cancel` in a comment\\n</details>\\n<!-- META={\\\"approvers\\\":[]} -->\"\n       }\n     },\n     \"public\": true,\n@@ -2475,7 +2475,7 @@\n       \"push_id\": 4176855048,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"9de940141ce125243ac37fe144388fc8e903afef\",\n       \"before\": \"cfe209f4e31cbd22bd86a9c5f2329b832efc5e53\",\n       \"commits\": [\n@@ -2684,12 +2684,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"liuzhuzhu:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"liuzhuzhu:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"f56c08f6925dfa7def6e51f4f361295480f32603\",\n           \"user\": {\n             \"login\": \"liuzhuzhu\",\n@@ -2809,7 +2809,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -2873,9 +2873,9 @@\n       \"url\": \"https://api.github.com/repos/VARUN2197/zodiacApp\"\n     },\n     \"payload\": {\n-      \"ref\": \"master\",\n+      \"ref\": \"main\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },"
    },
    {
      "sha": "e16cd754a0fc1ed4ef833aef0601e08cfff10f5e",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-3.json",
      "status": "modified",
      "additions": 30,
      "deletions": 30,
      "changes": 60,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -19,7 +19,7 @@\n       \"push_id\": 4176855037,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"846050f82a70b7ca5c527859d8ef1f65f19e0a22\",\n       \"before\": \"a2391c4a3e4c01f56b0c11533be1879361c9b969\",\n       \"commits\": [\n@@ -161,7 +161,7 @@\n     \"payload\": {\n       \"ref\": \"my-slide\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": \"A robot powered training repository :robot:\",\n       \"pusher_type\": \"user\"\n     },\n@@ -212,7 +212,7 @@\n       \"push_id\": 4176855036,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"5817dd632f14c5a1b9d9340ad7cf64f0f44e2d4d\",\n       \"before\": \"93b11e1aea2670ec515e75531aedde0d73ee78a4\",\n       \"commits\": [\n@@ -251,7 +251,7 @@\n       \"push_id\": 4176855035,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"f3de92d93edf5a547aa7d3f96bd145920c2bc3c6\",\n       \"before\": \"4f4517747cad50464c61df70e1d9f6472ecfb690\",\n       \"commits\": [\n@@ -454,12 +454,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"dob9601:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"dob9601:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"dd5167cfae62de4fe36d0865026ac9b40210fa25\",\n           \"user\": {\n             \"login\": \"dob9601\",\n@@ -573,7 +573,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -640,7 +640,7 @@\n       \"push_id\": 4176855034,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"132c6e3f563648754dc973ceaeae47ef2688d128\",\n       \"before\": \"0ac44fb2add6e1e7802ba448ac07e4fc525a0688\",\n       \"commits\": [\n@@ -678,7 +678,7 @@\n     \"payload\": {\n       \"ref\": \"2019-10-21_21-54-44_123_scenario1\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -712,7 +712,7 @@\n       \"push_id\": 4176855031,\n       \"size\": 2,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"077fb6369088fc334fde4cad3b4443cfd3b6546c\",\n       \"before\": \"087f5d8dc690e9c2ba31340bd04382d8648b9e66\",\n       \"commits\": [\n@@ -761,7 +761,7 @@\n       \"push_id\": 4176855030,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"300e8462a5018dee52ad1a7b2bc3430494496ceb\",\n       \"before\": \"fbaadbc8a46e76de09d522d548f985619818b0a9\",\n       \"commits\": [\n@@ -1040,12 +1040,12 @@\n             \"forks\": 1,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"spinnaker:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"spinnaker:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"fde9a0359938f6442c1049e2958d5937e02cf612\",\n           \"user\": {\n             \"login\": \"spinnaker\",\n@@ -1165,7 +1165,7 @@\n             \"forks\": 339,\n             \"open_issues\": 16,\n             \"watchers\": 891,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -1572,12 +1572,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"uuid-rs:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"uuid-rs:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"2070c7bb3f09250854a5144985aa5002f4d0f11b\",\n           \"user\": {\n             \"login\": \"uuid-rs\",\n@@ -1697,7 +1697,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -1771,7 +1771,7 @@\n       \"push_id\": 4176855025,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"481b4f5fd37451b9e9d2102f44f13bc9d18c599f\",\n       \"before\": \"ff47c37132b9f65b7a019f68bd6f920f9557850f\",\n       \"commits\": [\n@@ -1883,7 +1883,7 @@\n       \"push_id\": 4176855020,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"7fc2ffa33a4fe96f248ebc6291e24c64a836c8a4\",\n       \"before\": \"3992ef316cc663ddc9b3a7d21586068c6e91dd5f\",\n       \"commits\": [\n@@ -2117,7 +2117,7 @@\n       \"push_id\": 4176855010,\n       \"size\": 2,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"03f8cff362a6aca0dc7bfce326bec1092e874c63\",\n       \"before\": \"5f1e6fdc621f3186ecaf479cd89e1f07df71d73b\",\n       \"commits\": [\n@@ -2330,12 +2330,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"direwolf-github:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"direwolf-github:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"18395ef48a32eec03d7631dd1750aa3d81fd1fa2\",\n           \"user\": {\n             \"login\": \"direwolf-github\",\n@@ -2449,7 +2449,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -2668,7 +2668,7 @@\n         \"updated_at\": \"2019-10-21T21:54:50Z\",\n         \"closed_at\": null,\n         \"author_association\": \"NONE\",\n-        \"body\": \"so I have the newest laravel-permission but yours is erroring \\r\\nProblem 1\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - ahmedsaoud31/laravel-permission-to-vuejs dev-master requires spatie/laravel-permission ^2.0 -> satisfiable by spatie/laravel-permission[v2.x-dev].\\r\\n    - Installation request for ahmedsaoud31/laravel-permission-to-vuejs dev-master -> satisfiable by ahmedsaoud31/laravel-permission-to-vuejs[dev-master].\\r\\n    - Installation request for spatie/laravel-permission ^3.2 -> satisfiable by spatie/laravel-permission[3.2.0].\\r\\n\\r\\nThank you\"\n+        \"body\": \"so I have the newest laravel-permission but yours is erroring \\r\\nProblem 1\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - ahmedsaoud31/laravel-permission-to-vuejs dev-main requires spatie/laravel-permission ^2.0 -> satisfiable by spatie/laravel-permission[v2.x-dev].\\r\\n    - Installation request for ahmedsaoud31/laravel-permission-to-vuejs dev-main -> satisfiable by ahmedsaoud31/laravel-permission-to-vuejs[dev-main].\\r\\n    - Installation request for spatie/laravel-permission ^3.2 -> satisfiable by spatie/laravel-permission[3.2.0].\\r\\n\\r\\nThank you\"\n       }\n     },\n     \"public\": true,\n@@ -2693,7 +2693,7 @@\n     \"payload\": {\n       \"ref\": \"dependabot/maven/gulimall-admin/commons-fileupload-commons-fileupload-1.3.3\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": \"第四次 不再是一个maven工程\",\n       \"pusher_type\": \"user\"\n     },\n@@ -2805,7 +2805,7 @@\n       \"push_id\": 4176854995,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"dde922c2123a85ff1ff593fdb2c5e235d1a26a77\",\n       \"before\": \"92c78290f141c614d27c4b5d2ad3041ceb6b360c\",\n       \"commits\": ["
    },
    {
      "sha": "e16cd754a0fc1ed4ef833aef0601e08cfff10f5e",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-4.json",
      "status": "modified",
      "additions": 30,
      "deletions": 30,
      "changes": 60,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-4.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-4.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-4.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -19,7 +19,7 @@\n       \"push_id\": 4176855037,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"846050f82a70b7ca5c527859d8ef1f65f19e0a22\",\n       \"before\": \"a2391c4a3e4c01f56b0c11533be1879361c9b969\",\n       \"commits\": [\n@@ -161,7 +161,7 @@\n     \"payload\": {\n       \"ref\": \"my-slide\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": \"A robot powered training repository :robot:\",\n       \"pusher_type\": \"user\"\n     },\n@@ -212,7 +212,7 @@\n       \"push_id\": 4176855036,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"5817dd632f14c5a1b9d9340ad7cf64f0f44e2d4d\",\n       \"before\": \"93b11e1aea2670ec515e75531aedde0d73ee78a4\",\n       \"commits\": [\n@@ -251,7 +251,7 @@\n       \"push_id\": 4176855035,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"f3de92d93edf5a547aa7d3f96bd145920c2bc3c6\",\n       \"before\": \"4f4517747cad50464c61df70e1d9f6472ecfb690\",\n       \"commits\": [\n@@ -454,12 +454,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"dob9601:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"dob9601:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"dd5167cfae62de4fe36d0865026ac9b40210fa25\",\n           \"user\": {\n             \"login\": \"dob9601\",\n@@ -573,7 +573,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -640,7 +640,7 @@\n       \"push_id\": 4176855034,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"132c6e3f563648754dc973ceaeae47ef2688d128\",\n       \"before\": \"0ac44fb2add6e1e7802ba448ac07e4fc525a0688\",\n       \"commits\": [\n@@ -678,7 +678,7 @@\n     \"payload\": {\n       \"ref\": \"2019-10-21_21-54-44_123_scenario1\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -712,7 +712,7 @@\n       \"push_id\": 4176855031,\n       \"size\": 2,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"077fb6369088fc334fde4cad3b4443cfd3b6546c\",\n       \"before\": \"087f5d8dc690e9c2ba31340bd04382d8648b9e66\",\n       \"commits\": [\n@@ -761,7 +761,7 @@\n       \"push_id\": 4176855030,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"300e8462a5018dee52ad1a7b2bc3430494496ceb\",\n       \"before\": \"fbaadbc8a46e76de09d522d548f985619818b0a9\",\n       \"commits\": [\n@@ -1040,12 +1040,12 @@\n             \"forks\": 1,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"spinnaker:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"spinnaker:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"fde9a0359938f6442c1049e2958d5937e02cf612\",\n           \"user\": {\n             \"login\": \"spinnaker\",\n@@ -1165,7 +1165,7 @@\n             \"forks\": 339,\n             \"open_issues\": 16,\n             \"watchers\": 891,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -1572,12 +1572,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"uuid-rs:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"uuid-rs:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"2070c7bb3f09250854a5144985aa5002f4d0f11b\",\n           \"user\": {\n             \"login\": \"uuid-rs\",\n@@ -1697,7 +1697,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -1771,7 +1771,7 @@\n       \"push_id\": 4176855025,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"481b4f5fd37451b9e9d2102f44f13bc9d18c599f\",\n       \"before\": \"ff47c37132b9f65b7a019f68bd6f920f9557850f\",\n       \"commits\": [\n@@ -1883,7 +1883,7 @@\n       \"push_id\": 4176855020,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"7fc2ffa33a4fe96f248ebc6291e24c64a836c8a4\",\n       \"before\": \"3992ef316cc663ddc9b3a7d21586068c6e91dd5f\",\n       \"commits\": [\n@@ -2117,7 +2117,7 @@\n       \"push_id\": 4176855010,\n       \"size\": 2,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"03f8cff362a6aca0dc7bfce326bec1092e874c63\",\n       \"before\": \"5f1e6fdc621f3186ecaf479cd89e1f07df71d73b\",\n       \"commits\": [\n@@ -2330,12 +2330,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"direwolf-github:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"direwolf-github:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"18395ef48a32eec03d7631dd1750aa3d81fd1fa2\",\n           \"user\": {\n             \"login\": \"direwolf-github\",\n@@ -2449,7 +2449,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -2668,7 +2668,7 @@\n         \"updated_at\": \"2019-10-21T21:54:50Z\",\n         \"closed_at\": null,\n         \"author_association\": \"NONE\",\n-        \"body\": \"so I have the newest laravel-permission but yours is erroring \\r\\nProblem 1\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - ahmedsaoud31/laravel-permission-to-vuejs dev-master requires spatie/laravel-permission ^2.0 -> satisfiable by spatie/laravel-permission[v2.x-dev].\\r\\n    - Installation request for ahmedsaoud31/laravel-permission-to-vuejs dev-master -> satisfiable by ahmedsaoud31/laravel-permission-to-vuejs[dev-master].\\r\\n    - Installation request for spatie/laravel-permission ^3.2 -> satisfiable by spatie/laravel-permission[3.2.0].\\r\\n\\r\\nThank you\"\n+        \"body\": \"so I have the newest laravel-permission but yours is erroring \\r\\nProblem 1\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - ahmedsaoud31/laravel-permission-to-vuejs dev-main requires spatie/laravel-permission ^2.0 -> satisfiable by spatie/laravel-permission[v2.x-dev].\\r\\n    - Installation request for ahmedsaoud31/laravel-permission-to-vuejs dev-main -> satisfiable by ahmedsaoud31/laravel-permission-to-vuejs[dev-main].\\r\\n    - Installation request for spatie/laravel-permission ^3.2 -> satisfiable by spatie/laravel-permission[3.2.0].\\r\\n\\r\\nThank you\"\n       }\n     },\n     \"public\": true,\n@@ -2693,7 +2693,7 @@\n     \"payload\": {\n       \"ref\": \"dependabot/maven/gulimall-admin/commons-fileupload-commons-fileupload-1.3.3\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": \"第四次 不再是一个maven工程\",\n       \"pusher_type\": \"user\"\n     },\n@@ -2805,7 +2805,7 @@\n       \"push_id\": 4176854995,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"dde922c2123a85ff1ff593fdb2c5e235d1a26a77\",\n       \"before\": \"92c78290f141c614d27c4b5d2ad3041ceb6b360c\",\n       \"commits\": ["
    },
    {
      "sha": "9debe0fb1bfdf74f6d4cee0ad0d0da10373309ec",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-5.json",
      "status": "modified",
      "additions": 29,
      "deletions": 29,
      "changes": 58,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-5.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-5.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-5.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -183,12 +183,12 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"DeBuchie:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"DeBuchie:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"087f5d8dc690e9c2ba31340bd04382d8648b9e66\",\n           \"user\": {\n             \"login\": \"DeBuchie\",\n@@ -302,7 +302,7 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -388,7 +388,7 @@\n       \"push_id\": 4176854998,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"cb7fabdb5a14b78a3ee05cde9032cdae0c7fb473\",\n       \"before\": \"c399ac1645b55107ac4fff9a53116619e53200ff\",\n       \"commits\": [\n@@ -424,9 +424,9 @@\n       \"url\": \"https://api.github.com/repos/jchaconv/spring-boot-microservices\"\n     },\n     \"payload\": {\n-      \"ref\": \"master\",\n+      \"ref\": \"main\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": \"Repository for the course Spring Boot Microservices with Spring Cloud Beginner to Guru\",\n       \"pusher_type\": \"user\"\n     },\n@@ -766,12 +766,12 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"SarvagyaGupta:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"SarvagyaGupta:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"5f1e6fdc621f3186ecaf479cd89e1f07df71d73b\",\n           \"user\": {\n             \"login\": \"SarvagyaGupta\",\n@@ -885,7 +885,7 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -1252,9 +1252,9 @@\n       \"url\": \"https://api.github.com/repos/MG1222/gossip_sinatra\"\n     },\n     \"payload\": {\n-      \"ref\": \"master\",\n+      \"ref\": \"main\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -1395,7 +1395,7 @@\n       \"push_id\": 4176854978,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"eeace75e56840498f81e2e8b8ccb1073331b49b2\",\n       \"before\": \"9f54a7e2e8417b5c442edbdb9bdcf26ff985c578\",\n       \"commits\": [\n@@ -1567,7 +1567,7 @@\n         \"updated_at\": \"2019-10-21T21:54:50Z\",\n         \"closed_at\": \"2019-10-21T21:54:50Z\",\n         \"author_association\": \"NONE\",\n-        \"body\": \"## Welcome!\\n\\nHello and welcome! In this course you will learn how you can get your best work done in pull requests.  You'll learn when and how to request a review, how to review someone else's code, and how to respond to reviews. To do this, we'll be playing around with the code in this repository that makes a simple Tetris game.\\n\\nIf you'd like, you can use [GitHub Pages](https://pages.github.com/) to host your Tetris game. Just go to the **Settings** tab of this repository. Scroll down to **GitHub Pages**. Select `master` as a **Source**, and click **Save**. \\n\\n### New to GitHub?\\n\\nFor this course, you'll need some background knowledge. If you need a refresher on the GitHub flow, check out [the Introduction to GitHub course](https://lab.github.com/courses/introduction-to-github).\\n\\n## Pull Requests Reviews 101\\n\\nReviewing a pull request is an opportunity to examine another contributor's changes. While reviewing a pull request, you can extrapolate how someone else solved a problem. It's an awesome opportunity to learn more about how the code works and how others solve problems. Reviewing a pull request is a great learning opportunity!\\n\\n## Step 1: Add assignees for issues and pull requests\\n\\nAssignees on issues and pull requests let other team members know who is responsible. The assignee oversees the issue or pull request in an accessible and visible way.\\n\\n### :keyboard: Activity: Assign yourself to this issue\\n\\n1. On the right side of the screen, click the `assign yourself` text under the **Assignees** section\\n\\n<hr>\\n<h3 align=\\\"center\\\">I'll respond below for your next step</h3>\\n\\n> _Sometimes I respond too fast for the page to update! If you perform an expected action and don't see a response, wait a few seconds and refresh the page for your next steps._\\n\"\n+        \"body\": \"## Welcome!\\n\\nHello and welcome! In this course you will learn how you can get your best work done in pull requests.  You'll learn when and how to request a review, how to review someone else's code, and how to respond to reviews. To do this, we'll be playing around with the code in this repository that makes a simple Tetris game.\\n\\nIf you'd like, you can use [GitHub Pages](https://pages.github.com/) to host your Tetris game. Just go to the **Settings** tab of this repository. Scroll down to **GitHub Pages**. Select `main` as a **Source**, and click **Save**. \\n\\n### New to GitHub?\\n\\nFor this course, you'll need some background knowledge. If you need a refresher on the GitHub flow, check out [the Introduction to GitHub course](https://lab.github.com/courses/introduction-to-github).\\n\\n## Pull Requests Reviews 101\\n\\nReviewing a pull request is an opportunity to examine another contributor's changes. While reviewing a pull request, you can extrapolate how someone else solved a problem. It's an awesome opportunity to learn more about how the code works and how others solve problems. Reviewing a pull request is a great learning opportunity!\\n\\n## Step 1: Add assignees for issues and pull requests\\n\\nAssignees on issues and pull requests let other team members know who is responsible. The assignee oversees the issue or pull request in an accessible and visible way.\\n\\n### :keyboard: Activity: Assign yourself to this issue\\n\\n1. On the right side of the screen, click the `assign yourself` text under the **Assignees** section\\n\\n<hr>\\n<h3 align=\\\"center\\\">I'll respond below for your next step</h3>\\n\\n> _Sometimes I respond too fast for the page to update! If you perform an expected action and don't see a response, wait a few seconds and refresh the page for your next steps._\\n\"\n       }\n     },\n     \"public\": true,\n@@ -1614,7 +1614,7 @@\n     \"payload\": {\n       \"ref\": \"changeProductOnClick\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -1648,7 +1648,7 @@\n       \"push_id\": 4176854972,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"6bf9c3f7d85380942350eb48f8d45eb22f38cac8\",\n       \"before\": \"8542d53991e43656fdaf4a0ac48425755c02c229\",\n       \"commits\": [\n@@ -1687,7 +1687,7 @@\n       \"push_id\": 4176854968,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"ff47c37132b9f65b7a019f68bd6f920f9557850f\",\n       \"before\": \"15016ceee06af3047744c7bac173ebc162c2b3ac\",\n       \"commits\": [\n@@ -1750,7 +1750,7 @@\n       \"push_id\": 4176854921,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"f0458723e4e88ee34613c984b02b3dc927c4a538\",\n       \"before\": \"d0973869c9d7f14f0353a7eceddf9d3daa1382e1\",\n       \"commits\": [\n@@ -1795,7 +1795,7 @@\n     \"payload\": {\n       \"ref\": \"branch-c7fa2a10\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -1862,7 +1862,7 @@\n         \"updated_at\": \"2019-10-21T21:54:49Z\",\n         \"closed_at\": null,\n         \"author_association\": \"NONE\",\n-        \"body\": \"1. Serializing general data\\r\\n2. Serializing role data\\r\\nTypeError: Cannot read property 'id' of undefined\\r\\n    at roleCol.map.role (/home/root2/Bureau/Discord-guild-copy-master/objects/serializer.js:103:57)\\r\\n\"\n+        \"body\": \"1. Serializing general data\\r\\n2. Serializing role data\\r\\nTypeError: Cannot read property 'id' of undefined\\r\\n    at roleCol.map.role (/home/root2/Bureau/Discord-guild-copy-main/objects/serializer.js:103:57)\\r\\n\"\n       }\n     },\n     \"public\": true,\n@@ -1887,7 +1887,7 @@\n     \"payload\": {\n       \"ref\": null,\n       \"ref_type\": \"repository\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -2078,12 +2078,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"direwolf-github:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"direwolf-github:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"4d3c6b596570ce87ea9ec7549f75603aaa5a680f\",\n           \"user\": {\n             \"login\": \"direwolf-github\",\n@@ -2197,7 +2197,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -2263,7 +2263,7 @@\n     \"payload\": {\n       \"ref\": \"branch-cdd0a924\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -2290,7 +2290,7 @@\n       \"push_id\": 4176854952,\n       \"size\": 2,\n       \"distinct_size\": 2,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"7949f68fc3607986a80d4097233450ecc034432e\",\n       \"before\": \"452fbf0db4f98082c941bd84c2e24d6f4444c402\",\n       \"commits\": [\n@@ -2489,7 +2489,7 @@\n       \"push_id\": 4176854947,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"0757c0a942788403c9792b434e3b7cee81446a66\",\n       \"before\": \"1af55801fc12dc12bbe523ff41ea351841bca423\",\n       \"commits\": ["
    },
    {
      "sha": "887fde552a5bdb3dbf9fa1b7b0d63104d1b16722",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-6.json",
      "status": "modified",
      "additions": 27,
      "deletions": 27,
      "changes": 54,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-6.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-6.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-6.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -183,12 +183,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"direwolf-github:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"direwolf-github:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"18395ef48a32eec03d7631dd1750aa3d81fd1fa2\",\n           \"user\": {\n             \"login\": \"direwolf-github\",\n@@ -302,7 +302,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -521,7 +521,7 @@\n         \"updated_at\": \"2019-10-21T21:54:50Z\",\n         \"closed_at\": null,\n         \"author_association\": \"NONE\",\n-        \"body\": \"so I have the newest laravel-permission but yours is erroring \\r\\nProblem 1\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - ahmedsaoud31/laravel-permission-to-vuejs dev-master requires spatie/laravel-permission ^2.0 -> satisfiable by spatie/laravel-permission[v2.x-dev].\\r\\n    - Installation request for ahmedsaoud31/laravel-permission-to-vuejs dev-master -> satisfiable by ahmedsaoud31/laravel-permission-to-vuejs[dev-master].\\r\\n    - Installation request for spatie/laravel-permission ^3.2 -> satisfiable by spatie/laravel-permission[3.2.0].\\r\\n\\r\\nThank you\"\n+        \"body\": \"so I have the newest laravel-permission but yours is erroring \\r\\nProblem 1\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - Can only install one of: spatie/laravel-permission[v2.x-dev, 3.2.0].\\r\\n    - ahmedsaoud31/laravel-permission-to-vuejs dev-main requires spatie/laravel-permission ^2.0 -> satisfiable by spatie/laravel-permission[v2.x-dev].\\r\\n    - Installation request for ahmedsaoud31/laravel-permission-to-vuejs dev-main -> satisfiable by ahmedsaoud31/laravel-permission-to-vuejs[dev-main].\\r\\n    - Installation request for spatie/laravel-permission ^3.2 -> satisfiable by spatie/laravel-permission[3.2.0].\\r\\n\\r\\nThank you\"\n       }\n     },\n     \"public\": true,\n@@ -546,7 +546,7 @@\n     \"payload\": {\n       \"ref\": \"dependabot/maven/gulimall-admin/commons-fileupload-commons-fileupload-1.3.3\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": \"第四次 不再是一个maven工程\",\n       \"pusher_type\": \"user\"\n     },\n@@ -658,7 +658,7 @@\n       \"push_id\": 4176854995,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"dde922c2123a85ff1ff593fdb2c5e235d1a26a77\",\n       \"before\": \"92c78290f141c614d27c4b5d2ad3041ceb6b360c\",\n       \"commits\": [\n@@ -861,12 +861,12 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"DeBuchie:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"DeBuchie:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"087f5d8dc690e9c2ba31340bd04382d8648b9e66\",\n           \"user\": {\n             \"login\": \"DeBuchie\",\n@@ -980,7 +980,7 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -1066,7 +1066,7 @@\n       \"push_id\": 4176854998,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"cb7fabdb5a14b78a3ee05cde9032cdae0c7fb473\",\n       \"before\": \"c399ac1645b55107ac4fff9a53116619e53200ff\",\n       \"commits\": [\n@@ -1102,9 +1102,9 @@\n       \"url\": \"https://api.github.com/repos/jchaconv/spring-boot-microservices\"\n     },\n     \"payload\": {\n-      \"ref\": \"master\",\n+      \"ref\": \"main\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": \"Repository for the course Spring Boot Microservices with Spring Cloud Beginner to Guru\",\n       \"pusher_type\": \"user\"\n     },\n@@ -1444,12 +1444,12 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"SarvagyaGupta:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"SarvagyaGupta:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"5f1e6fdc621f3186ecaf479cd89e1f07df71d73b\",\n           \"user\": {\n             \"login\": \"SarvagyaGupta\",\n@@ -1563,7 +1563,7 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -1930,9 +1930,9 @@\n       \"url\": \"https://api.github.com/repos/MG1222/gossip_sinatra\"\n     },\n     \"payload\": {\n-      \"ref\": \"master\",\n+      \"ref\": \"main\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -2073,7 +2073,7 @@\n       \"push_id\": 4176854978,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"eeace75e56840498f81e2e8b8ccb1073331b49b2\",\n       \"before\": \"9f54a7e2e8417b5c442edbdb9bdcf26ff985c578\",\n       \"commits\": [\n@@ -2245,7 +2245,7 @@\n         \"updated_at\": \"2019-10-21T21:54:50Z\",\n         \"closed_at\": \"2019-10-21T21:54:50Z\",\n         \"author_association\": \"NONE\",\n-        \"body\": \"## Welcome!\\n\\nHello and welcome! In this course you will learn how you can get your best work done in pull requests.  You'll learn when and how to request a review, how to review someone else's code, and how to respond to reviews. To do this, we'll be playing around with the code in this repository that makes a simple Tetris game.\\n\\nIf you'd like, you can use [GitHub Pages](https://pages.github.com/) to host your Tetris game. Just go to the **Settings** tab of this repository. Scroll down to **GitHub Pages**. Select `master` as a **Source**, and click **Save**. \\n\\n### New to GitHub?\\n\\nFor this course, you'll need some background knowledge. If you need a refresher on the GitHub flow, check out [the Introduction to GitHub course](https://lab.github.com/courses/introduction-to-github).\\n\\n## Pull Requests Reviews 101\\n\\nReviewing a pull request is an opportunity to examine another contributor's changes. While reviewing a pull request, you can extrapolate how someone else solved a problem. It's an awesome opportunity to learn more about how the code works and how others solve problems. Reviewing a pull request is a great learning opportunity!\\n\\n## Step 1: Add assignees for issues and pull requests\\n\\nAssignees on issues and pull requests let other team members know who is responsible. The assignee oversees the issue or pull request in an accessible and visible way.\\n\\n### :keyboard: Activity: Assign yourself to this issue\\n\\n1. On the right side of the screen, click the `assign yourself` text under the **Assignees** section\\n\\n<hr>\\n<h3 align=\\\"center\\\">I'll respond below for your next step</h3>\\n\\n> _Sometimes I respond too fast for the page to update! If you perform an expected action and don't see a response, wait a few seconds and refresh the page for your next steps._\\n\"\n+        \"body\": \"## Welcome!\\n\\nHello and welcome! In this course you will learn how you can get your best work done in pull requests.  You'll learn when and how to request a review, how to review someone else's code, and how to respond to reviews. To do this, we'll be playing around with the code in this repository that makes a simple Tetris game.\\n\\nIf you'd like, you can use [GitHub Pages](https://pages.github.com/) to host your Tetris game. Just go to the **Settings** tab of this repository. Scroll down to **GitHub Pages**. Select `main` as a **Source**, and click **Save**. \\n\\n### New to GitHub?\\n\\nFor this course, you'll need some background knowledge. If you need a refresher on the GitHub flow, check out [the Introduction to GitHub course](https://lab.github.com/courses/introduction-to-github).\\n\\n## Pull Requests Reviews 101\\n\\nReviewing a pull request is an opportunity to examine another contributor's changes. While reviewing a pull request, you can extrapolate how someone else solved a problem. It's an awesome opportunity to learn more about how the code works and how others solve problems. Reviewing a pull request is a great learning opportunity!\\n\\n## Step 1: Add assignees for issues and pull requests\\n\\nAssignees on issues and pull requests let other team members know who is responsible. The assignee oversees the issue or pull request in an accessible and visible way.\\n\\n### :keyboard: Activity: Assign yourself to this issue\\n\\n1. On the right side of the screen, click the `assign yourself` text under the **Assignees** section\\n\\n<hr>\\n<h3 align=\\\"center\\\">I'll respond below for your next step</h3>\\n\\n> _Sometimes I respond too fast for the page to update! If you perform an expected action and don't see a response, wait a few seconds and refresh the page for your next steps._\\n\"\n       }\n     },\n     \"public\": true,\n@@ -2292,7 +2292,7 @@\n     \"payload\": {\n       \"ref\": \"changeProductOnClick\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -2326,7 +2326,7 @@\n       \"push_id\": 4176854972,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"6bf9c3f7d85380942350eb48f8d45eb22f38cac8\",\n       \"before\": \"8542d53991e43656fdaf4a0ac48425755c02c229\",\n       \"commits\": [\n@@ -2365,7 +2365,7 @@\n       \"push_id\": 4176854968,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"ff47c37132b9f65b7a019f68bd6f920f9557850f\",\n       \"before\": \"15016ceee06af3047744c7bac173ebc162c2b3ac\",\n       \"commits\": [\n@@ -2428,7 +2428,7 @@\n       \"push_id\": 4176854921,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"f0458723e4e88ee34613c984b02b3dc927c4a538\",\n       \"before\": \"d0973869c9d7f14f0353a7eceddf9d3daa1382e1\",\n       \"commits\": [\n@@ -2473,7 +2473,7 @@\n     \"payload\": {\n       \"ref\": \"branch-c7fa2a10\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },"
    },
    {
      "sha": "ebb7b684eda990e6aade0b4a34d6076414c58968",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-7.json",
      "status": "modified",
      "additions": 43,
      "deletions": 43,
      "changes": 86,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-7.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-7.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-7.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -59,7 +59,7 @@\n         \"updated_at\": \"2019-10-21T21:54:49Z\",\n         \"closed_at\": null,\n         \"author_association\": \"NONE\",\n-        \"body\": \"1. Serializing general data\\r\\n2. Serializing role data\\r\\nTypeError: Cannot read property 'id' of undefined\\r\\n    at roleCol.map.role (/home/root2/Bureau/Discord-guild-copy-master/objects/serializer.js:103:57)\\r\\n\"\n+        \"body\": \"1. Serializing general data\\r\\n2. Serializing role data\\r\\nTypeError: Cannot read property 'id' of undefined\\r\\n    at roleCol.map.role (/home/root2/Bureau/Discord-guild-copy-main/objects/serializer.js:103:57)\\r\\n\"\n       }\n     },\n     \"public\": true,\n@@ -84,7 +84,7 @@\n     \"payload\": {\n       \"ref\": null,\n       \"ref_type\": \"repository\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -275,12 +275,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"direwolf-github:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"direwolf-github:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"4d3c6b596570ce87ea9ec7549f75603aaa5a680f\",\n           \"user\": {\n             \"login\": \"direwolf-github\",\n@@ -394,7 +394,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -460,7 +460,7 @@\n     \"payload\": {\n       \"ref\": \"branch-cdd0a924\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -487,7 +487,7 @@\n       \"push_id\": 4176854952,\n       \"size\": 2,\n       \"distinct_size\": 2,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"7949f68fc3607986a80d4097233450ecc034432e\",\n       \"before\": \"452fbf0db4f98082c941bd84c2e24d6f4444c402\",\n       \"commits\": [\n@@ -686,7 +686,7 @@\n       \"push_id\": 4176854947,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"0757c0a942788403c9792b434e3b7cee81446a66\",\n       \"before\": \"1af55801fc12dc12bbe523ff41ea351841bca423\",\n       \"commits\": [\n@@ -861,7 +861,7 @@\n     \"payload\": {\n       \"ref\": null,\n       \"ref_type\": \"repository\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": \"Repository for the course Spring Boot Microservices with Spring Cloud Beginner to Guru\",\n       \"pusher_type\": \"user\"\n     },\n@@ -888,7 +888,7 @@\n       \"push_id\": 4176854942,\n       \"size\": 2,\n       \"distinct_size\": 2,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"abd2e330a3b4b6222c88587d04d71b12f4da870d\",\n       \"before\": \"1340bbf32da76263b4f65abf9c1690e049de3ade\",\n       \"commits\": [\n@@ -990,7 +990,7 @@\n       \"push_id\": 4176854935,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"8e7248fcf15480d4b6090b0e02c1fba68bcf1171\",\n       \"before\": \"65644249a175698e87bb4b6c32ff37ac0f924a3c\",\n       \"commits\": [\n@@ -1036,7 +1036,7 @@\n       \"push_id\": 4176854937,\n       \"size\": 2,\n       \"distinct_size\": 2,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"ca3257de9d87f497be2d5d2cfd5ef75c78b1c732\",\n       \"before\": \"b762a83d2dd69f4d7be63695dff479b39605c9e3\",\n       \"commits\": [\n@@ -1092,7 +1092,7 @@\n       \"push_id\": 4176854934,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"e57205289100880b63e23f3ac02f6b64d92ef290\",\n       \"before\": \"dfced045a8f132fc046115d179195aed65a8900a\",\n       \"commits\": [\n@@ -1131,7 +1131,7 @@\n       \"push_id\": 4176854928,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"dae114332acb5a7dc01b60f74fc20c362a494901\",\n       \"before\": \"431184bd4d19f6fc1ded8423c4eaca9a2717b580\",\n       \"commits\": [\n@@ -1180,7 +1180,7 @@\n         \"number\": 20,\n         \"state\": \"open\",\n         \"locked\": false,\n-        \"title\": \"[pull] master from lerna:master\",\n+        \"title\": \"[pull] main from lerna:main\",\n         \"user\": {\n           \"login\": \"pull[bot]\",\n           \"id\": 39814207,\n@@ -1219,8 +1219,8 @@\n         \"comments_url\": \"https://api.github.com/repos/daddyfatstacksBIG/lerna/issues/20/comments\",\n         \"statuses_url\": \"https://api.github.com/repos/daddyfatstacksBIG/lerna/statuses/4872459be7bf88e5900ff907b07279e9516d333c\",\n         \"head\": {\n-          \"label\": \"lerna:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"lerna:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"4872459be7bf88e5900ff907b07279e9516d333c\",\n           \"user\": {\n             \"login\": \"lerna\",\n@@ -1340,12 +1340,12 @@\n             \"forks\": 1208,\n             \"open_issues\": 230,\n             \"watchers\": 19472,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"daddyfatstacksBIG:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"daddyfatstacksBIG:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"99425f7e3df4d081c51f9850e71ad93e83dc30c4\",\n           \"user\": {\n             \"login\": \"daddyfatstacksBIG\",\n@@ -1465,7 +1465,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -1532,7 +1532,7 @@\n       \"push_id\": 4176854926,\n       \"size\": 4,\n       \"distinct_size\": 4,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"eb3028813d9f14f92538ada84ae11a73346d9b38\",\n       \"before\": \"a3216a60043f115fa6aa9044250d8a04a3f09bf9\",\n       \"commits\": [\n@@ -1601,7 +1601,7 @@\n       \"push_id\": 4176854925,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"18fa79ff8011eb750fe61fba8e6c0a344be69f1c\",\n       \"before\": \"5579db424d40f8b4dfd8cb0338ae87bd2123e858\",\n       \"commits\": [\n@@ -1804,12 +1804,12 @@\n             \"forks\": 0,\n             \"open_issues\": 3,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"jthielman:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"jthielman:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"6564f42f20577d964ee9f8c007a961ccd81e8aae\",\n           \"user\": {\n             \"login\": \"jthielman\",\n@@ -1923,7 +1923,7 @@\n             \"forks\": 0,\n             \"open_issues\": 3,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -1990,7 +1990,7 @@\n       \"push_id\": 4176854920,\n       \"size\": 8,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"56d21eeee46fd18ad1a3ada1ddc0dde40ee148fd\",\n       \"before\": \"4586bdd4aba94009ee60a2d01710f50493f60fd7\",\n       \"commits\": [\n@@ -2010,7 +2010,7 @@\n             \"email\": \"jensenjamison@yahoo.com\",\n             \"name\": \"unknown\"\n           },\n-          \"message\": \"updating to master\",\n+          \"message\": \"updating to main\",\n           \"distinct\": false,\n           \"url\": \"https://api.github.com/repos/dm-group-trakd/trakd/commits/3b07c020146eb44e0b73abd21d66f7b7ba6d1d79\"\n         },\n@@ -2030,7 +2030,7 @@\n             \"email\": \"jensenjamison@yahoo.com\",\n             \"name\": \"unknown\"\n           },\n-          \"message\": \"Merge branch 'master' into jamison\",\n+          \"message\": \"Merge branch 'main' into jamison\",\n           \"distinct\": false,\n           \"url\": \"https://api.github.com/repos/dm-group-trakd/trakd/commits/5e0396f6e73a7359e5d997b98373a5b8f95261f8\"\n         },\n@@ -2050,7 +2050,7 @@\n             \"email\": \"jensenjamison@yahoo.com\",\n             \"name\": \"unknown\"\n           },\n-          \"message\": \"Merge branch 'master' into jamison\",\n+          \"message\": \"Merge branch 'main' into jamison\",\n           \"distinct\": false,\n           \"url\": \"https://api.github.com/repos/dm-group-trakd/trakd/commits/da8b095b65b2aa4dd4538f58a52e498da3b46ba7\"\n         },\n@@ -2106,7 +2106,7 @@\n       \"push_id\": 4176854918,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"15016ceee06af3047744c7bac173ebc162c2b3ac\",\n       \"before\": \"908784246be05f222167f3f463e1423885f54ac5\",\n       \"commits\": [\n@@ -2240,7 +2240,7 @@\n         \"forks\": 0,\n         \"open_issues\": 0,\n         \"watchers\": 0,\n-        \"default_branch\": \"master\",\n+        \"default_branch\": \"main\",\n         \"public\": true\n       }\n     },\n@@ -2314,7 +2314,7 @@\n             \"email\": \"qiutongs@amazon.com\",\n             \"name\": \"qiutongs\"\n           },\n-          \"message\": \"Merge branch 'master' into feature/cmake_turn_off_demos\",\n+          \"message\": \"Merge branch 'main' into feature/cmake_turn_off_demos\",\n           \"distinct\": false,\n           \"url\": \"https://api.github.com/repos/sarenameas/amazon-freertos/commits/c58281840008401cb16961f9d60f37ea0bf4e907\"\n         },\n@@ -2354,7 +2354,7 @@\n             \"email\": \"ts.whu@outlook.com\",\n             \"name\": \"Tiangang Song\"\n           },\n-          \"message\": \"Merge remote-tracking branch 'origin/master' into HEAD\",\n+          \"message\": \"Merge remote-tracking branch 'origin/main' into HEAD\",\n           \"distinct\": false,\n           \"url\": \"https://api.github.com/repos/sarenameas/amazon-freertos/commits/1de9a4d51c9d0bccef2f7b5550cc6086ce9525a3\"\n         },\n@@ -2597,7 +2597,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n@@ -2716,7 +2716,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -2968,12 +2968,12 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"codecurious-bln:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"codecurious-bln:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"b762a83d2dd69f4d7be63695dff479b39605c9e3\",\n           \"user\": {\n             \"login\": \"codecurious-bln\",\n@@ -3087,7 +3087,7 @@\n             \"forks\": 8,\n             \"open_issues\": 16,\n             \"watchers\": 10,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -3180,7 +3180,7 @@\n       \"push_id\": 4176854908,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"5b4a25e4146fb31ccfa425c70843ff43bd2814c3\",\n       \"before\": \"4bd38639fe0332c55961505d4e091f72895b7f73\",\n       \"commits\": ["
    },
    {
      "sha": "c91bd87a29874e5a2e0532c599e4a6c153d38d2c",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-8.json",
      "status": "modified",
      "additions": 38,
      "deletions": 38,
      "changes": 76,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-8.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-8.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-8.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -43,7 +43,7 @@\n       \"push_id\": 4176854921,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"f0458723e4e88ee34613c984b02b3dc927c4a538\",\n       \"before\": \"d0973869c9d7f14f0353a7eceddf9d3daa1382e1\",\n       \"commits\": [\n@@ -88,7 +88,7 @@\n     \"payload\": {\n       \"ref\": \"branch-c7fa2a10\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -155,7 +155,7 @@\n         \"updated_at\": \"2019-10-21T21:54:49Z\",\n         \"closed_at\": null,\n         \"author_association\": \"NONE\",\n-        \"body\": \"1. Serializing general data\\r\\n2. Serializing role data\\r\\nTypeError: Cannot read property 'id' of undefined\\r\\n    at roleCol.map.role (/home/root2/Bureau/Discord-guild-copy-master/objects/serializer.js:103:57)\\r\\n\"\n+        \"body\": \"1. Serializing general data\\r\\n2. Serializing role data\\r\\nTypeError: Cannot read property 'id' of undefined\\r\\n    at roleCol.map.role (/home/root2/Bureau/Discord-guild-copy-main/objects/serializer.js:103:57)\\r\\n\"\n       }\n     },\n     \"public\": true,\n@@ -180,7 +180,7 @@\n     \"payload\": {\n       \"ref\": null,\n       \"ref_type\": \"repository\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -371,12 +371,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"direwolf-github:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"direwolf-github:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"4d3c6b596570ce87ea9ec7549f75603aaa5a680f\",\n           \"user\": {\n             \"login\": \"direwolf-github\",\n@@ -490,7 +490,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -556,7 +556,7 @@\n     \"payload\": {\n       \"ref\": \"branch-cdd0a924\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -583,7 +583,7 @@\n       \"push_id\": 4176854952,\n       \"size\": 2,\n       \"distinct_size\": 2,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"7949f68fc3607986a80d4097233450ecc034432e\",\n       \"before\": \"452fbf0db4f98082c941bd84c2e24d6f4444c402\",\n       \"commits\": [\n@@ -782,7 +782,7 @@\n       \"push_id\": 4176854947,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"0757c0a942788403c9792b434e3b7cee81446a66\",\n       \"before\": \"1af55801fc12dc12bbe523ff41ea351841bca423\",\n       \"commits\": [\n@@ -957,7 +957,7 @@\n     \"payload\": {\n       \"ref\": null,\n       \"ref_type\": \"repository\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": \"Repository for the course Spring Boot Microservices with Spring Cloud Beginner to Guru\",\n       \"pusher_type\": \"user\"\n     },\n@@ -984,7 +984,7 @@\n       \"push_id\": 4176854942,\n       \"size\": 2,\n       \"distinct_size\": 2,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"abd2e330a3b4b6222c88587d04d71b12f4da870d\",\n       \"before\": \"1340bbf32da76263b4f65abf9c1690e049de3ade\",\n       \"commits\": [\n@@ -1086,7 +1086,7 @@\n       \"push_id\": 4176854935,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"8e7248fcf15480d4b6090b0e02c1fba68bcf1171\",\n       \"before\": \"65644249a175698e87bb4b6c32ff37ac0f924a3c\",\n       \"commits\": [\n@@ -1132,7 +1132,7 @@\n       \"push_id\": 4176854937,\n       \"size\": 2,\n       \"distinct_size\": 2,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"ca3257de9d87f497be2d5d2cfd5ef75c78b1c732\",\n       \"before\": \"b762a83d2dd69f4d7be63695dff479b39605c9e3\",\n       \"commits\": [\n@@ -1188,7 +1188,7 @@\n       \"push_id\": 4176854934,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"e57205289100880b63e23f3ac02f6b64d92ef290\",\n       \"before\": \"dfced045a8f132fc046115d179195aed65a8900a\",\n       \"commits\": [\n@@ -1227,7 +1227,7 @@\n       \"push_id\": 4176854928,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"dae114332acb5a7dc01b60f74fc20c362a494901\",\n       \"before\": \"431184bd4d19f6fc1ded8423c4eaca9a2717b580\",\n       \"commits\": [\n@@ -1276,7 +1276,7 @@\n         \"number\": 20,\n         \"state\": \"open\",\n         \"locked\": false,\n-        \"title\": \"[pull] master from lerna:master\",\n+        \"title\": \"[pull] main from lerna:main\",\n         \"user\": {\n           \"login\": \"pull[bot]\",\n           \"id\": 39814207,\n@@ -1315,8 +1315,8 @@\n         \"comments_url\": \"https://api.github.com/repos/daddyfatstacksBIG/lerna/issues/20/comments\",\n         \"statuses_url\": \"https://api.github.com/repos/daddyfatstacksBIG/lerna/statuses/4872459be7bf88e5900ff907b07279e9516d333c\",\n         \"head\": {\n-          \"label\": \"lerna:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"lerna:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"4872459be7bf88e5900ff907b07279e9516d333c\",\n           \"user\": {\n             \"login\": \"lerna\",\n@@ -1436,12 +1436,12 @@\n             \"forks\": 1208,\n             \"open_issues\": 230,\n             \"watchers\": 19472,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"daddyfatstacksBIG:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"daddyfatstacksBIG:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"99425f7e3df4d081c51f9850e71ad93e83dc30c4\",\n           \"user\": {\n             \"login\": \"daddyfatstacksBIG\",\n@@ -1561,7 +1561,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -1628,7 +1628,7 @@\n       \"push_id\": 4176854926,\n       \"size\": 4,\n       \"distinct_size\": 4,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"eb3028813d9f14f92538ada84ae11a73346d9b38\",\n       \"before\": \"a3216a60043f115fa6aa9044250d8a04a3f09bf9\",\n       \"commits\": [\n@@ -1697,7 +1697,7 @@\n       \"push_id\": 4176854925,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"18fa79ff8011eb750fe61fba8e6c0a344be69f1c\",\n       \"before\": \"5579db424d40f8b4dfd8cb0338ae87bd2123e858\",\n       \"commits\": [\n@@ -1900,12 +1900,12 @@\n             \"forks\": 0,\n             \"open_issues\": 3,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"jthielman:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"jthielman:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"6564f42f20577d964ee9f8c007a961ccd81e8aae\",\n           \"user\": {\n             \"login\": \"jthielman\",\n@@ -2019,7 +2019,7 @@\n             \"forks\": 0,\n             \"open_issues\": 3,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -2086,7 +2086,7 @@\n       \"push_id\": 4176854920,\n       \"size\": 8,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"56d21eeee46fd18ad1a3ada1ddc0dde40ee148fd\",\n       \"before\": \"4586bdd4aba94009ee60a2d01710f50493f60fd7\",\n       \"commits\": [\n@@ -2106,7 +2106,7 @@\n             \"email\": \"jensenjamison@yahoo.com\",\n             \"name\": \"unknown\"\n           },\n-          \"message\": \"updating to master\",\n+          \"message\": \"updating to main\",\n           \"distinct\": false,\n           \"url\": \"https://api.github.com/repos/dm-group-trakd/trakd/commits/3b07c020146eb44e0b73abd21d66f7b7ba6d1d79\"\n         },\n@@ -2126,7 +2126,7 @@\n             \"email\": \"jensenjamison@yahoo.com\",\n             \"name\": \"unknown\"\n           },\n-          \"message\": \"Merge branch 'master' into jamison\",\n+          \"message\": \"Merge branch 'main' into jamison\",\n           \"distinct\": false,\n           \"url\": \"https://api.github.com/repos/dm-group-trakd/trakd/commits/5e0396f6e73a7359e5d997b98373a5b8f95261f8\"\n         },\n@@ -2146,7 +2146,7 @@\n             \"email\": \"jensenjamison@yahoo.com\",\n             \"name\": \"unknown\"\n           },\n-          \"message\": \"Merge branch 'master' into jamison\",\n+          \"message\": \"Merge branch 'main' into jamison\",\n           \"distinct\": false,\n           \"url\": \"https://api.github.com/repos/dm-group-trakd/trakd/commits/da8b095b65b2aa4dd4538f58a52e498da3b46ba7\"\n         },\n@@ -2202,7 +2202,7 @@\n       \"push_id\": 4176854918,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"15016ceee06af3047744c7bac173ebc162c2b3ac\",\n       \"before\": \"908784246be05f222167f3f463e1423885f54ac5\",\n       \"commits\": [\n@@ -2336,7 +2336,7 @@\n         \"forks\": 0,\n         \"open_issues\": 0,\n         \"watchers\": 0,\n-        \"default_branch\": \"master\",\n+        \"default_branch\": \"main\",\n         \"public\": true\n       }\n     },\n@@ -2410,7 +2410,7 @@\n             \"email\": \"qiutongs@amazon.com\",\n             \"name\": \"qiutongs\"\n           },\n-          \"message\": \"Merge branch 'master' into feature/cmake_turn_off_demos\",\n+          \"message\": \"Merge branch 'main' into feature/cmake_turn_off_demos\",\n           \"distinct\": false,\n           \"url\": \"https://api.github.com/repos/sarenameas/amazon-freertos/commits/c58281840008401cb16961f9d60f37ea0bf4e907\"\n         },\n@@ -2450,7 +2450,7 @@\n             \"email\": \"ts.whu@outlook.com\",\n             \"name\": \"Tiangang Song\"\n           },\n-          \"message\": \"Merge remote-tracking branch 'origin/master' into HEAD\",\n+          \"message\": \"Merge remote-tracking branch 'origin/main' into HEAD\",\n           \"distinct\": false,\n           \"url\": \"https://api.github.com/repos/sarenameas/amazon-freertos/commits/1de9a4d51c9d0bccef2f7b5550cc6086ce9525a3\"\n         },"
    },
    {
      "sha": "77750c9a830001bf4360b90f15ad1aa6b66f925a",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-9.json",
      "status": "modified",
      "additions": 51,
      "deletions": 51,
      "changes": 102,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-9.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-9.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/events-9.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -183,7 +183,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n@@ -302,7 +302,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -554,12 +554,12 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"codecurious-bln:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"codecurious-bln:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"b762a83d2dd69f4d7be63695dff479b39605c9e3\",\n           \"user\": {\n             \"login\": \"codecurious-bln\",\n@@ -673,7 +673,7 @@\n             \"forks\": 8,\n             \"open_issues\": 16,\n             \"watchers\": 10,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -766,7 +766,7 @@\n       \"push_id\": 4176854908,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"5b4a25e4146fb31ccfa425c70843ff43bd2814c3\",\n       \"before\": \"4bd38639fe0332c55961505d4e091f72895b7f73\",\n       \"commits\": [\n@@ -868,7 +868,7 @@\n       \"push_id\": 4176854901,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"1059b39145650a196d83bdde5b01a801d2d20d46\",\n       \"before\": \"321fe758110355c54f663b2d4c2ecaf3f20d0564\",\n       \"commits\": [\n@@ -913,7 +913,7 @@\n     \"payload\": {\n       \"ref\": \"branch-8855a329\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -1117,7 +1117,7 @@\n     \"payload\": {\n       \"ref\": \"branch-e08f46fa\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -1144,7 +1144,7 @@\n       \"push_id\": 4176854891,\n       \"size\": 2,\n       \"distinct_size\": 2,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"d3108b1a65697a4d495da409b90c01949487a028\",\n       \"before\": \"b6149875bc527d31618a9e49513966cd52129ada\",\n       \"commits\": [\n@@ -1418,12 +1418,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"gridu:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"gridu:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"b3b4fd9e4a2e1aa505cb9d3b7f019f8431e495da\",\n           \"user\": {\n             \"login\": \"gridu\",\n@@ -1537,7 +1537,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -1611,7 +1611,7 @@\n       \"push_id\": 4176854890,\n       \"size\": 11,\n       \"distinct_size\": 11,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"6c05258cfd1a6156ee587923fb2ac0f55d84e482\",\n       \"before\": \"e63bc6b2efce3bc6525e020fba6085654ddd3f49\",\n       \"commits\": [\n@@ -1631,7 +1631,7 @@\n             \"email\": \"nobody@nowhere.nul\",\n             \"name\": \"Coursera Learner\"\n           },\n-          \"message\": \"Merge branch 'master' of https://github.com/gszlan/DukeC-programming\\n\\ndone\",\n+          \"message\": \"Merge branch 'main' of https://github.com/gszlan/DukeC-programming\\n\\ndone\",\n           \"distinct\": true,\n           \"url\": \"https://api.github.com/repos/gszlan/DukeC-programming/commits/7807e29af8106aa4a6c01538c9a745c52db52155\"\n         },\n@@ -1641,7 +1641,7 @@\n             \"email\": \"nobody@nowhere.nul\",\n             \"name\": \"Coursera Learner\"\n           },\n-          \"message\": \"Merge branch 'master' of https://github.com/gszlan/DukeC-programming\\n\\ndone\",\n+          \"message\": \"Merge branch 'main' of https://github.com/gszlan/DukeC-programming\\n\\ndone\",\n           \"distinct\": true,\n           \"url\": \"https://api.github.com/repos/gszlan/DukeC-programming/commits/c19074a391ed36dd451f792c3f003d6bff670a70\"\n         },\n@@ -1661,7 +1661,7 @@\n             \"email\": \"nobody@nowhere.nul\",\n             \"name\": \"Coursera Learner\"\n           },\n-          \"message\": \"Merge branch 'master' of https://github.com/gszlan/DukeC-programming\\n\\naaa\",\n+          \"message\": \"Merge branch 'main' of https://github.com/gszlan/DukeC-programming\\n\\naaa\",\n           \"distinct\": true,\n           \"url\": \"https://api.github.com/repos/gszlan/DukeC-programming/commits/2812192ddc013f7e75b3f1845649eb5ccb8baaea\"\n         },\n@@ -1681,7 +1681,7 @@\n             \"email\": \"nobody@nowhere.nul\",\n             \"name\": \"Coursera Learner\"\n           },\n-          \"message\": \"Merge branch 'master' of https://github.com/gszlan/DukeC-programming\",\n+          \"message\": \"Merge branch 'main' of https://github.com/gszlan/DukeC-programming\",\n           \"distinct\": true,\n           \"url\": \"https://api.github.com/repos/gszlan/DukeC-programming/commits/07ea94f84ae40ae341de1158f0a5c1c4804dae8c\"\n         },\n@@ -1701,7 +1701,7 @@\n             \"email\": \"nobody@nowhere.nul\",\n             \"name\": \"Coursera Learner\"\n           },\n-          \"message\": \"Merge branch 'master' of https://github.com/gszlan/DukeC-programming\",\n+          \"message\": \"Merge branch 'main' of https://github.com/gszlan/DukeC-programming\",\n           \"distinct\": true,\n           \"url\": \"https://api.github.com/repos/gszlan/DukeC-programming/commits/9d9d8e3ff80b91b6fe30732b36dee7b5b88196d5\"\n         },\n@@ -1799,7 +1799,7 @@\n       \"push_id\": 4176854889,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"30555b249ec8d391669c5e0986633c81ae0074e4\",\n       \"before\": \"be176ad97e275562df0352855aa7d1f0d06786ce\",\n       \"commits\": [\n@@ -1845,7 +1845,7 @@\n       \"push_id\": 4176854884,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"61a4f6c6a093379eb8a5c8212c4fd59c2b6583f4\",\n       \"before\": \"371b9b4cc0a641cb7dd1b1c5e67b920ff267e6ee\",\n       \"commits\": [\n@@ -1964,7 +1964,7 @@\n         \"updated_at\": \"2019-10-21T21:54:48Z\",\n         \"closed_at\": null,\n         \"author_association\": \"NONE\",\n-        \"body\": \"## Welcome!\\n\\nHello and welcome! In this course you will learn how you can get your best work done in pull requests.  You'll learn when and how to request a review, how to review someone else's code, and how to respond to reviews. To do this, we'll be playing around with the code in this repository that makes a simple Tetris game.\\n\\nIf you'd like, you can use [GitHub Pages](https://pages.github.com/) to host your Tetris game. Just go to the **Settings** tab of this repository. Scroll down to **GitHub Pages**. Select `master` as a **Source**, and click **Save**. \\n\\n### New to GitHub?\\n\\nFor this course, you'll need some background knowledge. If you need a refresher on the GitHub flow, check out [the Introduction to GitHub course](https://lab.github.com/courses/introduction-to-github).\\n\\n## Pull Requests Reviews 101\\n\\nReviewing a pull request is an opportunity to examine another contributor's changes. While reviewing a pull request, you can extrapolate how someone else solved a problem. It's an awesome opportunity to learn more about how the code works and how others solve problems. Reviewing a pull request is a great learning opportunity!\\n\\n## Step 1: Add assignees for issues and pull requests\\n\\nAssignees on issues and pull requests let other team members know who is responsible. The assignee oversees the issue or pull request in an accessible and visible way.\\n\\n### :keyboard: Activity: Assign yourself to this issue\\n\\n1. On the right side of the screen, click the `assign yourself` text under the **Assignees** section\\n\\n<hr>\\n<h3 align=\\\"center\\\">I'll respond below for your next step</h3>\\n\\n> _Sometimes I respond too fast for the page to update! If you perform an expected action and don't see a response, wait a few seconds and refresh the page for your next steps._\\n\"\n+        \"body\": \"## Welcome!\\n\\nHello and welcome! In this course you will learn how you can get your best work done in pull requests.  You'll learn when and how to request a review, how to review someone else's code, and how to respond to reviews. To do this, we'll be playing around with the code in this repository that makes a simple Tetris game.\\n\\nIf you'd like, you can use [GitHub Pages](https://pages.github.com/) to host your Tetris game. Just go to the **Settings** tab of this repository. Scroll down to **GitHub Pages**. Select `main` as a **Source**, and click **Save**. \\n\\n### New to GitHub?\\n\\nFor this course, you'll need some background knowledge. If you need a refresher on the GitHub flow, check out [the Introduction to GitHub course](https://lab.github.com/courses/introduction-to-github).\\n\\n## Pull Requests Reviews 101\\n\\nReviewing a pull request is an opportunity to examine another contributor's changes. While reviewing a pull request, you can extrapolate how someone else solved a problem. It's an awesome opportunity to learn more about how the code works and how others solve problems. Reviewing a pull request is a great learning opportunity!\\n\\n## Step 1: Add assignees for issues and pull requests\\n\\nAssignees on issues and pull requests let other team members know who is responsible. The assignee oversees the issue or pull request in an accessible and visible way.\\n\\n### :keyboard: Activity: Assign yourself to this issue\\n\\n1. On the right side of the screen, click the `assign yourself` text under the **Assignees** section\\n\\n<hr>\\n<h3 align=\\\"center\\\">I'll respond below for your next step</h3>\\n\\n> _Sometimes I respond too fast for the page to update! If you perform an expected action and don't see a response, wait a few seconds and refresh the page for your next steps._\\n\"\n       },\n       \"comment\": {\n         \"url\": \"https://api.github.com/repos/rcordeirotmu/reviewing-a-pull-request/issues/comments/544724566\",\n@@ -2191,12 +2191,12 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"dekkerglen:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"dekkerglen:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"f25ddd94644152d3bb6f2641e552b05108d13475\",\n           \"user\": {\n             \"login\": \"dekkerglen\",\n@@ -2316,7 +2316,7 @@\n             \"forks\": 28,\n             \"open_issues\": 126,\n             \"watchers\": 39,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -2402,7 +2402,7 @@\n       \"push_id\": 4176854881,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"b826329617c6f44caaac3be82a3147d082e404b7\",\n       \"before\": \"4ff7211da7ee2bfa13e742c6332d78b228a4f4dc\",\n       \"commits\": [\n@@ -2448,7 +2448,7 @@\n       \"push_id\": 4176854876,\n       \"size\": 2,\n       \"distinct_size\": 2,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"f4b6567d15dfe6709d3eecd304877e4ca32ac308\",\n       \"before\": \"0d0b5abb37eae9421cf0cbdcc63e37e2cd0f1a06\",\n       \"commits\": [\n@@ -2468,7 +2468,7 @@\n             \"email\": \"adrir@adrir.com\",\n             \"name\": \"Adrir\"\n           },\n-          \"message\": \"Merge branch 'master' of https://github.com/Adrir/comp120-tinkering-graphics\",\n+          \"message\": \"Merge branch 'main' of https://github.com/Adrir/comp120-tinkering-graphics\",\n           \"distinct\": true,\n           \"url\": \"https://api.github.com/repos/Adrir/comp120-tinkering-graphics/commits/f4b6567d15dfe6709d3eecd304877e4ca32ac308\"\n         }\n@@ -2497,7 +2497,7 @@\n       \"push_id\": 4176854871,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"ccc9ca4e384c48c6543b66801cb9dc8df3fd2178\",\n       \"before\": \"6bcfc18c475e5ab4de1f89a5a588ea628367ea38\",\n       \"commits\": [\n@@ -2700,12 +2700,12 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"dm-group-trakd:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"dm-group-trakd:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"4586bdd4aba94009ee60a2d01710f50493f60fd7\",\n           \"user\": {\n             \"login\": \"dm-group-trakd\",\n@@ -2819,7 +2819,7 @@\n             \"forks\": 0,\n             \"open_issues\": 1,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -2912,7 +2912,7 @@\n       \"push_id\": 4176854878,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"6ce7de98689be2a91f3455f0fe83754252658073\",\n       \"before\": \"2d14bcf9d9906d1ef9aa124b3ed168e926b45334\",\n       \"commits\": [\n@@ -3121,12 +3121,12 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"envoyproxy:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"envoyproxy:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"4bd38639fe0332c55961505d4e091f72895b7f73\",\n           \"user\": {\n             \"login\": \"envoyproxy\",\n@@ -3246,7 +3246,7 @@\n             \"forks\": 26,\n             \"open_issues\": 66,\n             \"watchers\": 61,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -3503,8 +3503,8 @@\n         \"comments_url\": \"https://api.github.com/repos/cyberark/conjur/issues/1209/comments\",\n         \"statuses_url\": \"https://api.github.com/repos/cyberark/conjur/statuses/d16c40c290d4f1ac139b101cd089a1635f20db29\",\n         \"head\": {\n-          \"label\": \"AndrewCopeland:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"AndrewCopeland:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"d16c40c290d4f1ac139b101cd089a1635f20db29\",\n           \"user\": {\n             \"login\": \"AndrewCopeland\",\n@@ -3624,12 +3624,12 @@\n             \"forks\": 0,\n             \"open_issues\": 0,\n             \"watchers\": 0,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"base\": {\n-          \"label\": \"cyberark:master\",\n-          \"ref\": \"master\",\n+          \"label\": \"cyberark:main\",\n+          \"ref\": \"main\",\n           \"sha\": \"ccf74318168be925bd62753926ae6b46ccce67aa\",\n           \"user\": {\n             \"login\": \"cyberark\",\n@@ -3749,7 +3749,7 @@\n             \"forks\": 63,\n             \"open_issues\": 260,\n             \"watchers\": 320,\n-            \"default_branch\": \"master\"\n+            \"default_branch\": \"main\"\n           }\n         },\n         \"_links\": {\n@@ -3811,7 +3811,7 @@\n       \"push_id\": 4176854863,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"2282592b49f3c60b07f84135ddfd8d7199d93e2a\",\n       \"before\": \"f393ac03494aa2e71988f93d73243c6887bf1541\",\n       \"commits\": [\n@@ -3849,7 +3849,7 @@\n     \"payload\": {\n       \"ref\": \"steveDesktop\",\n       \"ref_type\": \"branch\",\n-      \"master_branch\": \"master\",\n+      \"master_branch\": \"main\",\n       \"description\": null,\n       \"pusher_type\": \"user\"\n     },\n@@ -3876,7 +3876,7 @@\n       \"push_id\": 4176854859,\n       \"size\": 1,\n       \"distinct_size\": 1,\n-      \"ref\": \"refs/heads/master\",\n+      \"ref\": \"refs/heads/main\",\n       \"head\": \"908784246be05f222167f3f463e1423885f54ac5\",\n       \"before\": \"9e030787665d1dbf6f75f4020c52cb842d3cd17b\",\n       \"commits\": [\n@@ -4004,7 +4004,7 @@\n         \"forks\": 0,\n         \"open_issues\": 0,\n         \"watchers\": 0,\n-        \"default_branch\": \"master\",\n+        \"default_branch\": \"main\",\n         \"public\": true\n       }\n     },"
    },
    {
      "sha": "466c6368bdba39bd3b87d814d0d8ff58a8a8a80b",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/repos_daddyfatstacksbig_lerna-12.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/repos_daddyfatstacksbig_lerna-12.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/repos_daddyfatstacksbig_lerna-12.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testEventApi/__files/repos_daddyfatstacksbig_lerna-12.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 0,\n   \"open_issues\": 1,\n   \"watchers\": 0,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": false,\n     \"push\": false,"
    },
    {
      "sha": "2a39e08c65748de4071de37dc474dab36ebabe48",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repos_hub4j_github-api-3.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repos_hub4j_github-api-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repos_hub4j_github-api-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repos_hub4j_github-api-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 428,\n   \"open_issues\": 89,\n   \"watchers\": 557,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "d907e7963fa8f1d9f6556a6cc4c31977ceb00568",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repos_hub4j_github-api_issues-4.json",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repos_hub4j_github-api_issues-4.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repos_hub4j_github-api_issues-4.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repos_hub4j_github-api_issues-4.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -100,7 +100,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/559.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/559.patch\"\n     },\n-    \"body\": \"Bumps `okhttp3.version` from 3.12.3 to 4.2.1.\\n\\nUpdates `okhttp` from 3.12.3 to 4.2.1\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [okhttp's changelog](https://github.com/square/okhttp/blob/master/CHANGELOG.md).*\\n\\n> ## Version 4.2.1\\n> \\n> _2019-10-02_\\n> \\n>  *  Fix: In 4.1.0 we introduced a performance regression that prevented connections from being\\n>     pooled in certain situations. We have good test coverage for connection pooling but we missed\\n>     this because it only occurs if you have proxy configured and you share a connection pool among\\n>     multiple `OkHttpClient` instances.\\n> \\n>     This particularly-subtle bug was caused by us assigning each `OkHttpClient` instance its own\\n>     `NullProxySelector` when an explicit proxy is configured. But we don't share connections when\\n>     the proxy selectors are different. Ugh!\\n> \\n> \\n> ## Version 4.2.0\\n> \\n> _2019-09-10_\\n> \\n>  *  New: API to decode a certificate and private key to create a `HeldCertificate`. This accepts a\\n>     string containing both a certificate and PKCS #8-encoded private key.\\n> \\n>     ```kotlin\\n>     val heldCertificate = HeldCertificate.decode(\\\"\\\"\\\"\\n>         |-----BEGIN CERTIFICATE-----\\n>         |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl\\n>         |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx\\n>         |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h\\n>         |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD\\n>         |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw\\n>         |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF\\n>         |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT\\n>         |yyaoEufLKVXhrTQhRfodTeigi4RX\\n>         |-----END CERTIFICATE-----\\n>         |-----BEGIN PRIVATE KEY-----\\n>         |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J\\n>         |lu/GJQZoU9lDrCPeUcQ28tzOWw==\\n>         |-----END PRIVATE KEY-----\\n>         \\\"\\\"\\\".trimMargin())\\n>     val handshakeCertificates = HandshakeCertificates.Builder()\\n>         .heldCertificate(heldCertificate)\\n>         .build()\\n>     val server = MockWebServer()\\n>     server.useHttps(handshakeCertificates.sslSocketFactory(), false)\\n>     ```\\n> \\n>     Get these strings with `HeldCertificate.certificatePem()` and `privateKeyPkcs8Pem()`.\\n> \\n>  *  Fix: Handshake now returns peer certificates in canonical order: each certificate is signed by\\n>     the certificate that follows and the last certificate is signed by a trusted root.\\n> \\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`57a165b`](https://github.com/square/okhttp/commit/57a165b69c6551c1caec8a557e0e9c9abf54b536) Prepare for release 4.2.1.\\n- [`4c640ad`](https://github.com/square/okhttp/commit/4c640ad6c3016f49e753b5c86ab5c4d8b072bb66) Merge pull request [#5524](https://github-redirect.dependabot.com/square/okhttp/issues/5524) from square/jwilson.1002.cherrypick_poolfix\\n- [`1b4b6bb`](https://github.com/square/okhttp/commit/1b4b6bbc82206816ced207bb0132611f770c56cd) Fix connection pooling for different clients with the same pool.\\n- [`582f8ef`](https://github.com/square/okhttp/commit/582f8ef2f78cf001d479cb65831674289fd83af0) Prepare for release 4.2.0.\\n- [`9b60ca8`](https://github.com/square/okhttp/commit/9b60ca8e88445de48997d3391ae15417a6ef5d90) Merge pull request [#5434](https://github-redirect.dependabot.com/square/okhttp/issues/5434) from square/jwilson.0909.race\\n- [`510475a`](https://github.com/square/okhttp/commit/510475a21586fdf6010312a1950dca6e87cb6d2e) Don't leak incoming bytes when we race incoming data and close\\n- [`2cdbbda`](https://github.com/square/okhttp/commit/2cdbbda64a8f01c48658a2101aca206389b50878) Hows My Ssl test for Android ([#5428](https://github-redirect.dependabot.com/square/okhttp/issues/5428))\\n- [`3464ef3`](https://github.com/square/okhttp/commit/3464ef37e4fceb997df9c95cadce6fcc38102450) Merge pull request [#5431](https://github-redirect.dependabot.com/square/okhttp/issues/5431) from square/jwilson.0907.ack_apply_atomically\\n- [`bd6a97a`](https://github.com/square/okhttp/commit/bd6a97a7200dda2127a0a6b7167fef0d09febf27) Acknowledge and apply inbound settings atomically\\n- [`3490c7e`](https://github.com/square/okhttp/commit/3490c7ef9598e99bc298208f68022b36fecb21ce) Merge pull request [#5427](https://github-redirect.dependabot.com/square/okhttp/issues/5427) from square/jwilson.0905.decode_pems\\n- Additional commits viewable in [compare view](https://github.com/square/okhttp/compare/parent-3.12.3...parent-4.2.1)\\n</details>\\n<br />\\n\\nUpdates `okhttp-urlconnection` from 3.12.3 to 4.2.1\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [okhttp-urlconnection's changelog](https://github.com/square/okhttp/blob/master/CHANGELOG.md).*\\n\\n> ## Version 4.2.1\\n> \\n> _2019-10-02_\\n> \\n>  *  Fix: In 4.1.0 we introduced a performance regression that prevented connections from being\\n>     pooled in certain situations. We have good test coverage for connection pooling but we missed\\n>     this because it only occurs if you have proxy configured and you share a connection pool among\\n>     multiple `OkHttpClient` instances.\\n> \\n>     This particularly-subtle bug was caused by us assigning each `OkHttpClient` instance its own\\n>     `NullProxySelector` when an explicit proxy is configured. But we don't share connections when\\n>     the proxy selectors are different. Ugh!\\n> \\n> \\n> ## Version 4.2.0\\n> \\n> _2019-09-10_\\n> \\n>  *  New: API to decode a certificate and private key to create a `HeldCertificate`. This accepts a\\n>     string containing both a certificate and PKCS #8-encoded private key.\\n> \\n>     ```kotlin\\n>     val heldCertificate = HeldCertificate.decode(\\\"\\\"\\\"\\n>         |-----BEGIN CERTIFICATE-----\\n>         |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl\\n>         |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx\\n>         |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h\\n>         |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD\\n>         |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw\\n>         |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF\\n>         |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT\\n>         |yyaoEufLKVXhrTQhRfodTeigi4RX\\n>         |-----END CERTIFICATE-----\\n>         |-----BEGIN PRIVATE KEY-----\\n>         |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J\\n>         |lu/GJQZoU9lDrCPeUcQ28tzOWw==\\n>         |-----END PRIVATE KEY-----\\n>         \\\"\\\"\\\".trimMargin())\\n>     val handshakeCertificates = HandshakeCertificates.Builder()\\n>         .heldCertificate(heldCertificate)\\n>         .build()\\n>     val server = MockWebServer()\\n>     server.useHttps(handshakeCertificates.sslSocketFactory(), false)\\n>     ```\\n> \\n>     Get these strings with `HeldCertificate.certificatePem()` and `privateKeyPkcs8Pem()`.\\n> \\n>  *  Fix: Handshake now returns peer certificates in canonical order: each certificate is signed by\\n>     the certificate that follows and the last certificate is signed by a trusted root.\\n> \\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`57a165b`](https://github.com/square/okhttp/commit/57a165b69c6551c1caec8a557e0e9c9abf54b536) Prepare for release 4.2.1.\\n- [`4c640ad`](https://github.com/square/okhttp/commit/4c640ad6c3016f49e753b5c86ab5c4d8b072bb66) Merge pull request [#5524](https://github-redirect.dependabot.com/square/okhttp/issues/5524) from square/jwilson.1002.cherrypick_poolfix\\n- [`1b4b6bb`](https://github.com/square/okhttp/commit/1b4b6bbc82206816ced207bb0132611f770c56cd) Fix connection pooling for different clients with the same pool.\\n- [`582f8ef`](https://github.com/square/okhttp/commit/582f8ef2f78cf001d479cb65831674289fd83af0) Prepare for release 4.2.0.\\n- [`9b60ca8`](https://github.com/square/okhttp/commit/9b60ca8e88445de48997d3391ae15417a6ef5d90) Merge pull request [#5434](https://github-redirect.dependabot.com/square/okhttp/issues/5434) from square/jwilson.0909.race\\n- [`510475a`](https://github.com/square/okhttp/commit/510475a21586fdf6010312a1950dca6e87cb6d2e) Don't leak incoming bytes when we race incoming data and close\\n- [`2cdbbda`](https://github.com/square/okhttp/commit/2cdbbda64a8f01c48658a2101aca206389b50878) Hows My Ssl test for Android ([#5428](https://github-redirect.dependabot.com/square/okhttp/issues/5428))\\n- [`3464ef3`](https://github.com/square/okhttp/commit/3464ef37e4fceb997df9c95cadce6fcc38102450) Merge pull request [#5431](https://github-redirect.dependabot.com/square/okhttp/issues/5431) from square/jwilson.0907.ack_apply_atomically\\n- [`bd6a97a`](https://github.com/square/okhttp/commit/bd6a97a7200dda2127a0a6b7167fef0d09febf27) Acknowledge and apply inbound settings atomically\\n- [`3490c7e`](https://github.com/square/okhttp/commit/3490c7ef9598e99bc298208f68022b36fecb21ce) Merge pull request [#5427](https://github-redirect.dependabot.com/square/okhttp/issues/5427) from square/jwilson.0905.decode_pems\\n- Additional commits viewable in [compare view](https://github.com/square/okhttp/compare/parent-3.12.3...parent-4.2.1)\\n</details>\\n<br />\\n\\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n- `@dependabot badge me` will comment on this PR with code to add a \\\"Dependabot enabled\\\" badge to your readme\\n\\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\\n- Update frequency (including time of day and day of week)\\n- Pull request limits (per update run and/or open at any time)\\n- Out-of-range updates (receive only lockfile updates, if desired)\\n- Security updates (receive only security updates, if desired)\\n\\nFinally, you can contact us by mentioning @dependabot.\\n\\n</details>\"\n+    \"body\": \"Bumps `okhttp3.version` from 3.12.3 to 4.2.1.\\n\\nUpdates `okhttp` from 3.12.3 to 4.2.1\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [okhttp's changelog](https://github.com/square/okhttp/blob/main/CHANGELOG.md).*\\n\\n> ## Version 4.2.1\\n> \\n> _2019-10-02_\\n> \\n>  *  Fix: In 4.1.0 we introduced a performance regression that prevented connections from being\\n>     pooled in certain situations. We have good test coverage for connection pooling but we missed\\n>     this because it only occurs if you have proxy configured and you share a connection pool among\\n>     multiple `OkHttpClient` instances.\\n> \\n>     This particularly-subtle bug was caused by us assigning each `OkHttpClient` instance its own\\n>     `NullProxySelector` when an explicit proxy is configured. But we don't share connections when\\n>     the proxy selectors are different. Ugh!\\n> \\n> \\n> ## Version 4.2.0\\n> \\n> _2019-09-10_\\n> \\n>  *  New: API to decode a certificate and private key to create a `HeldCertificate`. This accepts a\\n>     string containing both a certificate and PKCS #8-encoded private key.\\n> \\n>     ```kotlin\\n>     val heldCertificate = HeldCertificate.decode(\\\"\\\"\\\"\\n>         |-----BEGIN CERTIFICATE-----\\n>         |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl\\n>         |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx\\n>         |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h\\n>         |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD\\n>         |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw\\n>         |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF\\n>         |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT\\n>         |yyaoEufLKVXhrTQhRfodTeigi4RX\\n>         |-----END CERTIFICATE-----\\n>         |-----BEGIN PRIVATE KEY-----\\n>         |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J\\n>         |lu/GJQZoU9lDrCPeUcQ28tzOWw==\\n>         |-----END PRIVATE KEY-----\\n>         \\\"\\\"\\\".trimMargin())\\n>     val handshakeCertificates = HandshakeCertificates.Builder()\\n>         .heldCertificate(heldCertificate)\\n>         .build()\\n>     val server = MockWebServer()\\n>     server.useHttps(handshakeCertificates.sslSocketFactory(), false)\\n>     ```\\n> \\n>     Get these strings with `HeldCertificate.certificatePem()` and `privateKeyPkcs8Pem()`.\\n> \\n>  *  Fix: Handshake now returns peer certificates in canonical order: each certificate is signed by\\n>     the certificate that follows and the last certificate is signed by a trusted root.\\n> \\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`57a165b`](https://github.com/square/okhttp/commit/57a165b69c6551c1caec8a557e0e9c9abf54b536) Prepare for release 4.2.1.\\n- [`4c640ad`](https://github.com/square/okhttp/commit/4c640ad6c3016f49e753b5c86ab5c4d8b072bb66) Merge pull request [#5524](https://github-redirect.dependabot.com/square/okhttp/issues/5524) from square/jwilson.1002.cherrypick_poolfix\\n- [`1b4b6bb`](https://github.com/square/okhttp/commit/1b4b6bbc82206816ced207bb0132611f770c56cd) Fix connection pooling for different clients with the same pool.\\n- [`582f8ef`](https://github.com/square/okhttp/commit/582f8ef2f78cf001d479cb65831674289fd83af0) Prepare for release 4.2.0.\\n- [`9b60ca8`](https://github.com/square/okhttp/commit/9b60ca8e88445de48997d3391ae15417a6ef5d90) Merge pull request [#5434](https://github-redirect.dependabot.com/square/okhttp/issues/5434) from square/jwilson.0909.race\\n- [`510475a`](https://github.com/square/okhttp/commit/510475a21586fdf6010312a1950dca6e87cb6d2e) Don't leak incoming bytes when we race incoming data and close\\n- [`2cdbbda`](https://github.com/square/okhttp/commit/2cdbbda64a8f01c48658a2101aca206389b50878) Hows My Ssl test for Android ([#5428](https://github-redirect.dependabot.com/square/okhttp/issues/5428))\\n- [`3464ef3`](https://github.com/square/okhttp/commit/3464ef37e4fceb997df9c95cadce6fcc38102450) Merge pull request [#5431](https://github-redirect.dependabot.com/square/okhttp/issues/5431) from square/jwilson.0907.ack_apply_atomically\\n- [`bd6a97a`](https://github.com/square/okhttp/commit/bd6a97a7200dda2127a0a6b7167fef0d09febf27) Acknowledge and apply inbound settings atomically\\n- [`3490c7e`](https://github.com/square/okhttp/commit/3490c7ef9598e99bc298208f68022b36fecb21ce) Merge pull request [#5427](https://github-redirect.dependabot.com/square/okhttp/issues/5427) from square/jwilson.0905.decode_pems\\n- Additional commits viewable in [compare view](https://github.com/square/okhttp/compare/parent-3.12.3...parent-4.2.1)\\n</details>\\n<br />\\n\\nUpdates `okhttp-urlconnection` from 3.12.3 to 4.2.1\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [okhttp-urlconnection's changelog](https://github.com/square/okhttp/blob/main/CHANGELOG.md).*\\n\\n> ## Version 4.2.1\\n> \\n> _2019-10-02_\\n> \\n>  *  Fix: In 4.1.0 we introduced a performance regression that prevented connections from being\\n>     pooled in certain situations. We have good test coverage for connection pooling but we missed\\n>     this because it only occurs if you have proxy configured and you share a connection pool among\\n>     multiple `OkHttpClient` instances.\\n> \\n>     This particularly-subtle bug was caused by us assigning each `OkHttpClient` instance its own\\n>     `NullProxySelector` when an explicit proxy is configured. But we don't share connections when\\n>     the proxy selectors are different. Ugh!\\n> \\n> \\n> ## Version 4.2.0\\n> \\n> _2019-09-10_\\n> \\n>  *  New: API to decode a certificate and private key to create a `HeldCertificate`. This accepts a\\n>     string containing both a certificate and PKCS #8-encoded private key.\\n> \\n>     ```kotlin\\n>     val heldCertificate = HeldCertificate.decode(\\\"\\\"\\\"\\n>         |-----BEGIN CERTIFICATE-----\\n>         |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl\\n>         |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx\\n>         |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h\\n>         |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD\\n>         |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw\\n>         |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF\\n>         |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT\\n>         |yyaoEufLKVXhrTQhRfodTeigi4RX\\n>         |-----END CERTIFICATE-----\\n>         |-----BEGIN PRIVATE KEY-----\\n>         |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J\\n>         |lu/GJQZoU9lDrCPeUcQ28tzOWw==\\n>         |-----END PRIVATE KEY-----\\n>         \\\"\\\"\\\".trimMargin())\\n>     val handshakeCertificates = HandshakeCertificates.Builder()\\n>         .heldCertificate(heldCertificate)\\n>         .build()\\n>     val server = MockWebServer()\\n>     server.useHttps(handshakeCertificates.sslSocketFactory(), false)\\n>     ```\\n> \\n>     Get these strings with `HeldCertificate.certificatePem()` and `privateKeyPkcs8Pem()`.\\n> \\n>  *  Fix: Handshake now returns peer certificates in canonical order: each certificate is signed by\\n>     the certificate that follows and the last certificate is signed by a trusted root.\\n> \\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`57a165b`](https://github.com/square/okhttp/commit/57a165b69c6551c1caec8a557e0e9c9abf54b536) Prepare for release 4.2.1.\\n- [`4c640ad`](https://github.com/square/okhttp/commit/4c640ad6c3016f49e753b5c86ab5c4d8b072bb66) Merge pull request [#5524](https://github-redirect.dependabot.com/square/okhttp/issues/5524) from square/jwilson.1002.cherrypick_poolfix\\n- [`1b4b6bb`](https://github.com/square/okhttp/commit/1b4b6bbc82206816ced207bb0132611f770c56cd) Fix connection pooling for different clients with the same pool.\\n- [`582f8ef`](https://github.com/square/okhttp/commit/582f8ef2f78cf001d479cb65831674289fd83af0) Prepare for release 4.2.0.\\n- [`9b60ca8`](https://github.com/square/okhttp/commit/9b60ca8e88445de48997d3391ae15417a6ef5d90) Merge pull request [#5434](https://github-redirect.dependabot.com/square/okhttp/issues/5434) from square/jwilson.0909.race\\n- [`510475a`](https://github.com/square/okhttp/commit/510475a21586fdf6010312a1950dca6e87cb6d2e) Don't leak incoming bytes when we race incoming data and close\\n- [`2cdbbda`](https://github.com/square/okhttp/commit/2cdbbda64a8f01c48658a2101aca206389b50878) Hows My Ssl test for Android ([#5428](https://github-redirect.dependabot.com/square/okhttp/issues/5428))\\n- [`3464ef3`](https://github.com/square/okhttp/commit/3464ef37e4fceb997df9c95cadce6fcc38102450) Merge pull request [#5431](https://github-redirect.dependabot.com/square/okhttp/issues/5431) from square/jwilson.0907.ack_apply_atomically\\n- [`bd6a97a`](https://github.com/square/okhttp/commit/bd6a97a7200dda2127a0a6b7167fef0d09febf27) Acknowledge and apply inbound settings atomically\\n- [`3490c7e`](https://github.com/square/okhttp/commit/3490c7ef9598e99bc298208f68022b36fecb21ce) Merge pull request [#5427](https://github-redirect.dependabot.com/square/okhttp/issues/5427) from square/jwilson.0905.decode_pems\\n- Additional commits viewable in [compare view](https://github.com/square/okhttp/compare/parent-3.12.3...parent-4.2.1)\\n</details>\\n<br />\\n\\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n- `@dependabot badge me` will comment on this PR with code to add a \\\"Dependabot enabled\\\" badge to your readme\\n\\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\\n- Update frequency (including time of day and day of week)\\n- Pull request limits (per update run and/or open at any time)\\n- Out-of-range updates (receive only lockfile updates, if desired)\\n- Security updates (receive only security updates, if desired)\\n\\nFinally, you can contact us by mentioning @dependabot.\\n\\n</details>\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/558\",\n@@ -159,7 +159,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/558.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/558.patch\"\n     },\n-    \"body\": \"Bumps [okio](https://github.com/square/okio) from 2.2.2 to 2.4.0.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [okio's changelog](https://github.com/square/okio/blob/master/CHANGELOG.md).*\\n\\n> ### Version 2.4.0\\n> \\n> _2019-08-26_\\n> \\n>  * New: Upgrade to Kotlin 1.3.50.\\n> \\n> \\n> ### Version 2.3.0\\n> \\n> _2019-07-29_\\n> \\n> **This release changes our build from Kotlin-JVM to Kotlin-multiplatform (which includes JVM).**\\n> Both native and JavaScript platforms are unstable preview releases and subject to\\n> backwards-incompatible changes in forthcoming releases.\\n> \\n> To try Okio in a multiplatform project use this Maven coordinate:\\n> \\n> ```kotlin\\n> api('com.squareup.okio:okio-multiplatform:2.3.0')\\n> ```\\n> \\n> You’ll also need to [enable Gradle metadata][gradle_metadata] in your project's settings. The\\n> artifact name for JVM projects has not changed.\\n> \\n>  * New: Upgrade to Kotlin 1.3.40.\\n>  * Fix: Use Gradle `api` instead of `implementation` for the kotlin-stdlib dependency.\\n>  * Fix: Don't block unless strictly necessary in `BufferedSource.peek()`.\\n> \\n> ## Version 1.17.4\\n> \\n> _2019-04-29_\\n> \\n>  * Fix: Don't block unless strictly necessary in `BufferedSource.peek()`.\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`35a6919`](https://github.com/square/okio/commit/35a69198bb17c7d8dc2b59aa2d4ffae3c201c599) Prepare for release 2.4.0.\\n- [`1ab5136`](https://github.com/square/okio/commit/1ab5136fc3a7c3a713d1d82053643612b44aa092) Merge pull request [#650](https://github-redirect.dependabot.com/square/okio/issues/650) from square/jakew/repeat/2019-08-23\\n- [`533b7da`](https://github.com/square/okio/commit/533b7dae1aafd007de3bfe58cf619aeec101e36b) Remove TestUtils.repeat in favor of Kotlin repeat\\n- [`589c56c`](https://github.com/square/okio/commit/589c56c98b08dc690024fa0268885b08e3c61497) Kotlin 1.3.50 ([#649](https://github-redirect.dependabot.com/square/okio/issues/649))\\n- [`29c16f9`](https://github.com/square/okio/commit/29c16f91a148db2df233bf734d229019db664824) Merge pull request [#648](https://github-redirect.dependabot.com/square/okio/issues/648) from square/egorand/190815/kotlin-1.3.50-eap\\n- [`efaae11`](https://github.com/square/okio/commit/efaae11bd92d48ac303238b3f6b27c192c70541e) Kotlin 1.3.50-eap\\n- [`a93f96c`](https://github.com/square/okio/commit/a93f96c0dc2b1256f209ec719dc96b6c121bba45) Update ktlint gradle to 8.2.0 version. ([#642](https://github-redirect.dependabot.com/square/okio/issues/642))\\n- [`16cde1a`](https://github.com/square/okio/commit/16cde1a986fe921e6bad94a3f26841726c39797d) Merge pull request [#644](https://github-redirect.dependabot.com/square/okio/issues/644) from square/egorand/190805/kill-node\\n- [`9376cb3`](https://github.com/square/okio/commit/9376cb360531f1f9af11af6063f3f171feecd19c) Merge pull request [#643](https://github-redirect.dependabot.com/square/okio/issues/643) from square/egorand/190804/gradle-5.5.1\\n- [`5de9874`](https://github.com/square/okio/commit/5de9874d35a26c8ae0da8c302990cca1a11ea725) Node plugin is not needed anymore\\n- Additional commits viewable in [compare view](https://github.com/square/okio/compare/2.2.2...parent-2.4.0)\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.squareup.okio:okio&package-manager=maven&previous-version=2.2.2&new-version=2.4.0)](https://dependabot.com/compatibility-score.html?dependency-name=com.squareup.okio:okio&package-manager=maven&previous-version=2.2.2&new-version=2.4.0)\\n\\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n- `@dependabot badge me` will comment on this PR with code to add a \\\"Dependabot enabled\\\" badge to your readme\\n\\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\\n- Update frequency (including time of day and day of week)\\n- Pull request limits (per update run and/or open at any time)\\n- Out-of-range updates (receive only lockfile updates, if desired)\\n- Security updates (receive only security updates, if desired)\\n\\nFinally, you can contact us by mentioning @dependabot.\\n\\n</details>\"\n+    \"body\": \"Bumps [okio](https://github.com/square/okio) from 2.2.2 to 2.4.0.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [okio's changelog](https://github.com/square/okio/blob/main/CHANGELOG.md).*\\n\\n> ### Version 2.4.0\\n> \\n> _2019-08-26_\\n> \\n>  * New: Upgrade to Kotlin 1.3.50.\\n> \\n> \\n> ### Version 2.3.0\\n> \\n> _2019-07-29_\\n> \\n> **This release changes our build from Kotlin-JVM to Kotlin-multiplatform (which includes JVM).**\\n> Both native and JavaScript platforms are unstable preview releases and subject to\\n> backwards-incompatible changes in forthcoming releases.\\n> \\n> To try Okio in a multiplatform project use this Maven coordinate:\\n> \\n> ```kotlin\\n> api('com.squareup.okio:okio-multiplatform:2.3.0')\\n> ```\\n> \\n> You’ll also need to [enable Gradle metadata][gradle_metadata] in your project's settings. The\\n> artifact name for JVM projects has not changed.\\n> \\n>  * New: Upgrade to Kotlin 1.3.40.\\n>  * Fix: Use Gradle `api` instead of `implementation` for the kotlin-stdlib dependency.\\n>  * Fix: Don't block unless strictly necessary in `BufferedSource.peek()`.\\n> \\n> ## Version 1.17.4\\n> \\n> _2019-04-29_\\n> \\n>  * Fix: Don't block unless strictly necessary in `BufferedSource.peek()`.\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`35a6919`](https://github.com/square/okio/commit/35a69198bb17c7d8dc2b59aa2d4ffae3c201c599) Prepare for release 2.4.0.\\n- [`1ab5136`](https://github.com/square/okio/commit/1ab5136fc3a7c3a713d1d82053643612b44aa092) Merge pull request [#650](https://github-redirect.dependabot.com/square/okio/issues/650) from square/jakew/repeat/2019-08-23\\n- [`533b7da`](https://github.com/square/okio/commit/533b7dae1aafd007de3bfe58cf619aeec101e36b) Remove TestUtils.repeat in favor of Kotlin repeat\\n- [`589c56c`](https://github.com/square/okio/commit/589c56c98b08dc690024fa0268885b08e3c61497) Kotlin 1.3.50 ([#649](https://github-redirect.dependabot.com/square/okio/issues/649))\\n- [`29c16f9`](https://github.com/square/okio/commit/29c16f91a148db2df233bf734d229019db664824) Merge pull request [#648](https://github-redirect.dependabot.com/square/okio/issues/648) from square/egorand/190815/kotlin-1.3.50-eap\\n- [`efaae11`](https://github.com/square/okio/commit/efaae11bd92d48ac303238b3f6b27c192c70541e) Kotlin 1.3.50-eap\\n- [`a93f96c`](https://github.com/square/okio/commit/a93f96c0dc2b1256f209ec719dc96b6c121bba45) Update ktlint gradle to 8.2.0 version. ([#642](https://github-redirect.dependabot.com/square/okio/issues/642))\\n- [`16cde1a`](https://github.com/square/okio/commit/16cde1a986fe921e6bad94a3f26841726c39797d) Merge pull request [#644](https://github-redirect.dependabot.com/square/okio/issues/644) from square/egorand/190805/kill-node\\n- [`9376cb3`](https://github.com/square/okio/commit/9376cb360531f1f9af11af6063f3f171feecd19c) Merge pull request [#643](https://github-redirect.dependabot.com/square/okio/issues/643) from square/egorand/190804/gradle-5.5.1\\n- [`5de9874`](https://github.com/square/okio/commit/5de9874d35a26c8ae0da8c302990cca1a11ea725) Node plugin is not needed anymore\\n- Additional commits viewable in [compare view](https://github.com/square/okio/compare/2.2.2...parent-2.4.0)\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.squareup.okio:okio&package-manager=maven&previous-version=2.2.2&new-version=2.4.0)](https://dependabot.com/compatibility-score.html?dependency-name=com.squareup.okio:okio&package-manager=maven&previous-version=2.2.2&new-version=2.4.0)\\n\\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n- `@dependabot badge me` will comment on this PR with code to add a \\\"Dependabot enabled\\\" badge to your readme\\n\\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\\n- Update frequency (including time of day and day of week)\\n- Pull request limits (per update run and/or open at any time)\\n- Out-of-range updates (receive only lockfile updates, if desired)\\n- Security updates (receive only security updates, if desired)\\n\\nFinally, you can contact us by mentioning @dependabot.\\n\\n</details>\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/557\",\n@@ -454,7 +454,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/553.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/553.patch\"\n     },\n-    \"body\": \"Bumps [okhttp-urlconnection](https://github.com/square/okhttp) from 3.9.0 to 4.2.0.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [okhttp-urlconnection's changelog](https://github.com/square/okhttp/blob/master/CHANGELOG.md).*\\n\\n> ## Version 4.2.0\\n> \\n> _2019-09-10_\\n> \\n>  *  New: API to decode a certificate and private key to create a `HeldCertificate`. This accepts a\\n>     string containing both a certificate and PKCS #8-encoded private key.\\n> \\n>     ```kotlin\\n>     val heldCertificate = HeldCertificate.decode(\\\"\\\"\\\"\\n>         |-----BEGIN CERTIFICATE-----\\n>         |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl\\n>         |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx\\n>         |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h\\n>         |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD\\n>         |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw\\n>         |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF\\n>         |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT\\n>         |yyaoEufLKVXhrTQhRfodTeigi4RX\\n>         |-----END CERTIFICATE-----\\n>         |-----BEGIN PRIVATE KEY-----\\n>         |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J\\n>         |lu/GJQZoU9lDrCPeUcQ28tzOWw==\\n>         |-----END PRIVATE KEY-----\\n>         \\\"\\\"\\\".trimMargin())\\n>     val handshakeCertificates = HandshakeCertificates.Builder()\\n>         .heldCertificate(heldCertificate)\\n>         .build()\\n>     val server = MockWebServer()\\n>     server.useHttps(handshakeCertificates.sslSocketFactory(), false)\\n>     ```\\n> \\n>     Get these strings with `HeldCertificate.certificatePem()` and `privateKeyPkcs8Pem()`.\\n> \\n>  *  Fix: Handshake now returns peer certificates in canonical order: each certificate is signed by\\n>     the certificate that follows and the last certificate is signed by a trusted root.\\n> \\n>  *  Fix: Don't lose HTTP/2 flow control bytes when incoming data races with a stream close. If this\\n>     happened enough then eventually the connection would stall.\\n> \\n>  *  Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we\\n>     could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to\\n>     fail the call.\\n> \\n> \\n> ## Version 4.1.1\\n> \\n> _2019-09-05_\\n> \\n>  *  Fix: Don't drop repeated headers when validating cached responses. In our Kotlin upgrade we\\n>     introduced a regression where we iterated the number of unique header names rather than then\\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`582f8ef`](https://github.com/square/okhttp/commit/582f8ef2f78cf001d479cb65831674289fd83af0) Prepare for release 4.2.0.\\n- [`9b60ca8`](https://github.com/square/okhttp/commit/9b60ca8e88445de48997d3391ae15417a6ef5d90) Merge pull request [#5434](https://github-redirect.dependabot.com/square/okhttp/issues/5434) from square/jwilson.0909.race\\n- [`510475a`](https://github.com/square/okhttp/commit/510475a21586fdf6010312a1950dca6e87cb6d2e) Don't leak incoming bytes when we race incoming data and close\\n- [`2cdbbda`](https://github.com/square/okhttp/commit/2cdbbda64a8f01c48658a2101aca206389b50878) Hows My Ssl test for Android ([#5428](https://github-redirect.dependabot.com/square/okhttp/issues/5428))\\n- [`3464ef3`](https://github.com/square/okhttp/commit/3464ef37e4fceb997df9c95cadce6fcc38102450) Merge pull request [#5431](https://github-redirect.dependabot.com/square/okhttp/issues/5431) from square/jwilson.0907.ack_apply_atomically\\n- [`bd6a97a`](https://github.com/square/okhttp/commit/bd6a97a7200dda2127a0a6b7167fef0d09febf27) Acknowledge and apply inbound settings atomically\\n- [`3490c7e`](https://github.com/square/okhttp/commit/3490c7ef9598e99bc298208f68022b36fecb21ce) Merge pull request [#5427](https://github-redirect.dependabot.com/square/okhttp/issues/5427) from square/jwilson.0905.decode_pems\\n- [`ba2c676`](https://github.com/square/okhttp/commit/ba2c676aaf2b825528955f61dd43004a5bd9ca98) Handshake returns cleaned peer certificates ([#5311](https://github-redirect.dependabot.com/square/okhttp/issues/5311))\\n- [`93c5bcc`](https://github.com/square/okhttp/commit/93c5bcc6cb46aef19b2f55e61c01f6b1bbccee70) Make it easier to decode PEM files\\n- [`6f17886`](https://github.com/square/okhttp/commit/6f178869acc2a2a9a6882c49dfb5bcf7a43b3ddd) Merge pull request [#5423](https://github-redirect.dependabot.com/square/okhttp/issues/5423) from square/jwilson.0905.windows\\n- Additional commits viewable in [compare view](https://github.com/square/okhttp/compare/parent-3.9.0...parent-4.2.0)\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.squareup.okhttp3:okhttp-urlconnection&package-manager=maven&previous-version=3.9.0&new-version=4.2.0)](https://dependabot.com/compatibility-score.html?dependency-name=com.squareup.okhttp3:okhttp-urlconnection&package-manager=maven&previous-version=3.9.0&new-version=4.2.0)\\n\\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 5 PRs for your first few update runs. Once an update run creates fewer than 5 PRs we'll remove that limit.\\n\\nYou can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n- `@dependabot badge me` will comment on this PR with code to add a \\\"Dependabot enabled\\\" badge to your readme\\n\\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\\n- Update frequency (including time of day and day of week)\\n- Pull request limits (per update run and/or open at any time)\\n- Out-of-range updates (receive only lockfile updates, if desired)\\n- Security updates (receive only security updates, if desired)\\n\\nFinally, you can contact us by mentioning @dependabot.\\n\\n</details>\"\n+    \"body\": \"Bumps [okhttp-urlconnection](https://github.com/square/okhttp) from 3.9.0 to 4.2.0.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [okhttp-urlconnection's changelog](https://github.com/square/okhttp/blob/main/CHANGELOG.md).*\\n\\n> ## Version 4.2.0\\n> \\n> _2019-09-10_\\n> \\n>  *  New: API to decode a certificate and private key to create a `HeldCertificate`. This accepts a\\n>     string containing both a certificate and PKCS #8-encoded private key.\\n> \\n>     ```kotlin\\n>     val heldCertificate = HeldCertificate.decode(\\\"\\\"\\\"\\n>         |-----BEGIN CERTIFICATE-----\\n>         |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl\\n>         |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx\\n>         |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h\\n>         |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD\\n>         |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw\\n>         |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF\\n>         |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT\\n>         |yyaoEufLKVXhrTQhRfodTeigi4RX\\n>         |-----END CERTIFICATE-----\\n>         |-----BEGIN PRIVATE KEY-----\\n>         |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J\\n>         |lu/GJQZoU9lDrCPeUcQ28tzOWw==\\n>         |-----END PRIVATE KEY-----\\n>         \\\"\\\"\\\".trimMargin())\\n>     val handshakeCertificates = HandshakeCertificates.Builder()\\n>         .heldCertificate(heldCertificate)\\n>         .build()\\n>     val server = MockWebServer()\\n>     server.useHttps(handshakeCertificates.sslSocketFactory(), false)\\n>     ```\\n> \\n>     Get these strings with `HeldCertificate.certificatePem()` and `privateKeyPkcs8Pem()`.\\n> \\n>  *  Fix: Handshake now returns peer certificates in canonical order: each certificate is signed by\\n>     the certificate that follows and the last certificate is signed by a trusted root.\\n> \\n>  *  Fix: Don't lose HTTP/2 flow control bytes when incoming data races with a stream close. If this\\n>     happened enough then eventually the connection would stall.\\n> \\n>  *  Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we\\n>     could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to\\n>     fail the call.\\n> \\n> \\n> ## Version 4.1.1\\n> \\n> _2019-09-05_\\n> \\n>  *  Fix: Don't drop repeated headers when validating cached responses. In our Kotlin upgrade we\\n>     introduced a regression where we iterated the number of unique header names rather than then\\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`582f8ef`](https://github.com/square/okhttp/commit/582f8ef2f78cf001d479cb65831674289fd83af0) Prepare for release 4.2.0.\\n- [`9b60ca8`](https://github.com/square/okhttp/commit/9b60ca8e88445de48997d3391ae15417a6ef5d90) Merge pull request [#5434](https://github-redirect.dependabot.com/square/okhttp/issues/5434) from square/jwilson.0909.race\\n- [`510475a`](https://github.com/square/okhttp/commit/510475a21586fdf6010312a1950dca6e87cb6d2e) Don't leak incoming bytes when we race incoming data and close\\n- [`2cdbbda`](https://github.com/square/okhttp/commit/2cdbbda64a8f01c48658a2101aca206389b50878) Hows My Ssl test for Android ([#5428](https://github-redirect.dependabot.com/square/okhttp/issues/5428))\\n- [`3464ef3`](https://github.com/square/okhttp/commit/3464ef37e4fceb997df9c95cadce6fcc38102450) Merge pull request [#5431](https://github-redirect.dependabot.com/square/okhttp/issues/5431) from square/jwilson.0907.ack_apply_atomically\\n- [`bd6a97a`](https://github.com/square/okhttp/commit/bd6a97a7200dda2127a0a6b7167fef0d09febf27) Acknowledge and apply inbound settings atomically\\n- [`3490c7e`](https://github.com/square/okhttp/commit/3490c7ef9598e99bc298208f68022b36fecb21ce) Merge pull request [#5427](https://github-redirect.dependabot.com/square/okhttp/issues/5427) from square/jwilson.0905.decode_pems\\n- [`ba2c676`](https://github.com/square/okhttp/commit/ba2c676aaf2b825528955f61dd43004a5bd9ca98) Handshake returns cleaned peer certificates ([#5311](https://github-redirect.dependabot.com/square/okhttp/issues/5311))\\n- [`93c5bcc`](https://github.com/square/okhttp/commit/93c5bcc6cb46aef19b2f55e61c01f6b1bbccee70) Make it easier to decode PEM files\\n- [`6f17886`](https://github.com/square/okhttp/commit/6f178869acc2a2a9a6882c49dfb5bcf7a43b3ddd) Merge pull request [#5423](https://github-redirect.dependabot.com/square/okhttp/issues/5423) from square/jwilson.0905.windows\\n- Additional commits viewable in [compare view](https://github.com/square/okhttp/compare/parent-3.9.0...parent-4.2.0)\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.squareup.okhttp3:okhttp-urlconnection&package-manager=maven&previous-version=3.9.0&new-version=4.2.0)](https://dependabot.com/compatibility-score.html?dependency-name=com.squareup.okhttp3:okhttp-urlconnection&package-manager=maven&previous-version=3.9.0&new-version=4.2.0)\\n\\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 5 PRs for your first few update runs. Once an update run creates fewer than 5 PRs we'll remove that limit.\\n\\nYou can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n- `@dependabot badge me` will comment on this PR with code to add a \\\"Dependabot enabled\\\" badge to your readme\\n\\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\\n- Update frequency (including time of day and day of week)\\n- Pull request limits (per update run and/or open at any time)\\n- Out-of-range updates (receive only lockfile updates, if desired)\\n- Security updates (receive only security updates, if desired)\\n\\nFinally, you can contact us by mentioning @dependabot.\\n\\n</details>\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/552\",\n@@ -572,7 +572,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/551.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/551.patch\"\n     },\n-    \"body\": \"Bumps [commons-codec](https://github.com/apache/commons-codec) from 1.7 to 1.13.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [commons-codec's changelog](https://github.com/apache/commons-codec/blob/master/RELEASE-NOTES.txt).*\\n\\n>               Apache Apache Commons Codec 1.13 RELEASE NOTES\\n> \\n> The Apache Commons Codec package contains simple encoder and decoders for\\n> various formats such as Base64 and Hexadecimal.  In addition to these\\n> widely used encoders and decoders, the codec package also maintains a\\n> collection of phonetic encoding utilities.\\n> \\n> Feature and fix release.\\n> \\n> Changes in this version include:\\n> \\n> New features:\\n> o CODEC-236:  MurmurHash2 for 32-bit or 64-bit value. Thanks to Viliam Holub.\\n> o CODEC-236:  MurmurHash3 for 32-bit or 128-bit value. Thanks to Austin Appleby.\\n> \\n> Fixed Bugs:\\n> o CODEC-255:  ColognePhonetic handles x incorrectly Thanks to Holger Grote.\\n> o CODEC-254:  ColognePhonetic does not treat the letter H correctly Thanks to Holger Grote.\\n> o CODEC-134:  Reject any decode request for a value that is impossible to encode to for Base32/Base64 rather than blindly decoding.\\n> \\n> Changes:\\n> o CODEC-236:  Broken direct java.nio.ByteBuffer support in org.apache.commons.codec.binary.Hex. Thanks to Tomas Shestakov, Gary Gregory.\\n> \\n> \\n> For complete information on Apache Commons Codec, including instructions on how to submit bug reports,\\n> patches, or suggestions for improvement, see the Apache Apache Commons Codec website:\\n> \\n> Visit https://commons.apache.org/proper/commons-codec/\\n> Download from https://commons.apache.org/proper/commons-codec/download_codec.cgi\\n> \\n> \\n> -------------------------------------------------------------------------------\\n> \\n>               Apache Commons Codec 1.12 RELEASE NOTES\\n> \\n> The Apache Commons Codec team is pleased to announce the commons-codec-1.12 release!\\n> \\n> The Apache Commons Codec package contains simple encoder and decoders for\\n>      various formats such as Base64 and Hexadecimal.  In addition to these\\n>      widely used encoders and decoders, the codec package also maintains a\\n>      collection of phonetic encoding utilities.\\n> \\n> Changes in this version include:\\n> \\n> New features:\\n> o Add Percent-Encoding Codec (described in RFC3986 and RFC7578)  Issue: CODEC-240. Thanks to Ioannis Sermetziadis.\\n> o Add SHA-3 methods in DigestUtils  Issue: CODEC-251. Thanks to Gary Gregory.\\n> \\n> Fixed Bugs:\\n> o B64 salt generator: Random -> ThreadLocalRandom  Issue: CODEC-252.\\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`beafa49`](https://github.com/apache/commons-codec/commit/beafa49f88be397f89b78d125d2c7c52b0114006) Fix the site's source repository link.\\n- [`4200d4d`](https://github.com/apache/commons-codec/commit/4200d4d9cbfb2cbfc7f6e783cceb06bb52963887) Fix the site's source repository link.\\n- [`20dc3ec`](https://github.com/apache/commons-codec/commit/20dc3ec2c6b41f9412ecf4a1cbe9bba10e1498ed) Prepare for the next release.\\n- [`7d309fc`](https://github.com/apache/commons-codec/commit/7d309fc952fa201c53ba277eee33b751f56cf50e) Update POM version numbers for Apache Commons Codec release 1.13\\n- [`47a55d2`](https://github.com/apache/commons-codec/commit/47a55d21515bf2ec49d2c1b4f2f83bf66a09a7c5) Prepare for the next release.\\n- [`3730126`](https://github.com/apache/commons-codec/commit/3730126d8a3fbf98533710e1c9f2ba18b91d53f2) Prepare for the next release.\\n- [`9969e7b`](https://github.com/apache/commons-codec/commit/9969e7b317777e151646923d302e856b163ba224) Prepare for the next release.\\n- [`fe39ffc`](https://github.com/apache/commons-codec/commit/fe39ffc076712fc8cd55c96fc5cb0eee2efe4847) Remove unnecessary type casts.\\n- [`3e6fb93`](https://github.com/apache/commons-codec/commit/3e6fb93250fb951ccd3b9597cd19b1c2243a77b1) Use final.\\n- [`9253700`](https://github.com/apache/commons-codec/commit/9253700b7308dc43f063c87014dce5ee80ee33e0) Remove trailing white spaces.\\n- Additional commits viewable in [compare view](https://github.com/apache/commons-codec/compare/1.7...commons-codec-1.13)\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=commons-codec:commons-codec&package-manager=maven&previous-version=1.7&new-version=1.13)](https://dependabot.com/compatibility-score.html?dependency-name=commons-codec:commons-codec&package-manager=maven&previous-version=1.7&new-version=1.13)\\n\\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 5 PRs for your first few update runs. Once an update run creates fewer than 5 PRs we'll remove that limit.\\n\\nYou can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n- `@dependabot badge me` will comment on this PR with code to add a \\\"Dependabot enabled\\\" badge to your readme\\n\\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\\n- Update frequency (including time of day and day of week)\\n- Pull request limits (per update run and/or open at any time)\\n- Out-of-range updates (receive only lockfile updates, if desired)\\n- Security updates (receive only security updates, if desired)\\n\\nFinally, you can contact us by mentioning @dependabot.\\n\\n</details>\"\n+    \"body\": \"Bumps [commons-codec](https://github.com/apache/commons-codec) from 1.7 to 1.13.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [commons-codec's changelog](https://github.com/apache/commons-codec/blob/main/RELEASE-NOTES.txt).*\\n\\n>               Apache Apache Commons Codec 1.13 RELEASE NOTES\\n> \\n> The Apache Commons Codec package contains simple encoder and decoders for\\n> various formats such as Base64 and Hexadecimal.  In addition to these\\n> widely used encoders and decoders, the codec package also maintains a\\n> collection of phonetic encoding utilities.\\n> \\n> Feature and fix release.\\n> \\n> Changes in this version include:\\n> \\n> New features:\\n> o CODEC-236:  MurmurHash2 for 32-bit or 64-bit value. Thanks to Viliam Holub.\\n> o CODEC-236:  MurmurHash3 for 32-bit or 128-bit value. Thanks to Austin Appleby.\\n> \\n> Fixed Bugs:\\n> o CODEC-255:  ColognePhonetic handles x incorrectly Thanks to Holger Grote.\\n> o CODEC-254:  ColognePhonetic does not treat the letter H correctly Thanks to Holger Grote.\\n> o CODEC-134:  Reject any decode request for a value that is impossible to encode to for Base32/Base64 rather than blindly decoding.\\n> \\n> Changes:\\n> o CODEC-236:  Broken direct java.nio.ByteBuffer support in org.apache.commons.codec.binary.Hex. Thanks to Tomas Shestakov, Gary Gregory.\\n> \\n> \\n> For complete information on Apache Commons Codec, including instructions on how to submit bug reports,\\n> patches, or suggestions for improvement, see the Apache Apache Commons Codec website:\\n> \\n> Visit https://commons.apache.org/proper/commons-codec/\\n> Download from https://commons.apache.org/proper/commons-codec/download_codec.cgi\\n> \\n> \\n> -------------------------------------------------------------------------------\\n> \\n>               Apache Commons Codec 1.12 RELEASE NOTES\\n> \\n> The Apache Commons Codec team is pleased to announce the commons-codec-1.12 release!\\n> \\n> The Apache Commons Codec package contains simple encoder and decoders for\\n>      various formats such as Base64 and Hexadecimal.  In addition to these\\n>      widely used encoders and decoders, the codec package also maintains a\\n>      collection of phonetic encoding utilities.\\n> \\n> Changes in this version include:\\n> \\n> New features:\\n> o Add Percent-Encoding Codec (described in RFC3986 and RFC7578)  Issue: CODEC-240. Thanks to Ioannis Sermetziadis.\\n> o Add SHA-3 methods in DigestUtils  Issue: CODEC-251. Thanks to Gary Gregory.\\n> \\n> Fixed Bugs:\\n> o B64 salt generator: Random -> ThreadLocalRandom  Issue: CODEC-252.\\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`beafa49`](https://github.com/apache/commons-codec/commit/beafa49f88be397f89b78d125d2c7c52b0114006) Fix the site's source repository link.\\n- [`4200d4d`](https://github.com/apache/commons-codec/commit/4200d4d9cbfb2cbfc7f6e783cceb06bb52963887) Fix the site's source repository link.\\n- [`20dc3ec`](https://github.com/apache/commons-codec/commit/20dc3ec2c6b41f9412ecf4a1cbe9bba10e1498ed) Prepare for the next release.\\n- [`7d309fc`](https://github.com/apache/commons-codec/commit/7d309fc952fa201c53ba277eee33b751f56cf50e) Update POM version numbers for Apache Commons Codec release 1.13\\n- [`47a55d2`](https://github.com/apache/commons-codec/commit/47a55d21515bf2ec49d2c1b4f2f83bf66a09a7c5) Prepare for the next release.\\n- [`3730126`](https://github.com/apache/commons-codec/commit/3730126d8a3fbf98533710e1c9f2ba18b91d53f2) Prepare for the next release.\\n- [`9969e7b`](https://github.com/apache/commons-codec/commit/9969e7b317777e151646923d302e856b163ba224) Prepare for the next release.\\n- [`fe39ffc`](https://github.com/apache/commons-codec/commit/fe39ffc076712fc8cd55c96fc5cb0eee2efe4847) Remove unnecessary type casts.\\n- [`3e6fb93`](https://github.com/apache/commons-codec/commit/3e6fb93250fb951ccd3b9597cd19b1c2243a77b1) Use final.\\n- [`9253700`](https://github.com/apache/commons-codec/commit/9253700b7308dc43f063c87014dce5ee80ee33e0) Remove trailing white spaces.\\n- Additional commits viewable in [compare view](https://github.com/apache/commons-codec/compare/1.7...commons-codec-1.13)\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=commons-codec:commons-codec&package-manager=maven&previous-version=1.7&new-version=1.13)](https://dependabot.com/compatibility-score.html?dependency-name=commons-codec:commons-codec&package-manager=maven&previous-version=1.7&new-version=1.13)\\n\\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 5 PRs for your first few update runs. Once an update run creates fewer than 5 PRs we'll remove that limit.\\n\\nYou can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n- `@dependabot badge me` will comment on this PR with code to add a \\\"Dependabot enabled\\\" badge to your readme\\n\\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\\n- Update frequency (including time of day and day of week)\\n- Pull request limits (per update run and/or open at any time)\\n- Out-of-range updates (receive only lockfile updates, if desired)\\n- Security updates (receive only security updates, if desired)\\n\\nFinally, you can contact us by mentioning @dependabot.\\n\\n</details>\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/550\",\n@@ -1108,7 +1108,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/538.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/538.patch\"\n     },\n-    \"body\": \"The [create a pull request API](https://developer.github.com/v3/pulls/#create-a-pull-request) does not require a namespace on the head branch when creating a pull request between two branches in the same repository.\\r\\n\\r\\nHowever, the [list pull requests API](https://developer.github.com/v3/pulls/#list-pull-requests) **does** require a namespace on the `head` value in order to work properly. If the namespace is omitted, the call _ignores_ the `head` parameter entirely, returning all pull requests that match on the other criteria.\\r\\n\\r\\nIn my opinion, this seems like an oversight in the API and creates quite a pitfall.\\r\\n\\r\\nFor example, creating a pull request between two branches in the same repository looks like:\\r\\n`repository.createPullRequest(\\\"title\\\", \\\"my-branch\\\", \\\"master\\\", null);`\\r\\nBut the query to pull back the newly created pull request must look like:\\r\\n`repository.queryPullRequests().state(GHIssueState.OPEN).head(\\\"my-org:my-branch\\\").base(\\\"master\\\").list();`\\r\\nForgetting the `my-org:` results in all open pull-requests into the master branch being returned, which is clearly not what was intended in the query.\\r\\n\\r\\nThis change causes the `head` value to be namespaced by default if a non-namespaced value is provided, given that providing a non-namespaced value is effectively the same as `null` and will never behave as the developer intended.\"\n+    \"body\": \"The [create a pull request API](https://developer.github.com/v3/pulls/#create-a-pull-request) does not require a namespace on the head branch when creating a pull request between two branches in the same repository.\\r\\n\\r\\nHowever, the [list pull requests API](https://developer.github.com/v3/pulls/#list-pull-requests) **does** require a namespace on the `head` value in order to work properly. If the namespace is omitted, the call _ignores_ the `head` parameter entirely, returning all pull requests that match on the other criteria.\\r\\n\\r\\nIn my opinion, this seems like an oversight in the API and creates quite a pitfall.\\r\\n\\r\\nFor example, creating a pull request between two branches in the same repository looks like:\\r\\n`repository.createPullRequest(\\\"title\\\", \\\"my-branch\\\", \\\"main\\\", null);`\\r\\nBut the query to pull back the newly created pull request must look like:\\r\\n`repository.queryPullRequests().state(GHIssueState.OPEN).head(\\\"my-org:my-branch\\\").base(\\\"main\\\").list();`\\r\\nForgetting the `my-org:` results in all open pull-requests into the main branch being returned, which is clearly not what was intended in the query.\\r\\n\\r\\nThis change causes the `head` value to be namespaced by default if a non-namespaced value is provided, given that providing a non-namespaced value is effectively the same as `null` and will never behave as the developer intended.\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/537\","
    },
    {
      "sha": "fbd4438cbf01dfde2d4e8edd80c2d1216ee44043",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-10.json",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-10.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-10.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-10.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -499,7 +499,7 @@\n     \"updated_at\": \"2016-07-19T21:44:19Z\",\n     \"closed_at\": \"2016-07-19T15:00:30Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"Hello,\\n\\nI have built a tool using your API, which has been working for many months now, but suddenly fails due to a `FileNotFoundException` thrown by `getInputStrem` in OKHttp. When I paste the url it is trying to download, into my browser, it works perfectly fine. I can see the file contents. This is very strange. Do you have any clue about this?\\n\\nStack trace:\\n\\n```\\ntables [ERROR] [07/12/2016 12:15:41.086] [TableService-akka.actor.default-dispatcher-8] [akka://TableService/user/simple-service-actor] Error during processing of request HttpRequest(POST,http://localhost:8084/api/metadata/list,List(Host: localhost:8084, Connection: keep-alive, Content-Length: 59, Origin: http://localhost:8084, X-Requested-With: XMLHttpRequest, User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36 OPR/38.0.2220.41, Content-Type: application/json, Referer: http://localhost:8084/, Accept-Encoding: gzip, deflate, lzma, Accept-Language: en-US, en;q=0.8, Cookie: tablestore-data-git=eyJhY2Nlc3NUb2tlbiI6ImYyZDI1OTViNGQ4OTMwMjIwMGI2YjE2MjNhNzQ3ZjQ3MzI1ZWJkOWMifQ==; tablestore-data-git2=eyJhY2Nlc3NUb2tlbiI6ImZlYmMxYTRlYjA1MmI4OWJlNDQwOWFmODk3OGNkYWFhYWY1OWZlNWEifQ==),HttpEntity(application/json,{\\\"repo\\\":\\\"aristo-tables\\\",\\\"fork\\\":\\\"allenai\\\",\\\"branch\\\":\\\"master\\\"}),HTTP/1.1)\\ntables java.io.FileNotFoundException: 400: Invalid request\\ntables \\ntables  at org.kohsuke.github.Requester.handleApiError(Requester.java:527)\\ntables  at org.kohsuke.github.Requester.asStream(Requester.java:293)\\ntables  at org.kohsuke.github.GHContent.read(GHContent.java:118)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getCsvFileLocal$1.apply(GitHubUtil.scala:420)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getCsvFileLocal$1.apply(GitHubUtil.scala:417)\\ntables  at scala.Option.foreach(Option.scala:257)\\ntables  at org.allenai.ari.tables.GitHubUtil.getCsvFileLocal(GitHubUtil.scala:417)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$7.apply(GitHubUtil.scala:239)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$7.apply(GitHubUtil.scala:236)\\ntables  at scala.collection.parallel.mutable.ParArray$ParArrayIterator.flatmap2combiner(ParArray.scala:417)\\ntables  at scala.collection.parallel.ParIterableLike$FlatMap.leaf(ParIterableLike.scala:1072)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\\ntables  at scala.collection.parallel.ParIterableLike$FlatMap.tryLeaf(ParIterableLike.scala:1068)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.internal(Tasks.scala:159)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.internal(Tasks.scala:443)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:149)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\\ntables  at scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doJoin(ForkJoinTask.java:341)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.join(ForkJoinTask.java:673)\\ntables  at scala.collection.parallel.ForkJoinTasks$WrappedTask$class.sync(Tasks.scala:378)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.sync(Tasks.scala:443)\\ntables  at scala.collection.parallel.ForkJoinTasks$class.executeAndWaitResult(Tasks.scala:426)\\ntables  at scala.collection.parallel.ForkJoinTaskSupport.executeAndWaitResult(TaskSupport.scala:56)\\ntables  at scala.collection.parallel.ExecutionContextTasks$class.executeAndWaitResult(Tasks.scala:558)\\ntables  at scala.collection.parallel.ExecutionContextTaskSupport.executeAndWaitResult(TaskSupport.scala:80)\\ntables  at scala.collection.parallel.ParIterableLike$ResultMapping.leaf(ParIterableLike.scala:958)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\\ntables  at scala.collection.parallel.ParIterableLike$ResultMapping.tryLeaf(ParIterableLike.scala:953)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:152)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\\ntables  at scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doJoin(ForkJoinTask.java:341)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.join(ForkJoinTask.java:673)\\ntables  at scala.collection.parallel.ForkJoinTasks$WrappedTask$class.sync(Tasks.scala:378)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.sync(Tasks.scala:443)\\ntables  at scala.collection.parallel.ForkJoinTasks$class.executeAndWaitResult(Tasks.scala:426)\\ntables  at scala.collection.parallel.ForkJoinTaskSupport.executeAndWaitResult(TaskSupport.scala:56)\\ntables  at scala.collection.parallel.ExecutionContextTasks$class.executeAndWaitResult(Tasks.scala:558)\\ntables  at scala.collection.parallel.ExecutionContextTaskSupport.executeAndWaitResult(TaskSupport.scala:80)\\ntables  at scala.collection.parallel.ParIterableLike$class.flatMap(ParIterableLike.scala:513)\\ntables  at scala.collection.parallel.mutable.ParArray.flatMap(ParArray.scala:56)\\ntables  at org.allenai.ari.tables.GitHubUtil.org$allenai$ari$tables$GitHubUtil$$getTableMetadata(GitHubUtil.scala:236)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getTableMetadata$2.apply(GitHubUtil.scala:229)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getTableMetadata$2.apply(GitHubUtil.scala:229)\\ntables  at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251)\\ntables  at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249)\\ntables  at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:32)\\ntables  at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.scala:91)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91)\\ntables  at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:72)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:90)\\ntables  at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:39)\\ntables  at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:399)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\\ntables  at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\\ntables  at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\\ntables  at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\\ntables Caused by: java.io.FileNotFoundException: https://raw.githubusercontent.com/allenai/aristo-tables/master/tables/abstract_concrete/abstract_concrete.csv?token=AFXsrivOTIoDru9Htw9aNTJbprmE5m0Gks5XhUHfwA%3D%3D\\ntables  at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getInputStream(HttpURLConnectionImpl.java:228)\\ntables  at com.squareup.okhttp.internal.huc.DelegatingHttpsURLConnection.getInputStream(DelegatingHttpsURLConnection.java:210)\\ntables  at com.squareup.okhttp.internal.huc.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:25)\\ntables  at org.kohsuke.github.Requester.asStream(Requester.java:291)\\ntables  ... 66 more\\n```\\n\\nYour help is greatly appreciated,\\nSumithra\\n\"\n+    \"body\": \"Hello,\\n\\nI have built a tool using your API, which has been working for many months now, but suddenly fails due to a `FileNotFoundException` thrown by `getInputStrem` in OKHttp. When I paste the url it is trying to download, into my browser, it works perfectly fine. I can see the file contents. This is very strange. Do you have any clue about this?\\n\\nStack trace:\\n\\n```\\ntables [ERROR] [07/12/2016 12:15:41.086] [TableService-akka.actor.default-dispatcher-8] [akka://TableService/user/simple-service-actor] Error during processing of request HttpRequest(POST,http://localhost:8084/api/metadata/list,List(Host: localhost:8084, Connection: keep-alive, Content-Length: 59, Origin: http://localhost:8084, X-Requested-With: XMLHttpRequest, User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36 OPR/38.0.2220.41, Content-Type: application/json, Referer: http://localhost:8084/, Accept-Encoding: gzip, deflate, lzma, Accept-Language: en-US, en;q=0.8, Cookie: tablestore-data-git=eyJhY2Nlc3NUb2tlbiI6ImYyZDI1OTViNGQ4OTMwMjIwMGI2YjE2MjNhNzQ3ZjQ3MzI1ZWJkOWMifQ==; tablestore-data-git2=eyJhY2Nlc3NUb2tlbiI6ImZlYmMxYTRlYjA1MmI4OWJlNDQwOWFmODk3OGNkYWFhYWY1OWZlNWEifQ==),HttpEntity(application/json,{\\\"repo\\\":\\\"aristo-tables\\\",\\\"fork\\\":\\\"allenai\\\",\\\"branch\\\":\\\"main\\\"}),HTTP/1.1)\\ntables java.io.FileNotFoundException: 400: Invalid request\\ntables \\ntables  at org.kohsuke.github.Requester.handleApiError(Requester.java:527)\\ntables  at org.kohsuke.github.Requester.asStream(Requester.java:293)\\ntables  at org.kohsuke.github.GHContent.read(GHContent.java:118)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getCsvFileLocal$1.apply(GitHubUtil.scala:420)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getCsvFileLocal$1.apply(GitHubUtil.scala:417)\\ntables  at scala.Option.foreach(Option.scala:257)\\ntables  at org.allenai.ari.tables.GitHubUtil.getCsvFileLocal(GitHubUtil.scala:417)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$7.apply(GitHubUtil.scala:239)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$7.apply(GitHubUtil.scala:236)\\ntables  at scala.collection.parallel.mutable.ParArray$ParArrayIterator.flatmap2combiner(ParArray.scala:417)\\ntables  at scala.collection.parallel.ParIterableLike$FlatMap.leaf(ParIterableLike.scala:1072)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\\ntables  at scala.collection.parallel.ParIterableLike$FlatMap.tryLeaf(ParIterableLike.scala:1068)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.internal(Tasks.scala:159)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.internal(Tasks.scala:443)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:149)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\\ntables  at scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doJoin(ForkJoinTask.java:341)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.join(ForkJoinTask.java:673)\\ntables  at scala.collection.parallel.ForkJoinTasks$WrappedTask$class.sync(Tasks.scala:378)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.sync(Tasks.scala:443)\\ntables  at scala.collection.parallel.ForkJoinTasks$class.executeAndWaitResult(Tasks.scala:426)\\ntables  at scala.collection.parallel.ForkJoinTaskSupport.executeAndWaitResult(TaskSupport.scala:56)\\ntables  at scala.collection.parallel.ExecutionContextTasks$class.executeAndWaitResult(Tasks.scala:558)\\ntables  at scala.collection.parallel.ExecutionContextTaskSupport.executeAndWaitResult(TaskSupport.scala:80)\\ntables  at scala.collection.parallel.ParIterableLike$ResultMapping.leaf(ParIterableLike.scala:958)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\\ntables  at scala.collection.parallel.ParIterableLike$ResultMapping.tryLeaf(ParIterableLike.scala:953)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:152)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\\ntables  at scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doJoin(ForkJoinTask.java:341)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.join(ForkJoinTask.java:673)\\ntables  at scala.collection.parallel.ForkJoinTasks$WrappedTask$class.sync(Tasks.scala:378)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.sync(Tasks.scala:443)\\ntables  at scala.collection.parallel.ForkJoinTasks$class.executeAndWaitResult(Tasks.scala:426)\\ntables  at scala.collection.parallel.ForkJoinTaskSupport.executeAndWaitResult(TaskSupport.scala:56)\\ntables  at scala.collection.parallel.ExecutionContextTasks$class.executeAndWaitResult(Tasks.scala:558)\\ntables  at scala.collection.parallel.ExecutionContextTaskSupport.executeAndWaitResult(TaskSupport.scala:80)\\ntables  at scala.collection.parallel.ParIterableLike$class.flatMap(ParIterableLike.scala:513)\\ntables  at scala.collection.parallel.mutable.ParArray.flatMap(ParArray.scala:56)\\ntables  at org.allenai.ari.tables.GitHubUtil.org$allenai$ari$tables$GitHubUtil$$getTableMetadata(GitHubUtil.scala:236)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getTableMetadata$2.apply(GitHubUtil.scala:229)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getTableMetadata$2.apply(GitHubUtil.scala:229)\\ntables  at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251)\\ntables  at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249)\\ntables  at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:32)\\ntables  at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.scala:91)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91)\\ntables  at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:72)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:90)\\ntables  at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:39)\\ntables  at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:399)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\\ntables  at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\\ntables  at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\\ntables  at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\\ntables Caused by: java.io.FileNotFoundException: https://raw.githubusercontent.com/allenai/aristo-tables/main/tables/abstract_concrete/abstract_concrete.csv?token=AFXsrivOTIoDru9Htw9aNTJbprmE5m0Gks5XhUHfwA%3D%3D\\ntables  at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getInputStream(HttpURLConnectionImpl.java:228)\\ntables  at com.squareup.okhttp.internal.huc.DelegatingHttpsURLConnection.getInputStream(DelegatingHttpsURLConnection.java:210)\\ntables  at com.squareup.okhttp.internal.huc.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:25)\\ntables  at org.kohsuke.github.Requester.asStream(Requester.java:291)\\ntables  ... 66 more\\n```\\n\\nYour help is greatly appreciated,\\nSumithra\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/287\",\n@@ -587,7 +587,7 @@\n     \"updated_at\": \"2016-08-09T01:25:00Z\",\n     \"closed_at\": \"2016-08-06T04:10:32Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"I'm researching deeper, but with 1.72 I get:\\n\\nremaining calls 4364\\nabout to look up repo  EVCache\\n2016-06-28 21:28:20 INFO  GithubAccess:53 - repo = EVCache, forks = 82, stars = 314\\n2016-06-28 21:28:20 DEBUG GithubAccess:56 -   openIssues = 0, openPullRequests = 0\\n2016-06-28 21:28:22 DEBUG GithubAccess:107 - daysSinceLastCommit = 0\\n2016-06-28 21:28:23 DEBUG GithubAccess:111 - numContribitors = 16, contributorEmails = ArrayBuffer(smadappa, senugula, jkschneider, vuzilla, ScottMansfield, rspieldenner, elandau, gitter-badger, rdegnan, nadavc, aspyker, trigan-d, pauloricardomg, kedargsm, quidryan, Randgalt)\\n2016-06-28 21:28:24 DEBUG GithubAccess:146 - avg days to close 14 issues = 357 days\\n2016-06-28 21:28:24 DEBUG GithubAccess:128 - avg days to close 13 pull requests = 185 days\\n2016-06-28 21:28:24 DEBUG GithubAccess:96 - repo json = {\\\"asOfISO\\\":\\\"2016-06-29T04:27:43Z\\\",\\\"asOfYYYYMMDD\\\":\\\"2016-06-29\\\",\\\"repo_name\\\":\\\"EVCache\\\",\\\"public\\\":true,\\\"osslifecycle\\\":\\\"UNKNOWN\\\",\\\"forks\\\":82,\\\"stars\\\":314,\\\"numContributors\\\":16,\\\"issues\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":14,\\\"avgTimeToCloseInDays\\\":357},\\\"pullRequests\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":13,\\\"avgTimeToCloseInDays\\\":185},\\\"commits\\\":{\\\"daysSinceLastCommit\\\":0},\\\"contributors\\\":[\\\"smadappa\\\",\\\"senugula\\\",\\\"jkschneider\\\",\\\"vuzilla\\\",\\\"ScottMansfield\\\",\\\"rspieldenner\\\",\\\"elandau\\\",\\\"gitter-badger\\\",\\\"rdegnan\\\",\\\"nadavc\\\",\\\"aspyker\\\",\\\"trigan-d\\\",\\\"pauloricardomg\\\",\\\"kedargsm\\\",\\\"quidryan\\\",\\\"Randgalt\\\"]}\\nremaining calls 4341\\n\\nresulting in 23 API calls\\n\\nwith 1.76, I get:\\n\\nremaining calls 4640\\nabout to look up repo  EVCache\\n2016-06-28 21:22:22 INFO  GithubAccess:53 - repo = EVCache, forks = 82, stars = 314\\n2016-06-28 21:22:22 DEBUG GithubAccess:56 -   openIssues = 0, openPullRequests = 0\\n2016-06-28 21:23:01 DEBUG GithubAccess:107 - daysSinceLastCommit = 0\\n2016-06-28 21:23:03 DEBUG GithubAccess:111 - numContribitors = 16, contributorEmails = ArrayBuffer(smadappa, senugula, jkschneider, vuzilla, ScottMansfield, rspieldenner, elandau, gitter-badger, rdegnan, nadavc, aspyker, trigan-d, pauloricardomg, kedargsm, quidryan, Randgalt)\\n2016-06-28 21:23:04 DEBUG GithubAccess:146 - avg days to close 14 issues = 357 days\\n2016-06-28 21:23:04 DEBUG GithubAccess:128 - avg days to close 13 pull requests = 185 days\\n2016-06-28 21:23:04 DEBUG GithubAccess:96 - repo json = {\\\"asOfISO\\\":\\\"2016-06-29T04:20:26Z\\\",\\\"asOfYYYYMMDD\\\":\\\"2016-06-29\\\",\\\"repo_name\\\":\\\"EVCache\\\",\\\"public\\\":true,\\\"osslifecycle\\\":\\\"UNKNOWN\\\",\\\"forks\\\":82,\\\"stars\\\":314,\\\"numContributors\\\":16,\\\"issues\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":14,\\\"avgTimeToCloseInDays\\\":357},\\\"pullRequests\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":13,\\\"avgTimeToCloseInDays\\\":185},\\\"commits\\\":{\\\"daysSinceLastCommit\\\":0},\\\"contributors\\\":[\\\"smadappa\\\",\\\"senugula\\\",\\\"jkschneider\\\",\\\"vuzilla\\\",\\\"ScottMansfield\\\",\\\"rspieldenner\\\",\\\"elandau\\\",\\\"gitter-badger\\\",\\\"rdegnan\\\",\\\"nadavc\\\",\\\"aspyker\\\",\\\"trigan-d\\\",\\\"pauloricardomg\\\",\\\"kedargsm\\\",\\\"quidryan\\\",\\\"Randgalt\\\"]}\\nremaining calls 4409\\n\\nresulting in 231 API calls\\n\\nThis is running this code:\\n\\nhttps://github.com/Netflix/osstracker/blob/master/osstracker-scraper/src/main/scala/com/netflix/oss/tools/osstrackerscraper/GithubAccess.scala#L52\\n\"\n+    \"body\": \"I'm researching deeper, but with 1.72 I get:\\n\\nremaining calls 4364\\nabout to look up repo  EVCache\\n2016-06-28 21:28:20 INFO  GithubAccess:53 - repo = EVCache, forks = 82, stars = 314\\n2016-06-28 21:28:20 DEBUG GithubAccess:56 -   openIssues = 0, openPullRequests = 0\\n2016-06-28 21:28:22 DEBUG GithubAccess:107 - daysSinceLastCommit = 0\\n2016-06-28 21:28:23 DEBUG GithubAccess:111 - numContribitors = 16, contributorEmails = ArrayBuffer(smadappa, senugula, jkschneider, vuzilla, ScottMansfield, rspieldenner, elandau, gitter-badger, rdegnan, nadavc, aspyker, trigan-d, pauloricardomg, kedargsm, quidryan, Randgalt)\\n2016-06-28 21:28:24 DEBUG GithubAccess:146 - avg days to close 14 issues = 357 days\\n2016-06-28 21:28:24 DEBUG GithubAccess:128 - avg days to close 13 pull requests = 185 days\\n2016-06-28 21:28:24 DEBUG GithubAccess:96 - repo json = {\\\"asOfISO\\\":\\\"2016-06-29T04:27:43Z\\\",\\\"asOfYYYYMMDD\\\":\\\"2016-06-29\\\",\\\"repo_name\\\":\\\"EVCache\\\",\\\"public\\\":true,\\\"osslifecycle\\\":\\\"UNKNOWN\\\",\\\"forks\\\":82,\\\"stars\\\":314,\\\"numContributors\\\":16,\\\"issues\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":14,\\\"avgTimeToCloseInDays\\\":357},\\\"pullRequests\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":13,\\\"avgTimeToCloseInDays\\\":185},\\\"commits\\\":{\\\"daysSinceLastCommit\\\":0},\\\"contributors\\\":[\\\"smadappa\\\",\\\"senugula\\\",\\\"jkschneider\\\",\\\"vuzilla\\\",\\\"ScottMansfield\\\",\\\"rspieldenner\\\",\\\"elandau\\\",\\\"gitter-badger\\\",\\\"rdegnan\\\",\\\"nadavc\\\",\\\"aspyker\\\",\\\"trigan-d\\\",\\\"pauloricardomg\\\",\\\"kedargsm\\\",\\\"quidryan\\\",\\\"Randgalt\\\"]}\\nremaining calls 4341\\n\\nresulting in 23 API calls\\n\\nwith 1.76, I get:\\n\\nremaining calls 4640\\nabout to look up repo  EVCache\\n2016-06-28 21:22:22 INFO  GithubAccess:53 - repo = EVCache, forks = 82, stars = 314\\n2016-06-28 21:22:22 DEBUG GithubAccess:56 -   openIssues = 0, openPullRequests = 0\\n2016-06-28 21:23:01 DEBUG GithubAccess:107 - daysSinceLastCommit = 0\\n2016-06-28 21:23:03 DEBUG GithubAccess:111 - numContribitors = 16, contributorEmails = ArrayBuffer(smadappa, senugula, jkschneider, vuzilla, ScottMansfield, rspieldenner, elandau, gitter-badger, rdegnan, nadavc, aspyker, trigan-d, pauloricardomg, kedargsm, quidryan, Randgalt)\\n2016-06-28 21:23:04 DEBUG GithubAccess:146 - avg days to close 14 issues = 357 days\\n2016-06-28 21:23:04 DEBUG GithubAccess:128 - avg days to close 13 pull requests = 185 days\\n2016-06-28 21:23:04 DEBUG GithubAccess:96 - repo json = {\\\"asOfISO\\\":\\\"2016-06-29T04:20:26Z\\\",\\\"asOfYYYYMMDD\\\":\\\"2016-06-29\\\",\\\"repo_name\\\":\\\"EVCache\\\",\\\"public\\\":true,\\\"osslifecycle\\\":\\\"UNKNOWN\\\",\\\"forks\\\":82,\\\"stars\\\":314,\\\"numContributors\\\":16,\\\"issues\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":14,\\\"avgTimeToCloseInDays\\\":357},\\\"pullRequests\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":13,\\\"avgTimeToCloseInDays\\\":185},\\\"commits\\\":{\\\"daysSinceLastCommit\\\":0},\\\"contributors\\\":[\\\"smadappa\\\",\\\"senugula\\\",\\\"jkschneider\\\",\\\"vuzilla\\\",\\\"ScottMansfield\\\",\\\"rspieldenner\\\",\\\"elandau\\\",\\\"gitter-badger\\\",\\\"rdegnan\\\",\\\"nadavc\\\",\\\"aspyker\\\",\\\"trigan-d\\\",\\\"pauloricardomg\\\",\\\"kedargsm\\\",\\\"quidryan\\\",\\\"Randgalt\\\"]}\\nremaining calls 4409\\n\\nresulting in 231 API calls\\n\\nThis is running this code:\\n\\nhttps://github.com/Netflix/osstracker/blob/main/osstracker-scraper/src/main/scala/com/netflix/oss/tools/osstrackerscraper/GithubAccess.scala#L52\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/285\",\n@@ -1251,7 +1251,7 @@\n     \"updated_at\": \"2016-06-03T05:08:19Z\",\n     \"closed_at\": \"2016-06-03T05:08:19Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"We've run into an issue when GitHub.getRateLimit hangs the thread.\\nHere is the thread stack trace:\\n\\n```\\n\\\"jenkins.util.Timer [#4]\\\" Id=48 Group=main RUNNABLE (in native)\\n    at java.net.SocketInputStream.socketRead0(Native Method)\\n    at java.net.SocketInputStream.read(SocketInputStream.java:152)\\n    at java.net.SocketInputStream.read(SocketInputStream.java:122)\\n    at sun.security.ssl.InputRecord.readFully(InputRecord.java:442)\\n    at sun.security.ssl.InputRecord.read(InputRecord.java:480)\\n    at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:946)\\n    -  locked java.lang.Object@4be77f76\\n    at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:903)\\n    at sun.security.ssl.AppInputStream.read(AppInputStream.java:102)\\n    -  locked sun.security.ssl.AppInputStream@5e6fb401\\n    at java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\\n    at java.io.BufferedInputStream.read1(BufferedInputStream.java:275)\\n    at java.io.BufferedInputStream.read(BufferedInputStream.java:334)\\n    -  locked java.io.BufferedInputStream@7792de16\\n    at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:690)\\n    at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:633)\\n    at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1325)\\n    -  locked sun.net.www.protocol.https.DelegateHttpsURLConnection@6db28b13\\n    at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:468)\\n    at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338)\\n    at org.kohsuke.github.Requester.parse(Requester.java:454)\\n    at org.kohsuke.github.Requester._to(Requester.java:227)\\n    at org.kohsuke.github.Requester.to(Requester.java:194)\\n    at org.kohsuke.github.GitHub.getRateLimit(GitHub.java:245)\\n    at org.jenkinsci.plugins.ghprb.GhprbRepository.initGhRepository(GhprbRepository.java:66)\\n    at org.jenkinsci.plugins.ghprb.GhprbRepository.check(GhprbRepository.java:88)\\n    at org.jenkinsci.plugins.ghprb.Ghprb.run(Ghprb.java:119)\\n    at org.jenkinsci.plugins.ghprb.GhprbTrigger.run(GhprbTrigger.java:219)\\n    at hudson.triggers.Trigger.checkTriggers(Trigger.java:272)\\n    at hudson.triggers.Trigger$Cron.doRun(Trigger.java:221)\\n    at hudson.triggers.SafeTimerTask.run(SafeTimerTask.java:50)\\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)\\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)\\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\\n    at java.lang.Thread.run(Thread.java:745)\\n\\n    Number of locked synchronizers = 1\\n    - java.util.concurrent.ThreadPoolExecutor$Worker@6b1824c6\\n```\\n\\nThere is a possibility that https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/Requester.java#L486 will never return an aswer.\\n\\nI think, `uc.setTimeout(60 * 1000);` here https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/Requester.java#L453 should fix the problem.\\n\"\n+    \"body\": \"We've run into an issue when GitHub.getRateLimit hangs the thread.\\nHere is the thread stack trace:\\n\\n```\\n\\\"jenkins.util.Timer [#4]\\\" Id=48 Group=main RUNNABLE (in native)\\n    at java.net.SocketInputStream.socketRead0(Native Method)\\n    at java.net.SocketInputStream.read(SocketInputStream.java:152)\\n    at java.net.SocketInputStream.read(SocketInputStream.java:122)\\n    at sun.security.ssl.InputRecord.readFully(InputRecord.java:442)\\n    at sun.security.ssl.InputRecord.read(InputRecord.java:480)\\n    at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:946)\\n    -  locked java.lang.Object@4be77f76\\n    at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:903)\\n    at sun.security.ssl.AppInputStream.read(AppInputStream.java:102)\\n    -  locked sun.security.ssl.AppInputStream@5e6fb401\\n    at java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\\n    at java.io.BufferedInputStream.read1(BufferedInputStream.java:275)\\n    at java.io.BufferedInputStream.read(BufferedInputStream.java:334)\\n    -  locked java.io.BufferedInputStream@7792de16\\n    at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:690)\\n    at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:633)\\n    at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1325)\\n    -  locked sun.net.www.protocol.https.DelegateHttpsURLConnection@6db28b13\\n    at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:468)\\n    at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338)\\n    at org.kohsuke.github.Requester.parse(Requester.java:454)\\n    at org.kohsuke.github.Requester._to(Requester.java:227)\\n    at org.kohsuke.github.Requester.to(Requester.java:194)\\n    at org.kohsuke.github.GitHub.getRateLimit(GitHub.java:245)\\n    at org.jenkinsci.plugins.ghprb.GhprbRepository.initGhRepository(GhprbRepository.java:66)\\n    at org.jenkinsci.plugins.ghprb.GhprbRepository.check(GhprbRepository.java:88)\\n    at org.jenkinsci.plugins.ghprb.Ghprb.run(Ghprb.java:119)\\n    at org.jenkinsci.plugins.ghprb.GhprbTrigger.run(GhprbTrigger.java:219)\\n    at hudson.triggers.Trigger.checkTriggers(Trigger.java:272)\\n    at hudson.triggers.Trigger$Cron.doRun(Trigger.java:221)\\n    at hudson.triggers.SafeTimerTask.run(SafeTimerTask.java:50)\\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)\\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)\\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\\n    at java.lang.Thread.run(Thread.java:745)\\n\\n    Number of locked synchronizers = 1\\n    - java.util.concurrent.ThreadPoolExecutor$Worker@6b1824c6\\n```\\n\\nThere is a possibility that https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/Requester.java#L486 will never return an aswer.\\n\\nI think, `uc.setTimeout(60 * 1000);` here https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/Requester.java#L453 should fix the problem.\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/270\","
    },
    {
      "sha": "97f9af4145d08a7a635952fb15ae18fdaa309673",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-11.json",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-11.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-11.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-11.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -135,7 +135,7 @@\n     \"updated_at\": \"2016-06-03T06:50:17Z\",\n     \"closed_at\": \"2016-06-03T06:50:17Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GHRepository.java#L589\\n\\nThe \\\"forkTo\\\" method, however, does have some nice blocking in place.\\n\"\n+    \"body\": \"https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GHRepository.java#L589\\n\\nThe \\\"forkTo\\\" method, however, does have some nice blocking in place.\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/263\",\n@@ -405,7 +405,7 @@\n     \"updated_at\": \"2016-06-04T06:34:28Z\",\n     \"closed_at\": \"2016-06-04T03:31:19Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"Hi @kohsuke,\\n\\nI would appreciate your help on this.\\n\\nI have used the `HttpConnector` and have specified a cache directory in my server. I am using OAuth and it looks like my quota is 5000 requests, based on this sample cache file:\\n\\n```\\nhttps://api.github.com/repos/allenai/aristo-tables/contents/tables/weather_terms?ref=master\\nGET\\n2\\nAuthorization: token e381d0427927aef5e2858ac06b6cb01a34b0a603\\nAccept-Encoding: gzip\\nHTTP/1.1 200 OK\\n30\\nServer: GitHub.com\\nDate: Thu, 10 Mar 2016 20:57:33 GMT\\nContent-Type: application/json; charset=utf-8\\nTransfer-Encoding: chunked\\nStatus: 200 OK\\n**X-RateLimit-Limit: 5000**\\nX-RateLimit-Remaining: 4689\\nX-RateLimit-Reset: 1457646852\\nCache-Control: private, max-age=60, s-maxage=60\\nVary: Accept, Authorization, Cookie, X-GitHub-OTP\\nETag: W/\\\"c2dc693298f7806038e984d1ac857ffb\\\"\\nLast-Modified: Tue, 08 Mar 2016 23:54:00 GMT\\nX-OAuth-Scopes: read:repo_hook, repo\\nX-Accepted-OAuth-Scopes:\\nX-OAuth-Client-Id: 47355241bdf02ac9122d\\nX-GitHub-Media-Type: github.v3; format=json\\nAccess-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\\nAccess-Control-Allow-Origin: *\\nContent-Security-Policy: default-src 'none'\\nStrict-Transport-Security: max-age=31536000; includeSubdomains; preload\\nX-Content-Type-Options: nosniff\\nX-Frame-Options: deny\\nX-XSS-Protection: 1; mode=block\\nVary: Accept-Encoding\\nX-Served-By: 01d096e6cfe28f8aea352e988c332cd3\\nContent-Encoding: gzip\\nX-GitHub-Request-Id: 36D5C9C0:101B5:A516A26:56E1DFBD\\nOkHttp-Selected-Protocol: http/1.1\\nOkHttp-Sent-Millis: 1457643453839\\nOkHttp-Received-Millis: 1457643453959\\n```\\n\\nMy client refreshes periodically to be in sync with the repo, however, even though there has been no change in the repo, I run out of API rate limit every now and then. I thought it should just be reading from the cache. \\n\\nThe following call gets executed on every refresh:\\n\\n```\\n  private def getTableDirs(\\n    oauthAccessToken: String,\\n    repo: GitRepoInfo,\\n    tableNamesFilter: Option[Seq[String]]\\n  ): Seq[GHContent] = {\\n    blocking {\\n      // Create a GitHubBuilder to be able to build a GitHub object with required\\n      // RateLimitHandler strategy and OAuth parameters. Instead of waiting, this will\\n      // throw an exception immediately if the request limit is exceeded.\\n      val gitHubBuilder =\\n        new GitHubBuilder()\\n          .withRateLimitHandler(RateLimitHandler.FAIL)\\n          .withOAuthToken(oauthAccessToken)\\n          .withConnector(\\n            new OkHttpConnector(\\n              new OkUrlFactory(\\n                new OkHttpClient().setCache(cache))))\\n      val github = gitHubBuilder.build()\\n\\n      // Get the requested repo.\\n      val repoName = repo.fork + \\\"/\\\" + repo.repo\\n      val repository = github.getRepository(repoName)\\n      // Get all directories (expected to be Table directories) from the top level of the repo.\\n      val allTableDirs =\\n        repository.getDirectoryContent(\\\"tables\\\", repo.branch).asScala.filter(_.isDirectory)\\n      // If there is a filter, restrict returned table directories to that set, if not return all.\\n      tableNamesFilter match {\\n        case Some(filter) =>\\n          val tableSet = filter.map(_.toLowerCase).toSet\\n          allTableDirs.filter(d => tableSet.contains(d.getName.toLowerCase))\\n        case None =>\\n          allTableDirs\\n      }\\n    }\\n  }\\n```\\n\\nFurther, there are other calls like `ghContent.read` -- is each of these a separate request to Git? Even so, I wouldn't think they would be called every time but just looked up from the cache.\\n\\nAny ideas?\\n\"\n+    \"body\": \"Hi @kohsuke,\\n\\nI would appreciate your help on this.\\n\\nI have used the `HttpConnector` and have specified a cache directory in my server. I am using OAuth and it looks like my quota is 5000 requests, based on this sample cache file:\\n\\n```\\nhttps://api.github.com/repos/allenai/aristo-tables/contents/tables/weather_terms?ref=main\\nGET\\n2\\nAuthorization: token e381d0427927aef5e2858ac06b6cb01a34b0a603\\nAccept-Encoding: gzip\\nHTTP/1.1 200 OK\\n30\\nServer: GitHub.com\\nDate: Thu, 10 Mar 2016 20:57:33 GMT\\nContent-Type: application/json; charset=utf-8\\nTransfer-Encoding: chunked\\nStatus: 200 OK\\n**X-RateLimit-Limit: 5000**\\nX-RateLimit-Remaining: 4689\\nX-RateLimit-Reset: 1457646852\\nCache-Control: private, max-age=60, s-maxage=60\\nVary: Accept, Authorization, Cookie, X-GitHub-OTP\\nETag: W/\\\"c2dc693298f7806038e984d1ac857ffb\\\"\\nLast-Modified: Tue, 08 Mar 2016 23:54:00 GMT\\nX-OAuth-Scopes: read:repo_hook, repo\\nX-Accepted-OAuth-Scopes:\\nX-OAuth-Client-Id: 47355241bdf02ac9122d\\nX-GitHub-Media-Type: github.v3; format=json\\nAccess-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\\nAccess-Control-Allow-Origin: *\\nContent-Security-Policy: default-src 'none'\\nStrict-Transport-Security: max-age=31536000; includeSubdomains; preload\\nX-Content-Type-Options: nosniff\\nX-Frame-Options: deny\\nX-XSS-Protection: 1; mode=block\\nVary: Accept-Encoding\\nX-Served-By: 01d096e6cfe28f8aea352e988c332cd3\\nContent-Encoding: gzip\\nX-GitHub-Request-Id: 36D5C9C0:101B5:A516A26:56E1DFBD\\nOkHttp-Selected-Protocol: http/1.1\\nOkHttp-Sent-Millis: 1457643453839\\nOkHttp-Received-Millis: 1457643453959\\n```\\n\\nMy client refreshes periodically to be in sync with the repo, however, even though there has been no change in the repo, I run out of API rate limit every now and then. I thought it should just be reading from the cache. \\n\\nThe following call gets executed on every refresh:\\n\\n```\\n  private def getTableDirs(\\n    oauthAccessToken: String,\\n    repo: GitRepoInfo,\\n    tableNamesFilter: Option[Seq[String]]\\n  ): Seq[GHContent] = {\\n    blocking {\\n      // Create a GitHubBuilder to be able to build a GitHub object with required\\n      // RateLimitHandler strategy and OAuth parameters. Instead of waiting, this will\\n      // throw an exception immediately if the request limit is exceeded.\\n      val gitHubBuilder =\\n        new GitHubBuilder()\\n          .withRateLimitHandler(RateLimitHandler.FAIL)\\n          .withOAuthToken(oauthAccessToken)\\n          .withConnector(\\n            new OkHttpConnector(\\n              new OkUrlFactory(\\n                new OkHttpClient().setCache(cache))))\\n      val github = gitHubBuilder.build()\\n\\n      // Get the requested repo.\\n      val repoName = repo.fork + \\\"/\\\" + repo.repo\\n      val repository = github.getRepository(repoName)\\n      // Get all directories (expected to be Table directories) from the top level of the repo.\\n      val allTableDirs =\\n        repository.getDirectoryContent(\\\"tables\\\", repo.branch).asScala.filter(_.isDirectory)\\n      // If there is a filter, restrict returned table directories to that set, if not return all.\\n      tableNamesFilter match {\\n        case Some(filter) =>\\n          val tableSet = filter.map(_.toLowerCase).toSet\\n          allTableDirs.filter(d => tableSet.contains(d.getName.toLowerCase))\\n        case None =>\\n          allTableDirs\\n      }\\n    }\\n  }\\n```\\n\\nFurther, there are other calls like `ghContent.read` -- is each of these a separate request to Git? Even so, I wouldn't think they would be called every time but just looked up from the cache.\\n\\nAny ideas?\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/257\","
    },
    {
      "sha": "8c3594502d15997960e0a37fba9eefa6f4d86cda",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-12.json",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-12.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-12.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-12.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -805,7 +805,7 @@\n     \"updated_at\": \"2015-12-02T11:05:03Z\",\n     \"closed_at\": \"2015-12-02T11:05:03Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"Hi,\\n\\nthe RateLimitHandler does not to work as intended. \\nIf using the WAIT implementation the API will still throw an exception and terminate.\\n\\nThe reason therefore is that there is no return statement after the handler execute its onError method.\\nThe problem is allocated in the handleApiError method of the Requester.\\n\\nhttps://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/Requester.java\\n\"\n+    \"body\": \"Hi,\\n\\nthe RateLimitHandler does not to work as intended. \\nIf using the WAIT implementation the API will still throw an exception and terminate.\\n\\nThe reason therefore is that there is no return statement after the handler execute its onError method.\\nThe problem is allocated in the handleApiError method of the Requester.\\n\\nhttps://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/Requester.java\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/219\",\n@@ -917,7 +917,7 @@\n     \"updated_at\": \"2015-12-03T16:42:58Z\",\n     \"closed_at\": \"2015-12-03T16:42:58Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"GHRepository.getCompare(String,String) supports cross-fork comparisons, but this does not:\\n\\nhttps://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GHRepository.java#L684-L686\\n\\nThis is a simple fix.\\n\"\n+    \"body\": \"GHRepository.getCompare(String,String) supports cross-fork comparisons, but this does not:\\n\\nhttps://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GHRepository.java#L684-L686\\n\\nThis is a simple fix.\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/217\","
    },
    {
      "sha": "303208d03e1e4304430fdd82d6cf3e53925b6f2a",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-13.json",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-13.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-13.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-13.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -241,7 +241,7 @@\n     \"updated_at\": \"2015-12-01T16:28:24Z\",\n     \"closed_at\": \"2015-12-01T16:28:24Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"On June 24th, GitHub made some breaking changes to the api.  See https://developer.github.com/changes/2015-06-10-breaking-changes-to-organization-permissions-coming-on-june-24/\\n\\nI am currently using the Jenkins GitHub Oauth plugin which uses the `getMyOrganizations` method defined at https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GitHub.java#L333  \\n\\nUnfortunately this method relies on the API endpoint https://api.github.com/users/orgs which no longer works.   \\n\"\n+    \"body\": \"On June 24th, GitHub made some breaking changes to the api.  See https://developer.github.com/changes/2015-06-10-breaking-changes-to-organization-permissions-coming-on-june-24/\\n\\nI am currently using the Jenkins GitHub Oauth plugin which uses the `getMyOrganizations` method defined at https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GitHub.java#L333  \\n\\nUnfortunately this method relies on the API endpoint https://api.github.com/users/orgs which no longer works.   \\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/201\",\n@@ -1049,7 +1049,7 @@\n     \"updated_at\": \"2015-05-05T06:44:59Z\",\n     \"closed_at\": \"2015-05-05T06:44:59Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"Putting this out there without much knowledge about GitHub Enterprise APIs.\\n\\nOur organization uses GitHub Enterprise hosted internally. We would love to integrate Gerrit, which uses this package, with it, but the GitHub API in here is currently a static final string: https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GitHub.java#L558\\n\\nWould be very nice if there was a way to use this with the apis for an internal Enterprise instance of github.\\n\"\n+    \"body\": \"Putting this out there without much knowledge about GitHub Enterprise APIs.\\n\\nOur organization uses GitHub Enterprise hosted internally. We would love to integrate Gerrit, which uses this package, with it, but the GitHub API in here is currently a static final string: https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GitHub.java#L558\\n\\nWould be very nice if there was a way to use this with the apis for an internal Enterprise instance of github.\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/183\",\n@@ -1281,7 +1281,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/179.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/179.patch\"\n     },\n-    \"body\": \"Hello!\\n\\nWe encountered a NullPointerException after the upgrade to 1.67 when rate limited by the GitHub API.  Essentially it is because the call to `getMyself().getLogin()` failed during the construction of the GitHub object due to being rate limited.  However, the RateLimitHandler object had not yet been set at that point in time within the GitHub object constructor.  Fix is a simple statement movement.\\n\\nError within GitHub::handleApiError():\\n\\n```\\n        if (\\\"0\\\".equals(uc.getHeaderField(\\\"X-RateLimit-Remaining\\\"))) {\\n            root.rateLimitHandler.onError(e,uc);  // rateLimitHandler is null\\n        }\\n```\\n\\nRan the test suite locally after setting github authentication details:\\n\\n```\\nResults :\\n\\nFailed tests:   setLabels(org.kohsuke.github.PullRequestTest): expected:<1> but was:<0>\\n  setAssignee(org.kohsuke.github.PullRequestTest): expected:<User:lskillen> but was:<null>\\n\\nTests in error:\\n  testMembership(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"Must have push access to view repository collaborators.\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testListDeployments(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"No ref found for: master\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testCreateDeployment(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"No ref found for: master\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testMemberPagenation(org.kohsuke.github.AppTest): java.io.IOException: {\\\"message\\\":\\\"Must have admin rights to Repository.\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testRepoLabel(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"Not Found\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3/issues/labels/#create-a-label\\\"}\\n  testGetDeploymentStatuses(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"No ref found for: master\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testCreateRepository(org.kohsuke.github.LifecycleTest): java.io.IOException: {\\\"message\\\":\\\"Must have admin rights to Repository.\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n\\nTests run: 79, Failures: 2, Errors: 7, Skipped: 10\\n```\\n\\nFailures seem to be mostly related to access to the hub4j-test-org (which obviously I don't have any permissions for), and I had the same results before/after the change so it looks like they are unrelated to it - Hopefully that's acceptable!\\n\\nThanks,\\nLee\\n\"\n+    \"body\": \"Hello!\\n\\nWe encountered a NullPointerException after the upgrade to 1.67 when rate limited by the GitHub API.  Essentially it is because the call to `getMyself().getLogin()` failed during the construction of the GitHub object due to being rate limited.  However, the RateLimitHandler object had not yet been set at that point in time within the GitHub object constructor.  Fix is a simple statement movement.\\n\\nError within GitHub::handleApiError():\\n\\n```\\n        if (\\\"0\\\".equals(uc.getHeaderField(\\\"X-RateLimit-Remaining\\\"))) {\\n            root.rateLimitHandler.onError(e,uc);  // rateLimitHandler is null\\n        }\\n```\\n\\nRan the test suite locally after setting github authentication details:\\n\\n```\\nResults :\\n\\nFailed tests:   setLabels(org.kohsuke.github.PullRequestTest): expected:<1> but was:<0>\\n  setAssignee(org.kohsuke.github.PullRequestTest): expected:<User:lskillen> but was:<null>\\n\\nTests in error:\\n  testMembership(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"Must have push access to view repository collaborators.\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testListDeployments(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"No ref found for: main\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testCreateDeployment(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"No ref found for: main\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testMemberPagenation(org.kohsuke.github.AppTest): java.io.IOException: {\\\"message\\\":\\\"Must have admin rights to Repository.\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testRepoLabel(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"Not Found\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3/issues/labels/#create-a-label\\\"}\\n  testGetDeploymentStatuses(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"No ref found for: main\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testCreateRepository(org.kohsuke.github.LifecycleTest): java.io.IOException: {\\\"message\\\":\\\"Must have admin rights to Repository.\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n\\nTests run: 79, Failures: 2, Errors: 7, Skipped: 10\\n```\\n\\nFailures seem to be mostly related to access to the hub4j-test-org (which obviously I don't have any permissions for), and I had the same results before/after the change so it looks like they are unrelated to it - Hopefully that's acceptable!\\n\\nThanks,\\nLee\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/177\","
    },
    {
      "sha": "cf58ca7853938856695b4885a164846b8a891ddb",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-14.json",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-14.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-14.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-14.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -573,7 +573,7 @@\n     \"id\": 59959411,\n     \"node_id\": \"MDU6SXNzdWU1OTk1OTQxMQ==\",\n     \"number\": 162,\n-    \"title\": \"GHContent#content always returns master version\",\n+    \"title\": \"GHContent#content always returns main version\",\n     \"user\": {\n       \"login\": \"tilayealemu\",\n       \"id\": 11229217,\n@@ -605,7 +605,7 @@\n     \"updated_at\": \"2015-03-22T17:21:23Z\",\n     \"closed_at\": \"2015-03-22T17:21:09Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"GHContent#content always returns content from the master branch. Included sample code. Content 1  comes from  master and 2 from the specified branch. Using github-api 1.62.\\n\\n```\\n@Test\\npublic void github_api_issue() throws Exception {\\n    String branch = \\\"mybranch\\\";\\n    GitHub github = GitHub.connectUsingPassword(\\\"myyser\\\", \\\"mypassword\\\");\\n    GHRepository ghRepo = github.getRepository(\\\"myrepo\\\");\\n    List<GHContent> contents = ghRepo.getDirectoryContent(\\\"myfolder\\\", \\\"heads/\\\" + branch);\\n    for (GHContent content : contents) {\\n        String content1 = content.getContent();\\n        String content2 = ghRepo.getFileContent(content.getPath(), branch).getContent();\\n        // System.out.println(\\\"Contents of \\\" + content.getPath());\\n        // System.out.println(\\\"Content1\\\");\\n        // System.out.println(content1);\\n        // System.out.println(\\\"Content2\\\");\\n        // System.out.println(content2);\\n    }\\n}\\n```\\n\"\n+    \"body\": \"GHContent#content always returns content from the main branch. Included sample code. Content 1  comes from  main and 2 from the specified branch. Using github-api 1.62.\\n\\n```\\n@Test\\npublic void github_api_issue() throws Exception {\\n    String branch = \\\"mybranch\\\";\\n    GitHub github = GitHub.connectUsingPassword(\\\"myyser\\\", \\\"mypassword\\\");\\n    GHRepository ghRepo = github.getRepository(\\\"myrepo\\\");\\n    List<GHContent> contents = ghRepo.getDirectoryContent(\\\"myfolder\\\", \\\"heads/\\\" + branch);\\n    for (GHContent content : contents) {\\n        String content1 = content.getContent();\\n        String content2 = ghRepo.getFileContent(content.getPath(), branch).getContent();\\n        // System.out.println(\\\"Contents of \\\" + content.getPath());\\n        // System.out.println(\\\"Content1\\\");\\n        // System.out.println(content1);\\n        // System.out.println(\\\"Content2\\\");\\n        // System.out.println(content2);\\n    }\\n}\\n```\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/161\",\n@@ -655,7 +655,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/161.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/161.patch\"\n     },\n-    \"body\": \"Hi kohsuke\\nI used your API to call Github API but I found that there isn't any method lists all languages using in repository. Therefore, I ask you to add it into your master code.\\nThanks\\n\"\n+    \"body\": \"Hi kohsuke\\nI used your API to call Github API but I found that there isn't any method lists all languages using in repository. Therefore, I ask you to add it into your main code.\\nThanks\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/160\",\n@@ -1025,7 +1025,7 @@\n     \"updated_at\": \"2015-02-24T22:15:14Z\",\n     \"closed_at\": \"2015-02-24T22:15:14Z\",\n     \"author_association\": \"CONTRIBUTOR\",\n-    \"body\": \"Hello,\\nThanks for this wonderful library!\\n\\nI would like the library to support github trees, is it foreseen (https://developer.github.com/v3/git/trees/)?\\nFor instance I need to retrieve this:\\nhttps://api.github.com/repos/calipho-sib/nextprot-docs/git/trees/master?recursive=1\\n\\nIf you would like I can try to implement this feature and I make a pull request?\\n\"\n+    \"body\": \"Hello,\\nThanks for this wonderful library!\\n\\nI would like the library to support github trees, is it foreseen (https://developer.github.com/v3/git/trees/)?\\nFor instance I need to retrieve this:\\nhttps://api.github.com/repos/calipho-sib/nextprot-docs/git/trees/main?recursive=1\\n\\nIf you would like I can try to implement this feature and I make a pull request?\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/152\","
    },
    {
      "sha": "22c63b5371a2c13de6023d48030a85c2212685be",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-15.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-15.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-15.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-15.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -291,7 +291,7 @@\n     \"updated_at\": \"2015-02-15T16:40:28Z\",\n     \"closed_at\": \"2015-02-15T16:40:28Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"Hey @kohsuke \\n\\nI'm using the api to create a tag from a commit, then I create a release from this tag, fill up the info, body and assets. When I use the release builder, I set the prerelease and draft parameter to true. I get everything set on my github account successfully. \\nThat's said, when I press the button (on the github release page) to publish; all my info (title, body and files) disappear and I can just see the created tag. I'm wondering if I'm doing something wrong or if it is a bug from the library.\\n\\nHere is what I m basically doing : (I extracted the code in the exact same order all the library api call)\\n\\nGHRepository repository = api.getRepository(REPO_NAME);\\nMap<String, GHBranch> branches = repository.getBranches();\\nGHBranch master = branches.get(RELEASE_BRANCH_NAME);\\nString lastCommit = master.getSHA1();\\nString refName = \\\"refs/tags/\\\" + tagName;\\nGHRef ref = repository.createRef(refName, lastCommit);\\n\\nfinal GHReleaseBuilder releaseBuilder = repository.createRelease(refName);  releaseBuilder.name(releaseName).body(body).prerelease(true).draft(true)\\nfinal GHRelease release = releaseBuilder.create()\\nand a bunch of release.uploadAsset(file, mimeType)\\n\\nThank you for your help!\\n\"\n+    \"body\": \"Hey @kohsuke \\n\\nI'm using the api to create a tag from a commit, then I create a release from this tag, fill up the info, body and assets. When I use the release builder, I set the prerelease and draft parameter to true. I get everything set on my github account successfully. \\nThat's said, when I press the button (on the github release page) to publish; all my info (title, body and files) disappear and I can just see the created tag. I'm wondering if I'm doing something wrong or if it is a bug from the library.\\n\\nHere is what I m basically doing : (I extracted the code in the exact same order all the library api call)\\n\\nGHRepository repository = api.getRepository(REPO_NAME);\\nMap<String, GHBranch> branches = repository.getBranches();\\nGHBranch main = branches.get(RELEASE_BRANCH_NAME);\\nString lastCommit = main.getSHA1();\\nString refName = \\\"refs/tags/\\\" + tagName;\\nGHRef ref = repository.createRef(refName, lastCommit);\\n\\nfinal GHReleaseBuilder releaseBuilder = repository.createRelease(refName);  releaseBuilder.name(releaseName).body(body).prerelease(true).draft(true)\\nfinal GHRelease release = releaseBuilder.create()\\nand a bunch of release.uploadAsset(file, mimeType)\\n\\nThank you for your help!\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/137\","
    },
    {
      "sha": "3d946bac49b14de091d0732b482ff4852c80c810",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-16.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-16.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-16.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-16.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -461,7 +461,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/103.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/103.patch\"\n     },\n-    \"body\": \"OkHttp changed API with v2.0.0, and the `client.open(url)` method no longer exists:\\n\\n\\\"URLConnection support has moved to the okhttp-urlconnection module. If you're upgrading from 1.x, this change will impact you. You will need to add the okhttp-urlconnection module to your project and use\\nthe OkUrlFactory to create new instances of HttpURLConnection\\\"\\n\\nhttps://github.com/square/okhttp/blob/master/CHANGELOG.md#version-200-rc1\\n\"\n+    \"body\": \"OkHttp changed API with v2.0.0, and the `client.open(url)` method no longer exists:\\n\\n\\\"URLConnection support has moved to the okhttp-urlconnection module. If you're upgrading from 1.x, this change will impact you. You will need to add the okhttp-urlconnection module to your project and use\\nthe OkUrlFactory to create new instances of HttpURLConnection\\\"\\n\\nhttps://github.com/square/okhttp/blob/main/CHANGELOG.md#version-200-rc1\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/102\","
    },
    {
      "sha": "2c5abf51d4b11bda697f1dbb6cc16128694a40fc",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-17.json",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-17.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-17.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-17.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -229,7 +229,7 @@\n     \"updated_at\": \"2014-05-10T22:31:37Z\",\n     \"closed_at\": \"2014-05-10T22:31:37Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"`getRateLimit()` at https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GitHub.java#L228 fails for GitHub Enterprise with a 404 status code, body of\\n\\n``` json\\n{\\n  \\\"message\\\": \\\"No rate limit for white listed users\\\"\\n}\\n```\\n\\nGitHub Enterprise users are considered white listed and so don't have rate limits.\\n\\nSee also janinko/ghprb#127\\n\"\n+    \"body\": \"`getRateLimit()` at https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GitHub.java#L228 fails for GitHub Enterprise with a 404 status code, body of\\n\\n``` json\\n{\\n  \\\"message\\\": \\\"No rate limit for white listed users\\\"\\n}\\n```\\n\\nGitHub Enterprise users are considered white listed and so don't have rate limits.\\n\\nSee also janinko/ghprb#127\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/77\",\n@@ -873,7 +873,7 @@\n     \"updated_at\": \"2016-02-12T18:35:43Z\",\n     \"closed_at\": \"2014-04-13T15:55:35Z\",\n     \"author_association\": \"CONTRIBUTOR\",\n-    \"body\": \"https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/Requester.java#L268\\n\\nWhen attempting to get the details of an empty repository, the github enterprise server returns an HTTP 409. This, in turn, causes Requester to throw an Error…\\n\\nCaused by: java.io.IOException: Server returned HTTP response code: 409 for URL: <redacted>\\n\\nAn Error, for those unfamiliar, is \\\"a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch.\\\" I don't think an HTTP 409 response warrants throwing an Error, thereby dooming the client Java process to exit with status code 1.\\n\"\n+    \"body\": \"https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/Requester.java#L268\\n\\nWhen attempting to get the details of an empty repository, the github enterprise server returns an HTTP 409. This, in turn, causes Requester to throw an Error…\\n\\nCaused by: java.io.IOException: Server returned HTTP response code: 409 for URL: <redacted>\\n\\nAn Error, for those unfamiliar, is \\\"a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch.\\\" I don't think an HTTP 409 response warrants throwing an Error, thereby dooming the client Java process to exit with status code 1.\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/64\",\n@@ -917,7 +917,7 @@\n     \"updated_at\": \"2014-05-10T22:23:12Z\",\n     \"closed_at\": \"2014-05-10T22:23:12Z\",\n     \"author_association\": \"CONTRIBUTOR\",\n-    \"body\": \"https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GHRepository.java#L96\\n\\nGHRepository doesn't take into account whether or not the client is speaking with the public github.com or if it's talking to a github enterprise instance. Consequently, when you call getGitTransportUrl() or gitHttpTransportUrl() it only ever returns a github.com URL, which won't work for github enterprise hosted repositories.\\n\"\n+    \"body\": \"https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GHRepository.java#L96\\n\\nGHRepository doesn't take into account whether or not the client is speaking with the public github.com or if it's talking to a github enterprise instance. Consequently, when you call getGitTransportUrl() or gitHttpTransportUrl() it only ever returns a github.com URL, which won't work for github enterprise hosted repositories.\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/63\","
    },
    {
      "sha": "9dec493b743c6871fc226a7980ab12e88d724f04",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-6.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-6.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-6.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-6.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -961,7 +961,7 @@\n     \"updated_at\": \"2018-08-30T15:37:51Z\",\n     \"closed_at\": \"2018-08-30T15:37:50Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"If I checkout `192e21a9fcacf4dffc975156bcf5e8ff7bf297b1` (HEAD right now), and run `mvn test` I see a `ClassNotFoundException`.  It cannot even report success or failure of individual tests.\\r\\n\\r\\nI believe this is related to https://github.com/kohsuke/github-api/pull/388 which upgraded jgit, but maybe not all of the unit tests.  Specifically [`LifecycleTest`](https://github.com/kohsuke/github-api/blob/master/src/test/java/org/kohsuke/github/LifecycleTest.java) references `UsernamePasswordCredentialsProvider` which is no longer in the newer versions of jgit.\\r\\n\\r\\nI'll be honest, as I tried to fix this I kept getting some unexpected classpath errors related to jgit (first this one, then one about `GitAPIException`, etc), and much as I know my way around a super complex build, I didn't feel like learning about the maven plugin for bridge method generation, and everything else it might take me to sort this out.  Is there something basic I missed for setting up a working development environment for this project?  I feel like I must have missed something simple for `mvn test` not to work.\\r\\n\\r\\nThe surefire log shows:\\r\\n\\r\\n```\\r\\n-------------------------------------------------------\\r\\n T E S T S\\r\\n-------------------------------------------------------\\r\\norg.apache.maven.surefire.util.SurefireReflectionException: java.lang.reflect.InvocationTargetException; nested exception is java.lang.reflect.InvocationTargetException: null\\r\\njava.lang.reflect.InvocationTargetException\\r\\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\\r\\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n        at java.lang.reflect.Method.invoke(Method.java:498)\\r\\n        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\\r\\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\\r\\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\\r\\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)\\r\\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\\r\\nCaused by: java.lang.NoClassDefFoundError: org/eclipse/jgit/transport/CredentialsProvider\\r\\n        at java.lang.Class.getDeclaredMethods0(Native Method)\\r\\n        at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\\r\\n        at java.lang.Class.privateGetMethodRecursive(Class.java:3048)\\r\\n        at java.lang.Class.getMethod0(Class.java:3018)\\r\\n        at java.lang.Class.getMethod(Class.java:1784)\\r\\n        at org.apache.maven.surefire.util.ReflectionUtils.tryGetMethod(ReflectionUtils.java:57)\\r\\n        at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.isSuiteOnly(JUnit3TestChecker.java:64)\\r\\n        at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.isValidJUnit3Test(JUnit3TestChecker.java:59)\\r\\n        at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.accept(JUnit3TestChecker.java:54)\\r\\n        at org.apache.maven.surefire.common.junit4.JUnit4TestChecker.accept(JUnit4TestChecker.java:51)\\r\\n        at org.apache.maven.surefire.util.DefaultScanResult.applyFilter(DefaultScanResult.java:97)\\r\\n        at org.apache.maven.surefire.junit4.JUnit4Provider.scanClassPath(JUnit4Provider.java:194)\\r\\n        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:92)\\r\\n        ... 9 more\\r\\nCaused by: java.lang.ClassNotFoundException: org.eclipse.jgit.transport.CredentialsProvider\\r\\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:381)\\r\\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\\r\\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\\r\\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\\r\\n        ... 22 more\\r\\n\\r\\nResults :\\r\\n\\r\\nTests run: 0, Failures: 0, Errors: 0, Skipped: 0\\r\\n```\\r\\n\\r\\n\\r\\nMaven version:\\r\\n```\\r\\nApache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T08:41:47-08:00)\\r\\nMaven home: C:\\\\Program Files\\\\Maven\\r\\nJava version: 1.8.0_121, vendor: Oracle Corporation\\r\\nJava home: C:\\\\Program Files\\\\Java\\\\jdk1.8.0_121\\\\jre\\r\\nDefault locale: en_US, platform encoding: Cp1252\\r\\nOS name: \\\"windows nt (unknown)\\\", version: \\\"10.0\\\", arch: \\\"amd64\\\", family: \\\"dos\\\"\\r\\n```\"\n+    \"body\": \"If I checkout `192e21a9fcacf4dffc975156bcf5e8ff7bf297b1` (HEAD right now), and run `mvn test` I see a `ClassNotFoundException`.  It cannot even report success or failure of individual tests.\\r\\n\\r\\nI believe this is related to https://github.com/kohsuke/github-api/pull/388 which upgraded jgit, but maybe not all of the unit tests.  Specifically [`LifecycleTest`](https://github.com/kohsuke/github-api/blob/main/src/test/java/org/kohsuke/github/LifecycleTest.java) references `UsernamePasswordCredentialsProvider` which is no longer in the newer versions of jgit.\\r\\n\\r\\nI'll be honest, as I tried to fix this I kept getting some unexpected classpath errors related to jgit (first this one, then one about `GitAPIException`, etc), and much as I know my way around a super complex build, I didn't feel like learning about the maven plugin for bridge method generation, and everything else it might take me to sort this out.  Is there something basic I missed for setting up a working development environment for this project?  I feel like I must have missed something simple for `mvn test` not to work.\\r\\n\\r\\nThe surefire log shows:\\r\\n\\r\\n```\\r\\n-------------------------------------------------------\\r\\n T E S T S\\r\\n-------------------------------------------------------\\r\\norg.apache.maven.surefire.util.SurefireReflectionException: java.lang.reflect.InvocationTargetException; nested exception is java.lang.reflect.InvocationTargetException: null\\r\\njava.lang.reflect.InvocationTargetException\\r\\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\\r\\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n        at java.lang.reflect.Method.invoke(Method.java:498)\\r\\n        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\\r\\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\\r\\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\\r\\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)\\r\\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\\r\\nCaused by: java.lang.NoClassDefFoundError: org/eclipse/jgit/transport/CredentialsProvider\\r\\n        at java.lang.Class.getDeclaredMethods0(Native Method)\\r\\n        at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\\r\\n        at java.lang.Class.privateGetMethodRecursive(Class.java:3048)\\r\\n        at java.lang.Class.getMethod0(Class.java:3018)\\r\\n        at java.lang.Class.getMethod(Class.java:1784)\\r\\n        at org.apache.maven.surefire.util.ReflectionUtils.tryGetMethod(ReflectionUtils.java:57)\\r\\n        at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.isSuiteOnly(JUnit3TestChecker.java:64)\\r\\n        at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.isValidJUnit3Test(JUnit3TestChecker.java:59)\\r\\n        at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.accept(JUnit3TestChecker.java:54)\\r\\n        at org.apache.maven.surefire.common.junit4.JUnit4TestChecker.accept(JUnit4TestChecker.java:51)\\r\\n        at org.apache.maven.surefire.util.DefaultScanResult.applyFilter(DefaultScanResult.java:97)\\r\\n        at org.apache.maven.surefire.junit4.JUnit4Provider.scanClassPath(JUnit4Provider.java:194)\\r\\n        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:92)\\r\\n        ... 9 more\\r\\nCaused by: java.lang.ClassNotFoundException: org.eclipse.jgit.transport.CredentialsProvider\\r\\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:381)\\r\\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\\r\\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\\r\\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\\r\\n        ... 22 more\\r\\n\\r\\nResults :\\r\\n\\r\\nTests run: 0, Failures: 0, Errors: 0, Skipped: 0\\r\\n```\\r\\n\\r\\n\\r\\nMaven version:\\r\\n```\\r\\nApache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T08:41:47-08:00)\\r\\nMaven home: C:\\\\Program Files\\\\Maven\\r\\nJava version: 1.8.0_121, vendor: Oracle Corporation\\r\\nJava home: C:\\\\Program Files\\\\Java\\\\jdk1.8.0_121\\\\jre\\r\\nDefault locale: en_US, platform encoding: Cp1252\\r\\nOS name: \\\"windows nt (unknown)\\\", version: \\\"10.0\\\", arch: \\\"amd64\\\", family: \\\"dos\\\"\\r\\n```\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/414\","
    },
    {
      "sha": "29f08f97d4392190dd24cc81b4a424e0c127a4d9",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-7.json",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-7.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-7.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-7.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -229,7 +229,7 @@\n     \"updated_at\": \"2018-02-07T08:40:41Z\",\n     \"closed_at\": \"2018-01-13T05:33:14Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"This used to work, but a change in the last couple months seems to have broken this for us. \\r\\n\\r\\nWe have some Jenkins Pipeline code that does some automatic PR creation + merging for specific use cases. Initially when creating the PR, GitHub isn't always immediately able to act on it, so we would check if it were mergeable before actually attempting to merge:\\r\\n\\r\\n```\\r\\nGHPullRequest pull = repo.createPullRequest(\\\"Release $version\\\", \\\"master\\\", \\\"production\\\", body)\\r\\nwhile(!pull.getMergeable()) {\\r\\n    echo \\\"PR not yet mergeable, retrying...\\\"\\r\\n}\\r\\npull.merge(\\\"Merged & released via [${env.BUILD_NUMBER}](${env.BUILD_URL})\\\", pull.getHead().getSha())\\r\\n```\\r\\n\\r\\nNow however, pull.getMergeable() never returns true if it returns false the first time it is called (which is basically every time), so it just sits in that loop, retrying. \\r\\n\\r\\nAgain, this only broke after we recently updated all of our plugins on our Jenkins instance, so it seems a recent change is causing this but I've been unable to identify what it might be in the recent history. \"\n+    \"body\": \"This used to work, but a change in the last couple months seems to have broken this for us. \\r\\n\\r\\nWe have some Jenkins Pipeline code that does some automatic PR creation + merging for specific use cases. Initially when creating the PR, GitHub isn't always immediately able to act on it, so we would check if it were mergeable before actually attempting to merge:\\r\\n\\r\\n```\\r\\nGHPullRequest pull = repo.createPullRequest(\\\"Release $version\\\", \\\"main\\\", \\\"production\\\", body)\\r\\nwhile(!pull.getMergeable()) {\\r\\n    echo \\\"PR not yet mergeable, retrying...\\\"\\r\\n}\\r\\npull.merge(\\\"Merged & released via [${env.BUILD_NUMBER}](${env.BUILD_URL})\\\", pull.getHead().getSha())\\r\\n```\\r\\n\\r\\nNow however, pull.getMergeable() never returns true if it returns false the first time it is called (which is basically every time), so it just sits in that loop, retrying. \\r\\n\\r\\nAgain, this only broke after we recently updated all of our plugins on our Jenkins instance, so it seems a recent change is causing this but I've been unable to identify what it might be in the recent history. \"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/398\",\n@@ -487,22 +487,22 @@\n     \"number\": 393,\n     \"title\": \"64-bit id support\",\n     \"user\": {\n-      \"login\": \"Raimmaster\",\n+      \"login\": \"Raimmain\",\n       \"id\": 6061123,\n       \"node_id\": \"MDQ6VXNlcjYwNjExMjM=\",\n       \"avatar_url\": \"https://avatars3.githubusercontent.com/u/6061123?v=4\",\n       \"gravatar_id\": \"\",\n-      \"url\": \"https://api.github.com/users/Raimmaster\",\n-      \"html_url\": \"https://github.com/Raimmaster\",\n-      \"followers_url\": \"https://api.github.com/users/Raimmaster/followers\",\n-      \"following_url\": \"https://api.github.com/users/Raimmaster/following{/other_user}\",\n-      \"gists_url\": \"https://api.github.com/users/Raimmaster/gists{/gist_id}\",\n-      \"starred_url\": \"https://api.github.com/users/Raimmaster/starred{/owner}{/repo}\",\n-      \"subscriptions_url\": \"https://api.github.com/users/Raimmaster/subscriptions\",\n-      \"organizations_url\": \"https://api.github.com/users/Raimmaster/orgs\",\n-      \"repos_url\": \"https://api.github.com/users/Raimmaster/repos\",\n-      \"events_url\": \"https://api.github.com/users/Raimmaster/events{/privacy}\",\n-      \"received_events_url\": \"https://api.github.com/users/Raimmaster/received_events\",\n+      \"url\": \"https://api.github.com/users/Raimmain\",\n+      \"html_url\": \"https://github.com/Raimmain\",\n+      \"followers_url\": \"https://api.github.com/users/Raimmain/followers\",\n+      \"following_url\": \"https://api.github.com/users/Raimmain/following{/other_user}\",\n+      \"gists_url\": \"https://api.github.com/users/Raimmain/gists{/gist_id}\",\n+      \"starred_url\": \"https://api.github.com/users/Raimmain/starred{/owner}{/repo}\",\n+      \"subscriptions_url\": \"https://api.github.com/users/Raimmain/subscriptions\",\n+      \"organizations_url\": \"https://api.github.com/users/Raimmain/orgs\",\n+      \"repos_url\": \"https://api.github.com/users/Raimmain/repos\",\n+      \"events_url\": \"https://api.github.com/users/Raimmain/events{/privacy}\",\n+      \"received_events_url\": \"https://api.github.com/users/Raimmain/received_events\",\n       \"type\": \"User\",\n       \"site_admin\": false\n     },"
    },
    {
      "sha": "b0a33557b1eb276f5dff71f4e73732325c3bf5c3",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-8.json",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-8.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-8.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-8.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -41,7 +41,7 @@\n     \"updated_at\": \"2017-07-28T17:36:12Z\",\n     \"closed_at\": \"2017-07-28T17:35:59Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"```\\r\\nGHPullRequest pull = repo.createPullRequest(\\\"Release $version\\\", \\\"master\\\", \\\"production\\\", body)\\r\\nwhile(!pull.getMergeable()) {\\r\\n      println \\\"PR not yet mergeable, retrying...\\\"\\r\\n      sleep 2\\r\\n}\\r\\npull.merge(\\\"Merged via Jenkins\\\", pull.getHead().getSha())\\r\\n```\\r\\n\\r\\nThe `pull.merge(...)` seemingly results in a no-op. No error. No merge. \\r\\n\\r\\nGenerally it's not immediately mergeable via `pull.getMergeable()` and it must pause a moment before that passes. But even accounting for that, I still get nothing. \"\n+    \"body\": \"```\\r\\nGHPullRequest pull = repo.createPullRequest(\\\"Release $version\\\", \\\"main\\\", \\\"production\\\", body)\\r\\nwhile(!pull.getMergeable()) {\\r\\n      println \\\"PR not yet mergeable, retrying...\\\"\\r\\n      sleep 2\\r\\n}\\r\\npull.merge(\\\"Merged via Jenkins\\\", pull.getHead().getSha())\\r\\n```\\r\\n\\r\\nThe `pull.merge(...)` seemingly results in a no-op. No error. No merge. \\r\\n\\r\\nGenerally it's not immediately mergeable via `pull.getMergeable()` and it must pause a moment before that passes. But even accounting for that, I still get nothing. \"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/366\",\n@@ -987,7 +987,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/343.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/343.patch\"\n     },\n-    \"body\": \"I already add the latest release, so please add to master and update version so that I can use in my project\\r\\nFix #341 \\r\\n\\r\\nPS  I don't know how to push my fixed module to the maven server so, please. @emlagowski \\r\\n\\r\\n\\r\\nThank you\"\n+    \"body\": \"I already add the latest release, so please add to main and update version so that I can use in my project\\r\\nFix #341 \\r\\n\\r\\nPS  I don't know how to push my fixed module to the maven server so, please. @emlagowski \\r\\n\\r\\n\\r\\nThank you\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/342\",\n@@ -1325,7 +1325,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/336.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/336.patch\"\n     },\n-    \"body\": \"Correct namespace\\r\\n\\r\\nFile: https://github.com/square/okhttp/blob/master/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java\\r\\n\\r\\nFixes #335\"\n+    \"body\": \"Correct namespace\\r\\n\\r\\nFile: https://github.com/square/okhttp/blob/main/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java\\r\\n\\r\\nFixes #335\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/335\","
    },
    {
      "sha": "57b4c4df7e125d70517747e8b3fa09e35ca0cff8",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-9.json",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-9.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-9.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetIssues/__files/repositories_617210_issues-9.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -191,7 +191,7 @@\n     \"updated_at\": \"2017-01-08T18:45:12Z\",\n     \"closed_at\": \"2017-01-08T18:45:12Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"Executing github.getRepository(\\\"user/repo\\\").createWebHook(new URL(\\\"someurl...\\\"));\\r\\nWebhook was created but a exception is throwed:\\r\\n\\r\\n2017-01-05T15:17:11.974971+00:00 app[web.1]: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'payload': was expecting ('true', 'false' or 'null')\\r\\n2017-01-05T15:17:11.975129+00:00 app[web.1]:  at [Source: payload=%7B%22zen%22%3A%22Non-blocking+is+better+than+blocking.%22%2C%22hook_id%22%3A11405663%2C%22hook%22%3A%7B%22type%22%3A%22Repository%22%2C%22id%22%3A11405663%2C%22name%22%3A%22web%22%2C%22active%22%3Atrue%2C%22events%22%3A%5B%22push%22%5D%2C%22config%22%3A%7B%22url%22%3A%22https%3A%2F%2Fmorning-crag-16002.herokuapp.com%2Fapplication%2Fgithub%2Fwebhooks%22%7D%2C%22updated_at%22%3A%222017-01-05T15%3A17%3A11Z%22%2C%22created_at%22%3A%222017-01-05T15%3A17%3A11Z%22%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%2F11405663%22%2C%22test_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%2F11405663%2Ftest%22%2C%22ping_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%2F11405663%2Fpings%22%2C%22last_response%22%3A%7B%22code%22%3Anull%2C%22status%22%3A%22unused%22%2C%22message%22%3Anull%7D%7D%2C%22repository%22%3A%7B%22id%22%3A77337343%2C%22name%22%3A%22fflib-apex-common%22%2C%22full_name%22%3A%22dieffrei%2Ffflib-apex-common%22%2C%22owner%22%3A%7B%22login%22%3A%22dieffrei%22%2C%22id%22%3A3090010%2C%22avatar_url%22%3A%22https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F3090010%3Fv%3D3%22%2C%22gravatar_id%22%3A%22%22%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%22%2C%22html_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%22%2C%22followers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowers%22%2C%22following_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowing%7B%2Fother_user%7D%22%2C%22gists_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fgists%7B%2Fgist_id%7D%22%2C%22starred_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fstarred%7B%2Fowner%7D%7B%2Frepo%7D%22%2C%22subscriptions_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fsubscriptions%22%2C%22organizations_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Forgs%22%2C%22repos_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Frepos%22%2C%22events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fevents%7B%2Fprivacy%7D%22%2C%22received_events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Freceived_events%22%2C%22type%22%3A%22User%22%2C%22site_admin%22%3Afalse%7D%2C%22private%22%3Afalse%2C%22html_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common%22%2C%22description%22%3A%22Common+Apex+Library+supporting+Apex+Enterprise+Patterns+and+much+more%21%22%2C%22fork%22%3Atrue%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%22%2C%22forks_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fforks%22%2C%22keys_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fkeys%7B%2Fkey_id%7D%22%2C%22collaborators_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcollaborators%7B%2Fcollaborator%7D%22%2C%22teams_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fteams%22%2C%22hooks_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%22%2C%22issue_events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fissues%2Fevents%7B%2Fnumber%7D%22%2C%22events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fevents%22%2C%22assignees_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fassignees%7B%2Fuser%7D%22%2C%22branches_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fbranches%7B%2Fbranch%7D%22%2C%22tags_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Ftags%22%2C%22blobs_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Fblobs%7B%2Fsha%7D%22%2C%22git_tags_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Ftags%7B%2Fsha%7D%22%2C%22git_refs_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Frefs%7B%2Fsha%7D%22%2C%22trees_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Ftrees%7B%2Fsha%7D%22%2C%22statuses_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fstatuses%2F%7Bsha%7D%22%2C%22languages_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Flanguages%22%2C%22stargazers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fstargazers%22%2C%22contributors_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcontributors%22%2C%22subscribers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fsubscribers%22%2C%22subscription_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fsubscription%22%2C%22commits_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcommits%7B%2Fsha%7D%22%2C%22git_commits_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Fcommits%7B%2Fsha%7D%22%2C%22comments_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcomments%7B%2Fnumber%7D%22%2C%22issue_comment_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fissues%2Fcomments%7B%2Fnumber%7D%22%2C%22contents_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcontents%2F%7B%2Bpath%7D%22%2C%22compare_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcompare%2F%7Bbase%7D...%7Bhead%7D%22%2C%22merges_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fmerges%22%2C%22archive_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2F%7Barchive_format%7D%7B%2Fref%7D%22%2C%22downloads_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fdownloads%22%2C%22issues_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fissues%7B%2Fnumber%7D%22%2C%22pulls_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fpulls%7B%2Fnumber%7D%22%2C%22milestones_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fmilestones%7B%2Fnumber%7D%22%2C%22notifications_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fnotifications%7B%3Fsince%2Call%2Cparticipating%7D%22%2C%22labels_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Flabels%7B%2Fname%7D%22%2C%22releases_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Freleases%7B%2Fid%7D%22%2C%22deployments_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fdeployments%22%2C%22created_at%22%3A%222016-12-25T18%3A07%3A36Z%22%2C%22updated_at%22%3A%222016-12-25T18%3A07%3A39Z%22%2C%22pushed_at%22%3A%222016-12-26T12%3A28%3A45Z%22%2C%22git_url%22%3A%22git%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common.git%22%2C%22ssh_url%22%3A%22git%40github.com%3Adieffrei%2Ffflib-apex-common.git%22%2C%22clone_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common.git%22%2C%22svn_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common%22%2C%22homepage%22%3A%22%22%2C%22size%22%3A19892%2C%22stargazers_count%22%3A0%2C%22watchers_count%22%3A0%2C%22language%22%3A%22Apex%22%2C%22has_issues%22%3Afalse%2C%22has_downloads%22%3Atrue%2C%22has_wiki%22%3Atrue%2C%22has_pages%22%3Afalse%2C%22forks_count%22%3A0%2C%22mirror_url%22%3Anull%2C%22open_issues_count%22%3A1%2C%22forks%22%3A0%2C%22open_issues%22%3A1%2C%22watchers%22%3A0%2C%22default_branch%22%3A%22master%22%7D%2C%22sender%22%3A%7B%22login%22%3A%22dieffrei%22%2C%22id%22%3A3090010%2C%22avatar_url%22%3A%22https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F3090010%3Fv%3D3%22%2C%22gravatar_id%22%3A%22%22%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%22%2C%22html_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%22%2C%22followers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowers%22%2C%22following_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowing%7B%2Fother_user%7D%22%2C%22gists_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fgists%7B%2Fgist_id%7D%22%2C%22starred_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fstarred%7B%2Fowner%7D%7B%2Frepo%7D%22%2C%22subscriptions_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fsubscriptions%22%2C%22organizations_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Forgs%22%2C%22repos_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Frepos%22%2C%22events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fevents%7B%2Fprivacy%7D%22%2C%22received_events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Freceived_events%22%2C%22type%22%3A%22User%22%2C%22site_admin%22%3Afalse%7D%7D; line: 1, column: 8]\\r\\n2017-01-05T15:17:11.975376+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1702)\\r\\n2017-01-05T15:17:11.975497+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:558)\\r\\n2017-01-05T15:17:11.975595+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken(ReaderBasedJsonParser.java:2836)\\r\\n2017-01-05T15:17:11.975651+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddValue(ReaderBasedJsonParser.java:1899)\\r\\n2017-01-05T15:17:11.975717+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken(ReaderBasedJsonParser.java:749)\\r\\n2017-01-05T15:17:11.975791+00:00 app[web.1]: \\tat com.fasterxml.jackson.databind.ObjectMapper._initForReading(ObjectMapper.java:3825)\\r\\n2017-01-05T15:17:11.975843+00:00 app[web.1]: \\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3774)\\r\\n2017-01-05T15:17:11.975926+00:00 app[web.1]: \\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2833)\\r\\n2017-01-05T15:17:11.975981+00:00 app[web.1]: \\tat com.heroku.devcenter.GithubWebhookController.greeting(GithubWebhookController.java:26)\\r\\n2017-01-05T15:17:11.976065+00:00 app[web.1]: \\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n2017-01-05T15:17:11.976126+00:00 app[web.1]: \\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\\r\\n2017-01-05T15:17:11.976184+00:00 app[web.1]: \\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n2017-01-05T15:17:11.976265+00:00 app[web.1]: \\tat java.lang.reflect.Method.invoke(Method.java:498)\\r\\n2017-01-05T15:17:11.976337+00:00 app[web.1]: \\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:220)\\r\\n2017-01-05T15:17:11.976422+00:00 app[web.1]: \\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)\\r\\n2017-01-05T15:17:11.976483+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116)\\r\\n2017-01-05T15:17:11.976537+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)\\r\\n2017-01-05T15:17:11.976623+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)\\r\\n2017-01-05T15:17:11.976688+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)\\r\\n2017-01-05T15:17:11.976787+00:00 app[web.1]: \\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)\\r\\n2017-01-05T15:17:11.976853+00:00 app[web.1]: \\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)\\r\\n2017-01-05T15:17:11.976957+00:00 app[web.1]: \\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\\r\\n2017-01-05T15:17:11.977108+00:00 app[web.1]: \\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)\\r\\n2017-01-05T15:17:11.977153+00:00 app[web.1]: \\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:646)\\r\\n2017-01-05T15:17:11.977205+00:00 app[web.1]: \\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\\r\\n2017-01-05T15:17:11.977311+00:00 app[web.1]: \\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:727)\\r\\n2017-01-05T15:17:11.977361+00:00 app[web.1]: \\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)\\r\\n2017-01-05T15:17:11.977449+00:00 app[web.1]: \\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\\r\\n2017-01-05T15:17:11.977504+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)\\r\\n2017-01-05T15:17:11.977592+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)\\r\\n2017-01-05T15:17:11.977659+00:00 app[web.1]: \\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:503)\\r\\n2017-01-05T15:17:11.977706+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)\\r\\n2017-01-05T15:17:11.977792+00:00 app[web.1]: \\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)\\r\\n2017-01-05T15:17:11.977836+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\\r\\n2017-01-05T15:17:11.977927+00:00 app[web.1]: \\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:421)\\r\\n2017-01-05T15:17:11.977984+00:00 app[web.1]: \\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1070)\\r\\n2017-01-05T15:17:11.978051+00:00 app[web.1]: \\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:611)\\r\\n2017-01-05T15:17:11.978136+00:00 app[web.1]: \\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1736)\\r\\n2017-01-05T15:17:11.978289+00:00 app[web.1]: \\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1695)\\r\\n2017-01-05T15:17:11.978353+00:00 app[web.1]: \\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\\r\\n2017-01-05T15:17:11.978551+00:00 app[web.1]: \\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\\r\\n2017-01-05T15:17:11.978708+00:00 app[web.1]: \\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n2017-01-05T15:17:11.978863+00:00 app[web.1]: \\tat java.lang.Thread.run(Thread.java:745)\"\n+    \"body\": \"Executing github.getRepository(\\\"user/repo\\\").createWebHook(new URL(\\\"someurl...\\\"));\\r\\nWebhook was created but a exception is throwed:\\r\\n\\r\\n2017-01-05T15:17:11.974971+00:00 app[web.1]: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'payload': was expecting ('true', 'false' or 'null')\\r\\n2017-01-05T15:17:11.975129+00:00 app[web.1]:  at [Source: payload=%7B%22zen%22%3A%22Non-blocking+is+better+than+blocking.%22%2C%22hook_id%22%3A11405663%2C%22hook%22%3A%7B%22type%22%3A%22Repository%22%2C%22id%22%3A11405663%2C%22name%22%3A%22web%22%2C%22active%22%3Atrue%2C%22events%22%3A%5B%22push%22%5D%2C%22config%22%3A%7B%22url%22%3A%22https%3A%2F%2Fmorning-crag-16002.herokuapp.com%2Fapplication%2Fgithub%2Fwebhooks%22%7D%2C%22updated_at%22%3A%222017-01-05T15%3A17%3A11Z%22%2C%22created_at%22%3A%222017-01-05T15%3A17%3A11Z%22%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%2F11405663%22%2C%22test_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%2F11405663%2Ftest%22%2C%22ping_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%2F11405663%2Fpings%22%2C%22last_response%22%3A%7B%22code%22%3Anull%2C%22status%22%3A%22unused%22%2C%22message%22%3Anull%7D%7D%2C%22repository%22%3A%7B%22id%22%3A77337343%2C%22name%22%3A%22fflib-apex-common%22%2C%22full_name%22%3A%22dieffrei%2Ffflib-apex-common%22%2C%22owner%22%3A%7B%22login%22%3A%22dieffrei%22%2C%22id%22%3A3090010%2C%22avatar_url%22%3A%22https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F3090010%3Fv%3D3%22%2C%22gravatar_id%22%3A%22%22%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%22%2C%22html_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%22%2C%22followers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowers%22%2C%22following_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowing%7B%2Fother_user%7D%22%2C%22gists_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fgists%7B%2Fgist_id%7D%22%2C%22starred_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fstarred%7B%2Fowner%7D%7B%2Frepo%7D%22%2C%22subscriptions_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fsubscriptions%22%2C%22organizations_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Forgs%22%2C%22repos_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Frepos%22%2C%22events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fevents%7B%2Fprivacy%7D%22%2C%22received_events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Freceived_events%22%2C%22type%22%3A%22User%22%2C%22site_admin%22%3Afalse%7D%2C%22private%22%3Afalse%2C%22html_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common%22%2C%22description%22%3A%22Common+Apex+Library+supporting+Apex+Enterprise+Patterns+and+much+more%21%22%2C%22fork%22%3Atrue%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%22%2C%22forks_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fforks%22%2C%22keys_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fkeys%7B%2Fkey_id%7D%22%2C%22collaborators_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcollaborators%7B%2Fcollaborator%7D%22%2C%22teams_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fteams%22%2C%22hooks_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%22%2C%22issue_events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fissues%2Fevents%7B%2Fnumber%7D%22%2C%22events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fevents%22%2C%22assignees_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fassignees%7B%2Fuser%7D%22%2C%22branches_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fbranches%7B%2Fbranch%7D%22%2C%22tags_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Ftags%22%2C%22blobs_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Fblobs%7B%2Fsha%7D%22%2C%22git_tags_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Ftags%7B%2Fsha%7D%22%2C%22git_refs_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Frefs%7B%2Fsha%7D%22%2C%22trees_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Ftrees%7B%2Fsha%7D%22%2C%22statuses_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fstatuses%2F%7Bsha%7D%22%2C%22languages_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Flanguages%22%2C%22stargazers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fstargazers%22%2C%22contributors_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcontributors%22%2C%22subscribers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fsubscribers%22%2C%22subscription_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fsubscription%22%2C%22commits_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcommits%7B%2Fsha%7D%22%2C%22git_commits_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Fcommits%7B%2Fsha%7D%22%2C%22comments_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcomments%7B%2Fnumber%7D%22%2C%22issue_comment_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fissues%2Fcomments%7B%2Fnumber%7D%22%2C%22contents_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcontents%2F%7B%2Bpath%7D%22%2C%22compare_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcompare%2F%7Bbase%7D...%7Bhead%7D%22%2C%22merges_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fmerges%22%2C%22archive_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2F%7Barchive_format%7D%7B%2Fref%7D%22%2C%22downloads_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fdownloads%22%2C%22issues_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fissues%7B%2Fnumber%7D%22%2C%22pulls_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fpulls%7B%2Fnumber%7D%22%2C%22milestones_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fmilestones%7B%2Fnumber%7D%22%2C%22notifications_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fnotifications%7B%3Fsince%2Call%2Cparticipating%7D%22%2C%22labels_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Flabels%7B%2Fname%7D%22%2C%22releases_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Freleases%7B%2Fid%7D%22%2C%22deployments_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fdeployments%22%2C%22created_at%22%3A%222016-12-25T18%3A07%3A36Z%22%2C%22updated_at%22%3A%222016-12-25T18%3A07%3A39Z%22%2C%22pushed_at%22%3A%222016-12-26T12%3A28%3A45Z%22%2C%22git_url%22%3A%22git%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common.git%22%2C%22ssh_url%22%3A%22git%40github.com%3Adieffrei%2Ffflib-apex-common.git%22%2C%22clone_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common.git%22%2C%22svn_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common%22%2C%22homepage%22%3A%22%22%2C%22size%22%3A19892%2C%22stargazers_count%22%3A0%2C%22watchers_count%22%3A0%2C%22language%22%3A%22Apex%22%2C%22has_issues%22%3Afalse%2C%22has_downloads%22%3Atrue%2C%22has_wiki%22%3Atrue%2C%22has_pages%22%3Afalse%2C%22forks_count%22%3A0%2C%22mirror_url%22%3Anull%2C%22open_issues_count%22%3A1%2C%22forks%22%3A0%2C%22open_issues%22%3A1%2C%22watchers%22%3A0%2C%22default_branch%22%3A%22main%22%7D%2C%22sender%22%3A%7B%22login%22%3A%22dieffrei%22%2C%22id%22%3A3090010%2C%22avatar_url%22%3A%22https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F3090010%3Fv%3D3%22%2C%22gravatar_id%22%3A%22%22%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%22%2C%22html_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%22%2C%22followers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowers%22%2C%22following_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowing%7B%2Fother_user%7D%22%2C%22gists_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fgists%7B%2Fgist_id%7D%22%2C%22starred_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fstarred%7B%2Fowner%7D%7B%2Frepo%7D%22%2C%22subscriptions_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fsubscriptions%22%2C%22organizations_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Forgs%22%2C%22repos_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Frepos%22%2C%22events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fevents%7B%2Fprivacy%7D%22%2C%22received_events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Freceived_events%22%2C%22type%22%3A%22User%22%2C%22site_admin%22%3Afalse%7D%7D; line: 1, column: 8]\\r\\n2017-01-05T15:17:11.975376+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1702)\\r\\n2017-01-05T15:17:11.975497+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:558)\\r\\n2017-01-05T15:17:11.975595+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken(ReaderBasedJsonParser.java:2836)\\r\\n2017-01-05T15:17:11.975651+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddValue(ReaderBasedJsonParser.java:1899)\\r\\n2017-01-05T15:17:11.975717+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken(ReaderBasedJsonParser.java:749)\\r\\n2017-01-05T15:17:11.975791+00:00 app[web.1]: \\tat com.fasterxml.jackson.databind.ObjectMapper._initForReading(ObjectMapper.java:3825)\\r\\n2017-01-05T15:17:11.975843+00:00 app[web.1]: \\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3774)\\r\\n2017-01-05T15:17:11.975926+00:00 app[web.1]: \\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2833)\\r\\n2017-01-05T15:17:11.975981+00:00 app[web.1]: \\tat com.heroku.devcenter.GithubWebhookController.greeting(GithubWebhookController.java:26)\\r\\n2017-01-05T15:17:11.976065+00:00 app[web.1]: \\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n2017-01-05T15:17:11.976126+00:00 app[web.1]: \\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\\r\\n2017-01-05T15:17:11.976184+00:00 app[web.1]: \\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n2017-01-05T15:17:11.976265+00:00 app[web.1]: \\tat java.lang.reflect.Method.invoke(Method.java:498)\\r\\n2017-01-05T15:17:11.976337+00:00 app[web.1]: \\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:220)\\r\\n2017-01-05T15:17:11.976422+00:00 app[web.1]: \\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)\\r\\n2017-01-05T15:17:11.976483+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116)\\r\\n2017-01-05T15:17:11.976537+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)\\r\\n2017-01-05T15:17:11.976623+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)\\r\\n2017-01-05T15:17:11.976688+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)\\r\\n2017-01-05T15:17:11.976787+00:00 app[web.1]: \\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)\\r\\n2017-01-05T15:17:11.976853+00:00 app[web.1]: \\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)\\r\\n2017-01-05T15:17:11.976957+00:00 app[web.1]: \\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\\r\\n2017-01-05T15:17:11.977108+00:00 app[web.1]: \\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)\\r\\n2017-01-05T15:17:11.977153+00:00 app[web.1]: \\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:646)\\r\\n2017-01-05T15:17:11.977205+00:00 app[web.1]: \\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\\r\\n2017-01-05T15:17:11.977311+00:00 app[web.1]: \\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:727)\\r\\n2017-01-05T15:17:11.977361+00:00 app[web.1]: \\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)\\r\\n2017-01-05T15:17:11.977449+00:00 app[web.1]: \\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\\r\\n2017-01-05T15:17:11.977504+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)\\r\\n2017-01-05T15:17:11.977592+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)\\r\\n2017-01-05T15:17:11.977659+00:00 app[web.1]: \\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:503)\\r\\n2017-01-05T15:17:11.977706+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)\\r\\n2017-01-05T15:17:11.977792+00:00 app[web.1]: \\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)\\r\\n2017-01-05T15:17:11.977836+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\\r\\n2017-01-05T15:17:11.977927+00:00 app[web.1]: \\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:421)\\r\\n2017-01-05T15:17:11.977984+00:00 app[web.1]: \\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1070)\\r\\n2017-01-05T15:17:11.978051+00:00 app[web.1]: \\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:611)\\r\\n2017-01-05T15:17:11.978136+00:00 app[web.1]: \\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1736)\\r\\n2017-01-05T15:17:11.978289+00:00 app[web.1]: \\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1695)\\r\\n2017-01-05T15:17:11.978353+00:00 app[web.1]: \\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\\r\\n2017-01-05T15:17:11.978551+00:00 app[web.1]: \\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\\r\\n2017-01-05T15:17:11.978708+00:00 app[web.1]: \\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n2017-01-05T15:17:11.978863+00:00 app[web.1]: \\tat java.lang.Thread.run(Thread.java:745)\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/327\",\n@@ -285,7 +285,7 @@\n     \"updated_at\": \"2017-09-09T19:17:52Z\",\n     \"closed_at\": \"2017-09-09T19:17:52Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"**Note:** This is part of a developer preview, so it might be too early to implement.\\r\\n\\r\\nAccording the version 3 of the github API, new merge methods (`squash` and `rebase`) have been added, `merge` being the default: https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button\\r\\n\\r\\nIn [GHPullRequest#L294](https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GHPullRequest.java#L294), `merge_method` could be added to support different merge methods. Either the `merge` method could be overloaded to support different merge methods or methods for squashing and rebasing could be added.\"\n+    \"body\": \"**Note:** This is part of a developer preview, so it might be too early to implement.\\r\\n\\r\\nAccording the version 3 of the github API, new merge methods (`squash` and `rebase`) have been added, `merge` being the default: https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button\\r\\n\\r\\nIn [GHPullRequest#L294](https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GHPullRequest.java#L294), `merge_method` could be added to support different merge methods. Either the `merge` method could be overloaded to support different merge methods or methods for squashing and rebasing could be added.\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/325\","
    },
    {
      "sha": "8d23e09300831c6db265d74b651fe23e9dc1801f",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetMyself/__files/user_repos-3.json",
      "status": "modified",
      "additions": 28,
      "deletions": 28,
      "changes": 56,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetMyself/__files/user_repos-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetMyself/__files/user_repos-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetMyself/__files/user_repos-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -97,7 +97,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": false,\n       \"push\": true,\n@@ -202,7 +202,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": false,\n       \"push\": true,\n@@ -307,7 +307,7 @@\n     \"forks\": 2,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -412,7 +412,7 @@\n     \"forks\": 1133,\n     \"open_issues\": 295,\n     \"watchers\": 6449,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -517,7 +517,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -622,7 +622,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -727,7 +727,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -832,7 +832,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -937,7 +937,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -1042,7 +1042,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -1147,7 +1147,7 @@\n     \"forks\": 1,\n     \"open_issues\": 1,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -1252,7 +1252,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -1357,7 +1357,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -1456,7 +1456,7 @@\n     \"forks\": 12,\n     \"open_issues\": 0,\n     \"watchers\": 3,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -1555,7 +1555,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -1654,7 +1654,7 @@\n     \"forks\": 13,\n     \"open_issues\": 1,\n     \"watchers\": 2,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -1759,7 +1759,7 @@\n     \"forks\": 5,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -1864,7 +1864,7 @@\n     \"forks\": 7,\n     \"open_issues\": 2,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -1963,7 +1963,7 @@\n     \"forks\": 2,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -2068,7 +2068,7 @@\n     \"forks\": 14,\n     \"open_issues\": 0,\n     \"watchers\": 2,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -2167,7 +2167,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -2272,7 +2272,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -2371,7 +2371,7 @@\n     \"forks\": 2,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -2476,7 +2476,7 @@\n     \"forks\": 1,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -2575,7 +2575,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -2674,7 +2674,7 @@\n     \"forks\": 1,\n     \"open_issues\": 3,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -2773,7 +2773,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,\n@@ -3088,7 +3088,7 @@\n     \"forks\": 0,\n     \"open_issues\": 0,\n     \"watchers\": 0,\n-    \"default_branch\": \"master\",\n+    \"default_branch\": \"main\",\n     \"permissions\": {\n       \"admin\": true,\n       \"push\": true,"
    },
    {
      "sha": "941eae49b0908969e7ccc1f056355db7c2c139fc",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetTeamsForRepo/__files/repos_hub4j-test-org_testgetteamsforrepo-3.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetTeamsForRepo/__files/repos_hub4j-test-org_testgetteamsforrepo-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetTeamsForRepo/__files/repos_hub4j-test-org_testgetteamsforrepo-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testGetTeamsForRepo/__files/repos_hub4j-test-org_testgetteamsforrepo-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -90,7 +90,7 @@\n   \"forks\": 0,\n   \"open_issues\": 0,\n   \"watchers\": 0,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "bf7bc2c7981586cb9b3f92550186b8ffc856eec9",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_cdfoundation_foundation_issues_13_comments-16.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_cdfoundation_foundation_issues_13_comments-16.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_cdfoundation_foundation_issues_13_comments-16.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_cdfoundation_foundation_issues_13_comments-16.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -59,6 +59,6 @@\n     \"created_at\": \"2019-09-20T22:11:30Z\",\n     \"updated_at\": \"2019-09-20T22:11:30Z\",\n     \"author_association\": \"CONTRIBUTOR\",\n-    \"body\": \"Here is a general process we can follow:\\r\\n\\r\\nhttps://github.com/cncf/foundation/blob/master/gb-developer-reps.md\"\n+    \"body\": \"Here is a general process we can follow:\\r\\n\\r\\nhttps://github.com/cncf/foundation/blob/main/gb-developer-reps.md\"\n   }\n ]\n\\ No newline at end of file"
    },
    {
      "sha": "2a331abff0f0b018e482d094edbfec8463f9ffa9",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_hub4j_github-api_issues_178_comments-39.json",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_hub4j_github-api_issues_178_comments-39.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_hub4j_github-api_issues_178_comments-39.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_hub4j_github-api_issues_178_comments-39.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -59,7 +59,7 @@\n     \"created_at\": \"2015-04-20T00:53:48Z\",\n     \"updated_at\": \"2015-04-20T00:53:48Z\",\n     \"author_association\": \"CONTRIBUTOR\",\n-    \"body\": \"@kohsuke assumption that Issue and PR has the same data is wrong. They track different instances of data. Example is date time of changes: https://github.com/KostyaSha/github-pullrequest-plugin/blob/master/src/main/java/org/jenkinsci/plugins/github/pullrequest/GitHubPRTrigger.java#L370-L371\\n\"\n+    \"body\": \"@kohsuke assumption that Issue and PR has the same data is wrong. They track different instances of data. Example is date time of changes: https://github.com/KostyaSha/github-pullrequest-plugin/blob/main/src/main/java/org/jenkinsci/plugins/github/pullrequest/GitHubPRTrigger.java#L370-L371\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/comments/94330925\",\n@@ -90,7 +90,7 @@\n     \"created_at\": \"2015-04-20T01:02:20Z\",\n     \"updated_at\": \"2015-04-20T01:02:20Z\",\n     \"author_association\": \"CONTRIBUTOR\",\n-    \"body\": \"And https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GHPullRequest.java#L111 is Deprecated\\n\"\n+    \"body\": \"And https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GHPullRequest.java#L111 is Deprecated\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/comments/94331349\","
    },
    {
      "sha": "a1989830256744f89cbab9293d22b4bb8c549e10",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_jenkinsci_packaging_issues_57_comments-41.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_jenkinsci_packaging_issues_57_comments-41.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_jenkinsci_packaging_issues_57_comments-41.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_jenkinsci_packaging_issues_57_comments-41.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -28,7 +28,7 @@\n     \"created_at\": \"2016-06-16T13:49:32Z\",\n     \"updated_at\": \"2016-06-16T13:55:15Z\",\n     \"author_association\": \"MEMBER\",\n-    \"body\": \"@evandandrea Thank you for submitting this, it is a very interesting addition. AFAIK currently our infrastructure will not support a Ubuntu 16.04 build natively, however there is an option to do this via docker containers where supported (we've got an image that can be used for that currently, but it is 14.04 based). \\n\\nCC @kohsuke and @jtnord for thoughts on adding another packaging format for Jenkins as proposed in this PR?  \\n\\nMy thought currently is that currently the snap format is very new and niche, so it's probably not worth the major effort to add infra support for it, test the support, and maintain it as a primary distribution in the main project.    However if someone wanted to maintain & distribute a port to snap packaging (similar to how the BSD distributions are done), that would make sense to add to the download links on Jenkins.io once it is mature.   But I'm curious what you all think...\\n\\nAttaching a reference for the [snapcraft yaml format](https://developer.ubuntu.com/en/snappy/build-apps/snapcraft-syntax/).  From what I can tell this does not support many of the config options currently enabled for the other linux packages, as well as additional service integration, so it would need some work to get to the same state (and significant testing).  \\n\\n**References for what a snapcraft package would need to be considered an equivalent distribution option:**\\n- Init scripts for Debian (showing options): https://github.com/jenkinsci/packaging/blob/master/deb/build/debian/jenkins.init\\n- Jenkins config args for Debian (another packaging should more or less support these options): https://github.com/jenkinsci/packaging/blob/master/deb/build/debian/jenkins.default\\n- Needs to  work correctly with the common plugins and options (require some significant testing)\\n\"\n+    \"body\": \"@evandandrea Thank you for submitting this, it is a very interesting addition. AFAIK currently our infrastructure will not support a Ubuntu 16.04 build natively, however there is an option to do this via docker containers where supported (we've got an image that can be used for that currently, but it is 14.04 based). \\n\\nCC @kohsuke and @jtnord for thoughts on adding another packaging format for Jenkins as proposed in this PR?  \\n\\nMy thought currently is that currently the snap format is very new and niche, so it's probably not worth the major effort to add infra support for it, test the support, and maintain it as a primary distribution in the main project.    However if someone wanted to maintain & distribute a port to snap packaging (similar to how the BSD distributions are done), that would make sense to add to the download links on Jenkins.io once it is mature.   But I'm curious what you all think...\\n\\nAttaching a reference for the [snapcraft yaml format](https://developer.ubuntu.com/en/snappy/build-apps/snapcraft-syntax/).  From what I can tell this does not support many of the config options currently enabled for the other linux packages, as well as additional service integration, so it would need some work to get to the same state (and significant testing).  \\n\\n**References for what a snapcraft package would need to be considered an equivalent distribution option:**\\n- Init scripts for Debian (showing options): https://github.com/jenkinsci/packaging/blob/main/deb/build/debian/jenkins.init\\n- Jenkins config args for Debian (another packaging should more or less support these options): https://github.com/jenkinsci/packaging/blob/main/deb/build/debian/jenkins.default\\n- Needs to  work correctly with the common plugins and options (require some significant testing)\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/jenkinsci/packaging/issues/comments/226734398\","
    },
    {
      "sha": "fba9abaa2f30eae7b91a8634940bb6f49c5e0fff",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_jenkinsci_ruby-runtime-plugin_issues_6_comments-31.json",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_jenkinsci_ruby-runtime-plugin_issues_6_comments-31.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_jenkinsci_ruby-runtime-plugin_issues_6_comments-31.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_jenkinsci_ruby-runtime-plugin_issues_6_comments-31.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -59,7 +59,7 @@\n     \"created_at\": \"2018-04-06T15:55:14Z\",\n     \"updated_at\": \"2018-04-06T15:55:14Z\",\n     \"author_association\": \"MEMBER\",\n-    \"body\": \"@jglick It seems that we both got confused... a bit. The actual code of the plugin seems to be hosted here: https://github.com/jenkinsci/jenkins.rb/blob/master/java-runtime/pom.xml\\r\\n\"\n+    \"body\": \"@jglick It seems that we both got confused... a bit. The actual code of the plugin seems to be hosted here: https://github.com/jenkinsci/jenkins.rb/blob/main/java-runtime/pom.xml\\r\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/jenkinsci/ruby-runtime-plugin/issues/comments/379300796\",\n@@ -121,7 +121,7 @@\n     \"created_at\": \"2018-04-17T16:45:56Z\",\n     \"updated_at\": \"2018-04-17T16:45:56Z\",\n     \"author_association\": \"MEMBER\",\n-    \"body\": \"@jglick I meant that https://github.com/jenkinsci/jenkins.rb/blob/master/java-runtime/pom.xml appears to be a full copy of this repository. \\r\\n\"\n+    \"body\": \"@jglick I meant that https://github.com/jenkinsci/jenkins.rb/blob/main/java-runtime/pom.xml appears to be a full copy of this repository. \\r\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/jenkinsci/ruby-runtime-plugin/issues/comments/382071599\",\n@@ -431,7 +431,7 @@\n     \"created_at\": \"2018-04-24T08:07:17Z\",\n     \"updated_at\": \"2018-04-24T08:07:17Z\",\n     \"author_association\": \"MEMBER\",\n-    \"body\": \"@hsbt Ack, thanks for the update! Generally we need to understand why there is a codebase duplication between https://github.com/jenkinsci/ruby-runtime-plugin and https://github.com/jenkinsci/jenkins.rb/blob/master/java-runtime/ and what would be the best way to address it. Maybe you have some knowledge of that, which would be really helpful.\\r\\n\\r\\nIf you are fine, I will mark the Ruby Runtime plugin for adoption so that others could take its ownership if they are interested.\\r\\n\"\n+    \"body\": \"@hsbt Ack, thanks for the update! Generally we need to understand why there is a codebase duplication between https://github.com/jenkinsci/ruby-runtime-plugin and https://github.com/jenkinsci/jenkins.rb/blob/main/java-runtime/ and what would be the best way to address it. Maybe you have some knowledge of that, which would be really helpful.\\r\\n\\r\\nIf you are fine, I will mark the Ruby Runtime plugin for adoption so that others could take its ownership if they are interested.\\r\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/jenkinsci/ruby-runtime-plugin/issues/comments/385945690\","
    },
    {
      "sha": "2e579b2dbd79b481789abe7266069839b8577cf1",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_kohsuke_winsw_issues_288_comments-22.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_kohsuke_winsw_issues_288_comments-22.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_kohsuke_winsw_issues_288_comments-22.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/repos_kohsuke_winsw_issues_288_comments-22.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -59,6 +59,6 @@\n     \"created_at\": \"2019-02-16T12:35:13Z\",\n     \"updated_at\": \"2019-02-16T12:38:30Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"Hi @kohsuke @oleg-nenashev  - I am searching for windows service auto update as my service installed in around 1000 different client servers and found below link for download tag in winsw :\\r\\nhttps://github.com/kohsuke/winsw/blob/master/doc/xmlConfigFile.md#download - \\\"This is another useful building block for developing a self-updating service.\\\" This is mentioned in this link.\\r\\nSo how can we do auto update of jar using this same download tag ?\\r\\n\"\n+    \"body\": \"Hi @kohsuke @oleg-nenashev  - I am searching for windows service auto update as my service installed in around 1000 different client servers and found below link for download tag in winsw :\\r\\nhttps://github.com/kohsuke/winsw/blob/main/doc/xmlConfigFile.md#download - \\\"This is another useful building block for developing a self-updating service.\\\" This is mentioned in this link.\\r\\nSo how can we do auto update of jar using this same download tag ?\\r\\n\"\n   }\n ]\n\\ No newline at end of file"
    },
    {
      "sha": "971894c0f5dacd4bb1a388057f3669c97519c535",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/search_issues-2.json",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/search_issues-2.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/search_issues-2.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/search_issues-2.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -487,7 +487,7 @@\n       \"updated_at\": \"2019-11-07T22:58:29Z\",\n       \"closed_at\": null,\n       \"author_association\": \"NONE\",\n-      \"body\": \"[`GHPullRequest.setMilestone()`](https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GHIssue.java#L206) which was helpfully added in https://github.com/kohsuke/github-api/pull/397 appears to have a minor bug.  It works when called on an instance of `GHIssue` directly but not on `GHPullRequest`.  I **think** this is because it calls `edit` rather than `editIssue` which is used by labels, assignees, etc and so it gets the wrong API endpoint for setting a milestone which is a property of the issue not the pull request.\\r\\n\\r\\nI would submit a fix for this myself, except: https://github.com/kohsuke/github-api/issues/415.  Sorry!\",\n+      \"body\": \"[`GHPullRequest.setMilestone()`](https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GHIssue.java#L206) which was helpfully added in https://github.com/kohsuke/github-api/pull/397 appears to have a minor bug.  It works when called on an instance of `GHIssue` directly but not on `GHPullRequest`.  I **think** this is because it calls `edit` rather than `editIssue` which is used by labels, assignees, etc and so it gets the wrong API endpoint for setting a milestone which is a property of the issue not the pull request.\\r\\n\\r\\nI would submit a fix for this myself, except: https://github.com/kohsuke/github-api/issues/415.  Sorry!\",\n       \"score\": 1\n     },\n     {\n@@ -1056,7 +1056,7 @@\n         \"diff_url\": \"https://github.com/jenkinsci/workflow-cps-global-lib-plugin/pull/76.diff\",\n         \"patch_url\": \"https://github.com/jenkinsci/workflow-cps-global-lib-plugin/pull/76.patch\"\n       },\n-      \"body\": \"In my company we use this shared pipeline library plugin, and I find it hard to test changes to shared pipeline libraries unless I have write access to their repository and am able to create a branch, then I can refer to the changes with @Library('libraryname@branchname').\\r\\n\\r\\nCurrently it seems there's no way to import a fork of a library to override an implicitly loaded shared library.  I'd use this functionality frequently to test any changes made in our shared libraries.\\r\\n\\r\\nI was able to test this PR by building hpi files and importing them into the jenkinsci official docker container.  I then created a shared library here:  https://github.com/willcrain1/test-pipeline-library and forked it here as well and made minor changes:  https://github.com/jenkinspipelinetesting/test-pipeline-library\\r\\n\\r\\nI executed the libraries in this Jenkinsfile: https://github.com/willcrain1/test-pipeline/blob/master/Jenkinsfile\\r\\n\\r\\n@jglick @kohsuke any feedback is appreciated.\",\n+      \"body\": \"In my company we use this shared pipeline library plugin, and I find it hard to test changes to shared pipeline libraries unless I have write access to their repository and am able to create a branch, then I can refer to the changes with @Library('libraryname@branchname').\\r\\n\\r\\nCurrently it seems there's no way to import a fork of a library to override an implicitly loaded shared library.  I'd use this functionality frequently to test any changes made in our shared libraries.\\r\\n\\r\\nI was able to test this PR by building hpi files and importing them into the jenkinsci official docker container.  I then created a shared library here:  https://github.com/willcrain1/test-pipeline-library and forked it here as well and made minor changes:  https://github.com/jenkinspipelinetesting/test-pipeline-library\\r\\n\\r\\nI executed the libraries in this Jenkinsfile: https://github.com/willcrain1/test-pipeline/blob/main/Jenkinsfile\\r\\n\\r\\n@jglick @kohsuke any feedback is appreciated.\",\n       \"score\": 1\n     },\n     {"
    },
    {
      "sha": "971894c0f5dacd4bb1a388057f3669c97519c535",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/search_issues-3.json",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/search_issues-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/search_issues-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/search_issues-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -487,7 +487,7 @@\n       \"updated_at\": \"2019-11-07T22:58:29Z\",\n       \"closed_at\": null,\n       \"author_association\": \"NONE\",\n-      \"body\": \"[`GHPullRequest.setMilestone()`](https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GHIssue.java#L206) which was helpfully added in https://github.com/kohsuke/github-api/pull/397 appears to have a minor bug.  It works when called on an instance of `GHIssue` directly but not on `GHPullRequest`.  I **think** this is because it calls `edit` rather than `editIssue` which is used by labels, assignees, etc and so it gets the wrong API endpoint for setting a milestone which is a property of the issue not the pull request.\\r\\n\\r\\nI would submit a fix for this myself, except: https://github.com/kohsuke/github-api/issues/415.  Sorry!\",\n+      \"body\": \"[`GHPullRequest.setMilestone()`](https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GHIssue.java#L206) which was helpfully added in https://github.com/kohsuke/github-api/pull/397 appears to have a minor bug.  It works when called on an instance of `GHIssue` directly but not on `GHPullRequest`.  I **think** this is because it calls `edit` rather than `editIssue` which is used by labels, assignees, etc and so it gets the wrong API endpoint for setting a milestone which is a property of the issue not the pull request.\\r\\n\\r\\nI would submit a fix for this myself, except: https://github.com/kohsuke/github-api/issues/415.  Sorry!\",\n       \"score\": 1\n     },\n     {\n@@ -1056,7 +1056,7 @@\n         \"diff_url\": \"https://github.com/jenkinsci/workflow-cps-global-lib-plugin/pull/76.diff\",\n         \"patch_url\": \"https://github.com/jenkinsci/workflow-cps-global-lib-plugin/pull/76.patch\"\n       },\n-      \"body\": \"In my company we use this shared pipeline library plugin, and I find it hard to test changes to shared pipeline libraries unless I have write access to their repository and am able to create a branch, then I can refer to the changes with @Library('libraryname@branchname').\\r\\n\\r\\nCurrently it seems there's no way to import a fork of a library to override an implicitly loaded shared library.  I'd use this functionality frequently to test any changes made in our shared libraries.\\r\\n\\r\\nI was able to test this PR by building hpi files and importing them into the jenkinsci official docker container.  I then created a shared library here:  https://github.com/willcrain1/test-pipeline-library and forked it here as well and made minor changes:  https://github.com/jenkinspipelinetesting/test-pipeline-library\\r\\n\\r\\nI executed the libraries in this Jenkinsfile: https://github.com/willcrain1/test-pipeline/blob/master/Jenkinsfile\\r\\n\\r\\n@jglick @kohsuke any feedback is appreciated.\",\n+      \"body\": \"In my company we use this shared pipeline library plugin, and I find it hard to test changes to shared pipeline libraries unless I have write access to their repository and am able to create a branch, then I can refer to the changes with @Library('libraryname@branchname').\\r\\n\\r\\nCurrently it seems there's no way to import a fork of a library to override an implicitly loaded shared library.  I'd use this functionality frequently to test any changes made in our shared libraries.\\r\\n\\r\\nI was able to test this PR by building hpi files and importing them into the jenkinsci official docker container.  I then created a shared library here:  https://github.com/willcrain1/test-pipeline-library and forked it here as well and made minor changes:  https://github.com/jenkinspipelinetesting/test-pipeline-library\\r\\n\\r\\nI executed the libraries in this Jenkinsfile: https://github.com/willcrain1/test-pipeline/blob/main/Jenkinsfile\\r\\n\\r\\n@jglick @kohsuke any feedback is appreciated.\",\n       \"score\": 1\n     },\n     {"
    },
    {
      "sha": "99635fde509d52196ad3adc75116eca533c2dfd7",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/search_issues-34.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/search_issues-34.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/search_issues-34.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testIssueSearch/__files/search_issues-34.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -150,7 +150,7 @@\n       \"updated_at\": \"2017-05-18T13:07:27Z\",\n       \"closed_at\": null,\n       \"author_association\": \"NONE\",\n-      \"body\": \"In [this commit](https://github.com/kohsuke/args4j/commit/8af18273cdd3c4103b1c1e087b94ffff495c6347) `CommandLineParser` was modified to use `parserProperties.getOptionValueDelimiter()`  instead of supporting only \\\"=\\\" as a delimiter.\\r\\n\\r\\nHowever, it appears as though the `splitToken()` method inside of `CmdLineImpl` was missed in this change:\\r\\n\\r\\n```java\\r\\n         /**\\r\\n         * Used when the current token is of the form \\\"-option=value\\\",\\r\\n         * to replace the current token by \\\"value\\\", as if this was given as two tokens \\\"-option value\\\"\\r\\n         */\\r\\n        void splitToken() {\\r\\n            if (pos < args.length && pos >= 0) {\\r\\n                int idx = args[pos].indexOf(\\\"=\\\");\\r\\n                if (idx > 0) {\\r\\n                    args[pos] = args[pos].substring(idx + 1);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n```\\r\\nIt is still using a [hard-coded equals sign](https://github.com/kohsuke/args4j/blob/master/args4j/src/org/kohsuke/args4j/CmdLineParser.java#L443) to determine the index of the parameter to remove instead of calling `parserProperties.getOptionValueDelimiter()`.\\r\\n\\r\\nThis means that, for example, when I change the option value delimiter to \\\":\\\", and try and parse something like \\\"-e:testing\\\" what gets passed through as a parameter value is \\\"-e:testing\\\" when I would expect to have just \\\"testing\\\" as a value.\",\n+      \"body\": \"In [this commit](https://github.com/kohsuke/args4j/commit/8af18273cdd3c4103b1c1e087b94ffff495c6347) `CommandLineParser` was modified to use `parserProperties.getOptionValueDelimiter()`  instead of supporting only \\\"=\\\" as a delimiter.\\r\\n\\r\\nHowever, it appears as though the `splitToken()` method inside of `CmdLineImpl` was missed in this change:\\r\\n\\r\\n```java\\r\\n         /**\\r\\n         * Used when the current token is of the form \\\"-option=value\\\",\\r\\n         * to replace the current token by \\\"value\\\", as if this was given as two tokens \\\"-option value\\\"\\r\\n         */\\r\\n        void splitToken() {\\r\\n            if (pos < args.length && pos >= 0) {\\r\\n                int idx = args[pos].indexOf(\\\"=\\\");\\r\\n                if (idx > 0) {\\r\\n                    args[pos] = args[pos].substring(idx + 1);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n```\\r\\nIt is still using a [hard-coded equals sign](https://github.com/kohsuke/args4j/blob/main/args4j/src/org/kohsuke/args4j/CmdLineParser.java#L443) to determine the index of the parameter to remove instead of calling `parserProperties.getOptionValueDelimiter()`.\\r\\n\\r\\nThis means that, for example, when I change the option value delimiter to \\\":\\\", and try and parse something like \\\"-e:testing\\\" what gets passed through as a parameter value is \\\"-e:testing\\\" when I would expect to have just \\\"testing\\\" as a value.\",\n       \"score\": 1\n     },\n     {"
    },
    {
      "sha": "6bf55ebf1382928f103b478ff13634efddd114ee",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListCommits/__files/repos_kohsuke_empty-commit-3.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListCommits/__files/repos_kohsuke_empty-commit-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListCommits/__files/repos_kohsuke_empty-commit-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListCommits/__files/repos_kohsuke_empty-commit-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -90,7 +90,7 @@\n   \"forks\": 0,\n   \"open_issues\": 0,\n   \"watchers\": 2,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": false,\n     \"push\": false,"
    },
    {
      "sha": "30782cbe987d81139e2e931659b0591bfa6355ee",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repos_hub4j_github-api-3.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repos_hub4j_github-api-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repos_hub4j_github-api-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repos_hub4j_github-api-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -96,7 +96,7 @@\n   \"forks\": 444,\n   \"open_issues\": 55,\n   \"watchers\": 602,\n-  \"default_branch\": \"master\",\n+  \"default_branch\": \"main\",\n   \"permissions\": {\n     \"admin\": true,\n     \"push\": true,"
    },
    {
      "sha": "0be52641b4dda12dc34e13c8becbf223aded712f",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repos_hub4j_github-api_issues-4.json",
      "status": "modified",
      "additions": 19,
      "deletions": 19,
      "changes": 38,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repos_hub4j_github-api_issues-4.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repos_hub4j_github-api_issues-4.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repos_hub4j_github-api_issues-4.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "7a9d02a946444c5c792a57c200abb33c407f0f1e",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-10.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-10.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-10.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-10.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1043,7 +1043,7 @@\n     \"updated_at\": \"2018-08-30T15:37:51Z\",\n     \"closed_at\": \"2018-08-30T15:37:50Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"If I checkout `192e21a9fcacf4dffc975156bcf5e8ff7bf297b1` (HEAD right now), and run `mvn test` I see a `ClassNotFoundException`.  It cannot even report success or failure of individual tests.\\r\\n\\r\\nI believe this is related to https://github.com/kohsuke/github-api/pull/388 which upgraded jgit, but maybe not all of the unit tests.  Specifically [`LifecycleTest`](https://github.com/kohsuke/github-api/blob/master/src/test/java/org/kohsuke/github/LifecycleTest.java) references `UsernamePasswordCredentialsProvider` which is no longer in the newer versions of jgit.\\r\\n\\r\\nI'll be honest, as I tried to fix this I kept getting some unexpected classpath errors related to jgit (first this one, then one about `GitAPIException`, etc), and much as I know my way around a super complex build, I didn't feel like learning about the maven plugin for bridge method generation, and everything else it might take me to sort this out.  Is there something basic I missed for setting up a working development environment for this project?  I feel like I must have missed something simple for `mvn test` not to work.\\r\\n\\r\\nThe surefire log shows:\\r\\n\\r\\n```\\r\\n-------------------------------------------------------\\r\\n T E S T S\\r\\n-------------------------------------------------------\\r\\norg.apache.maven.surefire.util.SurefireReflectionException: java.lang.reflect.InvocationTargetException; nested exception is java.lang.reflect.InvocationTargetException: null\\r\\njava.lang.reflect.InvocationTargetException\\r\\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\\r\\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n        at java.lang.reflect.Method.invoke(Method.java:498)\\r\\n        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\\r\\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\\r\\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\\r\\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)\\r\\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\\r\\nCaused by: java.lang.NoClassDefFoundError: org/eclipse/jgit/transport/CredentialsProvider\\r\\n        at java.lang.Class.getDeclaredMethods0(Native Method)\\r\\n        at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\\r\\n        at java.lang.Class.privateGetMethodRecursive(Class.java:3048)\\r\\n        at java.lang.Class.getMethod0(Class.java:3018)\\r\\n        at java.lang.Class.getMethod(Class.java:1784)\\r\\n        at org.apache.maven.surefire.util.ReflectionUtils.tryGetMethod(ReflectionUtils.java:57)\\r\\n        at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.isSuiteOnly(JUnit3TestChecker.java:64)\\r\\n        at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.isValidJUnit3Test(JUnit3TestChecker.java:59)\\r\\n        at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.accept(JUnit3TestChecker.java:54)\\r\\n        at org.apache.maven.surefire.common.junit4.JUnit4TestChecker.accept(JUnit4TestChecker.java:51)\\r\\n        at org.apache.maven.surefire.util.DefaultScanResult.applyFilter(DefaultScanResult.java:97)\\r\\n        at org.apache.maven.surefire.junit4.JUnit4Provider.scanClassPath(JUnit4Provider.java:194)\\r\\n        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:92)\\r\\n        ... 9 more\\r\\nCaused by: java.lang.ClassNotFoundException: org.eclipse.jgit.transport.CredentialsProvider\\r\\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:381)\\r\\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\\r\\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\\r\\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\\r\\n        ... 22 more\\r\\n\\r\\nResults :\\r\\n\\r\\nTests run: 0, Failures: 0, Errors: 0, Skipped: 0\\r\\n```\\r\\n\\r\\n\\r\\nMaven version:\\r\\n```\\r\\nApache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T08:41:47-08:00)\\r\\nMaven home: C:\\\\Program Files\\\\Maven\\r\\nJava version: 1.8.0_121, vendor: Oracle Corporation\\r\\nJava home: C:\\\\Program Files\\\\Java\\\\jdk1.8.0_121\\\\jre\\r\\nDefault locale: en_US, platform encoding: Cp1252\\r\\nOS name: \\\"windows nt (unknown)\\\", version: \\\"10.0\\\", arch: \\\"amd64\\\", family: \\\"dos\\\"\\r\\n```\"\n+    \"body\": \"If I checkout `192e21a9fcacf4dffc975156bcf5e8ff7bf297b1` (HEAD right now), and run `mvn test` I see a `ClassNotFoundException`.  It cannot even report success or failure of individual tests.\\r\\n\\r\\nI believe this is related to https://github.com/kohsuke/github-api/pull/388 which upgraded jgit, but maybe not all of the unit tests.  Specifically [`LifecycleTest`](https://github.com/kohsuke/github-api/blob/main/src/test/java/org/kohsuke/github/LifecycleTest.java) references `UsernamePasswordCredentialsProvider` which is no longer in the newer versions of jgit.\\r\\n\\r\\nI'll be honest, as I tried to fix this I kept getting some unexpected classpath errors related to jgit (first this one, then one about `GitAPIException`, etc), and much as I know my way around a super complex build, I didn't feel like learning about the maven plugin for bridge method generation, and everything else it might take me to sort this out.  Is there something basic I missed for setting up a working development environment for this project?  I feel like I must have missed something simple for `mvn test` not to work.\\r\\n\\r\\nThe surefire log shows:\\r\\n\\r\\n```\\r\\n-------------------------------------------------------\\r\\n T E S T S\\r\\n-------------------------------------------------------\\r\\norg.apache.maven.surefire.util.SurefireReflectionException: java.lang.reflect.InvocationTargetException; nested exception is java.lang.reflect.InvocationTargetException: null\\r\\njava.lang.reflect.InvocationTargetException\\r\\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\\r\\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n        at java.lang.reflect.Method.invoke(Method.java:498)\\r\\n        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\\r\\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\\r\\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\\r\\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)\\r\\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\\r\\nCaused by: java.lang.NoClassDefFoundError: org/eclipse/jgit/transport/CredentialsProvider\\r\\n        at java.lang.Class.getDeclaredMethods0(Native Method)\\r\\n        at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\\r\\n        at java.lang.Class.privateGetMethodRecursive(Class.java:3048)\\r\\n        at java.lang.Class.getMethod0(Class.java:3018)\\r\\n        at java.lang.Class.getMethod(Class.java:1784)\\r\\n        at org.apache.maven.surefire.util.ReflectionUtils.tryGetMethod(ReflectionUtils.java:57)\\r\\n        at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.isSuiteOnly(JUnit3TestChecker.java:64)\\r\\n        at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.isValidJUnit3Test(JUnit3TestChecker.java:59)\\r\\n        at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.accept(JUnit3TestChecker.java:54)\\r\\n        at org.apache.maven.surefire.common.junit4.JUnit4TestChecker.accept(JUnit4TestChecker.java:51)\\r\\n        at org.apache.maven.surefire.util.DefaultScanResult.applyFilter(DefaultScanResult.java:97)\\r\\n        at org.apache.maven.surefire.junit4.JUnit4Provider.scanClassPath(JUnit4Provider.java:194)\\r\\n        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:92)\\r\\n        ... 9 more\\r\\nCaused by: java.lang.ClassNotFoundException: org.eclipse.jgit.transport.CredentialsProvider\\r\\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:381)\\r\\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\\r\\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)\\r\\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\\r\\n        ... 22 more\\r\\n\\r\\nResults :\\r\\n\\r\\nTests run: 0, Failures: 0, Errors: 0, Skipped: 0\\r\\n```\\r\\n\\r\\n\\r\\nMaven version:\\r\\n```\\r\\nApache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T08:41:47-08:00)\\r\\nMaven home: C:\\\\Program Files\\\\Maven\\r\\nJava version: 1.8.0_121, vendor: Oracle Corporation\\r\\nJava home: C:\\\\Program Files\\\\Java\\\\jdk1.8.0_121\\\\jre\\r\\nDefault locale: en_US, platform encoding: Cp1252\\r\\nOS name: \\\"windows nt (unknown)\\\", version: \\\"10.0\\\", arch: \\\"amd64\\\", family: \\\"dos\\\"\\r\\n```\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/414\","
    },
    {
      "sha": "1c46938971fd2bf39c5623a25791a75255ea7530",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-11.json",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-11.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-11.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-11.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -317,7 +317,7 @@\n     \"updated_at\": \"2018-02-07T08:40:41Z\",\n     \"closed_at\": \"2018-01-13T05:33:14Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"This used to work, but a change in the last couple months seems to have broken this for us. \\r\\n\\r\\nWe have some Jenkins Pipeline code that does some automatic PR creation + merging for specific use cases. Initially when creating the PR, GitHub isn't always immediately able to act on it, so we would check if it were mergeable before actually attempting to merge:\\r\\n\\r\\n```\\r\\nGHPullRequest pull = repo.createPullRequest(\\\"Release $version\\\", \\\"master\\\", \\\"production\\\", body)\\r\\nwhile(!pull.getMergeable()) {\\r\\n    echo \\\"PR not yet mergeable, retrying...\\\"\\r\\n}\\r\\npull.merge(\\\"Merged & released via [${env.BUILD_NUMBER}](${env.BUILD_URL})\\\", pull.getHead().getSha())\\r\\n```\\r\\n\\r\\nNow however, pull.getMergeable() never returns true if it returns false the first time it is called (which is basically every time), so it just sits in that loop, retrying. \\r\\n\\r\\nAgain, this only broke after we recently updated all of our plugins on our Jenkins instance, so it seems a recent change is causing this but I've been unable to identify what it might be in the recent history. \"\n+    \"body\": \"This used to work, but a change in the last couple months seems to have broken this for us. \\r\\n\\r\\nWe have some Jenkins Pipeline code that does some automatic PR creation + merging for specific use cases. Initially when creating the PR, GitHub isn't always immediately able to act on it, so we would check if it were mergeable before actually attempting to merge:\\r\\n\\r\\n```\\r\\nGHPullRequest pull = repo.createPullRequest(\\\"Release $version\\\", \\\"main\\\", \\\"production\\\", body)\\r\\nwhile(!pull.getMergeable()) {\\r\\n    echo \\\"PR not yet mergeable, retrying...\\\"\\r\\n}\\r\\npull.merge(\\\"Merged & released via [${env.BUILD_NUMBER}](${env.BUILD_URL})\\\", pull.getHead().getSha())\\r\\n```\\r\\n\\r\\nNow however, pull.getMergeable() never returns true if it returns false the first time it is called (which is basically every time), so it just sits in that loop, retrying. \\r\\n\\r\\nAgain, this only broke after we recently updated all of our plugins on our Jenkins instance, so it seems a recent change is causing this but I've been unable to identify what it might be in the recent history. \"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/398\",\n@@ -575,22 +575,22 @@\n     \"number\": 393,\n     \"title\": \"64-bit id support\",\n     \"user\": {\n-      \"login\": \"Raimmaster\",\n+      \"login\": \"Raimmain\",\n       \"id\": 6061123,\n       \"node_id\": \"MDQ6VXNlcjYwNjExMjM=\",\n       \"avatar_url\": \"https://avatars3.githubusercontent.com/u/6061123?v=4\",\n       \"gravatar_id\": \"\",\n-      \"url\": \"https://api.github.com/users/Raimmaster\",\n-      \"html_url\": \"https://github.com/Raimmaster\",\n-      \"followers_url\": \"https://api.github.com/users/Raimmaster/followers\",\n-      \"following_url\": \"https://api.github.com/users/Raimmaster/following{/other_user}\",\n-      \"gists_url\": \"https://api.github.com/users/Raimmaster/gists{/gist_id}\",\n-      \"starred_url\": \"https://api.github.com/users/Raimmaster/starred{/owner}{/repo}\",\n-      \"subscriptions_url\": \"https://api.github.com/users/Raimmaster/subscriptions\",\n-      \"organizations_url\": \"https://api.github.com/users/Raimmaster/orgs\",\n-      \"repos_url\": \"https://api.github.com/users/Raimmaster/repos\",\n-      \"events_url\": \"https://api.github.com/users/Raimmaster/events{/privacy}\",\n-      \"received_events_url\": \"https://api.github.com/users/Raimmaster/received_events\",\n+      \"url\": \"https://api.github.com/users/Raimmain\",\n+      \"html_url\": \"https://github.com/Raimmain\",\n+      \"followers_url\": \"https://api.github.com/users/Raimmain/followers\",\n+      \"following_url\": \"https://api.github.com/users/Raimmain/following{/other_user}\",\n+      \"gists_url\": \"https://api.github.com/users/Raimmain/gists{/gist_id}\",\n+      \"starred_url\": \"https://api.github.com/users/Raimmain/starred{/owner}{/repo}\",\n+      \"subscriptions_url\": \"https://api.github.com/users/Raimmain/subscriptions\",\n+      \"organizations_url\": \"https://api.github.com/users/Raimmain/orgs\",\n+      \"repos_url\": \"https://api.github.com/users/Raimmain/repos\",\n+      \"events_url\": \"https://api.github.com/users/Raimmain/events{/privacy}\",\n+      \"received_events_url\": \"https://api.github.com/users/Raimmain/received_events\",\n       \"type\": \"User\",\n       \"site_admin\": false\n     },"
    },
    {
      "sha": "ea523753fda0170eeff95f0413ecbecbe60d8dce",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-12.json",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-12.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-12.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-12.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -179,7 +179,7 @@\n     \"updated_at\": \"2019-10-26T02:20:02Z\",\n     \"closed_at\": \"2019-10-26T02:20:02Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"I have a use case in which I get a commit id for a particular branch in a repository, but when I try to get the file content from that particular branch, I get the content for the same file from the master branch.\\r\\n\\r\\nHow to get a branch and get the file content from that branch only. Also, is it possible to get the branch and file content on the basis of commit id. Below is my code I use to get the file content\\r\\n\\r\\n\\r\\n`\\r\\n\\r\\n\\r\\n        GHContent props = null;\\r\\n        try {\\r\\n            props = ghBranch.getOwner().getFileContent(\\\"props.json\\\");\\r\\n        } catch (IOException e) {\\r\\n            return Response.badRequest(\\\"Cannot find props.json at the root of project\\\");\\r\\n        }\\r\\n\\r\\n        CustomProps props = convertorService.getProperties(props);\\r\\n        return Response.ok(cloud);`\\r\\n\"\n+    \"body\": \"I have a use case in which I get a commit id for a particular branch in a repository, but when I try to get the file content from that particular branch, I get the content for the same file from the main branch.\\r\\n\\r\\nHow to get a branch and get the file content from that branch only. Also, is it possible to get the branch and file content on the basis of commit id. Below is my code I use to get the file content\\r\\n\\r\\n\\r\\n`\\r\\n\\r\\n\\r\\n        GHContent props = null;\\r\\n        try {\\r\\n            props = ghBranch.getOwner().getFileContent(\\\"props.json\\\");\\r\\n        } catch (IOException e) {\\r\\n            return Response.badRequest(\\\"Cannot find props.json at the root of project\\\");\\r\\n        }\\r\\n\\r\\n        CustomProps props = convertorService.getProperties(props);\\r\\n        return Response.ok(cloud);`\\r\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/370\",\n@@ -223,7 +223,7 @@\n     \"updated_at\": \"2019-11-07T22:56:39Z\",\n     \"closed_at\": \"2019-11-07T22:56:39Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"As of yesterday evening a jenkins job we have running using this repo has stopped working. We get a jackson deserialization error throwing a java IO exception here: https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/Requester.java#L608\\r\\n\\r\\nIt also mentions something about:  caused by: com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.lang.String out of START_OBJECT token\\r\\n at [Source: java.io.StringReader@5474ef58; line: 1, column: 4222] (through reference chain: org.kohsuke.github.GHRepository[\\\"homepage\\\"]))\\r\\n\\r\\nWe checked GHRepository homepage and this is a string but in our json from github homepage looks like:\\r\\n\\\"homepage\\\":{\\\"scheme\\\":\\\"http\\\",\\\"user\\\":null,\\\"password\\\":null,\\\"host\\\":\\\"xxxxx-xx.github.com\\\",\\\"port\\\":null,\\\"path\\\":\\\"/xxxx-xxxx/\\\",\\\"query\\\":null,\\\"fragment\\\":null}\\r\\n\\r\\nSo I think the issue is trying to put this object into a homepage string but we are not sure why this problem started suddenly. There have been no changes to the script we have.\\r\\n\"\n+    \"body\": \"As of yesterday evening a jenkins job we have running using this repo has stopped working. We get a jackson deserialization error throwing a java IO exception here: https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/Requester.java#L608\\r\\n\\r\\nIt also mentions something about:  caused by: com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.lang.String out of START_OBJECT token\\r\\n at [Source: java.io.StringReader@5474ef58; line: 1, column: 4222] (through reference chain: org.kohsuke.github.GHRepository[\\\"homepage\\\"]))\\r\\n\\r\\nWe checked GHRepository homepage and this is a string but in our json from github homepage looks like:\\r\\n\\\"homepage\\\":{\\\"scheme\\\":\\\"http\\\",\\\"user\\\":null,\\\"password\\\":null,\\\"host\\\":\\\"xxxxx-xx.github.com\\\",\\\"port\\\":null,\\\"path\\\":\\\"/xxxx-xxxx/\\\",\\\"query\\\":null,\\\"fragment\\\":null}\\r\\n\\r\\nSo I think the issue is trying to put this object into a homepage string but we are not sure why this problem started suddenly. There have been no changes to the script we have.\\r\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/369\",\n@@ -367,7 +367,7 @@\n     \"updated_at\": \"2017-07-28T17:36:12Z\",\n     \"closed_at\": \"2017-07-28T17:35:59Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"```\\r\\nGHPullRequest pull = repo.createPullRequest(\\\"Release $version\\\", \\\"master\\\", \\\"production\\\", body)\\r\\nwhile(!pull.getMergeable()) {\\r\\n      println \\\"PR not yet mergeable, retrying...\\\"\\r\\n      sleep 2\\r\\n}\\r\\npull.merge(\\\"Merged via Jenkins\\\", pull.getHead().getSha())\\r\\n```\\r\\n\\r\\nThe `pull.merge(...)` seemingly results in a no-op. No error. No merge. \\r\\n\\r\\nGenerally it's not immediately mergeable via `pull.getMergeable()` and it must pause a moment before that passes. But even accounting for that, I still get nothing. \"\n+    \"body\": \"```\\r\\nGHPullRequest pull = repo.createPullRequest(\\\"Release $version\\\", \\\"main\\\", \\\"production\\\", body)\\r\\nwhile(!pull.getMergeable()) {\\r\\n      println \\\"PR not yet mergeable, retrying...\\\"\\r\\n      sleep 2\\r\\n}\\r\\npull.merge(\\\"Merged via Jenkins\\\", pull.getHead().getSha())\\r\\n```\\r\\n\\r\\nThe `pull.merge(...)` seemingly results in a no-op. No error. No merge. \\r\\n\\r\\nGenerally it's not immediately mergeable via `pull.getMergeable()` and it must pause a moment before that passes. But even accounting for that, I still get nothing. \"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/366\",\n@@ -1357,7 +1357,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/343.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/343.patch\"\n     },\n-    \"body\": \"I already add the latest release, so please add to master and update version so that I can use in my project\\r\\nFix #341 \\r\\n\\r\\nPS  I don't know how to push my fixed module to the maven server so, please. @emlagowski \\r\\n\\r\\n\\r\\nThank you\"\n+    \"body\": \"I already add the latest release, so please add to main and update version so that I can use in my project\\r\\nFix #341 \\r\\n\\r\\nPS  I don't know how to push my fixed module to the maven server so, please. @emlagowski \\r\\n\\r\\n\\r\\nThank you\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/342\","
    },
    {
      "sha": "ba313c60ca3906d12ddcfc81284358268ea50642",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-13.json",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-13.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-13.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-13.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -291,7 +291,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/336.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/336.patch\"\n     },\n-    \"body\": \"Correct namespace\\r\\n\\r\\nFile: https://github.com/square/okhttp/blob/master/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java\\r\\n\\r\\nFixes #335\"\n+    \"body\": \"Correct namespace\\r\\n\\r\\nFile: https://github.com/square/okhttp/blob/main/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java\\r\\n\\r\\nFixes #335\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/335\",\n@@ -667,7 +667,7 @@\n     \"updated_at\": \"2017-01-08T18:45:12Z\",\n     \"closed_at\": \"2017-01-08T18:45:12Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"Executing github.getRepository(\\\"user/repo\\\").createWebHook(new URL(\\\"someurl...\\\"));\\r\\nWebhook was created but a exception is throwed:\\r\\n\\r\\n2017-01-05T15:17:11.974971+00:00 app[web.1]: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'payload': was expecting ('true', 'false' or 'null')\\r\\n2017-01-05T15:17:11.975129+00:00 app[web.1]:  at [Source: payload=%7B%22zen%22%3A%22Non-blocking+is+better+than+blocking.%22%2C%22hook_id%22%3A11405663%2C%22hook%22%3A%7B%22type%22%3A%22Repository%22%2C%22id%22%3A11405663%2C%22name%22%3A%22web%22%2C%22active%22%3Atrue%2C%22events%22%3A%5B%22push%22%5D%2C%22config%22%3A%7B%22url%22%3A%22https%3A%2F%2Fmorning-crag-16002.herokuapp.com%2Fapplication%2Fgithub%2Fwebhooks%22%7D%2C%22updated_at%22%3A%222017-01-05T15%3A17%3A11Z%22%2C%22created_at%22%3A%222017-01-05T15%3A17%3A11Z%22%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%2F11405663%22%2C%22test_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%2F11405663%2Ftest%22%2C%22ping_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%2F11405663%2Fpings%22%2C%22last_response%22%3A%7B%22code%22%3Anull%2C%22status%22%3A%22unused%22%2C%22message%22%3Anull%7D%7D%2C%22repository%22%3A%7B%22id%22%3A77337343%2C%22name%22%3A%22fflib-apex-common%22%2C%22full_name%22%3A%22dieffrei%2Ffflib-apex-common%22%2C%22owner%22%3A%7B%22login%22%3A%22dieffrei%22%2C%22id%22%3A3090010%2C%22avatar_url%22%3A%22https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F3090010%3Fv%3D3%22%2C%22gravatar_id%22%3A%22%22%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%22%2C%22html_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%22%2C%22followers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowers%22%2C%22following_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowing%7B%2Fother_user%7D%22%2C%22gists_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fgists%7B%2Fgist_id%7D%22%2C%22starred_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fstarred%7B%2Fowner%7D%7B%2Frepo%7D%22%2C%22subscriptions_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fsubscriptions%22%2C%22organizations_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Forgs%22%2C%22repos_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Frepos%22%2C%22events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fevents%7B%2Fprivacy%7D%22%2C%22received_events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Freceived_events%22%2C%22type%22%3A%22User%22%2C%22site_admin%22%3Afalse%7D%2C%22private%22%3Afalse%2C%22html_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common%22%2C%22description%22%3A%22Common+Apex+Library+supporting+Apex+Enterprise+Patterns+and+much+more%21%22%2C%22fork%22%3Atrue%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%22%2C%22forks_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fforks%22%2C%22keys_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fkeys%7B%2Fkey_id%7D%22%2C%22collaborators_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcollaborators%7B%2Fcollaborator%7D%22%2C%22teams_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fteams%22%2C%22hooks_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%22%2C%22issue_events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fissues%2Fevents%7B%2Fnumber%7D%22%2C%22events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fevents%22%2C%22assignees_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fassignees%7B%2Fuser%7D%22%2C%22branches_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fbranches%7B%2Fbranch%7D%22%2C%22tags_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Ftags%22%2C%22blobs_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Fblobs%7B%2Fsha%7D%22%2C%22git_tags_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Ftags%7B%2Fsha%7D%22%2C%22git_refs_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Frefs%7B%2Fsha%7D%22%2C%22trees_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Ftrees%7B%2Fsha%7D%22%2C%22statuses_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fstatuses%2F%7Bsha%7D%22%2C%22languages_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Flanguages%22%2C%22stargazers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fstargazers%22%2C%22contributors_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcontributors%22%2C%22subscribers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fsubscribers%22%2C%22subscription_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fsubscription%22%2C%22commits_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcommits%7B%2Fsha%7D%22%2C%22git_commits_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Fcommits%7B%2Fsha%7D%22%2C%22comments_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcomments%7B%2Fnumber%7D%22%2C%22issue_comment_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fissues%2Fcomments%7B%2Fnumber%7D%22%2C%22contents_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcontents%2F%7B%2Bpath%7D%22%2C%22compare_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcompare%2F%7Bbase%7D...%7Bhead%7D%22%2C%22merges_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fmerges%22%2C%22archive_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2F%7Barchive_format%7D%7B%2Fref%7D%22%2C%22downloads_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fdownloads%22%2C%22issues_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fissues%7B%2Fnumber%7D%22%2C%22pulls_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fpulls%7B%2Fnumber%7D%22%2C%22milestones_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fmilestones%7B%2Fnumber%7D%22%2C%22notifications_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fnotifications%7B%3Fsince%2Call%2Cparticipating%7D%22%2C%22labels_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Flabels%7B%2Fname%7D%22%2C%22releases_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Freleases%7B%2Fid%7D%22%2C%22deployments_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fdeployments%22%2C%22created_at%22%3A%222016-12-25T18%3A07%3A36Z%22%2C%22updated_at%22%3A%222016-12-25T18%3A07%3A39Z%22%2C%22pushed_at%22%3A%222016-12-26T12%3A28%3A45Z%22%2C%22git_url%22%3A%22git%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common.git%22%2C%22ssh_url%22%3A%22git%40github.com%3Adieffrei%2Ffflib-apex-common.git%22%2C%22clone_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common.git%22%2C%22svn_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common%22%2C%22homepage%22%3A%22%22%2C%22size%22%3A19892%2C%22stargazers_count%22%3A0%2C%22watchers_count%22%3A0%2C%22language%22%3A%22Apex%22%2C%22has_issues%22%3Afalse%2C%22has_downloads%22%3Atrue%2C%22has_wiki%22%3Atrue%2C%22has_pages%22%3Afalse%2C%22forks_count%22%3A0%2C%22mirror_url%22%3Anull%2C%22open_issues_count%22%3A1%2C%22forks%22%3A0%2C%22open_issues%22%3A1%2C%22watchers%22%3A0%2C%22default_branch%22%3A%22master%22%7D%2C%22sender%22%3A%7B%22login%22%3A%22dieffrei%22%2C%22id%22%3A3090010%2C%22avatar_url%22%3A%22https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F3090010%3Fv%3D3%22%2C%22gravatar_id%22%3A%22%22%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%22%2C%22html_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%22%2C%22followers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowers%22%2C%22following_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowing%7B%2Fother_user%7D%22%2C%22gists_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fgists%7B%2Fgist_id%7D%22%2C%22starred_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fstarred%7B%2Fowner%7D%7B%2Frepo%7D%22%2C%22subscriptions_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fsubscriptions%22%2C%22organizations_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Forgs%22%2C%22repos_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Frepos%22%2C%22events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fevents%7B%2Fprivacy%7D%22%2C%22received_events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Freceived_events%22%2C%22type%22%3A%22User%22%2C%22site_admin%22%3Afalse%7D%7D; line: 1, column: 8]\\r\\n2017-01-05T15:17:11.975376+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1702)\\r\\n2017-01-05T15:17:11.975497+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:558)\\r\\n2017-01-05T15:17:11.975595+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken(ReaderBasedJsonParser.java:2836)\\r\\n2017-01-05T15:17:11.975651+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddValue(ReaderBasedJsonParser.java:1899)\\r\\n2017-01-05T15:17:11.975717+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken(ReaderBasedJsonParser.java:749)\\r\\n2017-01-05T15:17:11.975791+00:00 app[web.1]: \\tat com.fasterxml.jackson.databind.ObjectMapper._initForReading(ObjectMapper.java:3825)\\r\\n2017-01-05T15:17:11.975843+00:00 app[web.1]: \\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3774)\\r\\n2017-01-05T15:17:11.975926+00:00 app[web.1]: \\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2833)\\r\\n2017-01-05T15:17:11.975981+00:00 app[web.1]: \\tat com.heroku.devcenter.GithubWebhookController.greeting(GithubWebhookController.java:26)\\r\\n2017-01-05T15:17:11.976065+00:00 app[web.1]: \\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n2017-01-05T15:17:11.976126+00:00 app[web.1]: \\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\\r\\n2017-01-05T15:17:11.976184+00:00 app[web.1]: \\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n2017-01-05T15:17:11.976265+00:00 app[web.1]: \\tat java.lang.reflect.Method.invoke(Method.java:498)\\r\\n2017-01-05T15:17:11.976337+00:00 app[web.1]: \\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:220)\\r\\n2017-01-05T15:17:11.976422+00:00 app[web.1]: \\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)\\r\\n2017-01-05T15:17:11.976483+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116)\\r\\n2017-01-05T15:17:11.976537+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)\\r\\n2017-01-05T15:17:11.976623+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)\\r\\n2017-01-05T15:17:11.976688+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)\\r\\n2017-01-05T15:17:11.976787+00:00 app[web.1]: \\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)\\r\\n2017-01-05T15:17:11.976853+00:00 app[web.1]: \\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)\\r\\n2017-01-05T15:17:11.976957+00:00 app[web.1]: \\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\\r\\n2017-01-05T15:17:11.977108+00:00 app[web.1]: \\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)\\r\\n2017-01-05T15:17:11.977153+00:00 app[web.1]: \\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:646)\\r\\n2017-01-05T15:17:11.977205+00:00 app[web.1]: \\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\\r\\n2017-01-05T15:17:11.977311+00:00 app[web.1]: \\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:727)\\r\\n2017-01-05T15:17:11.977361+00:00 app[web.1]: \\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)\\r\\n2017-01-05T15:17:11.977449+00:00 app[web.1]: \\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\\r\\n2017-01-05T15:17:11.977504+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)\\r\\n2017-01-05T15:17:11.977592+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)\\r\\n2017-01-05T15:17:11.977659+00:00 app[web.1]: \\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:503)\\r\\n2017-01-05T15:17:11.977706+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)\\r\\n2017-01-05T15:17:11.977792+00:00 app[web.1]: \\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)\\r\\n2017-01-05T15:17:11.977836+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\\r\\n2017-01-05T15:17:11.977927+00:00 app[web.1]: \\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:421)\\r\\n2017-01-05T15:17:11.977984+00:00 app[web.1]: \\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1070)\\r\\n2017-01-05T15:17:11.978051+00:00 app[web.1]: \\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:611)\\r\\n2017-01-05T15:17:11.978136+00:00 app[web.1]: \\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1736)\\r\\n2017-01-05T15:17:11.978289+00:00 app[web.1]: \\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1695)\\r\\n2017-01-05T15:17:11.978353+00:00 app[web.1]: \\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\\r\\n2017-01-05T15:17:11.978551+00:00 app[web.1]: \\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\\r\\n2017-01-05T15:17:11.978708+00:00 app[web.1]: \\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n2017-01-05T15:17:11.978863+00:00 app[web.1]: \\tat java.lang.Thread.run(Thread.java:745)\"\n+    \"body\": \"Executing github.getRepository(\\\"user/repo\\\").createWebHook(new URL(\\\"someurl...\\\"));\\r\\nWebhook was created but a exception is throwed:\\r\\n\\r\\n2017-01-05T15:17:11.974971+00:00 app[web.1]: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'payload': was expecting ('true', 'false' or 'null')\\r\\n2017-01-05T15:17:11.975129+00:00 app[web.1]:  at [Source: payload=%7B%22zen%22%3A%22Non-blocking+is+better+than+blocking.%22%2C%22hook_id%22%3A11405663%2C%22hook%22%3A%7B%22type%22%3A%22Repository%22%2C%22id%22%3A11405663%2C%22name%22%3A%22web%22%2C%22active%22%3Atrue%2C%22events%22%3A%5B%22push%22%5D%2C%22config%22%3A%7B%22url%22%3A%22https%3A%2F%2Fmorning-crag-16002.herokuapp.com%2Fapplication%2Fgithub%2Fwebhooks%22%7D%2C%22updated_at%22%3A%222017-01-05T15%3A17%3A11Z%22%2C%22created_at%22%3A%222017-01-05T15%3A17%3A11Z%22%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%2F11405663%22%2C%22test_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%2F11405663%2Ftest%22%2C%22ping_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%2F11405663%2Fpings%22%2C%22last_response%22%3A%7B%22code%22%3Anull%2C%22status%22%3A%22unused%22%2C%22message%22%3Anull%7D%7D%2C%22repository%22%3A%7B%22id%22%3A77337343%2C%22name%22%3A%22fflib-apex-common%22%2C%22full_name%22%3A%22dieffrei%2Ffflib-apex-common%22%2C%22owner%22%3A%7B%22login%22%3A%22dieffrei%22%2C%22id%22%3A3090010%2C%22avatar_url%22%3A%22https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F3090010%3Fv%3D3%22%2C%22gravatar_id%22%3A%22%22%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%22%2C%22html_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%22%2C%22followers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowers%22%2C%22following_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowing%7B%2Fother_user%7D%22%2C%22gists_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fgists%7B%2Fgist_id%7D%22%2C%22starred_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fstarred%7B%2Fowner%7D%7B%2Frepo%7D%22%2C%22subscriptions_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fsubscriptions%22%2C%22organizations_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Forgs%22%2C%22repos_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Frepos%22%2C%22events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fevents%7B%2Fprivacy%7D%22%2C%22received_events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Freceived_events%22%2C%22type%22%3A%22User%22%2C%22site_admin%22%3Afalse%7D%2C%22private%22%3Afalse%2C%22html_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common%22%2C%22description%22%3A%22Common+Apex+Library+supporting+Apex+Enterprise+Patterns+and+much+more%21%22%2C%22fork%22%3Atrue%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%22%2C%22forks_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fforks%22%2C%22keys_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fkeys%7B%2Fkey_id%7D%22%2C%22collaborators_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcollaborators%7B%2Fcollaborator%7D%22%2C%22teams_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fteams%22%2C%22hooks_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fhooks%22%2C%22issue_events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fissues%2Fevents%7B%2Fnumber%7D%22%2C%22events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fevents%22%2C%22assignees_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fassignees%7B%2Fuser%7D%22%2C%22branches_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fbranches%7B%2Fbranch%7D%22%2C%22tags_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Ftags%22%2C%22blobs_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Fblobs%7B%2Fsha%7D%22%2C%22git_tags_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Ftags%7B%2Fsha%7D%22%2C%22git_refs_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Frefs%7B%2Fsha%7D%22%2C%22trees_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Ftrees%7B%2Fsha%7D%22%2C%22statuses_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fstatuses%2F%7Bsha%7D%22%2C%22languages_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Flanguages%22%2C%22stargazers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fstargazers%22%2C%22contributors_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcontributors%22%2C%22subscribers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fsubscribers%22%2C%22subscription_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fsubscription%22%2C%22commits_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcommits%7B%2Fsha%7D%22%2C%22git_commits_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fgit%2Fcommits%7B%2Fsha%7D%22%2C%22comments_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcomments%7B%2Fnumber%7D%22%2C%22issue_comment_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fissues%2Fcomments%7B%2Fnumber%7D%22%2C%22contents_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcontents%2F%7B%2Bpath%7D%22%2C%22compare_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fcompare%2F%7Bbase%7D...%7Bhead%7D%22%2C%22merges_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fmerges%22%2C%22archive_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2F%7Barchive_format%7D%7B%2Fref%7D%22%2C%22downloads_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fdownloads%22%2C%22issues_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fissues%7B%2Fnumber%7D%22%2C%22pulls_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fpulls%7B%2Fnumber%7D%22%2C%22milestones_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fmilestones%7B%2Fnumber%7D%22%2C%22notifications_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fnotifications%7B%3Fsince%2Call%2Cparticipating%7D%22%2C%22labels_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Flabels%7B%2Fname%7D%22%2C%22releases_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Freleases%7B%2Fid%7D%22%2C%22deployments_url%22%3A%22https%3A%2F%2Fapi.github.com%2Frepos%2Fdieffrei%2Ffflib-apex-common%2Fdeployments%22%2C%22created_at%22%3A%222016-12-25T18%3A07%3A36Z%22%2C%22updated_at%22%3A%222016-12-25T18%3A07%3A39Z%22%2C%22pushed_at%22%3A%222016-12-26T12%3A28%3A45Z%22%2C%22git_url%22%3A%22git%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common.git%22%2C%22ssh_url%22%3A%22git%40github.com%3Adieffrei%2Ffflib-apex-common.git%22%2C%22clone_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common.git%22%2C%22svn_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%2Ffflib-apex-common%22%2C%22homepage%22%3A%22%22%2C%22size%22%3A19892%2C%22stargazers_count%22%3A0%2C%22watchers_count%22%3A0%2C%22language%22%3A%22Apex%22%2C%22has_issues%22%3Afalse%2C%22has_downloads%22%3Atrue%2C%22has_wiki%22%3Atrue%2C%22has_pages%22%3Afalse%2C%22forks_count%22%3A0%2C%22mirror_url%22%3Anull%2C%22open_issues_count%22%3A1%2C%22forks%22%3A0%2C%22open_issues%22%3A1%2C%22watchers%22%3A0%2C%22default_branch%22%3A%22main%22%7D%2C%22sender%22%3A%7B%22login%22%3A%22dieffrei%22%2C%22id%22%3A3090010%2C%22avatar_url%22%3A%22https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F3090010%3Fv%3D3%22%2C%22gravatar_id%22%3A%22%22%2C%22url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%22%2C%22html_url%22%3A%22https%3A%2F%2Fgithub.com%2Fdieffrei%22%2C%22followers_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowers%22%2C%22following_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Ffollowing%7B%2Fother_user%7D%22%2C%22gists_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fgists%7B%2Fgist_id%7D%22%2C%22starred_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fstarred%7B%2Fowner%7D%7B%2Frepo%7D%22%2C%22subscriptions_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fsubscriptions%22%2C%22organizations_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Forgs%22%2C%22repos_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Frepos%22%2C%22events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Fevents%7B%2Fprivacy%7D%22%2C%22received_events_url%22%3A%22https%3A%2F%2Fapi.github.com%2Fusers%2Fdieffrei%2Freceived_events%22%2C%22type%22%3A%22User%22%2C%22site_admin%22%3Afalse%7D%7D; line: 1, column: 8]\\r\\n2017-01-05T15:17:11.975376+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1702)\\r\\n2017-01-05T15:17:11.975497+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:558)\\r\\n2017-01-05T15:17:11.975595+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken(ReaderBasedJsonParser.java:2836)\\r\\n2017-01-05T15:17:11.975651+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddValue(ReaderBasedJsonParser.java:1899)\\r\\n2017-01-05T15:17:11.975717+00:00 app[web.1]: \\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken(ReaderBasedJsonParser.java:749)\\r\\n2017-01-05T15:17:11.975791+00:00 app[web.1]: \\tat com.fasterxml.jackson.databind.ObjectMapper._initForReading(ObjectMapper.java:3825)\\r\\n2017-01-05T15:17:11.975843+00:00 app[web.1]: \\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3774)\\r\\n2017-01-05T15:17:11.975926+00:00 app[web.1]: \\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2833)\\r\\n2017-01-05T15:17:11.975981+00:00 app[web.1]: \\tat com.heroku.devcenter.GithubWebhookController.greeting(GithubWebhookController.java:26)\\r\\n2017-01-05T15:17:11.976065+00:00 app[web.1]: \\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n2017-01-05T15:17:11.976126+00:00 app[web.1]: \\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\\r\\n2017-01-05T15:17:11.976184+00:00 app[web.1]: \\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n2017-01-05T15:17:11.976265+00:00 app[web.1]: \\tat java.lang.reflect.Method.invoke(Method.java:498)\\r\\n2017-01-05T15:17:11.976337+00:00 app[web.1]: \\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:220)\\r\\n2017-01-05T15:17:11.976422+00:00 app[web.1]: \\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)\\r\\n2017-01-05T15:17:11.976483+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116)\\r\\n2017-01-05T15:17:11.976537+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)\\r\\n2017-01-05T15:17:11.976623+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)\\r\\n2017-01-05T15:17:11.976688+00:00 app[web.1]: \\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)\\r\\n2017-01-05T15:17:11.976787+00:00 app[web.1]: \\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)\\r\\n2017-01-05T15:17:11.976853+00:00 app[web.1]: \\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)\\r\\n2017-01-05T15:17:11.976957+00:00 app[web.1]: \\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\\r\\n2017-01-05T15:17:11.977108+00:00 app[web.1]: \\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)\\r\\n2017-01-05T15:17:11.977153+00:00 app[web.1]: \\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:646)\\r\\n2017-01-05T15:17:11.977205+00:00 app[web.1]: \\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\\r\\n2017-01-05T15:17:11.977311+00:00 app[web.1]: \\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:727)\\r\\n2017-01-05T15:17:11.977361+00:00 app[web.1]: \\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)\\r\\n2017-01-05T15:17:11.977449+00:00 app[web.1]: \\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\\r\\n2017-01-05T15:17:11.977504+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)\\r\\n2017-01-05T15:17:11.977592+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)\\r\\n2017-01-05T15:17:11.977659+00:00 app[web.1]: \\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:503)\\r\\n2017-01-05T15:17:11.977706+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)\\r\\n2017-01-05T15:17:11.977792+00:00 app[web.1]: \\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)\\r\\n2017-01-05T15:17:11.977836+00:00 app[web.1]: \\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\\r\\n2017-01-05T15:17:11.977927+00:00 app[web.1]: \\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:421)\\r\\n2017-01-05T15:17:11.977984+00:00 app[web.1]: \\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1070)\\r\\n2017-01-05T15:17:11.978051+00:00 app[web.1]: \\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:611)\\r\\n2017-01-05T15:17:11.978136+00:00 app[web.1]: \\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1736)\\r\\n2017-01-05T15:17:11.978289+00:00 app[web.1]: \\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1695)\\r\\n2017-01-05T15:17:11.978353+00:00 app[web.1]: \\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\\r\\n2017-01-05T15:17:11.978551+00:00 app[web.1]: \\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\\r\\n2017-01-05T15:17:11.978708+00:00 app[web.1]: \\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n2017-01-05T15:17:11.978863+00:00 app[web.1]: \\tat java.lang.Thread.run(Thread.java:745)\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/327\",\n@@ -761,7 +761,7 @@\n     \"updated_at\": \"2017-09-09T19:17:52Z\",\n     \"closed_at\": \"2017-09-09T19:17:52Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"**Note:** This is part of a developer preview, so it might be too early to implement.\\r\\n\\r\\nAccording the version 3 of the github API, new merge methods (`squash` and `rebase`) have been added, `merge` being the default: https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button\\r\\n\\r\\nIn [GHPullRequest#L294](https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GHPullRequest.java#L294), `merge_method` could be added to support different merge methods. Either the `merge` method could be overloaded to support different merge methods or methods for squashing and rebasing could be added.\"\n+    \"body\": \"**Note:** This is part of a developer preview, so it might be too early to implement.\\r\\n\\r\\nAccording the version 3 of the github API, new merge methods (`squash` and `rebase`) have been added, `merge` being the default: https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button\\r\\n\\r\\nIn [GHPullRequest#L294](https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GHPullRequest.java#L294), `merge_method` could be added to support different merge methods. Either the `merge` method could be overloaded to support different merge methods or methods for squashing and rebasing could be added.\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/325\","
    },
    {
      "sha": "cdd7123743d4582413bee792f511ab316e7fe901",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-14.json",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-14.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-14.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-14.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1107,7 +1107,7 @@\n     \"updated_at\": \"2016-07-19T21:44:19Z\",\n     \"closed_at\": \"2016-07-19T15:00:30Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"Hello,\\n\\nI have built a tool using your API, which has been working for many months now, but suddenly fails due to a `FileNotFoundException` thrown by `getInputStrem` in OKHttp. When I paste the url it is trying to download, into my browser, it works perfectly fine. I can see the file contents. This is very strange. Do you have any clue about this?\\n\\nStack trace:\\n\\n```\\ntables [ERROR] [07/12/2016 12:15:41.086] [TableService-akka.actor.default-dispatcher-8] [akka://TableService/user/simple-service-actor] Error during processing of request HttpRequest(POST,http://localhost:8084/api/metadata/list,List(Host: localhost:8084, Connection: keep-alive, Content-Length: 59, Origin: http://localhost:8084, X-Requested-With: XMLHttpRequest, User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36 OPR/38.0.2220.41, Content-Type: application/json, Referer: http://localhost:8084/, Accept-Encoding: gzip, deflate, lzma, Accept-Language: en-US, en;q=0.8, Cookie: tablestore-data-git=eyJhY2Nlc3NUb2tlbiI6ImYyZDI1OTViNGQ4OTMwMjIwMGI2YjE2MjNhNzQ3ZjQ3MzI1ZWJkOWMifQ==; tablestore-data-git2=eyJhY2Nlc3NUb2tlbiI6ImZlYmMxYTRlYjA1MmI4OWJlNDQwOWFmODk3OGNkYWFhYWY1OWZlNWEifQ==),HttpEntity(application/json,{\\\"repo\\\":\\\"aristo-tables\\\",\\\"fork\\\":\\\"allenai\\\",\\\"branch\\\":\\\"master\\\"}),HTTP/1.1)\\ntables java.io.FileNotFoundException: 400: Invalid request\\ntables \\ntables  at org.kohsuke.github.Requester.handleApiError(Requester.java:527)\\ntables  at org.kohsuke.github.Requester.asStream(Requester.java:293)\\ntables  at org.kohsuke.github.GHContent.read(GHContent.java:118)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getCsvFileLocal$1.apply(GitHubUtil.scala:420)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getCsvFileLocal$1.apply(GitHubUtil.scala:417)\\ntables  at scala.Option.foreach(Option.scala:257)\\ntables  at org.allenai.ari.tables.GitHubUtil.getCsvFileLocal(GitHubUtil.scala:417)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$7.apply(GitHubUtil.scala:239)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$7.apply(GitHubUtil.scala:236)\\ntables  at scala.collection.parallel.mutable.ParArray$ParArrayIterator.flatmap2combiner(ParArray.scala:417)\\ntables  at scala.collection.parallel.ParIterableLike$FlatMap.leaf(ParIterableLike.scala:1072)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\\ntables  at scala.collection.parallel.ParIterableLike$FlatMap.tryLeaf(ParIterableLike.scala:1068)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.internal(Tasks.scala:159)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.internal(Tasks.scala:443)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:149)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\\ntables  at scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doJoin(ForkJoinTask.java:341)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.join(ForkJoinTask.java:673)\\ntables  at scala.collection.parallel.ForkJoinTasks$WrappedTask$class.sync(Tasks.scala:378)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.sync(Tasks.scala:443)\\ntables  at scala.collection.parallel.ForkJoinTasks$class.executeAndWaitResult(Tasks.scala:426)\\ntables  at scala.collection.parallel.ForkJoinTaskSupport.executeAndWaitResult(TaskSupport.scala:56)\\ntables  at scala.collection.parallel.ExecutionContextTasks$class.executeAndWaitResult(Tasks.scala:558)\\ntables  at scala.collection.parallel.ExecutionContextTaskSupport.executeAndWaitResult(TaskSupport.scala:80)\\ntables  at scala.collection.parallel.ParIterableLike$ResultMapping.leaf(ParIterableLike.scala:958)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\\ntables  at scala.collection.parallel.ParIterableLike$ResultMapping.tryLeaf(ParIterableLike.scala:953)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:152)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\\ntables  at scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doJoin(ForkJoinTask.java:341)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.join(ForkJoinTask.java:673)\\ntables  at scala.collection.parallel.ForkJoinTasks$WrappedTask$class.sync(Tasks.scala:378)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.sync(Tasks.scala:443)\\ntables  at scala.collection.parallel.ForkJoinTasks$class.executeAndWaitResult(Tasks.scala:426)\\ntables  at scala.collection.parallel.ForkJoinTaskSupport.executeAndWaitResult(TaskSupport.scala:56)\\ntables  at scala.collection.parallel.ExecutionContextTasks$class.executeAndWaitResult(Tasks.scala:558)\\ntables  at scala.collection.parallel.ExecutionContextTaskSupport.executeAndWaitResult(TaskSupport.scala:80)\\ntables  at scala.collection.parallel.ParIterableLike$class.flatMap(ParIterableLike.scala:513)\\ntables  at scala.collection.parallel.mutable.ParArray.flatMap(ParArray.scala:56)\\ntables  at org.allenai.ari.tables.GitHubUtil.org$allenai$ari$tables$GitHubUtil$$getTableMetadata(GitHubUtil.scala:236)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getTableMetadata$2.apply(GitHubUtil.scala:229)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getTableMetadata$2.apply(GitHubUtil.scala:229)\\ntables  at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251)\\ntables  at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249)\\ntables  at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:32)\\ntables  at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.scala:91)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91)\\ntables  at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:72)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:90)\\ntables  at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:39)\\ntables  at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:399)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\\ntables  at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\\ntables  at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\\ntables  at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\\ntables Caused by: java.io.FileNotFoundException: https://raw.githubusercontent.com/allenai/aristo-tables/master/tables/abstract_concrete/abstract_concrete.csv?token=AFXsrivOTIoDru9Htw9aNTJbprmE5m0Gks5XhUHfwA%3D%3D\\ntables  at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getInputStream(HttpURLConnectionImpl.java:228)\\ntables  at com.squareup.okhttp.internal.huc.DelegatingHttpsURLConnection.getInputStream(DelegatingHttpsURLConnection.java:210)\\ntables  at com.squareup.okhttp.internal.huc.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:25)\\ntables  at org.kohsuke.github.Requester.asStream(Requester.java:291)\\ntables  ... 66 more\\n```\\n\\nYour help is greatly appreciated,\\nSumithra\\n\"\n+    \"body\": \"Hello,\\n\\nI have built a tool using your API, which has been working for many months now, but suddenly fails due to a `FileNotFoundException` thrown by `getInputStrem` in OKHttp. When I paste the url it is trying to download, into my browser, it works perfectly fine. I can see the file contents. This is very strange. Do you have any clue about this?\\n\\nStack trace:\\n\\n```\\ntables [ERROR] [07/12/2016 12:15:41.086] [TableService-akka.actor.default-dispatcher-8] [akka://TableService/user/simple-service-actor] Error during processing of request HttpRequest(POST,http://localhost:8084/api/metadata/list,List(Host: localhost:8084, Connection: keep-alive, Content-Length: 59, Origin: http://localhost:8084, X-Requested-With: XMLHttpRequest, User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36 OPR/38.0.2220.41, Content-Type: application/json, Referer: http://localhost:8084/, Accept-Encoding: gzip, deflate, lzma, Accept-Language: en-US, en;q=0.8, Cookie: tablestore-data-git=eyJhY2Nlc3NUb2tlbiI6ImYyZDI1OTViNGQ4OTMwMjIwMGI2YjE2MjNhNzQ3ZjQ3MzI1ZWJkOWMifQ==; tablestore-data-git2=eyJhY2Nlc3NUb2tlbiI6ImZlYmMxYTRlYjA1MmI4OWJlNDQwOWFmODk3OGNkYWFhYWY1OWZlNWEifQ==),HttpEntity(application/json,{\\\"repo\\\":\\\"aristo-tables\\\",\\\"fork\\\":\\\"allenai\\\",\\\"branch\\\":\\\"main\\\"}),HTTP/1.1)\\ntables java.io.FileNotFoundException: 400: Invalid request\\ntables \\ntables  at org.kohsuke.github.Requester.handleApiError(Requester.java:527)\\ntables  at org.kohsuke.github.Requester.asStream(Requester.java:293)\\ntables  at org.kohsuke.github.GHContent.read(GHContent.java:118)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getCsvFileLocal$1.apply(GitHubUtil.scala:420)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getCsvFileLocal$1.apply(GitHubUtil.scala:417)\\ntables  at scala.Option.foreach(Option.scala:257)\\ntables  at org.allenai.ari.tables.GitHubUtil.getCsvFileLocal(GitHubUtil.scala:417)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$7.apply(GitHubUtil.scala:239)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$7.apply(GitHubUtil.scala:236)\\ntables  at scala.collection.parallel.mutable.ParArray$ParArrayIterator.flatmap2combiner(ParArray.scala:417)\\ntables  at scala.collection.parallel.ParIterableLike$FlatMap.leaf(ParIterableLike.scala:1072)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\\ntables  at scala.collection.parallel.ParIterableLike$FlatMap.tryLeaf(ParIterableLike.scala:1068)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.internal(Tasks.scala:159)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.internal(Tasks.scala:443)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:149)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\\ntables  at scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doJoin(ForkJoinTask.java:341)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.join(ForkJoinTask.java:673)\\ntables  at scala.collection.parallel.ForkJoinTasks$WrappedTask$class.sync(Tasks.scala:378)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.sync(Tasks.scala:443)\\ntables  at scala.collection.parallel.ForkJoinTasks$class.executeAndWaitResult(Tasks.scala:426)\\ntables  at scala.collection.parallel.ForkJoinTaskSupport.executeAndWaitResult(TaskSupport.scala:56)\\ntables  at scala.collection.parallel.ExecutionContextTasks$class.executeAndWaitResult(Tasks.scala:558)\\ntables  at scala.collection.parallel.ExecutionContextTaskSupport.executeAndWaitResult(TaskSupport.scala:80)\\ntables  at scala.collection.parallel.ParIterableLike$ResultMapping.leaf(ParIterableLike.scala:958)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\\ntables  at scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\\ntables  at scala.collection.parallel.ParIterableLike$ResultMapping.tryLeaf(ParIterableLike.scala:953)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:152)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\\ntables  at scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doJoin(ForkJoinTask.java:341)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.join(ForkJoinTask.java:673)\\ntables  at scala.collection.parallel.ForkJoinTasks$WrappedTask$class.sync(Tasks.scala:378)\\ntables  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.sync(Tasks.scala:443)\\ntables  at scala.collection.parallel.ForkJoinTasks$class.executeAndWaitResult(Tasks.scala:426)\\ntables  at scala.collection.parallel.ForkJoinTaskSupport.executeAndWaitResult(TaskSupport.scala:56)\\ntables  at scala.collection.parallel.ExecutionContextTasks$class.executeAndWaitResult(Tasks.scala:558)\\ntables  at scala.collection.parallel.ExecutionContextTaskSupport.executeAndWaitResult(TaskSupport.scala:80)\\ntables  at scala.collection.parallel.ParIterableLike$class.flatMap(ParIterableLike.scala:513)\\ntables  at scala.collection.parallel.mutable.ParArray.flatMap(ParArray.scala:56)\\ntables  at org.allenai.ari.tables.GitHubUtil.org$allenai$ari$tables$GitHubUtil$$getTableMetadata(GitHubUtil.scala:236)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getTableMetadata$2.apply(GitHubUtil.scala:229)\\ntables  at org.allenai.ari.tables.GitHubUtil$$anonfun$getTableMetadata$2.apply(GitHubUtil.scala:229)\\ntables  at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251)\\ntables  at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249)\\ntables  at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:32)\\ntables  at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.scala:91)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91)\\ntables  at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:72)\\ntables  at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:90)\\ntables  at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:39)\\ntables  at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:399)\\ntables  at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\\ntables  at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\\ntables  at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\\ntables  at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\\ntables Caused by: java.io.FileNotFoundException: https://raw.githubusercontent.com/allenai/aristo-tables/main/tables/abstract_concrete/abstract_concrete.csv?token=AFXsrivOTIoDru9Htw9aNTJbprmE5m0Gks5XhUHfwA%3D%3D\\ntables  at com.squareup.okhttp.internal.huc.HttpURLConnectionImpl.getInputStream(HttpURLConnectionImpl.java:228)\\ntables  at com.squareup.okhttp.internal.huc.DelegatingHttpsURLConnection.getInputStream(DelegatingHttpsURLConnection.java:210)\\ntables  at com.squareup.okhttp.internal.huc.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:25)\\ntables  at org.kohsuke.github.Requester.asStream(Requester.java:291)\\ntables  ... 66 more\\n```\\n\\nYour help is greatly appreciated,\\nSumithra\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/287\",\n@@ -1195,7 +1195,7 @@\n     \"updated_at\": \"2016-08-09T01:25:00Z\",\n     \"closed_at\": \"2016-08-06T04:10:32Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"I'm researching deeper, but with 1.72 I get:\\n\\nremaining calls 4364\\nabout to look up repo  EVCache\\n2016-06-28 21:28:20 INFO  GithubAccess:53 - repo = EVCache, forks = 82, stars = 314\\n2016-06-28 21:28:20 DEBUG GithubAccess:56 -   openIssues = 0, openPullRequests = 0\\n2016-06-28 21:28:22 DEBUG GithubAccess:107 - daysSinceLastCommit = 0\\n2016-06-28 21:28:23 DEBUG GithubAccess:111 - numContribitors = 16, contributorEmails = ArrayBuffer(smadappa, senugula, jkschneider, vuzilla, ScottMansfield, rspieldenner, elandau, gitter-badger, rdegnan, nadavc, aspyker, trigan-d, pauloricardomg, kedargsm, quidryan, Randgalt)\\n2016-06-28 21:28:24 DEBUG GithubAccess:146 - avg days to close 14 issues = 357 days\\n2016-06-28 21:28:24 DEBUG GithubAccess:128 - avg days to close 13 pull requests = 185 days\\n2016-06-28 21:28:24 DEBUG GithubAccess:96 - repo json = {\\\"asOfISO\\\":\\\"2016-06-29T04:27:43Z\\\",\\\"asOfYYYYMMDD\\\":\\\"2016-06-29\\\",\\\"repo_name\\\":\\\"EVCache\\\",\\\"public\\\":true,\\\"osslifecycle\\\":\\\"UNKNOWN\\\",\\\"forks\\\":82,\\\"stars\\\":314,\\\"numContributors\\\":16,\\\"issues\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":14,\\\"avgTimeToCloseInDays\\\":357},\\\"pullRequests\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":13,\\\"avgTimeToCloseInDays\\\":185},\\\"commits\\\":{\\\"daysSinceLastCommit\\\":0},\\\"contributors\\\":[\\\"smadappa\\\",\\\"senugula\\\",\\\"jkschneider\\\",\\\"vuzilla\\\",\\\"ScottMansfield\\\",\\\"rspieldenner\\\",\\\"elandau\\\",\\\"gitter-badger\\\",\\\"rdegnan\\\",\\\"nadavc\\\",\\\"aspyker\\\",\\\"trigan-d\\\",\\\"pauloricardomg\\\",\\\"kedargsm\\\",\\\"quidryan\\\",\\\"Randgalt\\\"]}\\nremaining calls 4341\\n\\nresulting in 23 API calls\\n\\nwith 1.76, I get:\\n\\nremaining calls 4640\\nabout to look up repo  EVCache\\n2016-06-28 21:22:22 INFO  GithubAccess:53 - repo = EVCache, forks = 82, stars = 314\\n2016-06-28 21:22:22 DEBUG GithubAccess:56 -   openIssues = 0, openPullRequests = 0\\n2016-06-28 21:23:01 DEBUG GithubAccess:107 - daysSinceLastCommit = 0\\n2016-06-28 21:23:03 DEBUG GithubAccess:111 - numContribitors = 16, contributorEmails = ArrayBuffer(smadappa, senugula, jkschneider, vuzilla, ScottMansfield, rspieldenner, elandau, gitter-badger, rdegnan, nadavc, aspyker, trigan-d, pauloricardomg, kedargsm, quidryan, Randgalt)\\n2016-06-28 21:23:04 DEBUG GithubAccess:146 - avg days to close 14 issues = 357 days\\n2016-06-28 21:23:04 DEBUG GithubAccess:128 - avg days to close 13 pull requests = 185 days\\n2016-06-28 21:23:04 DEBUG GithubAccess:96 - repo json = {\\\"asOfISO\\\":\\\"2016-06-29T04:20:26Z\\\",\\\"asOfYYYYMMDD\\\":\\\"2016-06-29\\\",\\\"repo_name\\\":\\\"EVCache\\\",\\\"public\\\":true,\\\"osslifecycle\\\":\\\"UNKNOWN\\\",\\\"forks\\\":82,\\\"stars\\\":314,\\\"numContributors\\\":16,\\\"issues\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":14,\\\"avgTimeToCloseInDays\\\":357},\\\"pullRequests\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":13,\\\"avgTimeToCloseInDays\\\":185},\\\"commits\\\":{\\\"daysSinceLastCommit\\\":0},\\\"contributors\\\":[\\\"smadappa\\\",\\\"senugula\\\",\\\"jkschneider\\\",\\\"vuzilla\\\",\\\"ScottMansfield\\\",\\\"rspieldenner\\\",\\\"elandau\\\",\\\"gitter-badger\\\",\\\"rdegnan\\\",\\\"nadavc\\\",\\\"aspyker\\\",\\\"trigan-d\\\",\\\"pauloricardomg\\\",\\\"kedargsm\\\",\\\"quidryan\\\",\\\"Randgalt\\\"]}\\nremaining calls 4409\\n\\nresulting in 231 API calls\\n\\nThis is running this code:\\n\\nhttps://github.com/Netflix/osstracker/blob/master/osstracker-scraper/src/main/scala/com/netflix/oss/tools/osstrackerscraper/GithubAccess.scala#L52\\n\"\n+    \"body\": \"I'm researching deeper, but with 1.72 I get:\\n\\nremaining calls 4364\\nabout to look up repo  EVCache\\n2016-06-28 21:28:20 INFO  GithubAccess:53 - repo = EVCache, forks = 82, stars = 314\\n2016-06-28 21:28:20 DEBUG GithubAccess:56 -   openIssues = 0, openPullRequests = 0\\n2016-06-28 21:28:22 DEBUG GithubAccess:107 - daysSinceLastCommit = 0\\n2016-06-28 21:28:23 DEBUG GithubAccess:111 - numContribitors = 16, contributorEmails = ArrayBuffer(smadappa, senugula, jkschneider, vuzilla, ScottMansfield, rspieldenner, elandau, gitter-badger, rdegnan, nadavc, aspyker, trigan-d, pauloricardomg, kedargsm, quidryan, Randgalt)\\n2016-06-28 21:28:24 DEBUG GithubAccess:146 - avg days to close 14 issues = 357 days\\n2016-06-28 21:28:24 DEBUG GithubAccess:128 - avg days to close 13 pull requests = 185 days\\n2016-06-28 21:28:24 DEBUG GithubAccess:96 - repo json = {\\\"asOfISO\\\":\\\"2016-06-29T04:27:43Z\\\",\\\"asOfYYYYMMDD\\\":\\\"2016-06-29\\\",\\\"repo_name\\\":\\\"EVCache\\\",\\\"public\\\":true,\\\"osslifecycle\\\":\\\"UNKNOWN\\\",\\\"forks\\\":82,\\\"stars\\\":314,\\\"numContributors\\\":16,\\\"issues\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":14,\\\"avgTimeToCloseInDays\\\":357},\\\"pullRequests\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":13,\\\"avgTimeToCloseInDays\\\":185},\\\"commits\\\":{\\\"daysSinceLastCommit\\\":0},\\\"contributors\\\":[\\\"smadappa\\\",\\\"senugula\\\",\\\"jkschneider\\\",\\\"vuzilla\\\",\\\"ScottMansfield\\\",\\\"rspieldenner\\\",\\\"elandau\\\",\\\"gitter-badger\\\",\\\"rdegnan\\\",\\\"nadavc\\\",\\\"aspyker\\\",\\\"trigan-d\\\",\\\"pauloricardomg\\\",\\\"kedargsm\\\",\\\"quidryan\\\",\\\"Randgalt\\\"]}\\nremaining calls 4341\\n\\nresulting in 23 API calls\\n\\nwith 1.76, I get:\\n\\nremaining calls 4640\\nabout to look up repo  EVCache\\n2016-06-28 21:22:22 INFO  GithubAccess:53 - repo = EVCache, forks = 82, stars = 314\\n2016-06-28 21:22:22 DEBUG GithubAccess:56 -   openIssues = 0, openPullRequests = 0\\n2016-06-28 21:23:01 DEBUG GithubAccess:107 - daysSinceLastCommit = 0\\n2016-06-28 21:23:03 DEBUG GithubAccess:111 - numContribitors = 16, contributorEmails = ArrayBuffer(smadappa, senugula, jkschneider, vuzilla, ScottMansfield, rspieldenner, elandau, gitter-badger, rdegnan, nadavc, aspyker, trigan-d, pauloricardomg, kedargsm, quidryan, Randgalt)\\n2016-06-28 21:23:04 DEBUG GithubAccess:146 - avg days to close 14 issues = 357 days\\n2016-06-28 21:23:04 DEBUG GithubAccess:128 - avg days to close 13 pull requests = 185 days\\n2016-06-28 21:23:04 DEBUG GithubAccess:96 - repo json = {\\\"asOfISO\\\":\\\"2016-06-29T04:20:26Z\\\",\\\"asOfYYYYMMDD\\\":\\\"2016-06-29\\\",\\\"repo_name\\\":\\\"EVCache\\\",\\\"public\\\":true,\\\"osslifecycle\\\":\\\"UNKNOWN\\\",\\\"forks\\\":82,\\\"stars\\\":314,\\\"numContributors\\\":16,\\\"issues\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":14,\\\"avgTimeToCloseInDays\\\":357},\\\"pullRequests\\\":{\\\"openCount\\\":0,\\\"closedCount\\\":13,\\\"avgTimeToCloseInDays\\\":185},\\\"commits\\\":{\\\"daysSinceLastCommit\\\":0},\\\"contributors\\\":[\\\"smadappa\\\",\\\"senugula\\\",\\\"jkschneider\\\",\\\"vuzilla\\\",\\\"ScottMansfield\\\",\\\"rspieldenner\\\",\\\"elandau\\\",\\\"gitter-badger\\\",\\\"rdegnan\\\",\\\"nadavc\\\",\\\"aspyker\\\",\\\"trigan-d\\\",\\\"pauloricardomg\\\",\\\"kedargsm\\\",\\\"quidryan\\\",\\\"Randgalt\\\"]}\\nremaining calls 4409\\n\\nresulting in 231 API calls\\n\\nThis is running this code:\\n\\nhttps://github.com/Netflix/osstracker/blob/main/osstracker-scraper/src/main/scala/com/netflix/oss/tools/osstrackerscraper/GithubAccess.scala#L52\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/285\","
    },
    {
      "sha": "e4df27112916541ec6e14d07e5b59270a028b00b",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-15.json",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-15.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-15.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-15.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -467,7 +467,7 @@\n     \"updated_at\": \"2016-06-03T05:08:19Z\",\n     \"closed_at\": \"2016-06-03T05:08:19Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"We've run into an issue when GitHub.getRateLimit hangs the thread.\\nHere is the thread stack trace:\\n\\n```\\n\\\"jenkins.util.Timer [#4]\\\" Id=48 Group=main RUNNABLE (in native)\\n    at java.net.SocketInputStream.socketRead0(Native Method)\\n    at java.net.SocketInputStream.read(SocketInputStream.java:152)\\n    at java.net.SocketInputStream.read(SocketInputStream.java:122)\\n    at sun.security.ssl.InputRecord.readFully(InputRecord.java:442)\\n    at sun.security.ssl.InputRecord.read(InputRecord.java:480)\\n    at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:946)\\n    -  locked java.lang.Object@4be77f76\\n    at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:903)\\n    at sun.security.ssl.AppInputStream.read(AppInputStream.java:102)\\n    -  locked sun.security.ssl.AppInputStream@5e6fb401\\n    at java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\\n    at java.io.BufferedInputStream.read1(BufferedInputStream.java:275)\\n    at java.io.BufferedInputStream.read(BufferedInputStream.java:334)\\n    -  locked java.io.BufferedInputStream@7792de16\\n    at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:690)\\n    at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:633)\\n    at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1325)\\n    -  locked sun.net.www.protocol.https.DelegateHttpsURLConnection@6db28b13\\n    at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:468)\\n    at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338)\\n    at org.kohsuke.github.Requester.parse(Requester.java:454)\\n    at org.kohsuke.github.Requester._to(Requester.java:227)\\n    at org.kohsuke.github.Requester.to(Requester.java:194)\\n    at org.kohsuke.github.GitHub.getRateLimit(GitHub.java:245)\\n    at org.jenkinsci.plugins.ghprb.GhprbRepository.initGhRepository(GhprbRepository.java:66)\\n    at org.jenkinsci.plugins.ghprb.GhprbRepository.check(GhprbRepository.java:88)\\n    at org.jenkinsci.plugins.ghprb.Ghprb.run(Ghprb.java:119)\\n    at org.jenkinsci.plugins.ghprb.GhprbTrigger.run(GhprbTrigger.java:219)\\n    at hudson.triggers.Trigger.checkTriggers(Trigger.java:272)\\n    at hudson.triggers.Trigger$Cron.doRun(Trigger.java:221)\\n    at hudson.triggers.SafeTimerTask.run(SafeTimerTask.java:50)\\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)\\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)\\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\\n    at java.lang.Thread.run(Thread.java:745)\\n\\n    Number of locked synchronizers = 1\\n    - java.util.concurrent.ThreadPoolExecutor$Worker@6b1824c6\\n```\\n\\nThere is a possibility that https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/Requester.java#L486 will never return an aswer.\\n\\nI think, `uc.setTimeout(60 * 1000);` here https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/Requester.java#L453 should fix the problem.\\n\"\n+    \"body\": \"We've run into an issue when GitHub.getRateLimit hangs the thread.\\nHere is the thread stack trace:\\n\\n```\\n\\\"jenkins.util.Timer [#4]\\\" Id=48 Group=main RUNNABLE (in native)\\n    at java.net.SocketInputStream.socketRead0(Native Method)\\n    at java.net.SocketInputStream.read(SocketInputStream.java:152)\\n    at java.net.SocketInputStream.read(SocketInputStream.java:122)\\n    at sun.security.ssl.InputRecord.readFully(InputRecord.java:442)\\n    at sun.security.ssl.InputRecord.read(InputRecord.java:480)\\n    at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:946)\\n    -  locked java.lang.Object@4be77f76\\n    at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:903)\\n    at sun.security.ssl.AppInputStream.read(AppInputStream.java:102)\\n    -  locked sun.security.ssl.AppInputStream@5e6fb401\\n    at java.io.BufferedInputStream.fill(BufferedInputStream.java:235)\\n    at java.io.BufferedInputStream.read1(BufferedInputStream.java:275)\\n    at java.io.BufferedInputStream.read(BufferedInputStream.java:334)\\n    -  locked java.io.BufferedInputStream@7792de16\\n    at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:690)\\n    at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:633)\\n    at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1325)\\n    -  locked sun.net.www.protocol.https.DelegateHttpsURLConnection@6db28b13\\n    at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:468)\\n    at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338)\\n    at org.kohsuke.github.Requester.parse(Requester.java:454)\\n    at org.kohsuke.github.Requester._to(Requester.java:227)\\n    at org.kohsuke.github.Requester.to(Requester.java:194)\\n    at org.kohsuke.github.GitHub.getRateLimit(GitHub.java:245)\\n    at org.jenkinsci.plugins.ghprb.GhprbRepository.initGhRepository(GhprbRepository.java:66)\\n    at org.jenkinsci.plugins.ghprb.GhprbRepository.check(GhprbRepository.java:88)\\n    at org.jenkinsci.plugins.ghprb.Ghprb.run(Ghprb.java:119)\\n    at org.jenkinsci.plugins.ghprb.GhprbTrigger.run(GhprbTrigger.java:219)\\n    at hudson.triggers.Trigger.checkTriggers(Trigger.java:272)\\n    at hudson.triggers.Trigger$Cron.doRun(Trigger.java:221)\\n    at hudson.triggers.SafeTimerTask.run(SafeTimerTask.java:50)\\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)\\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)\\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\\n    at java.lang.Thread.run(Thread.java:745)\\n\\n    Number of locked synchronizers = 1\\n    - java.util.concurrent.ThreadPoolExecutor$Worker@6b1824c6\\n```\\n\\nThere is a possibility that https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/Requester.java#L486 will never return an aswer.\\n\\nI think, `uc.setTimeout(60 * 1000);` here https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/Requester.java#L453 should fix the problem.\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/270\",\n@@ -743,7 +743,7 @@\n     \"updated_at\": \"2016-06-03T06:50:17Z\",\n     \"closed_at\": \"2016-06-03T06:50:17Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GHRepository.java#L589\\n\\nThe \\\"forkTo\\\" method, however, does have some nice blocking in place.\\n\"\n+    \"body\": \"https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GHRepository.java#L589\\n\\nThe \\\"forkTo\\\" method, however, does have some nice blocking in place.\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/263\",\n@@ -1013,7 +1013,7 @@\n     \"updated_at\": \"2016-06-04T06:34:28Z\",\n     \"closed_at\": \"2016-06-04T03:31:19Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"Hi @kohsuke,\\n\\nI would appreciate your help on this.\\n\\nI have used the `HttpConnector` and have specified a cache directory in my server. I am using OAuth and it looks like my quota is 5000 requests, based on this sample cache file:\\n\\n```\\nhttps://api.github.com/repos/allenai/aristo-tables/contents/tables/weather_terms?ref=master\\nGET\\n2\\nAuthorization: token e381d0427927aef5e2858ac06b6cb01a34b0a603\\nAccept-Encoding: gzip\\nHTTP/1.1 200 OK\\n30\\nServer: GitHub.com\\nDate: Thu, 10 Mar 2016 20:57:33 GMT\\nContent-Type: application/json; charset=utf-8\\nTransfer-Encoding: chunked\\nStatus: 200 OK\\n**X-RateLimit-Limit: 5000**\\nX-RateLimit-Remaining: 4689\\nX-RateLimit-Reset: 1457646852\\nCache-Control: private, max-age=60, s-maxage=60\\nVary: Accept, Authorization, Cookie, X-GitHub-OTP\\nETag: W/\\\"c2dc693298f7806038e984d1ac857ffb\\\"\\nLast-Modified: Tue, 08 Mar 2016 23:54:00 GMT\\nX-OAuth-Scopes: read:repo_hook, repo\\nX-Accepted-OAuth-Scopes:\\nX-OAuth-Client-Id: 47355241bdf02ac9122d\\nX-GitHub-Media-Type: github.v3; format=json\\nAccess-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\\nAccess-Control-Allow-Origin: *\\nContent-Security-Policy: default-src 'none'\\nStrict-Transport-Security: max-age=31536000; includeSubdomains; preload\\nX-Content-Type-Options: nosniff\\nX-Frame-Options: deny\\nX-XSS-Protection: 1; mode=block\\nVary: Accept-Encoding\\nX-Served-By: 01d096e6cfe28f8aea352e988c332cd3\\nContent-Encoding: gzip\\nX-GitHub-Request-Id: 36D5C9C0:101B5:A516A26:56E1DFBD\\nOkHttp-Selected-Protocol: http/1.1\\nOkHttp-Sent-Millis: 1457643453839\\nOkHttp-Received-Millis: 1457643453959\\n```\\n\\nMy client refreshes periodically to be in sync with the repo, however, even though there has been no change in the repo, I run out of API rate limit every now and then. I thought it should just be reading from the cache. \\n\\nThe following call gets executed on every refresh:\\n\\n```\\n  private def getTableDirs(\\n    oauthAccessToken: String,\\n    repo: GitRepoInfo,\\n    tableNamesFilter: Option[Seq[String]]\\n  ): Seq[GHContent] = {\\n    blocking {\\n      // Create a GitHubBuilder to be able to build a GitHub object with required\\n      // RateLimitHandler strategy and OAuth parameters. Instead of waiting, this will\\n      // throw an exception immediately if the request limit is exceeded.\\n      val gitHubBuilder =\\n        new GitHubBuilder()\\n          .withRateLimitHandler(RateLimitHandler.FAIL)\\n          .withOAuthToken(oauthAccessToken)\\n          .withConnector(\\n            new OkHttpConnector(\\n              new OkUrlFactory(\\n                new OkHttpClient().setCache(cache))))\\n      val github = gitHubBuilder.build()\\n\\n      // Get the requested repo.\\n      val repoName = repo.fork + \\\"/\\\" + repo.repo\\n      val repository = github.getRepository(repoName)\\n      // Get all directories (expected to be Table directories) from the top level of the repo.\\n      val allTableDirs =\\n        repository.getDirectoryContent(\\\"tables\\\", repo.branch).asScala.filter(_.isDirectory)\\n      // If there is a filter, restrict returned table directories to that set, if not return all.\\n      tableNamesFilter match {\\n        case Some(filter) =>\\n          val tableSet = filter.map(_.toLowerCase).toSet\\n          allTableDirs.filter(d => tableSet.contains(d.getName.toLowerCase))\\n        case None =>\\n          allTableDirs\\n      }\\n    }\\n  }\\n```\\n\\nFurther, there are other calls like `ghContent.read` -- is each of these a separate request to Git? Even so, I wouldn't think they would be called every time but just looked up from the cache.\\n\\nAny ideas?\\n\"\n+    \"body\": \"Hi @kohsuke,\\n\\nI would appreciate your help on this.\\n\\nI have used the `HttpConnector` and have specified a cache directory in my server. I am using OAuth and it looks like my quota is 5000 requests, based on this sample cache file:\\n\\n```\\nhttps://api.github.com/repos/allenai/aristo-tables/contents/tables/weather_terms?ref=main\\nGET\\n2\\nAuthorization: token e381d0427927aef5e2858ac06b6cb01a34b0a603\\nAccept-Encoding: gzip\\nHTTP/1.1 200 OK\\n30\\nServer: GitHub.com\\nDate: Thu, 10 Mar 2016 20:57:33 GMT\\nContent-Type: application/json; charset=utf-8\\nTransfer-Encoding: chunked\\nStatus: 200 OK\\n**X-RateLimit-Limit: 5000**\\nX-RateLimit-Remaining: 4689\\nX-RateLimit-Reset: 1457646852\\nCache-Control: private, max-age=60, s-maxage=60\\nVary: Accept, Authorization, Cookie, X-GitHub-OTP\\nETag: W/\\\"c2dc693298f7806038e984d1ac857ffb\\\"\\nLast-Modified: Tue, 08 Mar 2016 23:54:00 GMT\\nX-OAuth-Scopes: read:repo_hook, repo\\nX-Accepted-OAuth-Scopes:\\nX-OAuth-Client-Id: 47355241bdf02ac9122d\\nX-GitHub-Media-Type: github.v3; format=json\\nAccess-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\\nAccess-Control-Allow-Origin: *\\nContent-Security-Policy: default-src 'none'\\nStrict-Transport-Security: max-age=31536000; includeSubdomains; preload\\nX-Content-Type-Options: nosniff\\nX-Frame-Options: deny\\nX-XSS-Protection: 1; mode=block\\nVary: Accept-Encoding\\nX-Served-By: 01d096e6cfe28f8aea352e988c332cd3\\nContent-Encoding: gzip\\nX-GitHub-Request-Id: 36D5C9C0:101B5:A516A26:56E1DFBD\\nOkHttp-Selected-Protocol: http/1.1\\nOkHttp-Sent-Millis: 1457643453839\\nOkHttp-Received-Millis: 1457643453959\\n```\\n\\nMy client refreshes periodically to be in sync with the repo, however, even though there has been no change in the repo, I run out of API rate limit every now and then. I thought it should just be reading from the cache. \\n\\nThe following call gets executed on every refresh:\\n\\n```\\n  private def getTableDirs(\\n    oauthAccessToken: String,\\n    repo: GitRepoInfo,\\n    tableNamesFilter: Option[Seq[String]]\\n  ): Seq[GHContent] = {\\n    blocking {\\n      // Create a GitHubBuilder to be able to build a GitHub object with required\\n      // RateLimitHandler strategy and OAuth parameters. Instead of waiting, this will\\n      // throw an exception immediately if the request limit is exceeded.\\n      val gitHubBuilder =\\n        new GitHubBuilder()\\n          .withRateLimitHandler(RateLimitHandler.FAIL)\\n          .withOAuthToken(oauthAccessToken)\\n          .withConnector(\\n            new OkHttpConnector(\\n              new OkUrlFactory(\\n                new OkHttpClient().setCache(cache))))\\n      val github = gitHubBuilder.build()\\n\\n      // Get the requested repo.\\n      val repoName = repo.fork + \\\"/\\\" + repo.repo\\n      val repository = github.getRepository(repoName)\\n      // Get all directories (expected to be Table directories) from the top level of the repo.\\n      val allTableDirs =\\n        repository.getDirectoryContent(\\\"tables\\\", repo.branch).asScala.filter(_.isDirectory)\\n      // If there is a filter, restrict returned table directories to that set, if not return all.\\n      tableNamesFilter match {\\n        case Some(filter) =>\\n          val tableSet = filter.map(_.toLowerCase).toSet\\n          allTableDirs.filter(d => tableSet.contains(d.getName.toLowerCase))\\n        case None =>\\n          allTableDirs\\n      }\\n    }\\n  }\\n```\\n\\nFurther, there are other calls like `ghContent.read` -- is each of these a separate request to Git? Even so, I wouldn't think they would be called every time but just looked up from the cache.\\n\\nAny ideas?\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/257\","
    },
    {
      "sha": "b01f18f89b7aa0f6a09c2f5448fbb37e2d807011",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-16.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-16.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-16.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-16.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1421,6 +1421,6 @@\n     \"updated_at\": \"2015-12-02T11:05:03Z\",\n     \"closed_at\": \"2015-12-02T11:05:03Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"Hi,\\n\\nthe RateLimitHandler does not to work as intended. \\nIf using the WAIT implementation the API will still throw an exception and terminate.\\n\\nThe reason therefore is that there is no return statement after the handler execute its onError method.\\nThe problem is allocated in the handleApiError method of the Requester.\\n\\nhttps://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/Requester.java\\n\"\n+    \"body\": \"Hi,\\n\\nthe RateLimitHandler does not to work as intended. \\nIf using the WAIT implementation the API will still throw an exception and terminate.\\n\\nThe reason therefore is that there is no return statement after the handler execute its onError method.\\nThe problem is allocated in the handleApiError method of the Requester.\\n\\nhttps://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/Requester.java\\n\"\n   }\n ]\n\\ No newline at end of file"
    },
    {
      "sha": "5245a7795733f47b8db50f5a7a70a480af06e710",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-17.json",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-17.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-17.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-17.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -111,7 +111,7 @@\n     \"updated_at\": \"2015-12-03T16:42:58Z\",\n     \"closed_at\": \"2015-12-03T16:42:58Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"GHRepository.getCompare(String,String) supports cross-fork comparisons, but this does not:\\n\\nhttps://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GHRepository.java#L684-L686\\n\\nThis is a simple fix.\\n\"\n+    \"body\": \"GHRepository.getCompare(String,String) supports cross-fork comparisons, but this does not:\\n\\nhttps://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GHRepository.java#L684-L686\\n\\nThis is a simple fix.\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/217\",\n@@ -900,7 +900,7 @@\n     \"updated_at\": \"2015-12-01T16:28:24Z\",\n     \"closed_at\": \"2015-12-01T16:28:24Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"On June 24th, GitHub made some breaking changes to the api.  See https://developer.github.com/changes/2015-06-10-breaking-changes-to-organization-permissions-coming-on-june-24/\\n\\nI am currently using the Jenkins GitHub Oauth plugin which uses the `getMyOrganizations` method defined at https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GitHub.java#L333  \\n\\nUnfortunately this method relies on the API endpoint https://api.github.com/users/orgs which no longer works.   \\n\"\n+    \"body\": \"On June 24th, GitHub made some breaking changes to the api.  See https://developer.github.com/changes/2015-06-10-breaking-changes-to-organization-permissions-coming-on-june-24/\\n\\nI am currently using the Jenkins GitHub Oauth plugin which uses the `getMyOrganizations` method defined at https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GitHub.java#L333  \\n\\nUnfortunately this method relies on the API endpoint https://api.github.com/users/orgs which no longer works.   \\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/201\","
    },
    {
      "sha": "54b7b3a7bbbda18152b3e10cbfd425a10e728906",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-18.json",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-18.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-18.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-18.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -279,7 +279,7 @@\n     \"updated_at\": \"2015-05-05T06:44:59Z\",\n     \"closed_at\": \"2015-05-05T06:44:59Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"Putting this out there without much knowledge about GitHub Enterprise APIs.\\n\\nOur organization uses GitHub Enterprise hosted internally. We would love to integrate Gerrit, which uses this package, with it, but the GitHub API in here is currently a static final string: https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GitHub.java#L558\\n\\nWould be very nice if there was a way to use this with the apis for an internal Enterprise instance of github.\\n\"\n+    \"body\": \"Putting this out there without much knowledge about GitHub Enterprise APIs.\\n\\nOur organization uses GitHub Enterprise hosted internally. We would love to integrate Gerrit, which uses this package, with it, but the GitHub API in here is currently a static final string: https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GitHub.java#L558\\n\\nWould be very nice if there was a way to use this with the apis for an internal Enterprise instance of github.\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/183\",\n@@ -511,7 +511,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/179.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/179.patch\"\n     },\n-    \"body\": \"Hello!\\n\\nWe encountered a NullPointerException after the upgrade to 1.67 when rate limited by the GitHub API.  Essentially it is because the call to `getMyself().getLogin()` failed during the construction of the GitHub object due to being rate limited.  However, the RateLimitHandler object had not yet been set at that point in time within the GitHub object constructor.  Fix is a simple statement movement.\\n\\nError within GitHub::handleApiError():\\n\\n```\\n        if (\\\"0\\\".equals(uc.getHeaderField(\\\"X-RateLimit-Remaining\\\"))) {\\n            root.rateLimitHandler.onError(e,uc);  // rateLimitHandler is null\\n        }\\n```\\n\\nRan the test suite locally after setting github authentication details:\\n\\n```\\nResults :\\n\\nFailed tests:   setLabels(org.kohsuke.github.PullRequestTest): expected:<1> but was:<0>\\n  setAssignee(org.kohsuke.github.PullRequestTest): expected:<User:lskillen> but was:<null>\\n\\nTests in error:\\n  testMembership(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"Must have push access to view repository collaborators.\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testListDeployments(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"No ref found for: master\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testCreateDeployment(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"No ref found for: master\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testMemberPagenation(org.kohsuke.github.AppTest): java.io.IOException: {\\\"message\\\":\\\"Must have admin rights to Repository.\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testRepoLabel(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"Not Found\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3/issues/labels/#create-a-label\\\"}\\n  testGetDeploymentStatuses(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"No ref found for: master\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testCreateRepository(org.kohsuke.github.LifecycleTest): java.io.IOException: {\\\"message\\\":\\\"Must have admin rights to Repository.\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n\\nTests run: 79, Failures: 2, Errors: 7, Skipped: 10\\n```\\n\\nFailures seem to be mostly related to access to the hub4j-test-org (which obviously I don't have any permissions for), and I had the same results before/after the change so it looks like they are unrelated to it - Hopefully that's acceptable!\\n\\nThanks,\\nLee\\n\"\n+    \"body\": \"Hello!\\n\\nWe encountered a NullPointerException after the upgrade to 1.67 when rate limited by the GitHub API.  Essentially it is because the call to `getMyself().getLogin()` failed during the construction of the GitHub object due to being rate limited.  However, the RateLimitHandler object had not yet been set at that point in time within the GitHub object constructor.  Fix is a simple statement movement.\\n\\nError within GitHub::handleApiError():\\n\\n```\\n        if (\\\"0\\\".equals(uc.getHeaderField(\\\"X-RateLimit-Remaining\\\"))) {\\n            root.rateLimitHandler.onError(e,uc);  // rateLimitHandler is null\\n        }\\n```\\n\\nRan the test suite locally after setting github authentication details:\\n\\n```\\nResults :\\n\\nFailed tests:   setLabels(org.kohsuke.github.PullRequestTest): expected:<1> but was:<0>\\n  setAssignee(org.kohsuke.github.PullRequestTest): expected:<User:lskillen> but was:<null>\\n\\nTests in error:\\n  testMembership(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"Must have push access to view repository collaborators.\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testListDeployments(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"No ref found for: main\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testCreateDeployment(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"No ref found for: main\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testMemberPagenation(org.kohsuke.github.AppTest): java.io.IOException: {\\\"message\\\":\\\"Must have admin rights to Repository.\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testRepoLabel(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"Not Found\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3/issues/labels/#create-a-label\\\"}\\n  testGetDeploymentStatuses(org.kohsuke.github.AppTest): {\\\"message\\\":\\\"No ref found for: main\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n  testCreateRepository(org.kohsuke.github.LifecycleTest): java.io.IOException: {\\\"message\\\":\\\"Must have admin rights to Repository.\\\",\\\"documentation_url\\\":\\\"https://developer.github.com/v3\\\"}\\n\\nTests run: 79, Failures: 2, Errors: 7, Skipped: 10\\n```\\n\\nFailures seem to be mostly related to access to the hub4j-test-org (which obviously I don't have any permissions for), and I had the same results before/after the change so it looks like they are unrelated to it - Hopefully that's acceptable!\\n\\nThanks,\\nLee\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/177\",\n@@ -1231,7 +1231,7 @@\n     \"id\": 59959411,\n     \"node_id\": \"MDU6SXNzdWU1OTk1OTQxMQ==\",\n     \"number\": 162,\n-    \"title\": \"GHContent#content always returns master version\",\n+    \"title\": \"GHContent#content always returns main version\",\n     \"user\": {\n       \"login\": \"tilayealemu\",\n       \"id\": 11229217,\n@@ -1263,7 +1263,7 @@\n     \"updated_at\": \"2015-03-22T17:21:23Z\",\n     \"closed_at\": \"2015-03-22T17:21:09Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"GHContent#content always returns content from the master branch. Included sample code. Content 1  comes from  master and 2 from the specified branch. Using github-api 1.62.\\n\\n```\\n@Test\\npublic void github_api_issue() throws Exception {\\n    String branch = \\\"mybranch\\\";\\n    GitHub github = GitHub.connectUsingPassword(\\\"myyser\\\", \\\"mypassword\\\");\\n    GHRepository ghRepo = github.getRepository(\\\"myrepo\\\");\\n    List<GHContent> contents = ghRepo.getDirectoryContent(\\\"myfolder\\\", \\\"heads/\\\" + branch);\\n    for (GHContent content : contents) {\\n        String content1 = content.getContent();\\n        String content2 = ghRepo.getFileContent(content.getPath(), branch).getContent();\\n        System.out.println(\\\"Contents of \\\" + content.getPath());\\n        System.out.println(\\\"Content1\\\");\\n        System.out.println(content1);\\n        System.out.println(\\\"Content2\\\");\\n        System.out.println(content2);\\n    }\\n}\\n```\\n\"\n+    \"body\": \"GHContent#content always returns content from the main branch. Included sample code. Content 1  comes from  main and 2 from the specified branch. Using github-api 1.62.\\n\\n```\\n@Test\\npublic void github_api_issue() throws Exception {\\n    String branch = \\\"mybranch\\\";\\n    GitHub github = GitHub.connectUsingPassword(\\\"myyser\\\", \\\"mypassword\\\");\\n    GHRepository ghRepo = github.getRepository(\\\"myrepo\\\");\\n    List<GHContent> contents = ghRepo.getDirectoryContent(\\\"myfolder\\\", \\\"heads/\\\" + branch);\\n    for (GHContent content : contents) {\\n        String content1 = content.getContent();\\n        String content2 = ghRepo.getFileContent(content.getPath(), branch).getContent();\\n        System.out.println(\\\"Contents of \\\" + content.getPath());\\n        System.out.println(\\\"Content1\\\");\\n        System.out.println(content1);\\n        System.out.println(\\\"Content2\\\");\\n        System.out.println(content2);\\n    }\\n}\\n```\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/161\",\n@@ -1313,7 +1313,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/161.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/161.patch\"\n     },\n-    \"body\": \"Hi kohsuke\\nI used your API to call Github API but I found that there isn't any method lists all languages using in repository. Therefore, I ask you to add it into your master code.\\nThanks\\n\"\n+    \"body\": \"Hi kohsuke\\nI used your API to call Github API but I found that there isn't any method lists all languages using in repository. Therefore, I ask you to add it into your main code.\\nThanks\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/160\","
    },
    {
      "sha": "5dce8b61ddfb2dd295b50f1ca7bf64f457b32361",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-19.json",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-19.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-19.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-19.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -273,7 +273,7 @@\n     \"updated_at\": \"2015-02-24T22:15:14Z\",\n     \"closed_at\": \"2015-02-24T22:15:14Z\",\n     \"author_association\": \"CONTRIBUTOR\",\n-    \"body\": \"Hello,\\nThanks for this wonderful library!\\n\\nI would like the library to support github trees, is it foreseen (https://developer.github.com/v3/git/trees/)?\\nFor instance I need to retrieve this:\\nhttps://api.github.com/repos/calipho-sib/nextprot-docs/git/trees/master?recursive=1\\n\\nIf you would like I can try to implement this feature and I make a pull request?\\n\"\n+    \"body\": \"Hello,\\nThanks for this wonderful library!\\n\\nI would like the library to support github trees, is it foreseen (https://developer.github.com/v3/git/trees/)?\\nFor instance I need to retrieve this:\\nhttps://api.github.com/repos/calipho-sib/nextprot-docs/git/trees/main?recursive=1\\n\\nIf you would like I can try to implement this feature and I make a pull request?\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/152\",\n@@ -925,7 +925,7 @@\n     \"updated_at\": \"2015-02-15T16:40:28Z\",\n     \"closed_at\": \"2015-02-15T16:40:28Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"Hey @kohsuke \\n\\nI'm using the api to create a tag from a commit, then I create a release from this tag, fill up the info, body and assets. When I use the release builder, I set the prerelease and draft parameter to true. I get everything set on my github account successfully. \\nThat's said, when I press the button (on the github release page) to publish; all my info (title, body and files) disappear and I can just see the created tag. I'm wondering if I'm doing something wrong or if it is a bug from the library.\\n\\nHere is what I m basically doing : (I extracted the code in the exact same order all the library api call)\\n\\nGHRepository repository = api.getRepository(REPO_NAME);\\nMap<String, GHBranch> branches = repository.getBranches();\\nGHBranch master = branches.get(RELEASE_BRANCH_NAME);\\nString lastCommit = master.getSHA1();\\nString refName = \\\"refs/tags/\\\" + tagName;\\nGHRef ref = repository.createRef(refName, lastCommit);\\n\\nfinal GHReleaseBuilder releaseBuilder = repository.createRelease(refName);  releaseBuilder.name(releaseName).body(body).prerelease(true).draft(true)\\nfinal GHRelease release = releaseBuilder.create()\\nand a bunch of release.uploadAsset(file, mimeType)\\n\\nThank you for your help!\\n\"\n+    \"body\": \"Hey @kohsuke \\n\\nI'm using the api to create a tag from a commit, then I create a release from this tag, fill up the info, body and assets. When I use the release builder, I set the prerelease and draft parameter to true. I get everything set on my github account successfully. \\nThat's said, when I press the button (on the github release page) to publish; all my info (title, body and files) disappear and I can just see the created tag. I'm wondering if I'm doing something wrong or if it is a bug from the library.\\n\\nHere is what I m basically doing : (I extracted the code in the exact same order all the library api call)\\n\\nGHRepository repository = api.getRepository(REPO_NAME);\\nMap<String, GHBranch> branches = repository.getBranches();\\nGHBranch main = branches.get(RELEASE_BRANCH_NAME);\\nString lastCommit = main.getSHA1();\\nString refName = \\\"refs/tags/\\\" + tagName;\\nGHRef ref = repository.createRef(refName, lastCommit);\\n\\nfinal GHReleaseBuilder releaseBuilder = repository.createRelease(refName);  releaseBuilder.name(releaseName).body(body).prerelease(true).draft(true)\\nfinal GHRelease release = releaseBuilder.create()\\nand a bunch of release.uploadAsset(file, mimeType)\\n\\nThank you for your help!\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/137\","
    },
    {
      "sha": "add940c5b1505d19d8fe73bb4f001a3270f129e0",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-20.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-20.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-20.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-20.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -1143,7 +1143,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/103.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/103.patch\"\n     },\n-    \"body\": \"OkHttp changed API with v2.0.0, and the `client.open(url)` method no longer exists:\\n\\n\\\"URLConnection support has moved to the okhttp-urlconnection module. If you're upgrading from 1.x, this change will impact you. You will need to add the okhttp-urlconnection module to your project and use\\nthe OkUrlFactory to create new instances of HttpURLConnection\\\"\\n\\nhttps://github.com/square/okhttp/blob/master/CHANGELOG.md#version-200-rc1\\n\"\n+    \"body\": \"OkHttp changed API with v2.0.0, and the `client.open(url)` method no longer exists:\\n\\n\\\"URLConnection support has moved to the okhttp-urlconnection module. If you're upgrading from 1.x, this change will impact you. You will need to add the okhttp-urlconnection module to your project and use\\nthe OkUrlFactory to create new instances of HttpURLConnection\\\"\\n\\nhttps://github.com/square/okhttp/blob/main/CHANGELOG.md#version-200-rc1\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/102\","
    },
    {
      "sha": "ddb036c1497e783fc8692cc1fb9ecdb3d8b8e7fe",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-21.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-21.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-21.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-21.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -893,7 +893,7 @@\n     \"updated_at\": \"2014-05-10T22:31:37Z\",\n     \"closed_at\": \"2014-05-10T22:31:37Z\",\n     \"author_association\": \"NONE\",\n-    \"body\": \"`getRateLimit()` at https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GitHub.java#L228 fails for GitHub Enterprise with a 404 status code, body of\\n\\n``` json\\n{\\n  \\\"message\\\": \\\"No rate limit for white listed users\\\"\\n}\\n```\\n\\nGitHub Enterprise users are considered white listed and so don't have rate limits.\\n\\nSee also janinko/ghprb#127\\n\"\n+    \"body\": \"`getRateLimit()` at https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GitHub.java#L228 fails for GitHub Enterprise with a 404 status code, body of\\n\\n``` json\\n{\\n  \\\"message\\\": \\\"No rate limit for white listed users\\\"\\n}\\n```\\n\\nGitHub Enterprise users are considered white listed and so don't have rate limits.\\n\\nSee also janinko/ghprb#127\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/77\","
    },
    {
      "sha": "9f3afbdd16fa8e8ed705a8dd2344bb121e22bf91",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-22.json",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-22.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-22.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-22.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -91,7 +91,7 @@\n     \"updated_at\": \"2016-02-12T18:35:43Z\",\n     \"closed_at\": \"2014-04-13T15:55:35Z\",\n     \"author_association\": \"CONTRIBUTOR\",\n-    \"body\": \"https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/Requester.java#L268\\n\\nWhen attempting to get the details of an empty repository, the github enterprise server returns an HTTP 409. This, in turn, causes Requester to throw an Error…\\n\\nCaused by: java.io.IOException: Server returned HTTP response code: 409 for URL: <redacted>\\n\\nAn Error, for those unfamiliar, is \\\"a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch.\\\" I don't think an HTTP 409 response warrants throwing an Error, thereby dooming the client Java process to exit with status code 1.\\n\"\n+    \"body\": \"https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/Requester.java#L268\\n\\nWhen attempting to get the details of an empty repository, the github enterprise server returns an HTTP 409. This, in turn, causes Requester to throw an Error…\\n\\nCaused by: java.io.IOException: Server returned HTTP response code: 409 for URL: <redacted>\\n\\nAn Error, for those unfamiliar, is \\\"a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch.\\\" I don't think an HTTP 409 response warrants throwing an Error, thereby dooming the client Java process to exit with status code 1.\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/64\",\n@@ -135,7 +135,7 @@\n     \"updated_at\": \"2014-05-10T22:23:12Z\",\n     \"closed_at\": \"2014-05-10T22:23:12Z\",\n     \"author_association\": \"CONTRIBUTOR\",\n-    \"body\": \"https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GHRepository.java#L96\\n\\nGHRepository doesn't take into account whether or not the client is speaking with the public github.com or if it's talking to a github enterprise instance. Consequently, when you call getGitTransportUrl() or gitHttpTransportUrl() it only ever returns a github.com URL, which won't work for github enterprise hosted repositories.\\n\"\n+    \"body\": \"https://github.com/kohsuke/github-api/blob/main/src/main/java/org/kohsuke/github/GHRepository.java#L96\\n\\nGHRepository doesn't take into account whether or not the client is speaking with the public github.com or if it's talking to a github enterprise instance. Consequently, when you call getGitTransportUrl() or gitHttpTransportUrl() it only ever returns a github.com URL, which won't work for github enterprise hosted repositories.\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/63\","
    },
    {
      "sha": "b1152493cfff1eb3f7a7f61ad0c83525cb8d7fd8",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-5.json",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-5.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-5.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-5.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "patch": "@@ -247,7 +247,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/619.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/619.patch\"\n     },\n-    \"body\": \"# Description \\r\\nhttps://developer.github.com/v3/teams/#create-team had deprecated the `permission` field but the library still expects this field. https://github.com/hub4j/github-api/blob/da11702f6815f658014f33ce724f0cd2e4501081/src/main/java/org/kohsuke/github/GHOrganization.java#L387 \\r\\n\\r\\nThis PR refactors the code to remove the permission field.\\r\\n\\r\\n# Before submitting a PR:\\r\\nWe love getting PRs, but we hate asking people for the same basic changes every time. \\r\\n\\r\\n- [x] Push your changes to a branch other than `master`. Create your PR from that branch.    \\r\\n- [ ] Add JavaDocs and other comments\\r\\n- [ ] Write tests that run and pass in CI. See [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to capture snapshot data.\\r\\n- [x] Run `mvn install site` locally. This may reformat your code, commit those changes. If this command doesn't succeed, your change will not pass CI.\\r\\n\"\n+    \"body\": \"# Description \\r\\nhttps://developer.github.com/v3/teams/#create-team had deprecated the `permission` field but the library still expects this field. https://github.com/hub4j/github-api/blob/da11702f6815f658014f33ce724f0cd2e4501081/src/main/java/org/kohsuke/github/GHOrganization.java#L387 \\r\\n\\r\\nThis PR refactors the code to remove the permission field.\\r\\n\\r\\n# Before submitting a PR:\\r\\nWe love getting PRs, but we hate asking people for the same basic changes every time. \\r\\n\\r\\n- [x] Push your changes to a branch other than `main`. Create your PR from that branch.    \\r\\n- [ ] Add JavaDocs and other comments\\r\\n- [ ] Write tests that run and pass in CI. See [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to capture snapshot data.\\r\\n- [x] Run `mvn install site` locally. This may reformat your code, commit those changes. If this command doesn't succeed, your change will not pass CI.\\r\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/618\",\n@@ -297,7 +297,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/618.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/618.patch\"\n     },\n-    \"body\": \"# Description \\r\\nhttps://developer.github.com/v3/teams/#create-team had deprecated the `permission` field but the library still expects this field. https://github.com/hub4j/github-api/blob/da11702f6815f658014f33ce724f0cd2e4501081/src/main/java/org/kohsuke/github/GHOrganization.java#L387 \\r\\n\\r\\nThis PR refactors the code to remove the permission field.\\r\\n\\r\\n# Before submitting a PR:\\r\\nWe love getting PRs, but we hate asking people for the same basic changes every time. \\r\\n\\r\\n- [x] Push your changes to a branch other than `master`. Create your PR from that branch.    \\r\\n- [ ] Add JavaDocs and other comments\\r\\n- [ ] Write tests that run and pass in CI. See [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to capture snapshot data.\\r\\n- [x] Run `mvn install site` locally. This may reformat your code, commit those changes. If this command doesn't succeed, your change will not pass CI.\\r\\n\"\n+    \"body\": \"# Description \\r\\nhttps://developer.github.com/v3/teams/#create-team had deprecated the `permission` field but the library still expects this field. https://github.com/hub4j/github-api/blob/da11702f6815f658014f33ce724f0cd2e4501081/src/main/java/org/kohsuke/github/GHOrganization.java#L387 \\r\\n\\r\\nThis PR refactors the code to remove the permission field.\\r\\n\\r\\n# Before submitting a PR:\\r\\nWe love getting PRs, but we hate asking people for the same basic changes every time. \\r\\n\\r\\n- [x] Push your changes to a branch other than `main`. Create your PR from that branch.    \\r\\n- [ ] Add JavaDocs and other comments\\r\\n- [ ] Write tests that run and pass in CI. See [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to capture snapshot data.\\r\\n- [x] Run `mvn install site` locally. This may reformat your code, commit those changes. If this command doesn't succeed, your change will not pass CI.\\r\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/617\",\n@@ -411,7 +411,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/616.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/616.patch\"\n     },\n-    \"body\": \"# Description \\r\\nEnforce import sorting\\r\\n\\r\\n# Before submitting a PR:\\r\\nWe love getting PRs, but we hate asking people for the same basic changes every time. \\r\\n\\r\\n- [x] Push your changes to a branch other than `master`. Create your PR from that branch.    \\r\\n- [x] Add JavaDocs and other comments\\r\\n- [x] Write tests that run and pass in CI. See [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to capture snapshot data.\\r\\n- [x] Run `mvn install site` locally. This may reformat your code, commit those changes. If this command doesn't succeed, your change will not pass CI.\\r\\n\"\n+    \"body\": \"# Description \\r\\nEnforce import sorting\\r\\n\\r\\n# Before submitting a PR:\\r\\nWe love getting PRs, but we hate asking people for the same basic changes every time. \\r\\n\\r\\n- [x] Push your changes to a branch other than `main`. Create your PR from that branch.    \\r\\n- [x] Add JavaDocs and other comments\\r\\n- [x] Write tests that run and pass in CI. See [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to capture snapshot data.\\r\\n- [x] Run `mvn install site` locally. This may reformat your code, commit those changes. If this command doesn't succeed, your change will not pass CI.\\r\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/615\",\n@@ -461,7 +461,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/615.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/615.patch\"\n     },\n-    \"body\": \"# Description \\r\\nFixing Issue #607 where if you get a good return code for a single branch but it does not contain any details it will have null values for everything which should throw an error\\r\\n\\r\\n- [x] Push your changes to a branch other than `master`. Create your PR from that branch.    \\r\\n- [ ] Add JavaDocs and other comments\\r\\n- [x] Write tests that run and pass in CI. See [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to capture snapshot data.\\r\\n- [x] Run `mvn install site` locally. This may reformat your code, commit those changes. If this command doesn't succeed, your change will not pass CI.\\r\\n\\r\\nI dont love the way I did the error catching so I am open to suggestions. Also JavaDocs are new for me so any help would be appreciated\\r\\n\"\n+    \"body\": \"# Description \\r\\nFixing Issue #607 where if you get a good return code for a single branch but it does not contain any details it will have null values for everything which should throw an error\\r\\n\\r\\n- [x] Push your changes to a branch other than `main`. Create your PR from that branch.    \\r\\n- [ ] Add JavaDocs and other comments\\r\\n- [x] Write tests that run and pass in CI. See [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to capture snapshot data.\\r\\n- [x] Run `mvn install site` locally. This may reformat your code, commit those changes. If this command doesn't succeed, your change will not pass CI.\\r\\n\\r\\nI dont love the way I did the error catching so I am open to suggestions. Also JavaDocs are new for me so any help would be appreciated\\r\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/614\",\n@@ -561,7 +561,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/613.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/613.patch\"\n     },\n-    \"body\": \"# Description \\r\\nAdded `failOnWarning` and \\\"fixed\\\" all existing warnings. The fix was to auto-populate them, but something is better than improperly formatted entries.\\r\\n\\r\\n# Before submitting a PR:\\r\\nWe love getting PRs, but we hate asking people for the same basic changes every time. \\r\\n\\r\\n- [x] Push your changes to a branch other than `master`. Create your PR from that branch.    \\r\\n- [x] Add JavaDocs and other comments\\r\\n- [x] Write tests that run and pass in CI. See [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to capture snapshot data.\\r\\n- [x] Run `mvn install site` locally. This may reformat your code, commit those changes. If this command doesn't succeed, your change will not pass CI.\\r\\n\"\n+    \"body\": \"# Description \\r\\nAdded `failOnWarning` and \\\"fixed\\\" all existing warnings. The fix was to auto-populate them, but something is better than improperly formatted entries.\\r\\n\\r\\n# Before submitting a PR:\\r\\nWe love getting PRs, but we hate asking people for the same basic changes every time. \\r\\n\\r\\n- [x] Push your changes to a branch other than `main`. Create your PR from that branch.    \\r\\n- [x] Add JavaDocs and other comments\\r\\n- [x] Write tests that run and pass in CI. See [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to capture snapshot data.\\r\\n- [x] Run `mvn install site` locally. This may reformat your code, commit those changes. If this command doesn't succeed, your change will not pass CI.\\r\\n\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/612\",\n@@ -655,7 +655,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/611.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/611.patch\"\n     },\n-    \"body\": \"# Before submitting a PR:\\r\\nWe love getting PRs, but we hate asking people for the same basic changes every time. \\r\\n\\r\\n- [] Push your changes to a branch other than `master`. \\r\\n- [X] Add JavaDocs and other comments\\r\\n- [X] Write tests that run and pass in CI. See [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to capture snapshot data.  \\r\\n- [X] Run `mvn install` locally. This may reformat your code, commit those changes.\\r\\n\\r\\nI was working on #582 when I realised that the `/meta` endpoint wasn't available in this library. \\r\\nI created the Javadocs, tests and removed some unused imports on `GitHubTest`\"\n+    \"body\": \"# Before submitting a PR:\\r\\nWe love getting PRs, but we hate asking people for the same basic changes every time. \\r\\n\\r\\n- [] Push your changes to a branch other than `main`. \\r\\n- [X] Add JavaDocs and other comments\\r\\n- [X] Write tests that run and pass in CI. See [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to capture snapshot data.  \\r\\n- [X] Run `mvn install` locally. This may reformat your code, commit those changes.\\r\\n\\r\\nI was working on #582 when I realised that the `/meta` endpoint wasn't available in this library. \\r\\nI created the Javadocs, tests and removed some unused imports on `GitHubTest`\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/610\",\n@@ -1351,7 +1351,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/593.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/593.patch\"\n     },\n-    \"body\": \"Bumps [okhttp](https://github.com/square/okhttp) from 3.14.2 to 4.2.2.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [okhttp's changelog](https://github.com/square/okhttp/blob/master/CHANGELOG.md).*\\n\\n> ## Version 4.2.2\\n> \\n> _2019-10-06_\\n> \\n>  *  Fix: When closing a canceled HTTP/2 stream, don't send the `END_STREAM` flag. This could cause\\n>     the server to incorrectly interpret the stream as having completed normally. This is most useful\\n>     when a request body needs to cancel its own call.\\n> \\n> \\n> ## Version 4.2.1\\n> \\n> _2019-10-02_\\n> \\n>  *  Fix: In 4.1.0 we introduced a performance regression that prevented connections from being\\n>     pooled in certain situations. We have good test coverage for connection pooling but we missed\\n>     this because it only occurs if you have proxy configured and you share a connection pool among\\n>     multiple `OkHttpClient` instances.\\n> \\n>     This particularly-subtle bug was caused by us assigning each `OkHttpClient` instance its own\\n>     `NullProxySelector` when an explicit proxy is configured. But we don't share connections when\\n>     the proxy selectors are different. Ugh!\\n> \\n> \\n> ## Version 4.2.0\\n> \\n> _2019-09-10_\\n> \\n>  *  New: API to decode a certificate and private key to create a `HeldCertificate`. This accepts a\\n>     string containing both a certificate and PKCS #8-encoded private key.\\n> \\n>     ```kotlin\\n>     val heldCertificate = HeldCertificate.decode(\\\"\\\"\\\"\\n>         |-----BEGIN CERTIFICATE-----\\n>         |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl\\n>         |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx\\n>         |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h\\n>         |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD\\n>         |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw\\n>         |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF\\n>         |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT\\n>         |yyaoEufLKVXhrTQhRfodTeigi4RX\\n>         |-----END CERTIFICATE-----\\n>         |-----BEGIN PRIVATE KEY-----\\n>         |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J\\n>         |lu/GJQZoU9lDrCPeUcQ28tzOWw==\\n>         |-----END PRIVATE KEY-----\\n>         \\\"\\\"\\\".trimMargin())\\n>     val handshakeCertificates = HandshakeCertificates.Builder()\\n>         .heldCertificate(heldCertificate)\\n>         .build()\\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`d02340f`](https://github.com/square/okhttp/commit/d02340f9dfac4ead42befc1a4d477b45401956cf) Prepare for release 4.2.2.\\n- [`b897fb8`](https://github.com/square/okhttp/commit/b897fb8e0f3fe3622633d59ecaf220ddcae5830f) Merge pull request [#5537](https://github-redirect.dependabot.com/square/okhttp/issues/5537) from square/jwilson.1006.cancel_close\\n- [`10f9227`](https://github.com/square/okhttp/commit/10f9227b9398d9c7651131bdeeae92bb714a3bb2) If RST STREAM and END OF STREAM race, send RST STREAM (4.2.x branch)\\n- [`97d25e8`](https://github.com/square/okhttp/commit/97d25e88b82454b128d1588c9c0bc013efeee7fe) Prepare next development version.\\n- [`57a165b`](https://github.com/square/okhttp/commit/57a165b69c6551c1caec8a557e0e9c9abf54b536) Prepare for release 4.2.1.\\n- [`4c640ad`](https://github.com/square/okhttp/commit/4c640ad6c3016f49e753b5c86ab5c4d8b072bb66) Merge pull request [#5524](https://github-redirect.dependabot.com/square/okhttp/issues/5524) from square/jwilson.1002.cherrypick_poolfix\\n- [`1b4b6bb`](https://github.com/square/okhttp/commit/1b4b6bbc82206816ced207bb0132611f770c56cd) Fix connection pooling for different clients with the same pool.\\n- [`582f8ef`](https://github.com/square/okhttp/commit/582f8ef2f78cf001d479cb65831674289fd83af0) Prepare for release 4.2.0.\\n- [`9b60ca8`](https://github.com/square/okhttp/commit/9b60ca8e88445de48997d3391ae15417a6ef5d90) Merge pull request [#5434](https://github-redirect.dependabot.com/square/okhttp/issues/5434) from square/jwilson.0909.race\\n- [`510475a`](https://github.com/square/okhttp/commit/510475a21586fdf6010312a1950dca6e87cb6d2e) Don't leak incoming bytes when we race incoming data and close\\n- Additional commits viewable in [compare view](https://github.com/square/okhttp/compare/parent-3.14.2...parent-4.2.2)\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.squareup.okhttp3:okhttp&package-manager=maven&previous-version=3.14.2&new-version=4.2.2)](https://dependabot.com/compatibility-score.html?dependency-name=com.squareup.okhttp3:okhttp&package-manager=maven&previous-version=3.14.2&new-version=4.2.2)\\n\\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n- `@dependabot badge me` will comment on this PR with code to add a \\\"Dependabot enabled\\\" badge to your readme\\n\\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\\n- Update frequency (including time of day and day of week)\\n- Pull request limits (per update run and/or open at any time)\\n- Out-of-range updates (receive only lockfile updates, if desired)\\n- Security updates (receive only security updates, if desired)\\n\\n\\n\\n</details>\"\n+    \"body\": \"Bumps [okhttp](https://github.com/square/okhttp) from 3.14.2 to 4.2.2.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [okhttp's changelog](https://github.com/square/okhttp/blob/main/CHANGELOG.md).*\\n\\n> ## Version 4.2.2\\n> \\n> _2019-10-06_\\n> \\n>  *  Fix: When closing a canceled HTTP/2 stream, don't send the `END_STREAM` flag. This could cause\\n>     the server to incorrectly interpret the stream as having completed normally. This is most useful\\n>     when a request body needs to cancel its own call.\\n> \\n> \\n> ## Version 4.2.1\\n> \\n> _2019-10-02_\\n> \\n>  *  Fix: In 4.1.0 we introduced a performance regression that prevented connections from being\\n>     pooled in certain situations. We have good test coverage for connection pooling but we missed\\n>     this because it only occurs if you have proxy configured and you share a connection pool among\\n>     multiple `OkHttpClient` instances.\\n> \\n>     This particularly-subtle bug was caused by us assigning each `OkHttpClient` instance its own\\n>     `NullProxySelector` when an explicit proxy is configured. But we don't share connections when\\n>     the proxy selectors are different. Ugh!\\n> \\n> \\n> ## Version 4.2.0\\n> \\n> _2019-09-10_\\n> \\n>  *  New: API to decode a certificate and private key to create a `HeldCertificate`. This accepts a\\n>     string containing both a certificate and PKCS #8-encoded private key.\\n> \\n>     ```kotlin\\n>     val heldCertificate = HeldCertificate.decode(\\\"\\\"\\\"\\n>         |-----BEGIN CERTIFICATE-----\\n>         |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl\\n>         |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx\\n>         |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h\\n>         |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD\\n>         |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw\\n>         |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF\\n>         |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT\\n>         |yyaoEufLKVXhrTQhRfodTeigi4RX\\n>         |-----END CERTIFICATE-----\\n>         |-----BEGIN PRIVATE KEY-----\\n>         |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J\\n>         |lu/GJQZoU9lDrCPeUcQ28tzOWw==\\n>         |-----END PRIVATE KEY-----\\n>         \\\"\\\"\\\".trimMargin())\\n>     val handshakeCertificates = HandshakeCertificates.Builder()\\n>         .heldCertificate(heldCertificate)\\n>         .build()\\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`d02340f`](https://github.com/square/okhttp/commit/d02340f9dfac4ead42befc1a4d477b45401956cf) Prepare for release 4.2.2.\\n- [`b897fb8`](https://github.com/square/okhttp/commit/b897fb8e0f3fe3622633d59ecaf220ddcae5830f) Merge pull request [#5537](https://github-redirect.dependabot.com/square/okhttp/issues/5537) from square/jwilson.1006.cancel_close\\n- [`10f9227`](https://github.com/square/okhttp/commit/10f9227b9398d9c7651131bdeeae92bb714a3bb2) If RST STREAM and END OF STREAM race, send RST STREAM (4.2.x branch)\\n- [`97d25e8`](https://github.com/square/okhttp/commit/97d25e88b82454b128d1588c9c0bc013efeee7fe) Prepare next development version.\\n- [`57a165b`](https://github.com/square/okhttp/commit/57a165b69c6551c1caec8a557e0e9c9abf54b536) Prepare for release 4.2.1.\\n- [`4c640ad`](https://github.com/square/okhttp/commit/4c640ad6c3016f49e753b5c86ab5c4d8b072bb66) Merge pull request [#5524](https://github-redirect.dependabot.com/square/okhttp/issues/5524) from square/jwilson.1002.cherrypick_poolfix\\n- [`1b4b6bb`](https://github.com/square/okhttp/commit/1b4b6bbc82206816ced207bb0132611f770c56cd) Fix connection pooling for different clients with the same pool.\\n- [`582f8ef`](https://github.com/square/okhttp/commit/582f8ef2f78cf001d479cb65831674289fd83af0) Prepare for release 4.2.0.\\n- [`9b60ca8`](https://github.com/square/okhttp/commit/9b60ca8e88445de48997d3391ae15417a6ef5d90) Merge pull request [#5434](https://github-redirect.dependabot.com/square/okhttp/issues/5434) from square/jwilson.0909.race\\n- [`510475a`](https://github.com/square/okhttp/commit/510475a21586fdf6010312a1950dca6e87cb6d2e) Don't leak incoming bytes when we race incoming data and close\\n- Additional commits viewable in [compare view](https://github.com/square/okhttp/compare/parent-3.14.2...parent-4.2.2)\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.squareup.okhttp3:okhttp&package-manager=maven&previous-version=3.14.2&new-version=4.2.2)](https://dependabot.com/compatibility-score.html?dependency-name=com.squareup.okhttp3:okhttp&package-manager=maven&previous-version=3.14.2&new-version=4.2.2)\\n\\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n- `@dependabot badge me` will comment on this PR with code to add a \\\"Dependabot enabled\\\" badge to your readme\\n\\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\\n- Update frequency (including time of day and day of week)\\n- Pull request limits (per update run and/or open at any time)\\n- Out-of-range updates (receive only lockfile updates, if desired)\\n- Security updates (receive only security updates, if desired)\\n\\n\\n\\n</details>\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/592\",\n@@ -1411,7 +1411,7 @@\n       \"diff_url\": \"https://github.com/hub4j/github-api/pull/592.diff\",\n       \"patch_url\": \"https://github.com/hub4j/github-api/pull/592.patch\"\n     },\n-    \"body\": \"Bumps [okhttp-urlconnection](https://github.com/square/okhttp) from 3.12.3 to 4.2.2.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [okhttp-urlconnection's changelog](https://github.com/square/okhttp/blob/master/CHANGELOG.md).*\\n\\n> ## Version 4.2.2\\n> \\n> _2019-10-06_\\n> \\n>  *  Fix: When closing a canceled HTTP/2 stream, don't send the `END_STREAM` flag. This could cause\\n>     the server to incorrectly interpret the stream as having completed normally. This is most useful\\n>     when a request body needs to cancel its own call.\\n> \\n> \\n> ## Version 4.2.1\\n> \\n> _2019-10-02_\\n> \\n>  *  Fix: In 4.1.0 we introduced a performance regression that prevented connections from being\\n>     pooled in certain situations. We have good test coverage for connection pooling but we missed\\n>     this because it only occurs if you have proxy configured and you share a connection pool among\\n>     multiple `OkHttpClient` instances.\\n> \\n>     This particularly-subtle bug was caused by us assigning each `OkHttpClient` instance its own\\n>     `NullProxySelector` when an explicit proxy is configured. But we don't share connections when\\n>     the proxy selectors are different. Ugh!\\n> \\n> \\n> ## Version 4.2.0\\n> \\n> _2019-09-10_\\n> \\n>  *  New: API to decode a certificate and private key to create a `HeldCertificate`. This accepts a\\n>     string containing both a certificate and PKCS #8-encoded private key.\\n> \\n>     ```kotlin\\n>     val heldCertificate = HeldCertificate.decode(\\\"\\\"\\\"\\n>         |-----BEGIN CERTIFICATE-----\\n>         |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl\\n>         |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx\\n>         |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h\\n>         |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD\\n>         |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw\\n>         |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF\\n>         |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT\\n>         |yyaoEufLKVXhrTQhRfodTeigi4RX\\n>         |-----END CERTIFICATE-----\\n>         |-----BEGIN PRIVATE KEY-----\\n>         |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J\\n>         |lu/GJQZoU9lDrCPeUcQ28tzOWw==\\n>         |-----END PRIVATE KEY-----\\n>         \\\"\\\"\\\".trimMargin())\\n>     val handshakeCertificates = HandshakeCertificates.Builder()\\n>         .heldCertificate(heldCertificate)\\n>         .build()\\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`d02340f`](https://github.com/square/okhttp/commit/d02340f9dfac4ead42befc1a4d477b45401956cf) Prepare for release 4.2.2.\\n- [`b897fb8`](https://github.com/square/okhttp/commit/b897fb8e0f3fe3622633d59ecaf220ddcae5830f) Merge pull request [#5537](https://github-redirect.dependabot.com/square/okhttp/issues/5537) from square/jwilson.1006.cancel_close\\n- [`10f9227`](https://github.com/square/okhttp/commit/10f9227b9398d9c7651131bdeeae92bb714a3bb2) If RST STREAM and END OF STREAM race, send RST STREAM (4.2.x branch)\\n- [`97d25e8`](https://github.com/square/okhttp/commit/97d25e88b82454b128d1588c9c0bc013efeee7fe) Prepare next development version.\\n- [`57a165b`](https://github.com/square/okhttp/commit/57a165b69c6551c1caec8a557e0e9c9abf54b536) Prepare for release 4.2.1.\\n- [`4c640ad`](https://github.com/square/okhttp/commit/4c640ad6c3016f49e753b5c86ab5c4d8b072bb66) Merge pull request [#5524](https://github-redirect.dependabot.com/square/okhttp/issues/5524) from square/jwilson.1002.cherrypick_poolfix\\n- [`1b4b6bb`](https://github.com/square/okhttp/commit/1b4b6bbc82206816ced207bb0132611f770c56cd) Fix connection pooling for different clients with the same pool.\\n- [`582f8ef`](https://github.com/square/okhttp/commit/582f8ef2f78cf001d479cb65831674289fd83af0) Prepare for release 4.2.0.\\n- [`9b60ca8`](https://github.com/square/okhttp/commit/9b60ca8e88445de48997d3391ae15417a6ef5d90) Merge pull request [#5434](https://github-redirect.dependabot.com/square/okhttp/issues/5434) from square/jwilson.0909.race\\n- [`510475a`](https://github.com/square/okhttp/commit/510475a21586fdf6010312a1950dca6e87cb6d2e) Don't leak incoming bytes when we race incoming data and close\\n- Additional commits viewable in [compare view](https://github.com/square/okhttp/compare/parent-3.12.3...parent-4.2.2)\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.squareup.okhttp3:okhttp-urlconnection&package-manager=maven&previous-version=3.12.3&new-version=4.2.2)](https://dependabot.com/compatibility-score.html?dependency-name=com.squareup.okhttp3:okhttp-urlconnection&package-manager=maven&previous-version=3.12.3&new-version=4.2.2)\\n\\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n- `@dependabot badge me` will comment on this PR with code to add a \\\"Dependabot enabled\\\" badge to your readme\\n\\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\\n- Update frequency (including time of day and day of week)\\n- Pull request limits (per update run and/or open at any time)\\n- Out-of-range updates (receive only lockfile updates, if desired)\\n- Security updates (receive only security updates, if desired)\\n\\n\\n\\n</details>\"\n+    \"body\": \"Bumps [okhttp-urlconnection](https://github.com/square/okhttp) from 3.12.3 to 4.2.2.\\n<details>\\n<summary>Changelog</summary>\\n\\n*Sourced from [okhttp-urlconnection's changelog](https://github.com/square/okhttp/blob/main/CHANGELOG.md).*\\n\\n> ## Version 4.2.2\\n> \\n> _2019-10-06_\\n> \\n>  *  Fix: When closing a canceled HTTP/2 stream, don't send the `END_STREAM` flag. This could cause\\n>     the server to incorrectly interpret the stream as having completed normally. This is most useful\\n>     when a request body needs to cancel its own call.\\n> \\n> \\n> ## Version 4.2.1\\n> \\n> _2019-10-02_\\n> \\n>  *  Fix: In 4.1.0 we introduced a performance regression that prevented connections from being\\n>     pooled in certain situations. We have good test coverage for connection pooling but we missed\\n>     this because it only occurs if you have proxy configured and you share a connection pool among\\n>     multiple `OkHttpClient` instances.\\n> \\n>     This particularly-subtle bug was caused by us assigning each `OkHttpClient` instance its own\\n>     `NullProxySelector` when an explicit proxy is configured. But we don't share connections when\\n>     the proxy selectors are different. Ugh!\\n> \\n> \\n> ## Version 4.2.0\\n> \\n> _2019-09-10_\\n> \\n>  *  New: API to decode a certificate and private key to create a `HeldCertificate`. This accepts a\\n>     string containing both a certificate and PKCS #8-encoded private key.\\n> \\n>     ```kotlin\\n>     val heldCertificate = HeldCertificate.decode(\\\"\\\"\\\"\\n>         |-----BEGIN CERTIFICATE-----\\n>         |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl\\n>         |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx\\n>         |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h\\n>         |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD\\n>         |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw\\n>         |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF\\n>         |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT\\n>         |yyaoEufLKVXhrTQhRfodTeigi4RX\\n>         |-----END CERTIFICATE-----\\n>         |-----BEGIN PRIVATE KEY-----\\n>         |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J\\n>         |lu/GJQZoU9lDrCPeUcQ28tzOWw==\\n>         |-----END PRIVATE KEY-----\\n>         \\\"\\\"\\\".trimMargin())\\n>     val handshakeCertificates = HandshakeCertificates.Builder()\\n>         .heldCertificate(heldCertificate)\\n>         .build()\\n></tr></table> ... (truncated)\\n</details>\\n<details>\\n<summary>Commits</summary>\\n\\n- [`d02340f`](https://github.com/square/okhttp/commit/d02340f9dfac4ead42befc1a4d477b45401956cf) Prepare for release 4.2.2.\\n- [`b897fb8`](https://github.com/square/okhttp/commit/b897fb8e0f3fe3622633d59ecaf220ddcae5830f) Merge pull request [#5537](https://github-redirect.dependabot.com/square/okhttp/issues/5537) from square/jwilson.1006.cancel_close\\n- [`10f9227`](https://github.com/square/okhttp/commit/10f9227b9398d9c7651131bdeeae92bb714a3bb2) If RST STREAM and END OF STREAM race, send RST STREAM (4.2.x branch)\\n- [`97d25e8`](https://github.com/square/okhttp/commit/97d25e88b82454b128d1588c9c0bc013efeee7fe) Prepare next development version.\\n- [`57a165b`](https://github.com/square/okhttp/commit/57a165b69c6551c1caec8a557e0e9c9abf54b536) Prepare for release 4.2.1.\\n- [`4c640ad`](https://github.com/square/okhttp/commit/4c640ad6c3016f49e753b5c86ab5c4d8b072bb66) Merge pull request [#5524](https://github-redirect.dependabot.com/square/okhttp/issues/5524) from square/jwilson.1002.cherrypick_poolfix\\n- [`1b4b6bb`](https://github.com/square/okhttp/commit/1b4b6bbc82206816ced207bb0132611f770c56cd) Fix connection pooling for different clients with the same pool.\\n- [`582f8ef`](https://github.com/square/okhttp/commit/582f8ef2f78cf001d479cb65831674289fd83af0) Prepare for release 4.2.0.\\n- [`9b60ca8`](https://github.com/square/okhttp/commit/9b60ca8e88445de48997d3391ae15417a6ef5d90) Merge pull request [#5434](https://github-redirect.dependabot.com/square/okhttp/issues/5434) from square/jwilson.0909.race\\n- [`510475a`](https://github.com/square/okhttp/commit/510475a21586fdf6010312a1950dca6e87cb6d2e) Don't leak incoming bytes when we race incoming data and close\\n- Additional commits viewable in [compare view](https://github.com/square/okhttp/compare/parent-3.12.3...parent-4.2.2)\\n</details>\\n<br />\\n\\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.squareup.okhttp3:okhttp-urlconnection&package-manager=maven&previous-version=3.12.3&new-version=4.2.2)](https://dependabot.com/compatibility-score.html?dependency-name=com.squareup.okhttp3:okhttp-urlconnection&package-manager=maven&previous-version=3.12.3&new-version=4.2.2)\\n\\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\\n\\n[//]: # (dependabot-automerge-start)\\n[//]: # (dependabot-automerge-end)\\n\\n---\\n\\n<details>\\n<summary>Dependabot commands and options</summary>\\n<br />\\n\\nYou can trigger Dependabot actions by commenting on this PR:\\n- `@dependabot rebase` will rebase this PR\\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\\n- `@dependabot merge` will merge this PR after your CI passes on it\\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\\n- `@dependabot reopen` will reopen this PR if it is closed\\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\\n- `@dependabot badge me` will comment on this PR with code to add a \\\"Dependabot enabled\\\" badge to your readme\\n\\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\\n- Update frequency (including time of day and day of week)\\n- Pull request limits (per update run and/or open at any time)\\n- Out-of-range updates (receive only lockfile updates, if desired)\\n- Security updates (receive only security updates, if desired)\\n\\n\\n\\n</details>\"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/591\",\n@@ -1465,7 +1465,7 @@\n     \"updated_at\": \"2019-12-13T20:14:03Z\",\n     \"closed_at\": \"2019-12-13T20:14:03Z\",\n     \"author_association\": \"MEMBER\",\n-    \"body\": \"https://github.com/hub4j/github-api/blob/master/src/main/java/org/kohsuke/github/GHRateLimit.java\\r\\n\\r\\nCan't be changed without (very likely extensive) API breaking changes.  \"\n+    \"body\": \"https://github.com/hub4j/github-api/blob/main/src/main/java/org/kohsuke/github/GHRateLimit.java\\r\\n\\r\\nCan't be changed without (very likely extensive) API breaking changes.  \"\n   },\n   {\n     \"url\": \"https://api.github.com/repos/hub4j/github-api/issues/590\","
    },
    {
      "sha": "bb0a4df74cb5c1a8e436a5c458ed6619fe51ff1c",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-6.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-6.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-6.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-6.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "9e231d481fe94216db5ec1a03809baeca2e91d7a",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-7.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-7.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-7.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-7.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "5b5e1edf2fd626648bdf89749af8ef5a962b169d",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-8.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-8.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-8.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testListIssues/__files/repositories_617210_issues-8.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "ea96127eeddc3caa008a5f914b02a23d06ee9552",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testMembership/__files/repos_hub4j-test-org_jenkins-3.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testMembership/__files/repos_hub4j-test-org_jenkins-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testMembership/__files/repos_hub4j-test-org_jenkins-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testMembership/__files/repos_hub4j-test-org_jenkins-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "13f569a9702fa4d0bc5c8513a6fbd49e10bcbdde",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgFork/__files/repos_hub4j-test-org_rubywm-5.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgFork/__files/repos_hub4j-test-org_rubywm-5.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgFork/__files/repos_hub4j-test-org_rubywm-5.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgFork/__files/repos_hub4j-test-org_rubywm-5.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "e8bd84fc8fafa7da75544da0e1368aa727d40dfb",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgFork/__files/repos_kohsuke_rubywm-2.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgFork/__files/repos_kohsuke_rubywm-2.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgFork/__files/repos_kohsuke_rubywm-2.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgFork/__files/repos_kohsuke_rubywm-2.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "ffe1d78827e47960b69bfdfa6d009746972c548a",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgFork/__files/repos_kohsuke_rubywm_forks-4.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgFork/__files/repos_kohsuke_rubywm_forks-4.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgFork/__files/repos_kohsuke_rubywm_forks-4.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgFork/__files/repos_kohsuke_rubywm_forks-4.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "1c3cd78d46cf8ca324d417abc13ee6708737e93b",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-10.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-10.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-10.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-10.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "e8bdbe7867ff4d9aede2a4d122e066918e94afc3",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-11.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-11.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-11.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-11.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "17ca7e46385612821c6d8aefdfe6b01ec0cd1e7d",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-12.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-12.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-12.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-12.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "89e8ac543807a9de419d8dd8db855884b18a31c3",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-13.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-13.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-13.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-13.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "029864455158ae74c5e5e6d10f8dafa43456d586",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-14.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-14.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-14.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-14.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "439230317066b926fe2d2a7d1e0ce48f9c8fe03b",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-15.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-15.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-15.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-15.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "92dac82e490d1bb46db89d20e6dd742725bc0a1a",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-16.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-16.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-16.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-16.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "c1f4280b6b180fa28f8ef4a158779346f70a62f2",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-17.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-17.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-17.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-17.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "0813766de183d33ec3f254567a4bc20e592475dc",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-18.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-18.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-18.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-18.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "5cc1c235b9db5b5348c9641be7215c821547f567",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-19.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-19.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-19.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-19.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "15b3ef0bdaf16813cf5d9fc60729621fbd890df1",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-20.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-20.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-20.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-20.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "1054f2180e4884cc64c83f077d7597f014e6d471",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-21.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-21.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-21.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-21.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "6c34995801c7fa44c62a644bc3c0ee393735f471",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-22.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-22.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-22.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-22.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "5ec25c2bebcdfdf7ab9818710f3cade430448fd2",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-23.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-23.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-23.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-23.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "be51f56958acff073d266d38beb4846b6d406e74",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-24.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-24.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-24.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-24.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "7143fd19d4ddcba32ced5dc46d670ac6e280bbcd",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-25.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-25.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-25.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-25.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "f65e4d904aa3116b0f4b6dbac9806901a380d3e0",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-4.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-4.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-4.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-4.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "d1e737407b46931199daeffcb3397ce11ddaa2b1",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-5.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-5.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-5.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-5.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "79686913433b59ecac6f23093acc3d5c2713e8cc",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-6.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-6.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-6.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-6.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "203ab3d87b412a9844152ea0e9607b35ec2ba7ed",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-7.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-7.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-7.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-7.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "f294a30a27a153e2be3cf9600e3715cc3894e658",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-8.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-8.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-8.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-8.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "a7b3e270f78f3984ca0500ba1da1bd2f69937f4c",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-9.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-9.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-9.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/organizations_107424_repos-9.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "26f4c806988deb0f4b3e472a251d273e95963521",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/orgs_jenkinsci_repos-3.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/orgs_jenkinsci_repos-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/orgs_jenkinsci_repos-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrgRepositories/__files/orgs_jenkinsci_repos-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "ea96127eeddc3caa008a5f914b02a23d06ee9552",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrganization/__files/repos_hub4j-test-org_jenkins-4.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrganization/__files/repos_hub4j-test-org_jenkins-4.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrganization/__files/repos_hub4j-test-org_jenkins-4.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testOrganization/__files/repos_hub4j-test-org_jenkins-4.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "565c4c106fab66c62595a21efadcaba5a4a7e96c",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testReadme/__files/repos_hub4j-test-org_test-readme-2.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testReadme/__files/repos_hub4j-test-org_test-readme-2.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testReadme/__files/repos_hub4j-test-org_test-readme-2.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testReadme/__files/repos_hub4j-test-org_test-readme-2.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "3615c8b7717f7753c4924a79d0d65dc3f9b9f8e6",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testReadme/__files/repos_hub4j-test-org_test-readme_readme-3.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testReadme/__files/repos_hub4j-test-org_test-readme_readme-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testReadme/__files/repos_hub4j-test-org_test-readme_readme-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testReadme/__files/repos_hub4j-test-org_test-readme_readme-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "9a9bd17d1f34c715714618d2f7716ae8d6245be7",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testRef/__files/repos_jenkinsci_jenkins-2.json",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testRef/__files/repos_jenkinsci_jenkins-2.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testRef/__files/repos_jenkinsci_jenkins-2.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testRef/__files/repos_jenkinsci_jenkins-2.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40"
    },
    {
      "sha": "5c9673ab8161b0090e455290ef3ea528c83c0730",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testRef/__files/repos_jenkinsci_jenkins_git_refs_heads_main-3.json",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testRef/__files/repos_jenkinsci_jenkins_git_refs_heads_main-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testRef/__files/repos_jenkinsci_jenkins_git_refs_heads_main-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testRef/__files/repos_jenkinsci_jenkins_git_refs_heads_main-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "previous_filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testRef/__files/repos_jenkinsci_jenkins_git_refs_heads_master-3.json"
    },
    {
      "sha": "646e86adc4aee3d1cc79d800d521b8b5515e58bf",
      "filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testRef/mappings/repos_jenkinsci_jenkins_git_refs_heads_main-3.json",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/hub4j-test-org/github-api/blob/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testRef/mappings/repos_jenkinsci_jenkins_git_refs_heads_main-3.json",
      "raw_url": "https://github.com/hub4j-test-org/github-api/raw/94ff089e60064bfa43e374baeb10846f7ce82f40/src/test/resources/org/kohsuke/github/AppTest/wiremock/testRef/mappings/repos_jenkinsci_jenkins_git_refs_heads_main-3.json",
      "contents_url": "https://api.github.com/repos/hub4j-test-org/github-api/contents/src/test/resources/org/kohsuke/github/AppTest/wiremock/testRef/mappings/repos_jenkinsci_jenkins_git_refs_heads_main-3.json?ref=94ff089e60064bfa43e374baeb10846f7ce82f40",
      "previous_filename": "src/test/resources/org/kohsuke/github/AppTest/wiremock/testRef/mappings/repos_jenkinsci_jenkins_git_refs_heads_master-3.json"
    }
  ]
}