[
  {
    "url": "https://api.github.com/repos/hub4j/github-api/issues/comments/654487322",
    "html_url": "https://github.com/hub4j/github-api/issues/878#issuecomment-654487322",
    "issue_url": "https://api.github.com/repos/hub4j/github-api/issues/878",
    "id": 654487322,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDQ4NzMyMg==",
    "user": {
      "login": "bitwiseman",
      "id": 1958953,
      "node_id": "MDQ6VXNlcjE5NTg5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitwiseman",
      "html_url": "https://github.com/bitwiseman",
      "followers_url": "https://api.github.com/users/bitwiseman/followers",
      "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
      "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
      "repos_url": "https://api.github.com/users/bitwiseman/repos",
      "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-06T22:01:02Z",
    "updated_at": "2020-07-06T22:01:02Z",
    "author_association": "COLLABORATOR",
    "body": "# Summary\r\nUsing Git Data is a bit more involved.  The current design in this library is not very friendly.  This is partly due to the REST API not being very friendly but also due to it not being as heavily used.  \r\n\r\n# Current way to use Git Data \r\n\r\n```\r\nString sha;\r\nGHCommit commit = repo.getCommit(\"master\");\r\nGHTreeEntry entry = commit.getTree().getEntry(\"my/file.txt\");\r\nif (entry != null) {\r\n    sha = entry.getSha();\r\n    // To get the contents (if that is what you plan to do next) \r\n    GHBlob blob = entry.asBlob();\r\n    String contents = blob.getContent();\r\n}   \r\n```\r\n\r\n\r\n\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hub4j/github-api/issues/comments/654487358",
    "html_url": "https://github.com/hub4j/github-api/issues/878#issuecomment-654487358",
    "issue_url": "https://api.github.com/repos/hub4j/github-api/issues/878",
    "id": 654487358,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDQ4NzM1OA==",
    "user": {
      "login": "bitwiseman",
      "id": 1958953,
      "node_id": "MDQ6VXNlcjE5NTg5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitwiseman",
      "html_url": "https://github.com/bitwiseman",
      "followers_url": "https://api.github.com/users/bitwiseman/followers",
      "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
      "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
      "repos_url": "https://api.github.com/users/bitwiseman/repos",
      "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-06T22:01:09Z",
    "updated_at": "2020-07-06T22:04:36Z",
    "author_association": "COLLABORATOR",
    "body": "While the above is workable, maybe it could be made easier.\r\n\r\n# Possible improvements to this library\r\n\r\nI was about to say that the roughness of the above code was due to the Server-side REST API not supporting getting paths directly.  The [documentation for trees]( https://developer.github.com/v3/git/trees/) says that you can only pass `tree_sha`. \r\n\r\nLet's look at how we'd get the blob for `src/main/java/org/kohsuke/github/GHApp.java` at the tag `github-api-1.100`.\r\n\r\n## Blob from Tree (version 1)\r\n\r\n1. Request https://api.github.com/repos/hub4j/github-api/commits/github-api-1.100 \r\n2. Get the `tree.sha`: `9bb863419bea20c2b43bb062a9a6fac4d51a070f`\r\n3. Request https://api.github.com/repos/hub4j/github-api/git/trees/9bb863419bea20c2b43bb062a9a6fac4d51a070f\r\n4. Traverse the layers of tree entries to get to `src/main/java/org/kohsuke/github` (multiple REST API calls)\r\n5. Get the blob for `GHApp.java`: https://api.github.com/repos/hub4j/github-api/git/blobs/affdf9eca16bdff21a8a21a5386dbe4aa7cfed26\r\n\r\n## General improvements\r\n* In most cases, we can add `?recursive=true` to step 3. Then step 4 becomes a single API call and a search through the list of all entries. \r\n* `tree_sha` can be changed to the commit for `github-api-1.100` itself: `https://api.github.com/repos/hub4j/github-api/git/trees/f7d048e0b9a3748b6d75f2871c8471be7c29148e`.\r\n** (even better)`tree_sha` can be changed to tag name: https://api.github.com/repos/hub4j/github-api/git/trees/github-api-1.100`\r\n\r\n## Blob from Tree (version 2)\r\n\r\n1. Request https://api.github.com/repos/hub4j/github-api/git/trees/github-api-1.100?recursive=true\r\n2. Search list of tree entries to get to `src/main/java/org/kohsuke/github/GHApp.java`\r\n3. Get the blob for `GHApp.java`: https://api.github.com/repos/hub4j/github-api/git/blobs/affdf9eca16bdff21a8a21a5386dbe4aa7cfed26\r\n\r\n## Use \"extended SHA-1\" for Tree \r\n\r\nThe `tree_sha` improvements we made above indicate that the github docs, while accurate do not communicate the power and flexibility of the Git Data API.  \r\n\r\nI found [this SO article](https://stackoverflow.com/questions/26203603/how-do-i-get-the-sha-parameter-from-github-api-without-downloading-the-whole-f) that shows how to use  \"[extended SHA-1 syntax](https://git-scm.com/docs/gitrevisions)\" to get a [specific tree path](https://git-scm.com/docs/gitrevisions#Documentation/gitrevisions.txt-emltngtltpathgtemegem0READMEememREADMEem). \r\n\r\nThis means steps 1 can be shortened to get the specific directory we want rather than the recursive tree entry list for the whole repo: `https://api.github.com/repos/hub4j/github-api/git/trees/github-api-1.100%3Asrc%2Fmain%2Fjava%2Forg%2Fkohsuke%2Fgithub`.  \r\n\r\n## Use \"extended SHA-1\" for Blob? \r\n\r\nJust as the Tree API has `tree_sha`, the Blob API has `blob_sha`. They're both SHAs... maybe could use extended SHA-1 syntax for blobs as well?  \r\n\r\n```\r\nhttps://api.github.com/repos/hub4j/github-api/git/blobs/github-api-1.100%3Asrc%2Fmain%2Fjava%2Forg%2Fkohsuke%2Fgithub%2FGHApp.java\r\n\r\n{\r\n  \"message\": \"The sha parameter must be exactly 40 characters and contain only [0-9a-f].\",\r\n  \"documentation_url\": \"https://developer.github.com/v3/git/blobs/#get-a-blob\"\r\n}\r\n```\r\n\r\nNope. ðŸ˜ž  It might be possible to get GitHub to remove this limitation, but that is a longer term task.\r\n\r\n## Blob from Tree (version 3)\r\n\r\n1. Request tree for `github-api-1.100:src/main/java/org/kohsuke/github`: https://api.github.com/repos/hub4j/github-api/git/trees/github-api-1.100%3Asrc%2Fmain%2Fjava%2Forg%2Fkohsuke%2Fgithub\r\n2. Search list of tree entries in `src/main/java/org/kohsuke/github` to get to `src/main/java/org/kohsuke/github/GHApp.java`\r\n3. Get the blob for `GHApp.java`: https://api.github.com/repos/hub4j/github-api/git/blobs/affdf9eca16bdff21a8a21a5386dbe4aa7cfed26\r\n\r\n\r\nThe main improvement for this library would to add that ability to do the query in step 1 (not possible right now). \r\n\r\nTrees: https://developer.github.com/v3/git/trees/\r\nThe git data api Blobs docs: https://developer.github.com/v3/git/blobs/",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hub4j/github-api/issues/comments/654498681",
    "html_url": "https://github.com/hub4j/github-api/issues/878#issuecomment-654498681",
    "issue_url": "https://api.github.com/repos/hub4j/github-api/issues/878",
    "id": 654498681,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDQ5ODY4MQ==",
    "user": {
      "login": "Osiris-Team",
      "id": 59899645,
      "node_id": "MDQ6VXNlcjU5ODk5NjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/59899645?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Osiris-Team",
      "html_url": "https://github.com/Osiris-Team",
      "followers_url": "https://api.github.com/users/Osiris-Team/followers",
      "following_url": "https://api.github.com/users/Osiris-Team/following{/other_user}",
      "gists_url": "https://api.github.com/users/Osiris-Team/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Osiris-Team/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Osiris-Team/subscriptions",
      "organizations_url": "https://api.github.com/users/Osiris-Team/orgs",
      "repos_url": "https://api.github.com/users/Osiris-Team/repos",
      "events_url": "https://api.github.com/users/Osiris-Team/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Osiris-Team/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-06T22:37:19Z",
    "updated_at": "2020-07-06T22:37:19Z",
    "author_association": "NONE",
    "body": "@bitwiseman Wow! Great work and thanks for the help ðŸ’™",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hub4j/github-api/issues/comments/654763209",
    "html_url": "https://github.com/hub4j/github-api/issues/878#issuecomment-654763209",
    "issue_url": "https://api.github.com/repos/hub4j/github-api/issues/878",
    "id": 654763209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDc2MzIwOQ==",
    "user": {
      "login": "Osiris-Team",
      "id": 59899645,
      "node_id": "MDQ6VXNlcjU5ODk5NjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/59899645?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Osiris-Team",
      "html_url": "https://github.com/Osiris-Team",
      "followers_url": "https://api.github.com/users/Osiris-Team/followers",
      "following_url": "https://api.github.com/users/Osiris-Team/following{/other_user}",
      "gists_url": "https://api.github.com/users/Osiris-Team/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Osiris-Team/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Osiris-Team/subscriptions",
      "organizations_url": "https://api.github.com/users/Osiris-Team/orgs",
      "repos_url": "https://api.github.com/users/Osiris-Team/repos",
      "events_url": "https://api.github.com/users/Osiris-Team/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Osiris-Team/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-07T10:37:18Z",
    "updated_at": "2020-07-07T10:38:47Z",
    "author_association": "NONE",
    "body": "> # Summary\r\n> Using Git Data is a bit more involved. The current design in this library is not very friendly. This is partly due to the REST API not being very friendly but also due to it not being as heavily used.\r\n> \r\n> # Current way to use Git Data\r\n> ```\r\n> String sha;\r\n> GHCommit commit = repo.getCommit(\"master\");\r\n> GHTreeEntry entry = commit.getTree().getEntry(\"my/file.txt\");\r\n> if (entry != null) {\r\n>     sha = entry.getSha();\r\n>     // To get the contents (if that is what you plan to do next) \r\n>     GHBlob blob = entry.asBlob();\r\n>     String contents = blob.getContent();\r\n> }   \r\n> ```\r\n\r\n@bitwiseman Ok that sadly didnt work but I found another workaround.\r\nI deleted the old file wich I was trying to update, so I could ignore the sha. This is the code. Please updload it to your documentation cause it took me hours to figure out and other newbies also will fuck their head with it.\r\n```java\r\n\r\npublic static void main(String[] args) {\r\n            //Login with AuthToken\r\n            GitHub github = new GitHubBuilder()\r\n                    .withOAuthToken(\"YOUR TOKEN HERE\")\r\n                    .build();\r\n            System.out.println(\" \");\r\n            System.out.println(\" > API-INFO >\");\r\n            System.out.println(\" > Url: \" + github.getApiUrl());\r\n            System.out.println(\" \");\r\n\r\n            //Get repository\r\n            GHRepository repo = github.getRepository(\"Osiris-Team/AutoPlug-Releases\");\r\n\r\n            System.out.println(\" \");\r\n            System.out.println(\" > REPO-INFO >\");\r\n            System.out.println(\" > Name: \" + repo.getFullName());\r\n            System.out.println(\" > Stars: \" + repo.getStargazersCount());\r\n            System.out.println(\" > Subs: \" + repo.getSubscribersCount());\r\n            System.out.println(\" > Views: \" + repo.getViewTraffic().getViews().size());\r\n            System.out.println(\" > Size: \" + repo.getSize());\r\n            System.out.println(\" > Last push: \" + repo.getPushedAt());\r\n            System.out.println(\" > Open issues: {[\" + repo.getIssues(GHIssueState.OPEN).size() + \"]}\");\r\n            System.out.println(\" \");\r\n\r\n            //Delete folder before uploading\r\n            try {\r\n                List<GHContent> dir_content = repo.getDirectoryContent(\"\" + build_mode);\r\n                for (GHContent single_content :\r\n                        dir_content) {\r\n                    single_content.delete(\"Deleted file because of update!\");\r\n                    single_content.refresh();\r\n                }\r\n            } catch (Exception e) {\r\n                System.out.println(\" - Failed to delete old files! No files found to delete!\");\r\n            }\r\n\r\n            //We use the same repo but in a new object because the deleted old files interfeer\r\n            github = new GitHubBuilder()\r\n                    .withOAuthToken(\"YOUR TOKEN HERE\")\r\n                    .build();\r\n            GHRepository repo2 = github.getRepository(\"Osiris-Team/AutoPlug-Releases\");\r\n\r\n            //Perform updates\r\n            uploadFile(build_mode, tmp_autoplug, repo2);\r\n            uploadFile(build_mode, tmp_autoplug_update_xml, repo2);\r\n\r\n            uploadFile(build_mode, tmp_autoplugplugin, repo2);\r\n            uploadFile(build_mode, tmp_autoplugplugin_update_xml, repo2);\r\n\r\n            uploadFile(build_mode, tmp_autopluglauncher, repo2);\r\n            uploadFile(build_mode, tmp_autopluglauncher_update_xml, repo2);\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"Failed to upload files!\");\r\n        }\r\n    }\r\n\r\n\r\n    private static void uploadFile(String github_dir_name, File file, GHRepository repo) throws IOException {\r\n\r\n        System.out.println(\"#########################################\");\r\n        System.out.println(\" - Uploading to repo: \" + repo.getFullName());\r\n        System.out.println(\" - File output path: \" + github_dir_name+\"/\"+file.getName());\r\n\r\n        //Create content\r\n        GHContentBuilder content = repo.createContent()\r\n        .message(\"Updated to latest build\")\r\n        .path(github_dir_name+\"/\"+file.getName()) \r\n        .branch(\"master\")\r\n        .content(Files.readAllBytes(file.toPath()));\r\n\r\n        try {\r\n            System.out.println(\" - Uploading...\");\r\n            GHCommit commit = content.commit().getCommit();\r\n            System.out.println(\" - Upload successful at: \" + commit.getCommitDate());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\" - Upload failed!\");\r\n        }\r\n\r\n    }\r\n\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hub4j/github-api/issues/comments/655003466",
    "html_url": "https://github.com/hub4j/github-api/issues/878#issuecomment-655003466",
    "issue_url": "https://api.github.com/repos/hub4j/github-api/issues/878",
    "id": 655003466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NTAwMzQ2Ng==",
    "user": {
      "login": "bitwiseman",
      "id": 1958953,
      "node_id": "MDQ6VXNlcjE5NTg5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitwiseman",
      "html_url": "https://github.com/bitwiseman",
      "followers_url": "https://api.github.com/users/bitwiseman/followers",
      "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
      "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
      "repos_url": "https://api.github.com/users/bitwiseman/repos",
      "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-07T17:11:59Z",
    "updated_at": "2020-07-07T17:11:59Z",
    "author_association": "COLLABORATOR",
    "body": "@Osiris-Team \r\nYeah, that looks like a lot of work. Could you take a minute to explain what your actual goal is?  Is it just to update a set of files or is it something else?  I'm glad what you've done works but it doesn't make a lot of sense to me - it doesn't seems like something people want to do generally in git. \r\n\r\n\r\nSide note: \r\nThe `refresh()` isn't needed and it results in an additional API call, using more of your rate limit.  \r\n\r\n> ```java\r\n> for (GHContent single_content :\r\n>                         dir_content) {\r\n>                     single_content.delete(\"Deleted file because of update!\");\r\n>                     single_content.refresh();\r\n>                 }\r\n> ```\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/hub4j/github-api/issues/comments/655047530",
    "html_url": "https://github.com/hub4j/github-api/issues/878#issuecomment-655047530",
    "issue_url": "https://api.github.com/repos/hub4j/github-api/issues/878",
    "id": 655047530,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NTA0NzUzMA==",
    "user": {
      "login": "bitwiseman",
      "id": 1958953,
      "node_id": "MDQ6VXNlcjE5NTg5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1958953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitwiseman",
      "html_url": "https://github.com/bitwiseman",
      "followers_url": "https://api.github.com/users/bitwiseman/followers",
      "following_url": "https://api.github.com/users/bitwiseman/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitwiseman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitwiseman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitwiseman/subscriptions",
      "organizations_url": "https://api.github.com/users/bitwiseman/orgs",
      "repos_url": "https://api.github.com/users/bitwiseman/repos",
      "events_url": "https://api.github.com/users/bitwiseman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitwiseman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-07T18:35:15Z",
    "updated_at": "2020-07-07T18:35:15Z",
    "author_association": "COLLABORATOR",
    "body": "@Osiris-Team  \r\nIf you're trying to update files in a folder, I think you'll want to use [GHTreeBuilder](https://github.com/hub4j/github-api/blob/master/src/main/java/org/kohsuke/github/GHTreeBuilder.java).  The [GHTreeBuilderTest](https://github.com/hub4j/github-api/blob/master/src/test/java/org/kohsuke/github/GHTreeBuilderTest.java) shows some examples of usage. Note, when building trees if you know the files are text, you should use the String `add()` method as it will consume fewer REST API calls.  Binary files, by contast have to have blobs created and attached to the tree (done by the library). \r\n\r\n```java\r\n\r\npublic static void main(String[] args) {\r\n    try {\r\n        String build_mode = args[0];\r\n        //Login with AuthToken\r\n        GitHub github = new GitHubBuilder()\r\n                .withOAuthToken(\"YOUR TOKEN HERE\")\r\n                .build();\r\n\r\n        //Get repository\r\n        GHRepository repo = github.getRepository(\"Osiris-Team/AutoPlug-Releases\");\r\n\r\n        GHRef masterRef repo.getRef(\"heads/master\");\r\n        GHCommit commit = masterRef.getCommit(masterRef.getObject().getSha());\r\n        GHTree tree = commit.getTree();\r\n\r\n        // Build a new tree\r\n        GHTreeBuilder builder = repo.createTree();\r\n        builder.baseTree(tree.getSha());\r\n \r\n        //Perform updates\r\n        // detecting if a file is text is a pain\r\n        // https://stackoverflow.com/questions/620993/determining-binary-text-file-type-in-java\r\n\r\n        uploadFile(builder, build_mode, tmp_autoplug, true, true);\r\n        uploadFile(builder, build_mode, tmp_autoplug_update_xml, false, false);\r\n\r\n        uploadFile(builder, build_mode, tmp_autoplugplugin, true, true);\r\n        uploadFile(builder, build_mode, tmp_autoplugplugin_update_xml, false, false);\r\n\r\n        uploadFile(builder, build_mode, tmp_autopluglauncher, true, true);\r\n        uploadFile(builder, build_mode, tmp_autopluglauncher_update_xml, false, false);\r\n\r\n        // Create the tree\r\n        String treeSha = builder.create().getSha();\r\n\r\n        // Create a commit from the tree \r\n        String commitSha = new GHCommitBuilder(repo).message(\"Updated to latest build\")\r\n                .tree(treeSha)\r\n                .parent(masterRef.getObject().getSha())\r\n                .create()\r\n                .getSHA1();\r\n\r\n        // Update master to the new commit\r\n        masterRef.updateTo(commitSha);\r\n\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n        System.out.println(\"Failed to upload files!\");\r\n    }\r\n}\r\n\r\n\r\nprivate static void uploadFile(GHTreeBuilder tree, String github_dir_name, File file, boolean isBinary, boolean isExecutable) throws IOException {\r\n    //Create content\r\n    if(isBinary) {\r\n        tree.add(github_dir_name+\"/\"+file.getName(), Files.readAllBytes(file.toPath()), isExecutable);\r\n    } else {\r\n        tree.add(github_dir_name+\"/\"+file.getName(), new String(Files.readAllBytes(file.toPath()), \"UTF-8\"), isExecutable);\r\n    }\r\n}\r\n\r\n``` \r\n\r\n\r\n\r\n",
    "performed_via_github_app": null
  }
]